[
    {
        "id": 1,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a continuous value domain, and analyze the correctness of outputs under scenarios such as 'normal value equivalence class, abnormal value equivalence class'.",
        "document_name": "5.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The system shall be capable of real-time monitoring and validation of received continuous flight data (e.g., altitude, speed, temperature), ensuring it remains within the normal value range and triggering an alarm when abnormal values occur."
    },
    {
        "id": 2,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a continuous value domain, and analyze the correctness of outputs under scenarios such as 'boundary values, maximum/minimum values'.",
        "document_name": "5.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The system shall be capable of performing boundary value and extreme value checks on continuous parameters in flight control commands (e.g., attitude angle, speed), ensuring that output control commands remain within safe limits."
    },
    {
        "id": 3,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a discrete value domain, and analyze the correctness of outputs when the data bits take each valid enumerated value in the valid value range.",
        "document_name": "5.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The system shall be capable of performing validity checks on received discrete flight control commands (e.g., attitude adjustment, thruster ignition), ensuring the commands fall within the predefined valid value range."
    },
    {
        "id": 4,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a discrete value domain, and analyze the correctness of outputs when the data bits take undefined abnormal values outside the valid value range.",
        "document_name": "2.json",
        "document_chunk_index": 233,
        "hopy_requirement": "The system shall be capable of detecting and processing abnormal discrete flight data (e.g., attitude angle, speed) from sensors, ensuring correctness and stability of system outputs when abnormal values occur."
    },
    {
        "id": 5,
        "class": "Data Criteria",
        "safety_criterion": "Check the equivalence classes of interface data and analyze the correctness of outputs when data values switch between different output equivalence classes.",
        "document_name": "5.json",
        "document_chunk_index": 248,
        "hopy_requirement": "The system shall be capable of checking equivalence classes of flight control commands, ensuring correct and error-free command outputs during transitions between different flight modes."
    },
    {
        "id": 6,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a continuous value domain, and analyze the correctness of outputs when the data values do not change over multiple cycles.",
        "document_name": "1.json",
        "document_chunk_index": 92,
        "hopy_requirement": "The system shall be capable of detecting and processing cases where flight vehicle sensor data does not change over multiple cycles, ensuring correct flight control commands are output."
    },
    {
        "id": 7,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a continuous value domain, and analyze the correctness of outputs when the difference between data values across multiple cycles exceeds a specified threshold (i.e., slope fault).",
        "document_name": "1.json",
        "document_chunk_index": 149,
        "hopy_requirement": "The system shall be capable of real-time monitoring of continuous data (e.g., angle, speed) from the aircraft's attitude control system, triggering a fault alarm and taking appropriate action when the rate of data change exceeds the preset threshold."
    },
    {
        "id": 8,
        "class": "Data Criteria",
        "safety_criterion": "Check the data bits in the interface data that have a discrete value domain, and analyze the correctness of outputs when the data values jump between two consecutive cycles.",
        "document_name": "5.json",
        "document_chunk_index": 304,
        "hopy_requirement": "The system shall be capable of detecting and processing discrete value jumps in navigation data, ensuring continuity and accuracy of flight control commands."
    },
    {
        "id": 9,
        "class": "Data Criteria",
        "safety_criterion": "Check the equivalence classes of interface data and analyze the correctness of outputs when data values switch between different equivalence classes.",
        "document_name": "5.json",
        "document_chunk_index": 98,
        "hopy_requirement": "The system shall be capable of detecting and processing flight control commands during transitions between different flight modes (e.g., manual, automatic, emergency), ensuring correctness and consistency."
    },
    {
        "id": 10,
        "class": "Data Criteria",
        "safety_criterion": "Check the precision of data bit values in interface data and analyze the correctness of outputs when the precision of data bit values is greater than required.",
        "document_name": "3.json",
        "document_chunk_index": 186,
        "hopy_requirement": "The system shall ensure that navigation data precision meets flight control requirements, especially maintaining output correctness and reliability when data bit precision exceeds specified thresholds."
    },
    {
        "id": 11,
        "class": "Data Criteria",
        "safety_criterion": "Check the value accuracy of data bits in interface data, and analyze the correctness of output when the bit value accuracy is lower than required.",
        "document_name": "2.json",
        "document_chunk_index": 267,
        "hopy_requirement": "The system shall ensure that navigation data meets flight control accuracy requirements, especially ensuring correct output of control commands even when data bit precision falls below standards."
    },
    {
        "id": 12,
        "class": "Data Criteria",
        "safety_criterion": "Check the initial values of interface data, and analyze the correctness of output in cases such as 'initial value not set'.",
        "document_name": "1.json",
        "document_chunk_index": 281,
        "hopy_requirement": "The system shall ensure that all critical flight parameters (e.g., attitude, speed, altitude) have their initial values properly set during initialization to ensure proper operation of the flight control system."
    },
    {
        "id": 13,
        "class": "Data Criteria",
        "safety_criterion": "Check the initial values of interface data, and analyze the correctness of output in cases where 'initial value is an out-of-range abnormal value'.",
        "document_name": "1.json",
        "document_chunk_index": 180,
        "hopy_requirement": "The system shall be capable of detecting and handling abnormal initial values during navigation system initialization, ensuring flight control parameters remain within safe limits."
    },
    {
        "id": 14,
        "class": "Data Criteria",
        "safety_criterion": "Interface data represents a key variable (e.g., fault word, fault count, timer, operating phase, operating state). In case of software power-off and restart, check the interface data values before and after the restart, and analyze the correctness of output when the interface data resets to its initial value after restart.",
        "document_name": "1.json",
        "document_chunk_index": 89,
        "hopy_requirement": "The system shall correctly reset key flight parameters (e.g., fault word, fault count, timer, operating phase, operating state) after a software power-off and restart, and ensure correct output after restart."
    },
    {
        "id": 15,
        "class": "Data Criteria",
        "safety_criterion": "Multiple functions or states share the same interface data, with different initial value requirements for each function/state. Check the initial value of this interface data and analyze the correctness of output when the initial value is 'greater than or less than what the function/state requires'.",
        "document_name": "3.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The system shall verify the initial values of shared interface data (e.g., altitude, speed) according to the current flight mode (e.g., cruise, landing, takeoff), ensuring they meet the requirements of the current mode."
    },
    {
        "id": 16,
        "class": "State Scenario Criteria",
        "safety_criterion": "When the operating state changes, check the values of functional interface data, and analyze the correctness of output when 'values change or the value range changes'.",
        "document_name": "4.json",
        "document_chunk_index": 255,
        "hopy_requirement": "The system shall continuously monitor and validate flight control parameters (e.g., angle of attack, speed, altitude) during transitions between flight modes, ensuring correct and stable outputs."
    },
    {
        "id": 17,
        "class": "State Scenario Criteria",
        "safety_criterion": "When the operating state changes, check the values of functional interface data, and analyze the correctness of output when 'values do not change'.",
        "document_name": "4.json",
        "document_chunk_index": 130,
        "hopy_requirement": "The system shall ensure consistency and accuracy of navigation parameters (e.g., heading, altitude, speed) during flight mode transitions."
    },
    {
        "id": 18,
        "class": "Data Criteria",
        "safety_criterion": "Check the safety value of interface data, and analyze the correctness of output when 'no safety value is set'.",
        "document_name": "4.json",
        "document_chunk_index": 192,
        "hopy_requirement": "The system shall verify safety values for flight control commands, ensuring no hazardous actions are executed if safety values are not configured."
    },
    {
        "id": 19,
        "class": "Data Criteria",
        "safety_criterion": "Check the safety value of interface data, and analyze the correctness of output when 'the safety value is an out-of-range abnormal value'.",
        "document_name": "4.json",
        "document_chunk_index": 120,
        "hopy_requirement": "The system shall detect and handle abnormal values in satellite communication links, ensuring data transmission integrity and reliability."
    },
    {
        "id": 20,
        "class": "Redundancy Criteria",
        "safety_criterion": "The same interface data may involve multiple fault-handling strategies. Check the safety values required by different fault-handling strategies for the same interface data, and analyze the correctness of output when safety values across multiple strategies are identical.",
        "document_name": "5.json",
        "document_chunk_index": 272,
        "hopy_requirement": "The system shall implement multiple fault-handling strategies for the same flight control interface data and ensure consistent output safety values across different strategies."
    },
    {
        "id": 21,
        "class": "Data Criteria",
        "safety_criterion": "There are multiple fault handling strategies for the same interface data. Check the safety values required by different fault handling strategies for the same interface data, and analyze the correctness of the output when the safety values differ.",
        "document_name": "4.json",
        "document_chunk_index": 228,
        "hopy_requirement": "The system should be able to dynamically adjust flight control parameters based on different fault handling strategies and ensure that the output control commands are correct under different strategies."
    },
    {
        "id": 22,
        "class": "Data Criteria",
        "safety_criterion": "Check the safety value of the interface data, compare the safety value with the normal value of the interface data when no fault occurs, and analyze the correctness of the output when the difference between the safety value and the normal value is too large.",
        "document_name": "4.json",
        "document_chunk_index": 303,
        "hopy_requirement": "The system should be able to monitor and verify the safety values of flight control commands in real-time, ensuring that deviations from normal flight parameters remain within a safe range."
    },
    {
        "id": 23,
        "class": "Data Criteria",
        "safety_criterion": "Check the default value of the interface data, and analyze the correctness of the output in cases such as 'default value not set'.",
        "document_name": "4.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The system should be able to ensure that flight control parameters (such as attitude angle and speed) remain within a safe range even when default values are not set."
    },
    {
        "id": 24,
        "class": "Data Criteria",
        "safety_criterion": "Check the default value of the interface data, and analyze the correctness of the output in cases such as 'default value is an abnormal value outside the valid range'.",
        "document_name": "4.json",
        "document_chunk_index": 235,
        "hopy_requirement": "The system should be able to detect and handle default values of flight control parameters, ensuring that the system output remains correct and safe even when the default value is an abnormal value outside the valid range."
    },
    {
        "id": 25,
        "class": "Timing Criteria",
        "safety_criterion": "Check the period of the interface data, and analyze the correctness of the output when the input value period is 'greater than specified period, less than specified period, extremely large or small values', etc.",
        "document_name": "1.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should be able to monitor and verify the update cycle of navigation data in real-time, ensuring it remains within the specified range to guarantee the accuracy and stability of flight control."
    },
    {
        "id": 26,
        "class": "Timing Criteria",
        "safety_criterion": "Check the period of the interface data, and analyze the correctness of the output when the input value period is 'extremely large value, extremely small value', etc.",
        "document_name": "5.json",
        "document_chunk_index": 186,
        "hopy_requirement": "The system should be able to monitor and process the input data period of the satellite communication link in real-time, ensuring that control commands are still output correctly in extreme cases (e.g., extremely large or small values)."
    },
    {
        "id": 27,
        "class": "Timing Criteria",
        "safety_criterion": "Check the duration of the interface data value, and analyze the correctness of the output when the duration is 'greater than specified time, less than specified time', etc.",
        "document_name": "1.json",
        "document_chunk_index": 309,
        "hopy_requirement": "The system should be able to continuously monitor and record engine thrust parameters, ensuring they remain stable within the specified time range."
    },
    {
        "id": 28,
        "class": "Timing Criteria",
        "safety_criterion": "Check the duration of the interface data value, and analyze the correctness of the output when the duration is 'extremely long or short', etc.",
        "document_name": "1.json",
        "document_chunk_index": 292,
        "hopy_requirement": "The system should be able to monitor and process the duration of flight control commands, ensuring that the aircraft's control output remains accurate even with extremely short or long command durations."
    },
    {
        "id": 29,
        "class": "Timing Criteria",
        "safety_criterion": "Check the timing of the interface data value, and analyze the correctness of the output when the input timing is 'too early' or 'too late', etc.",
        "document_name": "1.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system should be able to detect and process the input timing of navigation data, ensuring that the output of the flight control system remains correct and stable even when data arrives too early or too late."
    },
    {
        "id": 30,
        "class": "Timing Criteria",
        "safety_criterion": "Check the timing of the interface data value, and analyze the correctness of the output when the input timing is 'stopping too early' or 'stopping too late', etc.",
        "document_name": "1.json",
        "document_chunk_index": 240,
        "hopy_requirement": "The system should be able to detect and process transmission delays in navigation data, ensuring that the output of the flight control system remains correct even when data arrives too early or too late."
    },
    {
        "id": 31,
        "class": "Timing Criteria",
        "safety_criterion": "Check the timing of interface data values and analyze the correctness of outputs when input values are at 'maximum or minimum'.",
        "document_name": "5.json",
        "document_chunk_index": 217,
        "hopy_requirement": "The system should be able to process and verify extreme values (such as maximum and minimum) from different sensors, ensuring the accuracy and reliability of flight control commands."
    },
    {
        "id": 32,
        "class": "Timing Criteria",
        "safety_criterion": "Interface data is triggered and non-periodic input. Check the data values and analyze the correctness of outputs when valid data is received again after being previously received.",
        "document_name": "3.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should be able to detect and process non-periodic commands from the ground control station in real-time, ensuring command validity and output correctness."
    },
    {
        "id": 33,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication protocol of the interface data frame and analyze the correctness of outputs in cases such as 'header or trailer errors'.",
        "document_name": "5.json",
        "document_chunk_index": 259,
        "hopy_requirement": "The system should be able to perform protocol validation on received flight control command data frames, ensuring the correctness of the header and trailer."
    },
    {
        "id": 34,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication protocol of the interface data frame and analyze the correctness of outputs when the data length is 'greater than or less than the specified length'.",
        "document_name": "5.json",
        "document_chunk_index": 222,
        "hopy_requirement": "The system should be able to check the protocol of received navigation data frames, ensuring that the data length is within the specified range to guarantee data integrity and accuracy."
    },
    {
        "id": 35,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication protocol of the interface data frame and analyze the correctness of outputs in cases such as 'data frame identifier' errors.",
        "document_name": "3.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system should be able to check the protocol of received navigation data frames, ensuring that the data frame identifier is correct."
    },
    {
        "id": 36,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication protocol of the interface data frame and analyze the correctness of outputs in cases such as 'checksum errors'.",
        "document_name": "1.json",
        "document_chunk_index": 159,
        "hopy_requirement": "The system should be able to validate the checksum of received navigation data frames, ensuring proper error handling and reporting in case of checksum errors."
    },
    {
        "id": 37,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication status of the interface data frame and analyze the correctness of outputs in cases such as 'communication interruption'.",
        "document_name": "2.json",
        "document_chunk_index": 256,
        "hopy_requirement": "The system should be able to detect and handle communication interruptions between the satellite and the ground station, ensuring data integrity and consistency after communication is restored."
    },
    {
        "id": 38,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication status of the interface data frame and analyze the correctness of outputs in cases such as 'frame loss'.",
        "document_name": "1.json",
        "document_chunk_index": 214,
        "hopy_requirement": "The system should be able to detect and handle frame loss during communication between the satellite and the ground station, ensuring the accuracy and real-time performance of flight control commands."
    },
    {
        "id": 39,
        "class": "Communication Criteria",
        "safety_criterion": "Check the communication status of the interface data frame and analyze the correctness of outputs in cases such as 'continuous absence of new data'.",
        "document_name": "1.json",
        "document_chunk_index": 228,
        "hopy_requirement": "The system should be able to detect communication interruptions between the satellite and the ground station, ensuring that flight control parameters remain in a safe state when no new data is received for an extended period."
    },
    {
        "id": 40,
        "class": "Timing Criteria",
        "safety_criterion": "Check the sending and receiving cycles of the interface data and analyze whether the sending and receiving cycles match.",
        "document_name": "3.json",
        "document_chunk_index": 110,
        "hopy_requirement": "The system should ensure that the data transmission cycle between the aircraft and the ground control station matches, guaranteeing the reliability of real-time communication."
    },
    {
        "id": 41,
        "class": "Communication Criteria",
        "safety_criterion": "When the software experiences power loss and restarts, check the interface data communication during restart, and analyze the correctness of outputs under scenarios such as 'communication interruption, reconnection, and failure to recover'.",
        "document_name": "5.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The system should be able to automatically restore communication with the ground control station after a power loss restart of the flight software and ensure the continuity and integrity of all critical flight parameters."
    },
    {
        "id": 42,
        "class": "Communication Criteria",
        "safety_criterion": "Check the receiving buffer of the interface data and analyze the correctness of output when the buffer capacity is less than the volume of the interface data.",
        "document_name": "2.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The system should ensure that telemetry data from the aircraft is processed and overflowed data is recorded correctly even when the data volume exceeds the receiving buffer capacity."
    },
    {
        "id": 43,
        "class": "Communication Criteria",
        "safety_criterion": "Analyze the correctness of outputs in situations where the representable value range of an interface data frame is smaller than the actual value range of the interface data.",
        "document_name": "4.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The system should ensure accurate output of control commands even when the value range of flight control data frames is limited."
    },
    {
        "id": 44,
        "class": "Communication Criteria",
        "safety_criterion": "Analyze the correctness of outputs in situations where the precision represented by the interface data frame does not meet the required precision of the interface data.",
        "document_name": "5.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The system should ensure that the precision of navigation data frames meets flight control requirements to guarantee flight trajectory accuracy."
    },
    {
        "id": 45,
        "class": "Communication Criteria",
        "safety_criterion": "If the interface data represents a critical variable (e.g., fault word, fault counter, timer, operating phase, or status), and the software restarts after power loss, check the source of input after restarting and analyze whether the interface data is read from non-volatile memory such as NVM.",
        "document_name": "4.json",
        "document_chunk_index": 198,
        "hopy_requirement": "The system should be able to recover critical flight parameters (e.g., fault word, fault counter, timer, operating phase, status) from non-volatile memory after a power loss restart and perform validity checks."
    },
    {
        "id": 46,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Check external devices (e.g., sensors, NVM, databases, other systems) and analyze the correctness of outputs when these devices are in operational states such as 'powered off' or 'initialization'.",
        "document_name": "1.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The system should be able to detect and handle outputs from external sensors during power-off or initialization phases to ensure the stability and safety of the flight control system."
    },
    {
        "id": 47,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Check external devices (e.g., sensors, NVM, databases, other systems) and analyze the correctness of outputs when the source device is in degraded or maintenance conditions.",
        "document_name": "4.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The system should be able to detect and process data from external sensors (e.g., attitude sensors, navigation sensors) in degraded or maintenance modes to ensure the stability and safety of the flight control system."
    },
    {
        "id": 48,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Software reads data from external devices (e.g., sensors, NVM, databases, other systems) through interfaces. Check external devices and analyze the correctness of outputs when hardware faults occur in the external devices.",
        "document_name": "4.json",
        "document_chunk_index": 163,
        "hopy_requirement": "The system should be able to detect and handle sensor failures to ensure the correctness and stability of the flight control system's output when sensors fail."
    },
    {
        "id": 49,
        "class": "Communication Criteria",
        "safety_criterion": "Software reads data from external devices (e.g., sensors, NVM, databases, other systems) through interfaces. Check external devices and analyze the correctness of outputs when communication with external devices is interrupted.",
        "document_name": "2.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The system should be able to detect and handle communication interruptions between satellites and ground stations and ensure data consistency and integrity after communication is restored."
    },
    {
        "id": 50,
        "class": "Redundancy Criteria",
        "safety_criterion": "Check continuous-type interface data values across different redundancies and analyze the correctness of function implementation when two or more redundant interface data values are inconsistent (i.e., their difference exceeds a specified threshold).",
        "document_name": "4.json",
        "document_chunk_index": 102,
        "hopy_requirement": "The system should be able to monitor and compare data from redundant sensors (e.g., attitude sensors, altitude sensors) in real time, trigger alarms, and take appropriate safety measures when data differences exceed preset thresholds."
    },
    {
        "id": 51,
        "class": "Redundancy Criteria",
        "safety_criterion": "Check the values of discrete interface data for different redundancies, and analyze the correctness of function implementation when two or more redundant interface data have inconsistent values.",
        "document_name": "5.json",
        "document_chunk_index": 205,
        "hopy_requirement": "The system should be able to monitor and compare flight data from multiple redundant sensors in real time, ensuring correct fault detection and handling when data inconsistencies occur."
    },
    {
        "id": 52,
        "class": "Redundancy Criteria",
        "safety_criterion": "Check interface data from different redundancies and analyze the correctness of function implementation when a single redundancy fails or all redundancies fail (e.g., data anomalies, timing faults, communication faults, destination equipment faults).",
        "document_name": "1.json",
        "document_chunk_index": 199,
        "hopy_requirement": "The system should be capable of detecting and handling faults in redundant sensor data within the navigation system, ensuring the correctness and reliability of the flight control system in cases of single or total redundancy failure."
    },
    {
        "id": 53,
        "class": "Redundancy Criteria",
        "safety_criterion": "Check the operational states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states.",
        "document_name": "4.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The system should be able to monitor and synchronize the operational states of redundant modules in real time, ensuring the correctness and consistency of flight control functions when redundant modules are in different states."
    },
    {
        "id": 54,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The control calculation process varies under different states and operational phases. Check the inputs to the function and analyze the correctness of function processing when work phases or states are not considered.",
        "document_name": "1.json",
        "document_chunk_index": 118,
        "hopy_requirement": "The system should dynamically adjust control algorithm parameters based on different flight phases and states, ensuring accuracy and safety in flight control."
    },
    {
        "id": 55,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Check multiple input data for the function and analyze the correctness of function processing when these inputs are combinations of normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, or default values.",
        "document_name": "2.json",
        "document_chunk_index": 97,
        "hopy_requirement": "The system should comprehensively check data from multiple sensors, ensuring the correctness and reliability of flight control logic under combinations of normal, abnormal, boundary, initial, safe, and default values."
    },
    {
        "id": 56,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Check the data processing process of the function and analyze whether division by zero occurs during computation.",
        "document_name": "1.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system should ensure that all division operations involved in trajectory calculations must check if the divisor is zero to prevent computational errors and system crashes."
    },
    {
        "id": 57,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Check the control calculation results of the function and analyze the correctness of function processing when the results are normal values, abnormal values, boundary values, or extreme maximum/minimum values.",
        "document_name": "3.json",
        "document_chunk_index": 92,
        "hopy_requirement": "The flight control system should monitor and process attitude control calculation results in real-time, ensuring accurate aircraft attitude adjustments and control commands when results fall within normal, abnormal, boundary, or extreme value ranges."
    },
    {
        "id": 58,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Check the control calculation process of the function and analyze the correctness of function processing when the calculation exceeds the specified time limit (i.e., does not return results within the allocated time).",
        "document_name": "3.json",
        "document_chunk_index": 81,
        "hopy_requirement": "The system should monitor and manage the execution of flight control command calculations in real time, taking safety measures such as switching to a backup control mode automatically when timeouts occur."
    },
    {
        "id": 59,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Check the execution conditions of the function and analyze the correctness of function processing when execution conditions are unmet or re-met during function execution.",
        "document_name": "1.json",
        "document_chunk_index": 202,
        "hopy_requirement": "The system should monitor engine status in real time and ensure that all safety checks are satisfied before allowing startup when transitioning from a non-operational state to an operational state."
    },
    {
        "id": 60,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Two or more states with transition relationships share the same function. Check the execution of the function before and after the state transition and analyze the correctness of function processing when the function starts execution, continues execution, or stops execution after the state transition.",
        "document_name": "4.json",
        "document_chunk_index": 152,
        "hopy_requirement": "The system should ensure continuity and correctness of navigation and control functions when switching between flight modes (e.g., from cruise mode to landing mode)."
    },
    {
        "id": 61,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of function processing in cases such as 'logic always false, logic always true, incorrect logic judgment condition, missing logic branch'.",
        "document_name": "2.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The flight control system should be able to detect and process all logical judgment conditions and branches, ensuring correct execution of flight tasks under any circumstances."
    },
    {
        "id": 62,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Check the loop judgment conditions of the function, and analyze the correctness of function processing when loop judgment conditions are always false or always true.",
        "document_name": "3.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The system should be able to detect and handle abnormal conditions in flight control loops, ensuring correct execution of flight control logic even when loop judgment conditions are always false or always true."
    },
    {
        "id": 63,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the duration of each task and analyze the correctness of function processing when the task duration exceeds the specified time.",
        "document_name": "5.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The system should be able to monitor and record the duration of each flight task in real time, automatically trigger an alarm and take appropriate measures when the task duration exceeds the preset threshold."
    },
    {
        "id": 64,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
        "document_name": "4.json",
        "document_chunk_index": 91,
        "hopy_requirement": "The system should be able to monitor and record the duration of each flight task in real time, ensuring that tasks are completed within the specified time, otherwise triggering an alarm and taking appropriate measures."
    },
    {
        "id": 65,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the input data values in the execution conditions of each task, and analyze the correctness of function processing when the input data values cause the task execution condition to be satisfied prematurely.",
        "document_name": "4.json",
        "document_chunk_index": 269,
        "hopy_requirement": "The system should be able to monitor and verify input values of navigation data (e.g., position, speed, attitude) in real time, ensuring correct task execution when input data satisfies the execution condition prematurely."
    },
    {
        "id": 66,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the input data values in the execution conditions of each task, and analyze the correctness of function processing when the input data values cause the task execution condition to be satisfied with delay.",
        "document_name": "4.json",
        "document_chunk_index": 165,
        "hopy_requirement": "The system should be able to monitor and verify input values of navigation data in real time, ensuring correct execution of flight control tasks even when input data is delayed or abnormal."
    },
    {
        "id": 67,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the input data values in the execution conditions of each task, and analyze the correctness of function processing when the input data values never satisfy the execution condition (i.e., the task can never be executed).",
        "document_name": "5.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The system should be able to detect and handle situations where input flight parameters (e.g., altitude, speed, heading) for navigation tasks never satisfy the task execution conditions, ensuring safe termination or replanning of the task."
    },
    {
        "id": 68,
        "class": "Task Timing Criteria",
        "safety_criterion": "After a task starts executing, analyze the correctness of function processing when the execution condition is satisfied again due to newly received input data.",
        "document_name": "2.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The system should be able to handle repeatedly received flight task commands, ensuring correct and consistent task execution."
    },
    {
        "id": 69,
        "class": "Task Timing Criteria",
        "safety_criterion": "Check the execution sequence of tasks, and analyze the correctness of function processing when the actual execution sequence differs from the specified sequence.",
        "document_name": "4.json",
        "document_chunk_index": 218,
        "hopy_requirement": "The system should ensure that navigation and control tasks are executed in the predetermined sequence, preventing flight anomalies caused by incorrect task execution order."
    },
    {
        "id": 70,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check continuous output data values from different redundancies, and analyze the correctness of function implementation when two or more redundant outputs differ beyond the specified threshold.",
        "document_name": "4.json",
        "document_chunk_index": 201,
        "hopy_requirement": "The system should be able to monitor and compare output data from multiple redundant sensors in real time, ensuring their consistency and triggering alarms and taking appropriate measures when data differences exceed the specified threshold."
    },
    {
        "id": 71,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check discrete output data values from different redundancies and analyze the correctness of function implementation when output data values are 'inconsistent' or similar situations occur.",
        "document_name": "4.json",
        "document_chunk_index": 275,
        "hopy_requirement": "The system should be able to detect and handle inconsistencies in multi-channel redundant sensor data, ensuring the correctness and reliability of flight control commands."
    },
    {
        "id": 72,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check output data from different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' or 'multiple redundancies failure'.",
        "document_name": "5.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system should have a multi-channel redundancy design to ensure that flight control functions can still operate normally when one or multiple channels fail."
    },
    {
        "id": 73,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check execution timing of different redundancies and analyze the correctness of function implementation when execution timing is 'not synchronized' among two or more redundancies.",
        "document_name": "3.json",
        "document_chunk_index": 140,
        "hopy_requirement": "The system should ensure the synchronization of execution timing for multiple redundant flight control computers to guarantee correct execution of flight control tasks even when timing is not synchronized."
    },
    {
        "id": 74,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'.",
        "document_name": "4.json",
        "document_chunk_index": 289,
        "hopy_requirement": "The system should be able to monitor and synchronize the operating states of each redundant module in real-time, ensuring correctness and consistency of flight control functions when redundant modules are in different states."
    },
    {
        "id": 75,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Check the same input data values received by different redundancies and analyze the correctness of function implementation when these input data values are inconsistent.",
        "document_name": "1.json",
        "document_chunk_index": 274,
        "hopy_requirement": "The system should perform consistency checks on flight attitude data from multiple sensors to ensure correct fault detection and switching when data inconsistencies occur."
    },
    {
        "id": 76,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Multiple functions are executed in series, with the output of a preceding function serving as the input of the subsequent function. Check the output data of the preceding function and analyze the correctness of processing across multiple functions when data values are 'normal value equivalence class combinations', 'abnormal value equivalence class combinations', etc.",
        "document_name": "5.json",
        "document_chunk_index": 209,
        "hopy_requirement": "The system should be able to perform real-time checks on the output data of flight control commands to ensure that subsequent control logic can correctly process and execute them under both normal and abnormal conditions."
    },
    {
        "id": 77,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Multiple functions are executed in series, with the output of a preceding function serving as the input of the subsequent function. Check the output data of the preceding function and analyze the correctness of processing across multiple functions when data values are 'boundary value combinations', 'initial value combinations', 'safe value combinations', 'default value combinations', etc.",
        "document_name": "1.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The system should be able to perform real-time checks on the output data of flight control commands to ensure that subsequent navigation and control functions can execute correctly under boundary values, initial values, safe values, and default values."
    },
    {
        "id": 78,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Multiple functions are executed in sequence, with the subsequent function being executed after the previous function completes. Analyze the correctness of processing across multiple functions during the execution of the subsequent function when the execution conditions of the previous function are 'satisfied', 'transition from satisfied to unsatisfied', 'unsatisfied', or 'transition from unsatisfied to satisfied'.",
        "document_name": "5.json",
        "document_chunk_index": 240,
        "hopy_requirement": "Flight control software should ensure that attitude control functions are executed only after navigation and guidance functions are completed, and should monitor changes in the execution conditions of navigation and guidance functions in real time to ensure the correctness and safety of attitude control functions."
    },
    {
        "id": 79,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "When multiple functions are executed simultaneously, check the input and output data of these functions and analyze the correctness of processing across multiple functions when input/output data values are 'normal value equivalence class combinations', 'abnormal value equivalence class combinations', etc.",
        "document_name": "2.json",
        "document_chunk_index": 141,
        "hopy_requirement": "The system should ensure that input and output data for navigation, control, and communication functions are processed correctly under both normal and abnormal conditions when multiple tasks are processed in parallel."
    },
    {
        "id": 80,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "When multiple functions are executed simultaneously, check the input and output data of these functions and analyze the correctness of processing across multiple functions when input/output data values are 'boundary value combinations', 'initial value combinations', 'safe value combinations', 'default value combinations', etc.",
        "document_name": "2.json",
        "document_chunk_index": 208,
        "hopy_requirement": "The system should ensure the correctness and consistency of input and output data for navigation, control, and communication functions under combinations of boundary values, initial values, safe values, and default values when multiple tasks are processed in parallel."
    },
    {
        "id": 81,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "When multiple functions output data with mutually exclusive values or cannot be output simultaneously, check the execution conditions of these functions. Analyze whether the concurrent execution caused by simultaneous satisfaction of execution conditions leads to correctness of outputs from multiple functions.",
        "document_name": "3.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The system shall ensure that when multiple flight control commands are generated simultaneously, only the highest priority command among mutually exclusive commands is executed."
    },
    {
        "id": 82,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "When multiple functions output the same interface data simultaneously, check the values output by these functions. Analyze the correctness of multi-function processing when multiple functions provide different values for the same interface data.",
        "document_name": "5.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The system shall be able to handle situations where multiple sensors simultaneously provide flight attitude data, ensuring consistency and accuracy of the data."
    },
    {
        "id": 83,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "When multiple functions perform read/write operations on the same data simultaneously, analyze the correctness of multi-function processing in cases such as data read/write conflicts.",
        "document_name": "4.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The flight control system shall ensure that read/write operations on critical flight parameters (such as attitude, speed, altitude) do not produce conflicts during parallel processing of multiple tasks, ensuring data consistency and integrity."
    },
    {
        "id": 84,
        "class": "Operating State Criteria",
        "safety_criterion": "Check the software state corresponding to the system state, operating phase, or system task. Analyze the correctness of state execution in cases such as 'no corresponding software state' or 'inconsistency between software and system'.",
        "document_name": "1.json",
        "document_chunk_index": 300,
        "hopy_requirement": "The system shall be capable of real-time monitoring and verification of the consistency between the flight control software state and the current flight mission state."
    },
    {
        "id": 85,
        "class": "Operating State Criteria",
        "safety_criterion": "Check the state entry conditions. Analyze the correctness of state execution when entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
        "document_name": "1.json",
        "document_chunk_index": 97,
        "hopy_requirement": "The system shall be capable of real-time monitoring and verification of entry conditions (such as altitude, speed, attitude angle) to ensure correct state transitions when conditions change."
    },
    {
        "id": 86,
        "class": "Operating State Criteria",
        "safety_criterion": "There is no transition relationship between two or more states. Check the entry conditions of these states. Analyze the correctness of state execution when entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
        "document_name": "3.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The system shall ensure strict checking of state entry conditions during flight mode switching to prevent invalid or conflicting mode transitions."
    },
    {
        "id": 87,
        "class": "Operating State Criteria",
        "safety_criterion": "During state execution, if the software powers off and restarts, check the state after restart. Analyze the correctness of state execution when 'state is not recovered' or 'recovery is incorrect' after restart.",
        "document_name": "4.json",
        "document_chunk_index": 171,
        "hopy_requirement": "The system shall automatically recover to the pre-power-off flight state after power recovery and ensure the correctness of all critical parameters and task states."
    },
    {
        "id": 88,
        "class": "Operating State Criteria",
        "safety_criterion": "Check the transition conditions between every pair of states in the software state space. Analyze the correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'unsatisfiable'.",
        "document_name": "3.json",
        "document_chunk_index": 132,
        "hopy_requirement": "The system shall ensure correct setting of transition conditions between different flight modes (e.g., cruise, landing, takeoff) to prevent invalid or erroneous mode switching."
    },
    {
        "id": 89,
        "class": "State Scenario Criteria",
        "safety_criterion": "Two or more states with transition relationships have different execution requirements for the same function, with some states allowing function execution and others not. Analyze the correctness of states and functions when functions 'continue execution' or 'interrupt execution' during state transitions.",
        "document_name": "5.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The system shall ensure the correctness and continuity of key control functions (e.g., navigation, attitude control) when switching between different flight modes (e.g., manual mode, automatic mode, emergency mode)."
    },
    {
        "id": 90,
        "class": "State Scenario Criteria",
        "safety_criterion": "Check different functions with set priorities under two or more states with transition relationships. Analyze the correctness of states and functions when switching 'from high priority to low priority' or 'from low priority to high priority'.",
        "document_name": "1.json",
        "document_chunk_index": 124,
        "hopy_requirement": "The system shall ensure that high priority tasks (e.g., emergency obstacle avoidance) are executed first during flight mode switching, while low priority tasks (e.g., routine navigation) are temporarily suspended or downgraded."
    },
    {
        "id": 91,
        "class": "State Scenario Criteria",
        "safety_criterion": "There is a transition relationship between one state and multiple other states. The conditions for transitions from one state to multiple states and from multiple states to one state must be checked, and the correctness of state transitions must be analyzed when multiple transition conditions are satisfied simultaneously.",
        "document_name": "3.json",
        "document_chunk_index": 140,
        "hopy_requirement": "The system should be able to accurately handle and validate state transition conditions between multiple flight modes, ensuring correct mode switching when multiple conditions are satisfied simultaneously."
    },
    {
        "id": 92,
        "class": "Timing Criteria",
        "safety_criterion": "Does the data acquisition cycle meet real-time requirements?",
        "document_name": "5.json",
        "document_chunk_index": 152,
        "hopy_requirement": "The system should ensure that the flight data acquisition cycle does not exceed 10 milliseconds to meet real-time requirements."
    },
    {
        "id": 93,
        "class": "Data Criteria",
        "safety_criterion": "Is filtering or debouncing performed during data acquisition to eliminate interference data?",
        "document_name": "3.json",
        "document_chunk_index": 129,
        "hopy_requirement": "The system should have filtering and debouncing capabilities to ensure the accuracy and stability of flight data acquisition."
    },
    {
        "id": 94,
        "class": "Timing Criteria",
        "safety_criterion": "Will filtering processing affect real-time performance, and is the impact acceptable?",
        "document_name": "2.json",
        "document_chunk_index": 309,
        "hopy_requirement": "The system should ensure that filtered data remains within the required real-time range without affecting the response time of flight control."
    },
    {
        "id": 95,
        "class": "Data Criteria",
        "safety_criterion": "Is the valid value range of parameters clearly defined (upper and lower limits), and is the handling strategy for out-of-range data clear?",
        "document_name": "4.json",
        "document_chunk_index": 145,
        "hopy_requirement": "The system should clearly define the valid value ranges for flight control parameters (e.g., roll angle, pitch angle, yaw angle) and specify handling strategies for out-of-range data."
    },
    {
        "id": 96,
        "class": "Data Criteria",
        "safety_criterion": "Are there reasonable bounds on the rate of parameter change (upper and lower slope limits), and is the handling strategy for excessive slope values clearly defined?",
        "document_name": "2.json",
        "document_chunk_index": 272,
        "hopy_requirement": "The system should monitor the rate of change of aircraft attitude parameters in real time to ensure they remain within predefined reasonable bounds and implement clearly defined handling strategies in cases of excessive slopes."
    },
    {
        "id": 97,
        "class": "Data Criteria",
        "safety_criterion": "Is there judgment and handling for long periods of data non-update, and is the strategy consistent with the equipment usage scenario?",
        "document_name": "1.json",
        "document_chunk_index": 235,
        "hopy_requirement": "The system should detect and handle prolonged absence of flight control data updates, ensuring appropriate countermeasures are taken when data stagnation occurs."
    },
    {
        "id": 98,
        "class": "Data Criteria",
        "safety_criterion": "Is the sensor measurement range clearly defined (upper and lower limits), and is a sensor failure reported when values exceed the range?",
        "document_name": "2.json",
        "document_chunk_index": 115,
        "hopy_requirement": "The flight control system should continuously monitor the sensor measurement range and trigger a fault alarm and record relevant data if sensor readings exceed predefined upper or lower limits."
    },
    {
        "id": 99,
        "class": "Data Criteria",
        "safety_criterion": "Are specific sensor faults (based on sensor working principles) detected and handled?",
        "document_name": "1.json",
        "document_chunk_index": 105,
        "hopy_requirement": "The system should be capable of detecting and handling specific faults in aircraft sensors, such as open or short circuits in thermistors of temperature sensors."
    },
    {
        "id": 100,
        "class": "Timing Criteria",
        "safety_criterion": "Does the data acquisition timing meet real-time requirements?",
        "document_name": "2.json",
        "document_chunk_index": 219,
        "hopy_requirement": "The system should ensure the real-time nature of flight data acquisition to meet the needs of flight control and monitoring."
    },
    {
        "id": 101,
        "class": "Data Criteria",
        "safety_criterion": "Was filtering and debouncing processing performed during data acquisition to eliminate interference data?",
        "document_name": "2.json",
        "document_chunk_index": 300,
        "hopy_requirement": "The system shall have filtering and debouncing functions to ensure the accuracy and stability of flight data acquisition."
    },
    {
        "id": 102,
        "class": "Timing Criteria",
        "safety_criterion": "Will filtering processing affect real-time performance, and is the impact acceptable?",
        "document_name": "5.json",
        "document_chunk_index": 148,
        "hopy_requirement": "The system shall ensure that filtered data remains within the real-time requirements, without affecting the response time of flight control."
    },
    {
        "id": 103,
        "class": "Communication Criteria",
        "safety_criterion": "Is there a detection mechanism to prevent unintended button presses?",
        "document_name": "5.json",
        "document_chunk_index": 296,
        "hopy_requirement": "The system shall have an anti-misoperation detection mechanism to ensure that incorrect commands are not executed due to accidental presses during critical operations (e.g., launch, landing)."
    },
    {
        "id": 104,
        "class": "Redundancy Criteria",
        "safety_criterion": "Is there wrap-around detection-based fault handling, and is the state reporting strategy reasonable during faults?",
        "document_name": "5.json",
        "document_chunk_index": 133,
        "hopy_requirement": "The system shall have wrap-around detection functionality and shall report faults timely and implement appropriate fault-handling measures."
    },
    {
        "id": 105,
        "class": "Data Criteria",
        "safety_criterion": "Can the system detect and report when data has not been updated for an extended period?",
        "document_name": "4.json",
        "document_chunk_index": 106,
        "hopy_requirement": "The system shall be capable of detecting and reporting situations where flight control parameters (e.g., attitude, speed, altitude) have not been updated within a specified timeframe."
    },
    {
        "id": 106,
        "class": "Communication Criteria",
        "safety_criterion": "Are there error-checking mechanisms for data packets, such as header, trailer, checksum, data type, packet length, frame count, etc.?",
        "document_name": "3.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The system shall have error-checking capabilities for flight data packets, including header, trailer, checksum, data type, packet length, and frame count."
    },
    {
        "id": 107,
        "class": "Data Criteria",
        "safety_criterion": "Does each parameter in the data packet have a clearly defined valid range, and is the handling strategy for out-of-range data clearly defined?",
        "document_name": "3.json",
        "document_chunk_index": 287,
        "hopy_requirement": "The system shall perform valid range checks on each parameter in the flight control data packets. Out-of-range data shall trigger alarms and logging, and the system shall have automatic recovery or switching-to-safe-mode capabilities."
    },
    {
        "id": 108,
        "class": "Communication Criteria",
        "safety_criterion": "When the transmitting end resumes data transmission after an anomaly, can the receiving end resume normal data reception?",
        "document_name": "4.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The system shall ensure seamless reconnection and continued data reception and processing when communication between the ground station and satellite is restored after an interruption."
    },
    {
        "id": 109,
        "class": "Timing Criteria",
        "safety_criterion": "Does the output data refresh cycle meet real-time requirements?",
        "document_name": "3.json",
        "document_chunk_index": 219,
        "hopy_requirement": "The flight control system shall ensure that the refresh cycle of all output data does not exceed 100 milliseconds to meet real-time flight control requirements."
    },
    {
        "id": 110,
        "class": "Data Criteria",
        "safety_criterion": "Is there a clearly defined handling strategy for output data exceeding limits, such as clamping or outputting safe values?",
        "document_name": "2.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system shall have the capability to switch to backup safe values or clamp data automatically when flight control parameters exceed preset safety limits."
    },
    {
        "id": 111,
        "class": "Data Criteria",
        "safety_criterion": "Is there a detection mechanism for the output loop to perform loop status checks without affecting normal output?",
        "document_name": "3.json",
        "document_chunk_index": 195,
        "hopy_requirement": "The system shall have the capability to detect and diagnose the status of output loops in real-time, ensuring that loop faults are identified and reported promptly without affecting normal flight control outputs."
    },
    {
        "id": 112,
        "class": "Timing Criteria",
        "safety_criterion": "Does the timing of output control states meet scenario requirements?",
        "document_name": "1.json",
        "document_chunk_index": 229,
        "hopy_requirement": "The system shall ensure that the timing of control commands meets safety and operational requirements during specific flight phases (e.g., takeoff, cruise, landing)."
    },
    {
        "id": 113,
        "class": "Timing Criteria",
        "safety_criterion": "Does the duration of the output state satisfy constraint requirements?",
        "document_name": "5.json",
        "document_chunk_index": 216,
        "hopy_requirement": "The system shall ensure that the engine ignition duration remains within the predefined range to guarantee safe launch and operation of the aircraft."
    },
    {
        "id": 114,
        "class": "Data Criteria",
        "safety_criterion": "Is there a detection mechanism for the output loop to perform loop status checks without affecting normal output?",
        "document_name": "1.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system shall have the capability to detect and diagnose the status of output loops in real-time, ensuring that loop faults are identified and reported promptly without affecting normal flight control outputs."
    },
    {
        "id": 115,
        "class": "Communication Criteria",
        "safety_criterion": "Is the timing of sending data packets correct, such as periodic packets, response packets, event-triggered packets, etc.?",
        "document_name": "3.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The system shall ensure that flight control command data packets are sent at the correct time points, including periodic commands, response commands, and event-triggered commands."
    },
    {
        "id": 116,
        "class": "Communication Criteria",
        "safety_criterion": "In extreme conditions, can output data congestion lead to packet loss?",
        "document_name": "1.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The system shall ensure that critical flight data (e.g., attitude, speed, altitude) is transmitted without packet loss even under extreme conditions (e.g., high data traffic, system overload)."
    },
    {
        "id": 117,
        "class": "Data Criteria",
        "safety_criterion": "Are verification contents set for data packets, such as header, trailer, checksum, data type, packet length, frame count, etc.?",
        "document_name": "5.json",
        "document_chunk_index": 96,
        "hopy_requirement": "The communication system shall be capable of performing integrity checks on all data packets, including header, trailer, checksum, data type, packet length, and frame count, to ensure accurate and complete data transmission."
    },
    {
        "id": 118,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are validity checks performed on parameters set by personnel, with alerts or no response for invalid parameters?",
        "document_name": "3.json",
        "document_chunk_index": 236,
        "hopy_requirement": "The system shall perform validity checks on flight mission parameters and provide alerts and reject execution for parameter values exceeding preset ranges."
    },
    {
        "id": 119,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are rationality checks performed on operator actions, with no response for commands that do not match the current scenario or state?",
        "document_name": "4.json",
        "document_chunk_index": 158,
        "hopy_requirement": "The system shall perform rationality checks on ground control commands and shall not execute commands that do not match the current flight state or scenario."
    },
    {
        "id": 120,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Do critical decisions include prompts or confirmations to prevent misoperation, and do these prompts or confirmations not negatively impact decision timeliness beyond acceptable limits?",
        "document_name": "2.json",
        "document_chunk_index": 219,
        "hopy_requirement": "When executing critical flight control commands (e.g., attitude adjustment, thruster ignition), the system shall provide real-time confirmation prompts to ensure the operator confirms before execution, and the confirmation process shall not exceed 1 second."
    },
    {
        "id": 121,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are requirements specified for handling misoperations and invalid operations?",
        "document_name": "2.json",
        "document_chunk_index": 172,
        "hopy_requirement": "The system shall be capable of detecting and handling misoperations and invalid operations in flight control to ensure the safety and continuity of flight missions."
    },
    {
        "id": 122,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are response handling measures defined for non-compliant operational procedures?",
        "document_name": "4.json",
        "document_chunk_index": 234,
        "hopy_requirement": "The system shall detect and respond to non-standard operating procedures, such as unauthorized command inputs or abnormal operation sequences, to ensure flight safety."
    },
    {
        "id": 123,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are commonly used default values set when a large number of parameters are configured, in order to reduce configuration workload, and do these default values affect safety?",
        "document_name": "4.json",
        "document_chunk_index": 272,
        "hopy_requirement": "The system shall provide default settings for common flight parameters to reduce the operator's configuration workload and ensure that these default values do not compromise flight safety."
    },
    {
        "id": 124,
        "class": "Task Timing Criteria",
        "safety_criterion": "Is the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
        "document_name": "5.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The flight control system shall ensure consistency between navigation commands and actuator response timing, and all control conditions shall be verified and confirmed."
    },
    {
        "id": 125,
        "class": "Control Calculation Criteria",
        "safety_criterion": "After performing hardware control, is there monitoring to determine whether the hardware state matches the control requirements?",
        "document_name": "2.json",
        "document_chunk_index": 228,
        "hopy_requirement": "The system shall be capable of real-time monitoring and verification of the match between engine control commands and actual hardware status."
    },
    {
        "id": 126,
        "class": "Task Timing Criteria",
        "safety_criterion": "For critical control actions, is there a timeout detection mechanism to handle situations where hardware status does not meet control requirements for an extended period?",
        "document_name": "4.json",
        "document_chunk_index": 117,
        "hopy_requirement": "The system shall have a timeout detection mechanism to ensure that if feedback is not received within a specified time after issuing critical control commands (e.g., attitude adjustment, engine ignition), automatic safety measures are triggered."
    },
    {
        "id": 127,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When issuing hazardous control commands or actions, is there a reasonableness check based on equipment status?",
        "document_name": "4.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system shall perform a reasonableness check on hazardous control commands based on the current aircraft status (e.g., altitude, speed, attitude) to ensure the safety of command execution."
    },
    {
        "id": 128,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Are the fault items covered by fault detection sufficient?",
        "document_name": "5.json",
        "document_chunk_index": 176,
        "hopy_requirement": "The system shall have a comprehensive fault detection mechanism capable of detecting and reporting faults in all key flight systems, including but not limited to engines, navigation systems, and communication systems."
    },
    {
        "id": 129,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Is the detection logic for fault items reasonable, and will the detection method impact normal equipment operation?",
        "document_name": "2.json",
        "document_chunk_index": 246,
        "hopy_requirement": "The system shall have the capability to monitor and diagnose faults in key sensors (e.g., gyroscopes, accelerometers) in real time, and this functionality shall not interfere with normal flight control."
    },
    {
        "id": 130,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Have differentiated alarm and response measures been established for all fault scenarios in the system?",
        "document_name": "1.json",
        "document_chunk_index": 161,
        "hopy_requirement": "The system shall provide differentiated alarms and response measures for different types of faults (e.g., sensor faults, communication faults, power system faults)."
    },
    {
        "id": 131,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Is there false alarm prevention in fault detection, and can it meet the real-time requirements for alarm handling?",
        "document_name": "4.json",
        "document_chunk_index": 198,
        "hopy_requirement": "The system should have real-time fault detection capability and effectively prevent false alarms to ensure the accuracy and timeliness of alarm information."
    },
    {
        "id": 132,
        "class": "Processing Logic Criteria",
        "safety_criterion": "When multiple faults are diagnosed simultaneously, do the handling or reporting strategies conflict with each other?",
        "document_name": "4.json",
        "document_chunk_index": 108,
        "hopy_requirement": "The system should have the capability to diagnose and handle multiple faults, ensuring that they are processed and reported in order of priority when detected simultaneously, avoiding conflicts."
    },
    {
        "id": 133,
        "class": "Processing Logic Criteria",
        "safety_criterion": "When multiple faults are related, can one fault trigger a false alarm for another fault?",
        "document_name": "1.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The system should have fault correlation analysis capabilities to ensure that one fault does not mistakenly trigger alarms for other faults."
    },
    {
        "id": 134,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Is there a clear fault recovery mechanism, and is the mechanism reasonable?",
        "document_name": "5.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system should have a clearly defined fault recovery mechanism to ensure automatic restart and return to a safe state after an aircraft failure."
    },
    {
        "id": 135,
        "class": "Processing Logic Criteria",
        "safety_criterion": "After the power recovery or runaway reset mechanism is initiated, can the system return to normal operation?",
        "document_name": "4.json",
        "document_chunk_index": 129,
        "hopy_requirement": "The system should have the ability to automatically restart and return to normal flight status after power restoration."
    },
    {
        "id": 136,
        "class": "Processing Logic Criteria",
        "safety_criterion": "After system recovery, do the recorded key states still meet real-time requirements?",
        "document_name": "2.json",
        "document_chunk_index": 242,
        "hopy_requirement": "After system recovery, it should ensure that the recording and updating of critical flight status parameters (such as attitude, speed, position) meet real-time requirements."
    },
    {
        "id": 137,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "When redundancy switching conditions are met, will it cause abnormal output values in the currently running functions?",
        "document_name": "5.json",
        "document_chunk_index": 298,
        "hopy_requirement": "The system should ensure that flight control command output values remain stable during the redundancy switching process, avoiding abnormal fluctuations."
    },
    {
        "id": 138,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "When all redundancies fail, does the software handle it correctly?",
        "document_name": "2.json",
        "document_chunk_index": 180,
        "hopy_requirement": "The system should have the capability to switch to a safe mode and issue a fault alarm when all redundant channels fail."
    },
    {
        "id": 139,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If redundancy switching takes too long, does the software handle it correctly?",
        "document_name": "3.json",
        "document_chunk_index": 241,
        "hopy_requirement": "The system should ensure that the backup system seamlessly takes over within 100 milliseconds and resumes normal operation when the primary system fails."
    },
    {
        "id": 140,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If redundancy switching conditions are met but the switch fails, does the software handle it correctly?",
        "document_name": "1.json",
        "document_chunk_index": 200,
        "hopy_requirement": "The system should have the capability to automatically switch to a backup system and record fault information when redundancy switching fails."
    },
    {
        "id": 141,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "Whether the temporal relationships, constraint relationships, concurrent relationships, and combination relationships between control logics of various functional points are correct.",
        "document_name": "5.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system shall ensure the correctness of timing and constraint relationships between navigation and control functions to guarantee the successful execution of flight missions."
    },
    {
        "id": 142,
        "class": "Parallel Relationship Criteria",
        "safety_criterion": "If multiple functional points can be executed simultaneously, analyze whether these functional points may operate the same actuator.",
        "document_name": "4.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system shall ensure that no conflicting operations are generated on the same actuator (e.g., servo, engine) when multiple control commands are issued simultaneously."
    },
    {
        "id": 143,
        "class": "Task Timing Criteria",
        "safety_criterion": "If there is a temporal relationship between multiple functional points, analyze whether there may be an abnormal path that prevents the accurate realization of the temporal relationship between the functional points.",
        "document_name": "1.json",
        "document_chunk_index": 99,
        "hopy_requirement": "The system shall ensure the accurate temporal relationship between navigation and control commands during different flight phases to prevent control failure caused by timing anomalies."
    },
    {
        "id": 144,
        "class": "State Scenario Criteria",
        "safety_criterion": "Are the entry conditions, exit conditions, and constraint conditions of each mode sufficient and accurate?",
        "document_name": "5.json",
        "document_chunk_index": 100,
        "hopy_requirement": "The system shall ensure the sufficiency and accuracy of entry conditions, exit conditions, and constraint conditions during transitions between different flight modes (e.g., cruise, climb, descent)."
    },
    {
        "id": 145,
        "class": "Operating State Criteria",
        "safety_criterion": "Are the entry conditions and exit conditions of each mode consistent?",
        "document_name": "1.json",
        "document_chunk_index": 233,
        "hopy_requirement": "The system shall ensure the consistency of entry and exit conditions during transitions between different flight modes to prevent mode transition errors."
    },
    {
        "id": 146,
        "class": "State Scenario Criteria",
        "safety_criterion": "For mutually transferable operational modes, do any abnormal situations exist such as simultaneous transfer from one operational mode to multiple operational modes, or failure to meet temporal or condition constraints during mode transfers?",
        "document_name": "2.json",
        "document_chunk_index": 103,
        "hopy_requirement": "The flight control system shall ensure that all timing and condition constraints are met during transitions between different flight modes to avoid mode transition anomalies."
    },
    {
        "id": 147,
        "class": "State Scenario Criteria",
        "safety_criterion": "Analyze whether there exists any potential abnormal path between non-transferable operational modes that could lead to state transitions between them.",
        "document_name": "5.json",
        "document_chunk_index": 272,
        "hopy_requirement": "The system shall ensure that unauthorized mode transition paths do not exist during transitions between different flight modes to prevent unintended mode switching."
    },
    {
        "id": 148,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "When abnormal external factors occur (e.g., high sea states, severe weather conditions), does the software make appropriate judgments and handling decisions?",
        "document_name": "2.json",
        "document_chunk_index": 192,
        "hopy_requirement": "The flight control system shall automatically adjust flight parameters upon detecting high sea states or adverse weather conditions to ensure flight safety."
    },
    {
        "id": 149,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Could the execution process of functions under different operating scenarios potentially cause hazards?",
        "document_name": "2.json",
        "document_chunk_index": 285,
        "hopy_requirement": "The system shall ensure the safety and consistency of flight control commands across different flight modes (e.g., automatic, manual, emergency)."
    },
    {
        "id": 150,
        "class": "Task Timing Criteria",
        "safety_criterion": "What hazards might be triggered by various control functions during the transition between system operating scenarios?",
        "document_name": "2.json",
        "document_chunk_index": 257,
        "hopy_requirement": "During transitions between different flight modes (e.g., takeoff, cruise, landing), the system shall ensure continuity and stability of all control functions (e.g., autopilot, navigation, communication) to prevent control failures or erroneous operations caused by mode transitions."
    },
    {
        "id": 151,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Have the system safety requirements related to software been adequately and accurately implemented in the software requirements or design documents?",
        "document_name": "3.json",
        "document_chunk_index": 305,
        "hopy_requirement": "Flight control software shall ensure that all safety-related parameters (such as attitude angle, speed, altitude, etc.) are adequately and accurately defined and implemented in the requirements and design documents."
    },
    {
        "id": 152,
        "class": "Communication Criteria",
        "safety_criterion": "Dangerous commands must only be issued by the control application, maintenance personnel, ground systems, or authorized controllers",
        "document_name": "2.json",
        "document_chunk_index": 250,
        "hopy_requirement": "Flight control system shall ensure that all dangerous commands (e.g., emergency landing, engine shutdown) can only be issued by authorized ground control stations or maintenance personnel."
    },
    {
        "id": 153,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prerequisites (correct mode, correct configuration, component availability, appropriate sequence, and parameters within range) must be satisfied before executing a command considered dangerous",
        "document_name": "1.json",
        "document_chunk_index": 125,
        "hopy_requirement": "The flight control system must verify current mode, configuration, component status, and parameter ranges meet safety requirements before executing critical operations (e.g., attitude adjustment, engine ignition)."
    },
    {
        "id": 154,
        "class": "Task Timing Criteria",
        "safety_criterion": "Cancellation or withdrawal of a command requires multiple steps",
        "document_name": "1.json",
        "document_chunk_index": 281,
        "hopy_requirement": "The flight control system shall have a multi-step confirmation mechanism to ensure that cancellation or withdrawal of critical commands (e.g., emergency landing, course change) requires multiple confirmation steps."
    },
    {
        "id": 155,
        "class": "Communication Criteria",
        "safety_criterion": "Software executing dangerous commands must notify the initiator, ground operators, authorized controllers, or provide reasons for execution failure",
        "document_name": "4.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system shall be capable of real-time notification to the ground control center and authorized operators regarding the execution status of dangerous commands, including reasons for success or failure."
    },
    {
        "id": 156,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "All software constraints associated with dangerous commands must be verified by a single validator (verification criterion)",
        "document_name": "2.json",
        "document_chunk_index": 133,
        "hopy_requirement": "The system shall ensure that all software instructions related to dangerous operations (e.g., engine ignition, attitude adjustment) must be validated through a unique validation module."
    },
    {
        "id": 157,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The usage rules and valid value definitions for each software constraint command associated with danger must be consistent",
        "document_name": "5.json",
        "document_chunk_index": 152,
        "hopy_requirement": "The system shall ensure consistency in the usage rules and valid value definitions for all software constraint commands related to flight safety (e.g., speed limits, altitude limits)."
    },
    {
        "id": 158,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "When software constraints related to dangerous commands are not active, the software must have the ability to regain control of affected operations",
        "document_name": "2.json",
        "document_chunk_index": 203,
        "hopy_requirement": "The system shall automatically recover control of the aircraft when software constraints for critical flight control commands (e.g., emergency landing, attitude adjustment) fail."
    },
    {
        "id": 159,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Safety prerequisites must be met before executing a determined dangerous command",
        "document_name": "2.json",
        "document_chunk_index": 180,
        "hopy_requirement": "Before executing an engine ignition command, the system shall verify that all relevant sensors are operating normally and there are no fault alarms."
    },
    {
        "id": 160,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Dangerous commands should only be issued by a single control software function",
        "document_name": "4.json",
        "document_chunk_index": 289,
        "hopy_requirement": "Flight control system shall ensure that all dangerous commands (e.g., emergency landing, engine shutdown) are issued exclusively by the main control software module."
    },
    {
        "id": 161,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software must be designed or perform system-level checks upon power-up to verify that the system is safe and operating correctly before powering any safety-critical functions, including hardware controlled by the software. Regular tests must be conducted by the software to monitor the system's safety status.",
        "document_name": "5.json",
        "document_chunk_index": 181,
        "hopy_requirement": "The flight control system must perform a system-level self-test upon each startup to ensure all safety-critical hardware and software components are functioning properly, and conduct periodic health monitoring during flight."
    },
    {
        "id": 162,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Any replaceable units or components used in the power-on self-test of the software (including firmware) must be dedicated exclusively to the processing of this single system.",
        "document_name": "1.json",
        "document_chunk_index": 271,
        "hopy_requirement": "The spacecraft's flight control software must ensure that all replaceable components used during power-on self-test are used solely for the processing of that spacecraft and not shared with other systems."
    },
    {
        "id": 163,
        "class": "Operating State Criteria",
        "safety_criterion": "The power-on self-test of software (including firmware) used for any replaceable unit or component must conclude in a safe state.",
        "document_name": "4.json",
        "document_chunk_index": 90,
        "hopy_requirement": "The system must ensure that during the power-on self-test of any replaceable unit or component (e.g., sensors, controllers), faults can be automatically detected and reported, and the system enters a safe mode if a fault is detected."
    },
    {
        "id": 164,
        "class": "Operating State Criteria",
        "safety_criterion": "The software must be able to initialize, start, and restart replaceable units into a safe state.",
        "document_name": "3.json",
        "document_chunk_index": 119,
        "hopy_requirement": "During initialization, startup, and restart, the flight control system must ensure that all critical subsystems (e.g., navigation, communication, propulsion) are placed in a safe state."
    },
    {
        "id": 165,
        "class": "Task Timing Criteria",
        "safety_criterion": "The software's power-on self-test must be limited to a single system process controlled by the accepted self-test components.",
        "document_name": "4.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The flight control software must perform a self-test at startup to ensure all critical components and subsystems are functioning normally, and the self-test process must be controlled by a single system process."
    },
    {
        "id": 166,
        "class": "Data Criteria",
        "safety_criterion": "Input data only once. Ensure that a user needs to input specific data only once, after which the computer can access and reuse this data as needed for the same or different tasks.",
        "document_name": "4.json",
        "document_chunk_index": 243,
        "hopy_requirement": "The flight mission management system should support one-time entry of flight mission parameters by users, with automatic saving and reuse of these parameters in subsequent missions."
    },
    {
        "id": 167,
        "class": "Data Criteria",
        "safety_criterion": "Data input via primary display. When data input is crucial to the user's task, the entered data should be displayed on the user's primary display.",
        "document_name": "5.json",
        "document_chunk_index": 117,
        "hopy_requirement": "The flight control interface should display key flight parameters and operational commands in real time, ensuring pilots can promptly view and confirm input data."
    },
    {
        "id": 168,
        "class": "Data Criteria",
        "safety_criterion": "Feedback during data input. Provide visible feedback for all user activities during the data input process, displaying the input data step by step.",
        "document_name": "5.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The flight control system should display the input status of all flight parameters in real time and provide clear feedback upon completion of each parameter entry."
    },
    {
        "id": 169,
        "class": "Timing Criteria",
        "safety_criterion": "Fast response. Ensure the computer responds quickly to data input activities so that the user is not delayed due to computer response lag; for normal operations, feedback delay should not exceed 0.2 seconds.",
        "document_name": "4.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The flight control system should ensure that it completes responses and provides feedback on control results within 0.2 seconds after receiving commands from the pilot or an automated system."
    },
    {
        "id": 170,
        "class": "Data Criteria",
        "safety_criterion": "Single method for data input. Design data input processing and display such that a user can input data using a single method without switching to other methods.",
        "document_name": "4.json",
        "document_chunk_index": 190,
        "hopy_requirement": "The flight control panel should support direct input and adjustment of flight parameters by pilots through a single input method (e.g., touchscreen or physical buttons), without requiring switching between input modes."
    },
    {
        "id": 171,
        "class": "Data Criteria",
        "safety_criterion": "Define a display area for data input. Data input should only be allowed in specific areas of the electronic display, such as within a form, and provide a clear definition of the input area.",
        "document_name": "1.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The flight control system's data display and input should be limited to designated areas on the electronic display to ensure accuracy and traceability of data input."
    },
    {
        "id": 172,
        "class": "Data Criteria",
        "safety_criterion": "Consistent data editing methods. When entering critical data, always allow users to change previous inputs using deletion and insertion methods when necessary (including displayed default values); if data changes are completed through character replacement (overwriting) at certain times, this method should always be available.",
        "document_name": "3.json",
        "document_chunk_index": 224,
        "hopy_requirement": "Flight control software should provide consistent data input methods that allow operators to change critical flight parameters via deletion and insertion when necessary."
    },
    {
        "id": 173,
        "class": "Data Criteria",
        "safety_criterion": "User-paced data input. Allow users to input data at their own pace, rather than having the computer process or external activities control the pace.",
        "document_name": "3.json",
        "document_chunk_index": 222,
        "hopy_requirement": "The system should allow ground control personnel to input flight commands at their own pace to ensure command accuracy and timeliness."
    },
    {
        "id": 174,
        "class": "Data Criteria",
        "safety_criterion": "Explicit input initiation. Always require a user to perform an explicit input action to begin the data input process; do not initiate the process as a side effect of another activity.",
        "document_name": "3.json",
        "document_chunk_index": 271,
        "hopy_requirement": "The flight control system should require pilots to use an explicit input command to start the navigation data update process, ensuring it does not start automatically due to the side effects of other operations."
    },
    {
        "id": 175,
        "class": "Data Criteria",
        "safety_criterion": "Input key labeling. Clearly label input keys to indicate their functions.",
        "document_name": "2.json",
        "document_chunk_index": 127,
        "hopy_requirement": "Each input key on the cockpit control panel should have a clear label indicating its function to ensure pilots can operate quickly and accurately in emergencies."
    },
    {
        "id": 176,
        "class": "Data Criteria",
        "safety_criterion": "Explicit cancellation action. Require a user to perform an explicit action to cancel a data input; data cancellation should not occur as a side effect of another activity.",
        "document_name": "3.json",
        "document_chunk_index": 267,
        "hopy_requirement": "The flight control system should provide an explicit user interface option allowing pilots to manually cancel navigation data input in emergencies."
    },
    {
        "id": 177,
        "class": "Data Criteria",
        "safety_criterion": "Feedback upon successful data input. If input is successful, ensure the computer responds with a confirmation message indicating completion of the data input process; if unsuccessful, provide an error prompt.",
        "document_name": "5.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The flight control system should confirm the status of navigation data input in real-time, sending a confirmation message upon success and providing an error prompt upon failure."
    },
    {
        "id": 178,
        "class": "Data Criteria",
        "safety_criterion": "Feedback for repeated data input. For repetitive data input completed through continuous processing, indicate successful input by regenerating the entered data on the display and automatically clearing it to prepare for the next input.",
        "document_name": "2.json",
        "document_chunk_index": 130,
        "hopy_requirement": "The flight control system's data display module should be able to display and confirm each navigation data input in real time and automatically clear the input field after successful input to prepare for the next entry."
    },
    {
        "id": 179,
        "class": "Data Criteria",
        "safety_criterion": "Feedback when changing data. If a user needs to change (delete) a data item that is currently not displayed, provide the user with an option to view the current value before confirming the change.",
        "document_name": "4.json",
        "document_chunk_index": 161,
        "hopy_requirement": "The flight control system should provide real-time data update and confirmation functionality to ensure that when changing critical flight parameters (such as heading, altitude, speed), the user can view the current values and confirm changes."
    },
    {
        "id": 180,
        "class": "Data Criteria",
        "safety_criterion": "Keep data items simple. For encoded data, numbers, etc., keep data input short, with individual items not exceeding 5-7 characters in length.",
        "document_name": "3.json",
        "document_chunk_index": 149,
        "hopy_requirement": "The flight control system should ensure that all critical parameter (e.g., altitude, speed, heading) inputs do not exceed 5-7 characters to reduce input errors and improve data processing efficiency."
    },
    {
        "id": 181,
        "class": "Data Criteria",
        "safety_criterion": "Splitting long data items\nWhen a long data item must be input, the long data item should be split into shorter symbol groups for input and display.",
        "document_name": "4.json",
        "document_chunk_index": 96,
        "hopy_requirement": "Flight mission data (e.g., trajectory, command sequence) should be divided into shorter segments to ensure accuracy and readability during input and display."
    },
    {
        "id": 182,
        "class": "Data Criteria",
        "safety_criterion": "Optional abbreviations\nAllow expert users to use optional abbreviations for lengthened data items to simplify critical data input (when these data items do not cause ambiguity).",
        "document_name": "2.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system should support expert users in using abbreviations to simplify the input of flight mission parameters, ensuring improved operational efficiency without causing ambiguity."
    },
    {
        "id": 183,
        "class": "Data Criteria",
        "safety_criterion": "Distinct abbreviations\nWhen defining abbreviations or other codes to shorten input data, choose distinct ones to avoid confusion between similar items.",
        "document_name": "5.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The system should use distinct abbreviations to identify different flight modes and statuses to avoid confusion and misoperation."
    },
    {
        "id": 184,
        "class": "Data Criteria",
        "safety_criterion": "Simple abbreviation rules\nWhen defining abbreviations, confirm some simple abbreviation rules to ensure that users can understand these rules.",
        "document_name": "4.json",
        "document_chunk_index": 171,
        "hopy_requirement": "The system should use standardized abbreviation rules to define and document flight mission parameters and status codes to ensure all operators can accurately understand and use them."
    },
    {
        "id": 185,
        "class": "Data Criteria",
        "safety_criterion": "Minimal exceptions to abbreviation rules\nOnly use special abbreviation rules when necessary for clarity (e.g., when there is no unified rule).",
        "document_name": "3.json",
        "document_chunk_index": 248,
        "hopy_requirement": "In flight control software, unified abbreviation rules should be used unless special abbreviation rules are required to improve code readability and clarity."
    },
    {
        "id": 186,
        "class": "Data Criteria",
        "safety_criterion": "Minimum deviation from abbreviation rules\nWhen an abbreviation must deviate from consistent rules, minimize the degree of deviation.",
        "document_name": "4.json",
        "document_chunk_index": 159,
        "hopy_requirement": "The system should ensure minimal deviation from standard naming rules when using abbreviations to reduce operator misunderstanding and operational errors."
    },
    {
        "id": 187,
        "class": "Data Criteria",
        "safety_criterion": "Fixed abbreviation length\nMake abbreviations of the same length; abbreviations should be as short as possible while ensuring uniqueness.",
        "document_name": "4.json",
        "document_chunk_index": 144,
        "hopy_requirement": "The system should use fixed-length abbreviations to identify different flight missions and operation modes, ensuring abbreviations are unique and as concise as possible."
    },
    {
        "id": 188,
        "class": "Data Criteria",
        "safety_criterion": "Clarifying unrecognized abbreviations\nWhen the computer cannot recognize an abbreviated data input, ask the user to resolve any ambiguities when necessary.",
        "document_name": "5.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The flight control system should have the capability to identify and handle unrecognized abbreviated navigation data inputs, prompting the operator for confirmation via the man-machine interface when necessary."
    },
    {
        "id": 189,
        "class": "Data Criteria",
        "safety_criterion": "Prompting data input\nProvide prompts for the required format and acceptable values for data input.",
        "document_name": "3.json",
        "document_chunk_index": 227,
        "hopy_requirement": "The system should provide clear prompt messages guiding operators to input correct flight parameters and command formats."
    },
    {
        "id": 190,
        "class": "Data Criteria",
        "safety_criterion": "Character input via single key\nAllow the user to input each character of a data item by pressing a properly labeled key once.",
        "document_name": "2.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The flight control panel should support single-key input for critical flight parameters such as heading, altitude, and speed."
    },
    {
        "id": 191,
        "class": "Data Criteria",
        "safety_criterion": "Minimum Keystrokes\nDesign data input processing to minimize the need for keystrokes during data entry.",
        "document_name": "2.json",
        "document_chunk_index": 205,
        "hopy_requirement": "The flight control system shall be designed with a simplified human-machine interface to ensure that pilots can quickly and accurately perform critical parameter input and adjustments in emergency situations."
    },
    {
        "id": 192,
        "class": "Data Criteria",
        "safety_criterion": "Case Insensitivity\nTreat uppercase and lowercase characters equivalently for encoded data input.",
        "document_name": "3.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The ground control station shall be capable of receiving and processing commands and data from satellites regardless of their case format, ensuring correct execution of commands."
    },
    {
        "id": 193,
        "class": "Data Criteria",
        "safety_criterion": "Optional Decimal Point\nAllow optional entry or omission of a decimal point at the end of an integer as an equivalent alternative.",
        "document_name": "4.json",
        "document_chunk_index": 257,
        "hopy_requirement": "The navigation system shall support optional entry or omission of a decimal point when entering flight parameters to improve operational convenience."
    },
    {
        "id": 194,
        "class": "Data Criteria",
        "safety_criterion": "Leading Zero Optional\nFor numeric data, allow optional entry or omission of leading zeros as equivalent alternatives.",
        "document_name": "4.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system shall support omission of leading zeros during navigation data input to ensure correct and consistent data parsing."
    },
    {
        "id": 195,
        "class": "Data Criteria",
        "safety_criterion": "Single or Multiple Spaces Equivalent\nTreat single or multiple spaces equivalently during data input; do not require users to count spaces.",
        "document_name": "1.json",
        "document_chunk_index": 223,
        "hopy_requirement": "The ground control station software shall be able to process data inputs from different sensors, correctly parsing and handling them whether they contain a single space or multiple spaces."
    },
    {
        "id": 196,
        "class": "Data Criteria",
        "safety_criterion": "Assisted Entry of Hierarchical Data\nIf a user must enter hierarchical data, provide computer assistance to help clarify the relationships within the hierarchy.",
        "document_name": "5.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The flight mission planning system shall provide auxiliary tools to help users clearly define the hierarchical relationships between mission parameters, ensuring correctness and consistency of parameters."
    },
    {
        "id": 197,
        "class": "Communication Criteria",
        "safety_criterion": "Software shall immediately notify maintenance personnel, operators, and authorized controllers after executing automatic hazardous or safety-related actions.",
        "document_name": "4.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The flight control system shall immediately notify the ground control center, pilot, and authorized maintenance personnel after executing automatic emergency landing or safety procedures."
    },
    {
        "id": 198,
        "class": "Communication Criteria",
        "safety_criterion": "When software is informed or detects hardware failures, software faults, or inconsistencies between configuration and current operating status that could lead to system failure, it must notify maintenance personnel, operators, and authorized controllers.",
        "document_name": "4.json",
        "document_chunk_index": 98,
        "hopy_requirement": "The system shall detect and report in real time any hardware faults or software anomalies that may cause flight mission failure, and immediately notify the ground control center, pilot, and maintenance personnel."
    },
    {
        "id": 199,
        "class": "Communication Criteria",
        "safety_criterion": "Automatic recovery actions must notify maintenance personnel, operators, and authorized controllers, but no further response from them regarding the execution of recovery actions is required.",
        "document_name": "5.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The system shall automatically detect and recover flight control system faults, and immediately notify the ground control station, pilot, and authorized maintenance personnel after recovery."
    },
    {
        "id": 200,
        "class": "Communication Criteria",
        "safety_criterion": "If prerequisites are not met, software must reject command execution and issue an alert to maintenance personnel, operators, and authorized controllers.",
        "document_name": "2.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The flight control system shall reject flight mission command execution when detecting that critical parameters (such as altitude, speed, attitude angle) have not reached preset safety ranges, and send alert information to the ground control station, pilot, and authorized maintenance personnel."
    },
    {
        "id": 201,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software shall provide all available software control constraints to maintenance personnel, operators, and authorized control executors.",
        "document_name": "2.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system shall provide flight control parameters and limitations to maintenance personnel, operators, and authorized control executors."
    },
    {
        "id": 202,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software must accept and process commands from maintenance personnel, operators, and authorized control executors to activate or deactivate software control constraints.",
        "document_name": "5.json",
        "document_chunk_index": 178,
        "hopy_requirement": "The system shall be capable of receiving and processing instructions from the ground control center and authorized operators to activate or deactivate flight control constraints."
    },
    {
        "id": 203,
        "class": "Communication Criteria",
        "safety_criterion": "The software must provide warnings and alarm conditions to maintenance personnel, operators, and authorized control executors.",
        "document_name": "1.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The system shall send warning and alarm messages regarding abnormal aircraft status to the ground control station and onboard operators in real time."
    },
    {
        "id": 204,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The software must provide maintenance personnel or operators with the ability to forcibly execute automatic protection, isolation, or switching functions.",
        "document_name": "2.json",
        "document_chunk_index": 290,
        "hopy_requirement": "The system shall provide an automatic protection function to ensure that faulty components are isolated and switched to backup systems upon detection of anomalies."
    },
    {
        "id": 205,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The software must provide maintenance personnel or operators with the ability to forcibly terminate any automatic protection, isolation, or switching functions.",
        "document_name": "4.json",
        "document_chunk_index": 299,
        "hopy_requirement": "The system shall provide mechanisms for maintenance personnel or operators to manually terminate automatic protection, isolation, or switching functions."
    },
    {
        "id": 206,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The software must provide maintenance personnel or operators with the ability to restore any automatic protection, isolation, or switching functions to a previous state or configuration.",
        "document_name": "5.json",
        "document_chunk_index": 270,
        "hopy_requirement": "The system shall allow maintenance personnel or operators to manually restore the protection, isolation, or switching functions of the flight control system, ensuring rapid recovery to a previous safe state or configuration in case of automatic mode failure."
    },
    {
        "id": 207,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The software must provide maintenance personnel or operators with the ability to forcibly override automatic protection, isolation, or switching functions.",
        "document_name": "4.json",
        "document_chunk_index": 282,
        "hopy_requirement": "The system shall provide maintenance personnel or operators with the capability to manually override automatic protection, isolation, or switching functions to respond to emergency situations."
    },
    {
        "id": 208,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Software functions requiring operation must be authorized and approved.",
        "document_name": "1.json",
        "document_chunk_index": 153,
        "hopy_requirement": "Any operation of the flight control system software must be authorized to ensure that only authorized personnel can perform critical operations."
    },
    {
        "id": 209,
        "class": "Task Timing Criteria",
        "safety_criterion": "The software must be designed so that the operator can cancel current processing with a single action and return the system to a designed safe state.",
        "document_name": "4.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The flight control system shall provide an emergency stop function allowing the operator to immediately stop the current task and return the system to a safe standby state with a single button press."
    },
    {
        "id": 210,
        "class": "Data Criteria",
        "safety_criterion": "The software shall provide maintenance personnel or operators with the software control status related to hazardous commands.",
        "document_name": "1.json",
        "document_chunk_index": 193,
        "hopy_requirement": "The system shall provide real-time display and recording of the status of critical flight control commands to ensure that maintenance personnel or operators can view and confirm the execution status of hazardous commands at any time."
    },
    {
        "id": 211,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software must be able to detect incorrect operator inputs or operations and prevent the execution of safety-critical functions resulting from such errors.",
        "document_name": "3.json",
        "document_chunk_index": 103,
        "hopy_requirement": "The flight control system should be capable of detecting and rejecting invalid pilot commands to prevent flight path deviations or system failures caused by misoperations."
    },
    {
        "id": 212,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Rewrite commands require at least two independent actions from the operator.",
        "document_name": "1.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The flight control system should require the operator to perform two independent confirmation actions to execute rewrite commands for critical flight parameters."
    },
    {
        "id": 213,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software should provide maintenance personnel or operators with the function to manually terminate or disable automatic protection.",
        "document_name": "4.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system should provide maintenance personnel or operators with the option to manually terminate or disable autopilot functions to ensure immediate takeover in emergency situations."
    },
    {
        "id": 214,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Safety-critical functions should be detectable, isolatable, and recoverable to prevent catastrophic or severe hazard events.",
        "document_name": "3.json",
        "document_chunk_index": 184,
        "hopy_requirement": "The flight control system should have the capability to monitor sensors in real time and automatically isolate faulty ones, switching to backup sensors upon detection of faults to ensure flight safety."
    },
    {
        "id": 215,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Software must perform automatic failure detection, isolation, and recovery for known safety-critical functions continuously for 24 hours depending on the severity of the hazard.",
        "document_name": "1.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The flight control system should have uninterrupted 24-hour automatic failure detection, isolation, and recovery capabilities to ensure the safe execution of critical flight missions."
    },
    {
        "id": 216,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Failure detection, isolation, and recovery software must reside on an available, fault-free detection platform that is separate from the platform of the monitored function.",
        "document_name": "1.json",
        "document_chunk_index": 269,
        "hopy_requirement": "The flight control system should have an independent fault detection and isolation module that operates on a hardware platform separate from the main control module to ensure reliable and independent fault detection."
    },
    {
        "id": 217,
        "class": "Task Timing Criteria",
        "safety_criterion": "The software should process necessary commands within the time frame that could lead to a severe hazard event.",
        "document_name": "1.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The flight control system must respond to and process all critical flight commands within 50 milliseconds to prevent potential serious flight accidents."
    },
    {
        "id": 218,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software must provide independent and unique commands to control each software-controllable constraint.",
        "document_name": "4.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The flight control system should provide independent and unique commands to control each control surface and engine thrust."
    },
    {
        "id": 219,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The software must simultaneously identify and report each software constraint associated with hazardous commands.",
        "document_name": "5.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The flight control software should be capable of identifying and reporting all software constraints associated with hazardous commands (e.g., emergency landing, engine shutdown)."
    },
    {
        "id": 220,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The software must provide current status of software constraints related to hazardous commands to maintenance personnel, operators, and control actuators.",
        "document_name": "4.json",
        "document_chunk_index": 208,
        "hopy_requirement": "The flight control system should be able to provide ground control stations and operators with real-time updates on the current flight status and the status of software constraints related to hazardous commands."
    },
    {
        "id": 221,
        "class": "Control Calculation Criteria",
        "safety_criterion": "If an automatic sequence has already started execution before constraints associated with software hazardous commands are activated, then it must complete in entirety before the software constraints are executed",
        "document_name": "1.json",
        "document_chunk_index": 220,
        "hopy_requirement": "Flight control software shall ensure that all ongoing automatic sequences (e.g., autonomous navigation) must complete before constraints for hazardous commands (e.g., emergency landing) are enforced."
    },
    {
        "id": 222,
        "class": "Operating State Criteria",
        "safety_criterion": "After cancellation operations, the state of software constraints must remain unchanged",
        "document_name": "5.json",
        "document_chunk_index": 231,
        "hopy_requirement": "After mission abort or cancellation, flight control system shall maintain current flight state parameters unchanged to ensure aircraft safety and stability."
    },
    {
        "id": 223,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Software must provide error handling support for safety-critical functions",
        "document_name": "5.json",
        "document_chunk_index": 172,
        "hopy_requirement": "Flight control system shall have real-time monitoring and processing capability for critical sensor faults, ensuring safe switching to backup sensors or entering a safe mode upon sensor failure."
    },
    {
        "id": 224,
        "class": "Redundancy Criteria",
        "safety_criterion": "Software must provide fault tolerance mechanisms to prevent errors from propagating across interfaces of alternative units",
        "document_name": "4.json",
        "document_chunk_index": 278,
        "hopy_requirement": "Flight control system shall have redundant design to ensure that backup components can seamlessly take over when a single component fails, guaranteeing continuity and safety of flight missions."
    },
    {
        "id": 225,
        "class": "Data Criteria",
        "safety_criterion": "Hazardous loads must provide failure conditions and data to the core software system, which monitors load status and reports failures",
        "document_name": "5.json",
        "document_chunk_index": 246,
        "hopy_requirement": "The system shall be able to monitor engine load status in real time and report failure information to the core flight control system upon detecting anomalies."
    },
    {
        "id": 226,
        "class": "Control Calculation Criteria",
        "safety_criterion": "For cases where software alone is used to mitigate hazards, software must require two independent command notifications for the system to execute severe or fatal hazard actions",
        "document_name": "5.json",
        "document_chunk_index": 254,
        "hopy_requirement": "Flight control system must receive two independent command notifications when executing critical operations (e.g., engine ignition, attitude adjustment) to ensure correctness and safety of operations."
    },
    {
        "id": 227,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software must require two independent operational actions to initialize or terminate system functions that may cause serious hazards",
        "document_name": "1.json",
        "document_chunk_index": 145,
        "hopy_requirement": "Flight control system shall have a dual confirmation mechanism to ensure that initiation or termination of critical operations (e.g., engine ignition, emergency landing) requires two independent command confirmations."
    },
    {
        "id": 228,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software must require three independent operational actions to initialize or terminate system functions that may cause fatal hazards",
        "document_name": "2.json",
        "document_chunk_index": 260,
        "hopy_requirement": "Flight control system must initiate or terminate system functions that may cause fatal hazards, such as emergency landing or engine shutdown, through three independent operational actions."
    },
    {
        "id": 229,
        "class": "Task Timing Criteria",
        "safety_criterion": "Software must provide correct processing order (including timing) of safety-critical commands",
        "document_name": "3.json",
        "document_chunk_index": 140,
        "hopy_requirement": "Flight control software must ensure that navigation and control commands are executed in strict accordance with predetermined safety-critical mission requirements regarding sequence and timing."
    },
    {
        "id": 230,
        "class": "Operating State Criteria",
        "safety_criterion": "Software must terminate in a safe system state",
        "document_name": "1.json",
        "document_chunk_index": 134,
        "hopy_requirement": "In emergency situations, flight control system shall be able to automatically switch to safe mode, ensuring aircraft stability and executing pre-set safe landing procedures."
    },
    {
        "id": 231,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When hardware fails, software faults cause system failure, or the software detects that the configuration is inconsistent with the current operating state, the software must have the capability to place the system in a safe state.",
        "document_name": "4.json",
        "document_chunk_index": 191,
        "hopy_requirement": "In the event of critical hardware component failure (e.g., navigation system, communication module), the software should automatically switch the aircraft into a safe mode to ensure stable operation and attempt to restore communication."
    },
    {
        "id": 232,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Real-time processing of hazards and safety based on criticality levels that are unsuitable for human intervention must be automated.",
        "document_name": "4.json",
        "document_chunk_index": 215,
        "hopy_requirement": "The system should have the ability to automatically detect and handle abnormal critical flight parameters, ensuring real-time adjustment of the flight status without human intervention."
    },
    {
        "id": 233,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Useless or informal code must not cause critical or catastrophic hazards.",
        "document_name": "5.json",
        "document_chunk_index": 235,
        "hopy_requirement": "Flight control software should ensure all code is formal and verified, prohibiting the use of unauthorized or informal code to prevent critical or catastrophic impacts on flight safety."
    },
    {
        "id": 234,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "All safety-critical elements (requirements, design, code, and interfaces) must be marked as 'safety-critical.'",
        "document_name": "5.json",
        "document_chunk_index": 92,
        "hopy_requirement": "All software modules and interfaces involving flight control and navigation systems must be marked as 'safety-critical' and undergo rigorous safety review and testing."
    },
    {
        "id": 235,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When unsafe conditions are detected, the software must return the hardware subsystem items under its control to a specified safe state.",
        "document_name": "4.json",
        "document_chunk_index": 137,
        "hopy_requirement": "Upon detection of a navigation system fault, the autopilot should immediately switch to backup navigation mode and ensure the aircraft returns to a predefined safe landing point."
    },
    {
        "id": 236,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The restoration of safety interlocks that were removed, prohibited from use, or bypassed during testing or training must be verified by the software before resuming or restarting operations.",
        "document_name": "1.json",
        "document_chunk_index": 169,
        "hopy_requirement": "After ground testing and training of the spacecraft, the restoration status of all safety interlocks must be verified by the software to ensure their functionality is normal before restarting or running."
    },
    {
        "id": 237,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Software must ensure that all detected system errors are recorded. Errors in safety-critical routines must be highlighted and must attract operator attention as soon as possible after they occur.",
        "document_name": "5.json",
        "document_chunk_index": 129,
        "hopy_requirement": "The flight control system should record all detected system errors in real time and immediately notify the operator via visual and auditory alarms when errors are detected in safety-critical routines."
    },
    {
        "id": 238,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software control of critical functions must have a feedback mechanism that provides positive indication of the function's execution.",
        "document_name": "2.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The flight control system should have a real-time feedback mechanism to ensure the execution status of navigation and control commands can be accurately monitored and recorded."
    },
    {
        "id": 239,
        "class": "Task Timing Criteria",
        "safety_criterion": "Systems and software must be designed to ensure that safety requirements are not violated under peak load conditions.",
        "document_name": "5.json",
        "document_chunk_index": 221,
        "hopy_requirement": "Under maximum mission load, the flight control system should ensure real-time monitoring and adjustment of all safety-critical parameters (e.g., attitude, speed, altitude) to prevent potential flight risks."
    },
    {
        "id": 240,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software must be designed to ensure safety during power failure or power-off situations, performing an orderly system shutdown to avoid potentially unsafe states.",
        "document_name": "4.json",
        "document_chunk_index": 229,
        "hopy_requirement": "In the event of a power failure or power-off, the flight control system should safely and orderly shut down to ensure the aircraft does not enter an unsafe state."
    },
    {
        "id": 241,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The software must be designed to prevent unauthorized systems or subsystems from initiating or continuing sequences of safety-critical function commands.",
        "document_name": "1.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system should have the capability to prevent unauthorized ground stations or subsystems from initiating or continuing critical flight operation commands."
    },
    {
        "id": 242,
        "class": "Control Calculation Criteria",
        "safety_criterion": "System design must prevent unauthorized or unintended access to or modification of software and object code, including preventing self-modification of code.",
        "document_name": "1.json",
        "document_chunk_index": 267,
        "hopy_requirement": "The flight control system should have mechanisms in place to prevent unauthorized access and modification of flight control software and object code, ensuring code integrity and security."
    },
    {
        "id": 243,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Software design must consider known component failure modes and incorporate checking mechanisms into the software to detect failures.",
        "document_name": "4.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The flight control system should have the capability to monitor the health status of key sensors and actuators in real time and automatically switch to a backup system upon detecting a failure."
    },
    {
        "id": 244,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Decision statements in safety-critical computational system functions must not rely on all-ones or all-zeros inputs, especially when this information is obtained from external sensors.",
        "document_name": "2.json",
        "document_chunk_index": 194,
        "hopy_requirement": "The flight control system should ensure that decision statements in all safety-critical computations do not depend on all-ones or all-zeros sensor inputs."
    },
    {
        "id": 245,
        "class": "Redundancy Criteria",
        "safety_criterion": "External functions requiring two or more safety-critical signals from software must not receive all required signals from a single input/output register or buffer.",
        "document_name": "2.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The flight control system should ensure that redundant safety-critical signals (e.g., attitude, speed, altitude) from different sensors do not share the same input/output register or buffer."
    },
    {
        "id": 246,
        "class": "Data Criteria",
        "safety_criterion": "The full-scale and zero representation of software must be fully compatible with any digital-to-analog, analog-to-digital, digital-to-synchro, and synchro-to-digital converters.",
        "document_name": "5.json",
        "document_chunk_index": 176,
        "hopy_requirement": "The flight control system should ensure that the full-scale and zero representations of all digital-to-analog and analog-to-digital converters are fully compatible with other components in the system to guarantee accurate signal transmission and processing."
    },
    {
        "id": 247,
        "class": "Task Timing Criteria",
        "safety_criterion": "Two or more distinct operator actions must be required to restart any potentially hazardous function or sequence of functions; these required actions must be designed so that the possibility of arbitrary actions is minimized, and the correct sequence must be verified.",
        "document_name": "4.json",
        "document_chunk_index": 134,
        "hopy_requirement": "The flight control system should be designed such that two or more independent actions by operators are required to restart any potentially hazardous flight mode or sequence, ensuring that the restart sequence is correct and minimizing the possibility of arbitrary actions."
    },
    {
        "id": 248,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The software must be able to distinguish between valid and invalid (i.e., false) external or internal interrupts.",
        "document_name": "1.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The flight control system should be capable of identifying and filtering out false sensor interrupt signals to ensure the accuracy and reliability of flight control commands."
    },
    {
        "id": 249,
        "class": "Data Criteria",
        "safety_criterion": "Files used for storing safety-critical data must be unique and serve a single purpose.",
        "document_name": "3.json",
        "document_chunk_index": 134,
        "hopy_requirement": "Flight control software should ensure that each file storing critical flight data is unique and used exclusively for storing a specific type of data."
    },
    {
        "id": 250,
        "class": "Data Criteria",
        "safety_criterion": "Files used to store or transmit safety-critical information must be initialized to a known state before and after use. Data transmission and storage should be audited as much as possible to enable traceability of system operations.",
        "document_name": "5.json",
        "document_chunk_index": 248,
        "hopy_requirement": "The flight control system should ensure that all critical flight data (e.g., attitude, speed, position) is initialized to a known state at the beginning and end of each mission, and that all data transmission and storage processes are recorded to enable traceability."
    },
    {
        "id": 251,
        "class": "Control Calculation Criteria",
        "safety_criterion": "If preconditions are not met, the software shall reject the command.",
        "document_name": "4.json",
        "document_chunk_index": 266,
        "hopy_requirement": "The flight control system shall be capable of rejecting flight mission commands when navigation parameters do not meet preset conditions."
    },
    {
        "id": 252,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software constraints that are ignored or altered by an overload (override) shall be restored to their original state.",
        "document_name": "1.json",
        "document_chunk_index": 258,
        "hopy_requirement": "In a flight control system, any software constraint temporarily overridden or altered shall automatically revert to its initial state upon completion of the mission."
    },
    {
        "id": 253,
        "class": "Task Timing Criteria",
        "safety_criterion": "For time-critical hazardous processes and protective processes, human intervention may not provide timely safety handling; therefore, automation is required.",
        "document_name": "3.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The system shall have the capability to automatically detect and respond to critical system failures in the aircraft, ensuring that safety measures can be taken without human intervention in a timely manner."
    },
    {
        "id": 254,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The software shall provide error handling to support critical functions.",
        "document_name": "2.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The flight control system shall be equipped with error detection and recovery mechanisms to ensure automatic recovery and continued normal operation in the event of software faults during execution of critical missions."
    },
    {
        "id": 255,
        "class": "Operating State Criteria",
        "safety_criterion": "The system design must not allow detected unsafe states to be bypassed.",
        "document_name": "3.json",
        "document_chunk_index": 274,
        "hopy_requirement": "The flight control system shall have real-time monitoring and response capabilities to ensure immediate action is taken upon detection of any unsafe state, preventing the system from entering a hazardous condition."
    },
    {
        "id": 256,
        "class": "Data Criteria",
        "safety_criterion": "Input/output registers and ports shall never be used for both safety-critical and non-safety-critical functions unless the same safety design criteria apply to the non-critical functions.",
        "document_name": "2.json",
        "document_chunk_index": 220,
        "hopy_requirement": "Input/output registers and ports of the flight control system shall be dedicated to safety-critical functions, or if used for non-safety-critical functions, shall ensure that the same safety design criteria are applied."
    },
    {
        "id": 257,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The system must be designed to detect failure of the safety kernel (if implemented) and return the system to a defined safe state.",
        "document_name": "3.json",
        "document_chunk_index": 217,
        "hopy_requirement": "The flight control system shall be capable of detecting failure of the core safety module and automatically switching to a backup safety mode, ensuring safe continuation of the flight mission."
    },
    {
        "id": 258,
        "class": "Redundancy Criteria",
        "safety_criterion": "The system must be designed to include a safe state with degraded operational and recovery capability in the event of failure of system components.",
        "document_name": "3.json",
        "document_chunk_index": 109,
        "hopy_requirement": "In the event of failure of a critical sensor or actuator, the flight control system shall automatically switch to a backup system and ensure the aircraft can operate safely in a degraded mode, while sending a fault alarm to the ground control center."
    },
    {
        "id": 259,
        "class": "Operating State Criteria",
        "safety_criterion": "The system must be designed to operate in a power-off safe state.",
        "document_name": "3.json",
        "document_chunk_index": 306,
        "hopy_requirement": "In emergency situations, the spacecraft shall be capable of automatically switching to a power-off safe mode to ensure critical systems are de-energized to prevent short circuits and fires."
    },
    {
        "id": 260,
        "class": "Data Criteria",
        "safety_criterion": "Range and validity checks, including temporal range, compliance, and reasonableness checks, must be performed on all analog and digital inputs and outputs before using these values to perform safety-critical functions. No safety-critical function shall be executed based on unverified analog or digital inputs.",
        "document_name": "3.json",
        "document_chunk_index": 264,
        "hopy_requirement": "The flight control system shall monitor and validate the range and reasonableness of all sensor inputs (e.g., altitude, speed, attitude angle) in real-time to ensure data validity before executing critical control commands."
    },
    {
        "id": 261,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There must be one and only one possible path that leads to the execution of a safety-critical function.",
        "document_name": "5.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The flight control system should ensure that each safety-critical command (e.g., engine ignition, attitude adjustment) is executed through a unique and deterministic path."
    },
    {
        "id": 262,
        "safety_criterion": "1 General Principles (YBYZ)-1.1 Function Allocation",
        "class": "Functional Hierarchy Criteria",
        "document_name": "2.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The system should clearly allocate flight control functions to ensure that the responsibilities of each subsystem and component are well-defined, avoiding functional overlap and conflicts."
    },
    {
        "id": 263,
        "safety_criterion": "Perform function allocation to determine which modules, classes, etc., will implement safety-critical requirements. Safety-critical components should be separated from non-critical components as much as possible, and the number of safety-critical components should be minimized. The interface design between critical components should achieve minimal interaction (low coupling).",
        "class": "Functional Hierarchy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 107,
        "hopy_requirement": "The flight control system should isolate safety-critical control modules (e.g., attitude control, navigation computation) from non-critical modules (e.g., data logging, user interface) and ensure that the interface design between critical modules is low-coupling."
    },
    {
        "id": 264,
        "safety_criterion": "Specify detailed design and implementation constraints related to safety",
        "class": "Functional Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 245,
        "hopy_requirement": "During the system design and implementation process, all safety-related constraints must be clearly defined and followed, including but not limited to the stability of flight control algorithms, reliability of data transmission, and effectiveness of redundant systems."
    },
    {
        "id": 265,
        "safety_criterion": "For high-risk systems, interrupts should be avoided as they may interfere with software safety controls. Any interrupts used should be prioritized",
        "class": "Task Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The flight control system should manage interrupts based on priority to ensure that high-priority safety controls are not affected by lower-priority interrupts."
    },
    {
        "id": 266,
        "safety_criterion": "1 General Principles (YBYZ)-1.2 Program Interface",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The system should ensure that data exchange interfaces between all flight control software modules follow unified standards to prevent data transmission errors and inconsistencies."
    },
    {
        "id": 267,
        "safety_criterion": "Define functional interfaces between all components. For safety-critical components, limit their interactions with other components as much as possible",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 240,
        "hopy_requirement": "Safety-critical components in the flight control system should communicate only with necessary subsystems to reduce potential fault propagation."
    },
    {
        "id": 268,
        "safety_criterion": "Identify shared data within the software. The design should isolate safety-critical data from other data and prevent non-critical components from accessing safety-critical data",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The flight control system should isolate navigation data from non-critical data, ensuring that only authorized modules can access navigation data."
    },
    {
        "id": 269,
        "safety_criterion": "Identify safety-critical data used at the interface",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 130,
        "hopy_requirement": "The system should be capable of explicitly identifying and managing safety-critical information in flight control commands and sensor data."
    },
    {
        "id": 270,
        "safety_criterion": "1 General Principles (YBYZ)-1.3 Fault Detection, Recovery, and Safety Protection",
        "class": "Redundancy Switching Criteria",
        "document_name": "2.json",
        "document_chunk_index": 182,
        "hopy_requirement": "The system should have the capability to detect faults in critical flight components in real-time and automatically switch to backup systems upon fault detection to ensure flight safety."
    },
    {
        "id": 271,
        "safety_criterion": "Develop error detection or recovery schemes for safety-critical components",
        "class": "Redundancy Switching Criteria",
        "document_name": "2.json",
        "document_chunk_index": 107,
        "hopy_requirement": "The flight control system should be designed with redundancy to ensure that the backup controller can seamlessly take over in case of a primary controller failure, guaranteeing flight safety."
    },
    {
        "id": 272,
        "safety_criterion": "Respond to abnormal and unexpected external inputs (e.g., inappropriate commands or out-of-range measurements); including exceptions and accidents caused by language",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The system should be capable of detecting and handling abnormal or out-of-range flight control commands from the ground control station, ensuring the safe operation of the aircraft."
    },
    {
        "id": 273,
        "safety_criterion": "Consider hazardous operational scenarios. Consider: how can design prevent human errors from occurring? How can design identify faults before they become failures? What can be added to the design to reduce the risk of hazards occurring?",
        "class": "Operating State Criteria",
        "document_name": "5.json",
        "document_chunk_index": 141,
        "hopy_requirement": "The system should have automatic detection and warning capabilities, prompting the operator for double confirmation before critical operations and issuing alarms immediately upon detecting potential faults to prevent human errors and fault progression into failures."
    },
    {
        "id": 274,
        "safety_criterion": "Consider whether memory tests are required during operations, when these tests should be executed, and whether these tests could affect safety-critical functions",
        "class": "Task Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 229,
        "hopy_requirement": "The system should periodically perform memory tests to ensure normal memory status prior to critical flight phases (such as takeoff and landing), and the testing process should not impact flight control and navigation functions."
    },
    {
        "id": 275,
        "safety_criterion": "Consider using memory utilization checks to provide early warnings for approaching memory saturation",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system should monitor and alert the memory usage of flight control software in real time to prevent system failures due to memory saturation."
    },
    {
        "id": 276,
        "safety_criterion": "The design of safety protection and recovery measures should fully consider real-world conditions and corresponding critical times. Automatic safety protection can only be an effective hazard control if sufficient margin exists between the worst-case (long) response time and the worst-case (short) critical time",
        "class": "Timing Criteria",
        "document_name": "2.json",
        "document_chunk_index": 204,
        "hopy_requirement": "In the propulsion system of a spacecraft, automatic fault detection and recovery mechanisms should be designed to effectively control hazards and ensure spacecraft safety under worst-case scenarios (such as long communication delays or short-term system failures)."
    },
    {
        "id": 277,
        "safety_criterion": "Automatic safety protection is often required when critical times are shorter than realistic operator response times or when there is no human intervention in the operational loop. Automatic safety protection can be implemented through hardware, software, or a combination of both, depending on the optimal system design for implementing automatic safety protection",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 229,
        "hopy_requirement": "In the flight control system, when critical faults or abnormal conditions are detected, the system should automatically activate the safety protection mechanism to ensure the aircraft safely returns or enters a safe state."
    },
    {
        "id": 278,
        "safety_criterion": "Protect critical memory block data from unintentional destruction or deletion",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 233,
        "hopy_requirement": "The system should ensure that critical flight control data (such as navigation parameters and attitude control parameters) cannot be accidentally modified or deleted under any circumstances."
    },
    {
        "id": 279,
        "safety_criterion": "General principle (YBYZ)-1.4 Design feasibility, performance, and margins",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 203,
        "hopy_requirement": "The system design should ensure that the structural strength and stability of the aircraft meet safety requirements under maximum load conditions, while maintaining at least a 10% performance margin."
    },
    {
        "id": 280,
        "safety_criterion": "Demonstrate how safety-critical components respond to safety requirements. Define the design margins of these components",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 204,
        "hopy_requirement": "Key flight control components (such as autopilot and attitude control systems) should have design margins to ensure safe response to flight commands under extreme conditions."
    },
    {
        "id": 281,
        "safety_criterion": "The selection of sampling rate should consider the noise level and the expected variation of control system and physical parameters. For non-critical signal measurements, the sampling rate should be at least twice the maximum expected signal frequency. For critical signals and parameters used in closed-loop control, the sampling rate must be at least ten times higher than the characteristic frequency of the system.",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The flight control system shall ensure that the sampling rate of critical parameters (e.g., attitude angle, speed, altitude) is at least ten times the characteristic frequency of the system to guarantee the stability and accuracy of closed-loop control."
    },
    {
        "id": 282,
        "safety_criterion": "Computers require a certain amount of time to read data, perform calculations, and output results; therefore, some control parameters will always be outdated. The control system must accommodate this condition. The timing clock reference data, synchronization, and precision (jitter) should also be verified. Task scheduling should be analyzed.",
        "class": "Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 279,
        "hopy_requirement": "The flight control system shall have a real-time task scheduling mechanism to ensure the update frequency and precision of critical control parameters, while verifying the synchronization and precision of timing clock reference data."
    },
    {
        "id": 283,
        "safety_criterion": "2. Interface Design (JKSJ)-2.1 Inter-module Interface",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 134,
        "hopy_requirement": "The data exchange between the flight control module and the navigation module shall ensure real-time performance and accuracy to support precise flight path adjustments."
    },
    {
        "id": 284,
        "safety_criterion": "The number of parameters of a module must match the number of input arguments accepted by the module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "5.json",
        "document_chunk_index": 236,
        "hopy_requirement": "The flight control module shall ensure that the number of input flight parameters matches the number of input arguments designed for the module."
    },
    {
        "id": 285,
        "safety_criterion": "The attributes of a module's parameters must match the attributes of the input arguments accepted by the module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 162,
        "hopy_requirement": "The navigation system shall ensure that the attributes of the input flight parameters (e.g., speed, altitude, heading) match the attributes of the system module parameters."
    },
    {
        "id": 286,
        "safety_criterion": "The units of a module's parameters must match the units of the input arguments accepted by the module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "4.json",
        "document_chunk_index": 191,
        "hopy_requirement": "The navigation system shall ensure that the units of all input flight parameters match the internal processing units of the system to avoid calculation errors due to unit inconsistency."
    },
    {
        "id": 287,
        "safety_criterion": "The order of a module's parameters must match the order of the input arguments accepted by the module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "2.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The navigation system shall ensure that the sequence of input parameters matches the processing sequence of the module to guarantee the accuracy of flight trajectory calculations."
    },
    {
        "id": 288,
        "safety_criterion": "The number of arguments passed to a called module must be the same as the number of parameters of that module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 282,
        "hopy_requirement": "The flight control software shall ensure that the number of parameters passed to each sub-module matches the number of parameters defined for the sub-module."
    },
    {
        "id": 289,
        "safety_criterion": "The attributes of the arguments passed to a called module must match the attributes of the parameters of that module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "1.json",
        "document_chunk_index": 227,
        "hopy_requirement": "The system shall ensure that the attributes of flight parameters (e.g., attitude angle, speed, altitude) passed between the flight control module and the navigation module are matched to guarantee data consistency and accuracy."
    },
    {
        "id": 290,
        "safety_criterion": "The units of the arguments passed to a called module must match the units of the parameters of that module.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "2.json",
        "document_chunk_index": 286,
        "hopy_requirement": "The system shall ensure that the units of all flight parameters (e.g., speed, altitude, attitude angle) passed to the navigation module match the internal parameter units of the module."
    },
    {
        "id": 291,
        "safety_criterion": "The order of arguments passed to the called module must be consistent with the parameter order of that module",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 188,
        "hopy_requirement": "Flight control software must ensure that the parameter sequence passed when invoking the navigation module is exactly consistent with the parameter sequence defined in the navigation module."
    },
    {
        "id": 292,
        "safety_criterion": "The number, attributes, units, and order of arguments are correct when calling internal functions",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The system shall ensure that the number, attributes, units, and sequence of input parameters are accurate and error-free when invoking flight control algorithms."
    },
    {
        "id": 293,
        "safety_criterion": "Input-only arguments must not be modified",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 306,
        "hopy_requirement": "Flight control software shall ensure that input flight parameters (such as altitude, speed, attitude angle, etc.) are not modified during processing to guarantee data integrity and consistency."
    },
    {
        "id": 294,
        "safety_criterion": "Global variables have identical definitions across all modules that reference them",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 236,
        "hopy_requirement": "All modules in the flight control system shall use unified variable definitions to ensure consistency and accuracy of flight parameters (such as altitude, speed, attitude angle, etc.) across modules."
    },
    {
        "id": 295,
        "safety_criterion": "Constants must not be transmitted as if they were variables",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The system shall ensure that constant values (such as gravitational acceleration g, Earth radius R, etc.) remain unchanged throughout the transmission of flight control parameters and navigation data, and are not mistakenly treated as variables."
    },
    {
        "id": 296,
        "safety_criterion": "Interface Design - Data Processing Design",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The system shall have the capability to process and verify sensor data from the aircraft in real-time, ensuring data accuracy and consistency."
    },
    {
        "id": 297,
        "safety_criterion": "Check data values of module to prevent them from exceeding valid ranges or causing exceptions such as division by zero",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 240,
        "hopy_requirement": "The system shall be capable of real-time monitoring and validation of flight control parameters (such as altitude, speed, attitude angle, etc.), preventing them from exceeding safe limits or causing exceptions like division by zero."
    },
    {
        "id": 298,
        "safety_criterion": "Check array indices of modules to prevent buffer overflow",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 197,
        "hopy_requirement": "Flight control software shall ensure boundary checks are performed on all module arrays to prevent system crashes or abnormal behavior caused by out-of-bounds access."
    },
    {
        "id": 299,
        "safety_criterion": "Check loop variables within modules to prevent them from exceeding reasonable ranges",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 270,
        "hopy_requirement": "Flight control modules shall monitor and limit loop variables (such as attitude adjustment loop counts) within predefined safety ranges to prevent anomalies due to exceeding reasonable bounds."
    },
    {
        "id": 300,
        "safety_criterion": "Control numerical computation ranges within modules to ensure inputs, outputs, and intermediate results do not exceed machine numeric representation limits",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 251,
        "hopy_requirement": "Flight control modules shall ensure that inputs, outputs, and intermediate results of all numerical computations (such as attitude angles, speed, altitude, etc.) remain within the system's numeric representation range to prevent overflow."
    },
    {
        "id": 301,
        "safety_criterion": "Control the numerical calculation accuracy of the module to ensure that the precision error meets the requirements.",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The navigation system shall ensure that the position calculation error does not exceed 1 meter."
    },
    {
        "id": 302,
        "safety_criterion": "Design the number of iterations for data operations to ensure that the calculations converge within a finite number of iterations.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 211,
        "hopy_requirement": "The navigation system shall ensure accurate calculation of orbital parameters within a finite number of iterations."
    },
    {
        "id": 303,
        "safety_criterion": "Design data conversion between modules to ensure no overflow or loss of precision occurs during data transformation.",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 199,
        "hopy_requirement": "The system shall ensure that flight control data transmitted between different modules does not experience overflow or precision loss, ensuring the accuracy and reliability of control commands."
    },
    {
        "id": 304,
        "safety_criterion": "When performing mathematical operations, carefully consider the handling of floating-point numbers near zero and use an appropriately small floating-point number to represent zero.",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 103,
        "hopy_requirement": "The navigation system shall replace floating-point values close to zero with appropriately small values during flight trajectory calculations to avoid computational errors."
    },
    {
        "id": 305,
        "safety_criterion": "Critical data should be stored independently to prevent unauthorized access and manipulation.",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 183,
        "hopy_requirement": "The flight control system shall store critical flight parameters and navigation data in protected memory areas to prevent unauthorized access and modification."
    },
    {
        "id": 306,
        "safety_criterion": "Avoid direct equality comparisons when dealing with floating-point numbers in relational judgments.",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 277,
        "hopy_requirement": "The system shall avoid direct equality comparisons of floating-point numbers in flight control algorithms to prevent control errors caused by floating-point precision issues."
    },
    {
        "id": 307,
        "safety_criterion": "Input interface data in decision statements should not be all-ones or all-zeros.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 198,
        "hopy_requirement": "The system shall prevent all-ones or all-zeros input in flight control commands to ensure command validity and safety."
    },
    {
        "id": 308,
        "safety_criterion": "Other Interface Software Design",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 108,
        "hopy_requirement": "The system shall ensure that interface software correctly processes and validates received commands and data during data exchange with ground stations or satellites to prevent data loss or execution of erroneous commands."
    },
    {
        "id": 309,
        "safety_criterion": "Decision Statements: Decision logic in safety-critical computing systems should not rely on all-ones or all-zeros inputs, especially when such information comes from external sensors.",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system shall ensure that all safety-critical computations do not depend on all-ones or all-zeros sensor inputs to prevent system misjudgment due to sensor faults."
    },
    {
        "id": 310,
        "safety_criterion": "Data Transmission Messages: Data transmission messages shall have predefined formats and contents. Each transmission should include a word or string indicating message length (if variable), data type, or message content. Parity checks and checksums should be used at minimum to verify correct data transmission. CRC should be used where possible. No information from a data transmission message should be used until its correctness has been verified.",
        "class": "Communication Criteria",
        "document_name": "3.json",
        "document_chunk_index": 181,
        "hopy_requirement": "The system shall ensure that all flight control commands and status data transmissions conform to predefined standards and use CRC for data validation to guarantee data integrity and correctness."
    },
    {
        "id": 311,
        "safety_criterion": "Input validity check: All analog and digital inputs and outputs should be checked for range and reasonableness before being used in safety-critical functions, including time range, dependency relationship, and plausibility checks. Safety-critical functions should be executed based on validated safety-critical analog or digital inputs.",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 165,
        "hopy_requirement": "The system should perform real-time range and plausibility checks on all flight control inputs (e.g., attitude angles, speed, altitude) to ensure input values are within safe ranges and consistent with the expected flight status."
    },
    {
        "id": 312,
        "safety_criterion": "Full-scale representation (range boundary representation). In software design, the full-scale and zero representations of the software should be fully compatible with any digital-to-analog, analog-to-digital, digital-to-synchronous, and/or synchronous-to-digital converters.",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The flight control system should ensure that the full-scale and zero-point values of all sensors and actuators are fully compatible with digital-to-analog converters and analog-to-digital converters."
    },
    {
        "id": 313,
        "safety_criterion": "3. Robustness Design (JZXSJ)-3.1 Self-check Design",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 168,
        "hopy_requirement": "The flight control system should have a self-check function to periodically inspect the status of key sensors and actuators, ensuring their normal operation."
    },
    {
        "id": 314,
        "safety_criterion": "A watchdog timer or similar measure must be provided to ensure that the computer has the capability to handle program timeouts or infinite loop faults.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 277,
        "hopy_requirement": "The flight control system should be equipped with a watchdog timer to ensure automatic restart or switching to a backup system upon detection of program timeout or infinite loops."
    },
    {
        "id": 315,
        "safety_criterion": "Program design related to hardware state changes should consider the number or time duration of state detections. If no time-based criteria are available, loop waiting count can be used as a reference; timeout handling should be performed if the count exceeds a certain threshold.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The system should monitor engine status parameters in real time and confirm abnormal conditions through multiple detections. If the preset number of attempts is exceeded without returning to normal, a timeout handling mechanism should be triggered to automatically switch to the backup system."
    },
    {
        "id": 316,
        "safety_criterion": "Fault detection. Fault detection and isolation procedures must be developed for safety-critical subsystems of computing systems. The fault detection procedures must be designed to detect potential safety-critical failures before execution of relevant safety-critical functions. Fault isolation procedures must be designed to isolate faults down to the lowest practical level and provide this information to operators or maintenance personnel.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The flight control system should have fault detection and isolation capabilities to detect and isolate potential failures before executing critical flight tasks and report fault information to the ground control station."
    },
    {
        "id": 317,
        "safety_criterion": "Operational checks. Operational checks of testable safety-critical system elements must be conducted immediately before performing any safety-critical operations.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 150,
        "hopy_requirement": "Before executing critical flight operations (e.g., attitude adjustment, orbit change), the system must conduct real-time status checks on all relevant sensors and actuators."
    },
    {
        "id": 318,
        "safety_criterion": "3. Robustness Design (JZXSJ)-3.2 Failure Tolerant or Fault-Tolerant Design",
        "class": "Redundancy Criteria",
        "document_name": "5.json",
        "document_chunk_index": 275,
        "hopy_requirement": "The flight control system should have redundancy design to ensure normal flight control can still be maintained when a single component fails."
    },
    {
        "id": 319,
        "safety_criterion": "Generally, based on the software's safety-critical level, determine the failure tolerance requirements for the software and then determine the software redundancy requirements (using N-version design). For example, for Level A software, the recommended failure tolerance is 2, requiring a 5-version program design; for Level B software, the recommended failure tolerance is 1, requiring a 3-version program design; for Levels C and D software, failure tolerance is not considered, and redundancy design is not required.",
        "class": "Redundancy Criteria",
        "document_name": "2.json",
        "document_chunk_index": 235,
        "hopy_requirement": "Flight control system software should determine redundancy design based on the safety-critical level. For Level A software, use a 5-version program design to ensure a failure tolerance of 2; for Level B software, use a 3-version program design to ensure a failure tolerance of 1."
    },
    {
        "id": 320,
        "safety_criterion": "Functions that must operate should achieve failure tolerance through independent parallel redundancy; functions that must not operate should achieve failure tolerance through multiple independent serial inhibits. Each of these serial inhibits (typically) should be controlled by different processors running diverse software.",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 231,
        "hopy_requirement": "The flight control system should adopt redundancy design. Critical function modules should achieve failure tolerance through independent parallel redundancy, while non-critical function modules should achieve failure tolerance through multiple independent serial inhibits. Each serial inhibit module should be controlled by different processors running diverse software."
    },
    {
        "id": 321,
        "safety_criterion": "Implement fault tolerance using N-version programming. N-version programming consists of N different programs achieving the same function (if necessary, functionally degraded designs may be included after special handling) and a management program. Results generated sequentially by each version are mutually voted upon to determine the output. In cases where the voter cannot distinguish the error mode, a majority voting method should be adopted; even further, based on system safety requirements, a 'one-vote rejection' voting method can be applied.",
        "class": "Redundancy Criteria",
        "document_name": "4.json",
        "document_chunk_index": 183,
        "hopy_requirement": "The flight control system should adopt multi-version redundancy design to ensure that the system can maintain normal operation through a majority voting mechanism when one or more control modules fail."
    },
    {
        "id": 322,
        "safety_criterion": "Built-in self-test technology (BIT) can be used for fault detection or handling. Real-time testing of certain specific units should be conducted, and corresponding functional modules should process BIT test results.",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 278,
        "hopy_requirement": "The flight control system should have real-time built-in self-test (BIT) functionality, capable of detecting faults in key sensors and actuators, and immediately trigger corresponding handling mechanisms upon fault detection."
    },
    {
        "id": 323,
        "safety_criterion": "Design for isolation, such as partitioning and protective zoning (considering hardware resources, control coupling, etc.), to ensure rapid and effective fault isolation.",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 107,
        "hopy_requirement": "The flight control system should have partitioned isolation functionality to ensure faults between subsystems do not affect each other, enabling rapid isolation and limiting fault propagation."
    },
    {
        "id": 324,
        "safety_criterion": "For multiple redundant data or functions, a majority voting mechanism should be adopted. That is, design a majority voting algorithm for input data or function output values from multiple redundancies to ensure reasonable and effective voting outcomes.",
        "class": "Redundancy Criteria",
        "document_name": "4.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The flight control system should adopt triple redundancy design through a majority voting mechanism to ensure accuracy and reliability of critical control commands."
    },
    {
        "id": 325,
        "safety_criterion": "Adopt recovery block techniques. A recovery block consists of a primary block, several alternate blocks (which can be functionally degraded replacement blocks), and an acceptance test program. The basic working method is: run the primary block and perform an acceptance test. If the test passes, output the result; otherwise, call the first alternate block and re-perform the acceptance test. If no alternate block passes the acceptance test after all N alternate blocks are exhausted, error handling should be performed.",
        "class": "Redundancy Criteria",
        "document_name": "5.json",
        "document_chunk_index": 107,
        "hopy_requirement": "The flight control system should feature multi-level redundancy design, including a main control module and multiple backup control modules, ensuring seamless switching to a backup module in case of main module failure, guaranteeing flight safety."
    },
    {
        "id": 326,
        "safety_criterion": "Communication Design",
        "class": "Communication Criteria",
        "document_name": "3.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The system should ensure data transmission integrity and real-time performance in the communication link between satellites and ground stations."
    },
    {
        "id": 327,
        "safety_criterion": "When designing the exchange word format between communicating parties, consider both computers’ word lengths and adopt a word format convenient for data exchange.",
        "class": "Communication Criteria",
        "document_name": "5.json",
        "document_chunk_index": 135,
        "hopy_requirement": "The system should support data exchange between different ground stations and satellites, ensuring word length compatibility and data format consistency."
    },
    {
        "id": 328,
        "safety_criterion": "The meaning of various values in exchanged data words should be clearly explained. For one-bit-length data, not only should the meaning of value '1' be specified, but also that of value '0'; for two- or multi-bit data, not only should the meanings of specific value combinations be defined, but also those of other combinations. For example, with two-bit-length data, not only should the meanings of '01' and '10' be clearly stated, but also those of '00' and '11'.",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The communication system should accurately parse and interpret all binary flight control commands, including but not limited to attitude control, propulsion system control, and navigation system commands."
    },
    {
        "id": 329,
        "safety_criterion": "In communication design, each party’s tasks should be clearly documented in files. This prevents anomalies during interactions due to either side's lack of understanding of the other's responsibilities.",
        "class": "Communication Criteria",
        "document_name": "3.json",
        "document_chunk_index": 184,
        "hopy_requirement": "The system should have clear communication protocols, ensuring accurate transmission of task instructions and status information between the aircraft and the ground control station."
    },
    {
        "id": 330,
        "safety_criterion": "In communication design, the data sender's processing capability (memory, processing timing, processing time, etc.) should match that of the data receiver.",
        "class": "Communication Criteria",
        "document_name": "4.json",
        "document_chunk_index": 186,
        "hopy_requirement": "The communication protocol between the aircraft and ground station should ensure matching processing capabilities for data transmission and reception to avoid data loss or delay."
    },
    {
        "id": 331,
        "safety_criterion": "Communication data frames should consist of a frame header, data items (including frame number, frame length, data body), checksum byte, and frame trailer. This ensures data frame synchronization and data validity verification. Clearly specify the various checksum algorithms used for the data (e.g., parity check, CRC check, etc.).",
        "class": "Communication Criteria",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The flight control system shall ensure that all communication data frames include a frame header, frame number, frame length, data body, checksum byte, and frame trailer, and use the CRC checksum algorithm to guarantee data integrity and reliability."
    },
    {
        "id": 332,
        "safety_criterion": "If using serial asynchronous communication, the frame header should preferably be multi-byte to ensure uniqueness of the frame header and accurate reception of the frame length following the header.",
        "class": "Communication Criteria",
        "document_name": "5.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system's communication protocol shall ensure that the frame header uses a multi-byte design to guarantee the uniqueness of the frame header and the accurate reception of the frame length."
    },
    {
        "id": 333,
        "safety_criterion": "The interval between frames should generally be longer than the interval between bytes within a frame to allow sufficient time for the receiver to search for and receive the frame header.",
        "class": "Communication Criteria",
        "document_name": "5.json",
        "document_chunk_index": 140,
        "hopy_requirement": "The communication system shall ensure that the frame interval time during different flight phases is greater than the byte interval within a frame to ensure the receiver can accurately capture and process data frames."
    },
    {
        "id": 334,
        "safety_criterion": "Pointer Design (ZZSJ)",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 241,
        "hopy_requirement": "The system shall ensure that all pointer variables are checked for validity before use to prevent system crashes caused by null pointers or illegal access."
    },
    {
        "id": 335,
        "safety_criterion": "Parameter pointers must not be assigned to process pointers;",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 172,
        "hopy_requirement": "Flight control software shall ensure that parameter pointers are not assigned to process pointers to prevent potential memory errors and system crashes."
    },
    {
        "id": 336,
        "safety_criterion": "Pointers to pointers must not exceed two levels;",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 134,
        "hopy_requirement": "Flight control systems shall ensure that pointer usage in software does not exceed two levels to prevent memory access errors and potential security vulnerabilities."
    },
    {
        "id": 337,
        "safety_criterion": "Null pointers must not be referenced;",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 209,
        "hopy_requirement": "Flight control software shall ensure that all pointers are checked for validity before use to prevent system crashes caused by null pointer references."
    },
    {
        "id": 338,
        "safety_criterion": "Procedures must not be declared as pointer types;",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 309,
        "hopy_requirement": "Flight control software shall ensure that all procedures are declared as fixed types and pointer types are prohibited to prevent memory errors and data inconsistency."
    },
    {
        "id": 339,
        "safety_criterion": "Use logical comparisons involving pointers with caution;",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 224,
        "hopy_requirement": "Flight control software shall avoid logical comparisons involving pointers to ensure the integrity and reliability of mission-critical flight data."
    },
    {
        "id": 340,
        "safety_criterion": "Perform arithmetic operations on pointers with caution;",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The system shall ensure that when performing arithmetic operations on pointers in flight control software, pointer validity and boundaries are strictly checked to prevent out-of-bounds access and memory leaks."
    },
    {
        "id": 341,
        "safety_criterion": "6. Software Architecture Design (CXJGSJ)-6.1 Module Independence Design",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The functional modules of the flight control software should have high cohesion and low coupling to ensure module independence and maintainability."
    },
    {
        "id": 342,
        "safety_criterion": "Modules should preferably use single-entry and single-exit control structures",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 95,
        "hopy_requirement": "Flight control software modules should adopt single-entry and single-exit control structures to ensure clear and controllable data flow between modules."
    },
    {
        "id": 343,
        "safety_criterion": "Identify critical modules and isolate them from non-critical modules as much as possible",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The flight control software should physically and logically isolate critical modules (e.g., flight control, navigation, and communication) from non-critical modules (e.g., data logging and user interface)."
    },
    {
        "id": 344,
        "safety_criterion": "Use modular calling methods; do not directly access internal information within a module",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 282,
        "hopy_requirement": "Flight control software modules should communicate through standardized interfaces; direct access to internal data of other modules is prohibited."
    },
    {
        "id": 345,
        "safety_criterion": "Reasonably limit the number of parameters passed between modules",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 277,
        "hopy_requirement": "Data exchange between flight control and navigation modules should be limited to necessary parameters to reduce transmission complexity and potential errors."
    },
    {
        "id": 346,
        "safety_criterion": "Variables within modules should be localized; avoid using global variables as much as possible",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 209,
        "hopy_requirement": "Variables in flight control software should be localized; avoid using global variables to ensure module independence and data security."
    },
    {
        "id": 347,
        "safety_criterion": "Place factors that may change or require frequent modifications into as few modules as possible",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 283,
        "hopy_requirement": "Key parameter configurations in flight control software should be centrally managed to ensure that only a few modules need modification during adjustments."
    },
    {
        "id": 348,
        "safety_criterion": "Maximize intra-module cohesion and minimize inter-module coupling. Prioritize cohesion types in this order: functional, sequential, communicational, temporal, logical, and coincidental cohesion.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 272,
        "hopy_requirement": "Flight control software should be designed based on the principle of functional cohesion to ensure each functional module operates independently and without interference, improving system reliability and maintainability."
    },
    {
        "id": 349,
        "safety_criterion": "Primarily use data coupling, supplemented by external coupling, and use control coupling only when necessary. Public and content coupling must be eliminated.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The flight control system should exchange information with the navigation system and attitude control system through data coupling to ensure data consistency and integrity."
    },
    {
        "id": 350,
        "safety_criterion": "6. Software Architecture Design (CXJGSJ)-6.2 Simplified Design",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 249,
        "hopy_requirement": "Flight control software should adopt modular design to ensure each module has a single function and clear interfaces."
    },
    {
        "id": 351,
        "safety_criterion": "The program structure design should adopt a tree-like structure diagram and must not use a mesh structure.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 223,
        "hopy_requirement": "Flight control software should adopt modular design to ensure clear data flow between functional modules, avoid complex mesh structures, and improve system maintainability and safety."
    },
    {
        "id": 352,
        "safety_criterion": "The program structure design should follow a top-down approach, refining process details and data details layer by layer until they can be implemented using programming language statements.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 282,
        "hopy_requirement": "Flight control software should adopt modular design to ensure the independence and testability of each functional module."
    },
    {
        "id": 353,
        "safety_criterion": "Structured programming should be adopted, for example, avoiding the use of GOTO statements, ensuring that each module has only one entry point and one exit point, etc.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 219,
        "hopy_requirement": "Flight control software should adopt structured programming to ensure that each control module has only one entry and one exit point, avoiding the use of GOTO statements."
    },
    {
        "id": 354,
        "safety_criterion": "Module size should be moderate; ideally, the number of lines in a single module should not exceed 500 lines.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 163,
        "hopy_requirement": "Each module of flight control software should have no more than 500 lines of code to ensure module maintainability and testability."
    },
    {
        "id": 355,
        "safety_criterion": "Designed modules should aim for high fan-in and low fan-out.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 307,
        "hopy_requirement": "Flight control software modules should be designed with high cohesion and low coupling to ensure each module interacts with only a few other modules while being able to receive and process data from multiple sensors."
    },
    {
        "id": 356,
        "safety_criterion": "The fan-in and fan-out of a module should generally be controlled to less than 7.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 117,
        "hopy_requirement": "The number of input and output interfaces for flight control modules should be limited to seven or fewer to ensure the reliability of inter-module communication and data processing."
    },
    {
        "id": 357,
        "safety_criterion": "High-level modules should have high fan-out, and low-level modules should have high fan-in.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 296,
        "hopy_requirement": "The flight control software architecture should be designed so that high-level modules control multiple low-level execution modules, ensuring that high-level modules have high fan-out and low-level modules have high fan-in."
    },
    {
        "id": 358,
        "safety_criterion": "The complexity of module interfaces should be minimized. Module interfaces should be carefully designed to ensure simple information transfer consistent with the module's functionality.",
        "class": "Communication Criteria",
        "document_name": "3.json",
        "document_chunk_index": 198,
        "hopy_requirement": "Navigation system modules should be equipped with simplified interfaces to ensure only essential flight control parameters are transferred, reducing unnecessary data exchange."
    },
    {
        "id": 359,
        "safety_criterion": "Program cyclomatic complexity must be restricted.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 125,
        "hopy_requirement": "The cyclomatic complexity of each module in flight control software must not exceed 10 to ensure code maintainability and testability."
    },
    {
        "id": 360,
        "safety_criterion": "Margin design (YLSJ).",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 254,
        "hopy_requirement": "The system should have sufficient computing and storage margin to handle unexpected data processing demands during flight missions."
    },
    {
        "id": 361,
        "safety_criterion": "During software design, it should be ensured that the data storage capacity of software modules, throughput capability of input/output channels, function processing time, and CPU utilization meet the system margin requirements.",
        "class": "Task Timing Criteria",
        "document_name": "3.json",
        "document_chunk_index": 150,
        "hopy_requirement": "The flight control system should ensure that under high-load conditions, data storage, throughput capability of input/output channels, and CPU utilization do not exceed the maximum designed margins of the system to guarantee system stability and reliability."
    },
    {
        "id": 362,
        "safety_criterion": "Timing constraints such as sampling period, data calculation processing period, control period, self-diagnosis period, and input/output period should be determined based on the specific controlled object, ensuring sufficient margin between software timing operations.",
        "class": "Task Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 241,
        "hopy_requirement": "The flight control system should determine appropriate sampling periods, data processing periods, control periods, self-diagnosis periods, and input/output periods according to specific flight missions, ensuring sufficient margin between each period to guarantee real-time performance and reliability."
    },
    {
        "id": 363,
        "safety_criterion": "8. Error Prevention Design (EPD) - 8.1 Standardized Data Identification",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 239,
        "hopy_requirement": "The system should ensure that all flight data and command identifiers follow a unified standardized format to prevent data confusion and misoperation."
    },
    {
        "id": 364,
        "safety_criterion": "In software design, uniform symbols should be used to represent parameters, constants, and flags so that they can be modified without changing the logic of the source program.",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 159,
        "hopy_requirement": "Flight control software should use uniform symbols for flight parameters, constants, and flags to ensure parameter adjustments can be made without altering the logic of the source code."
    },
    {
        "id": 365,
        "safety_criterion": "All identifiers should be strictly defined and their usage clearly specified. For safety-critical identifiers, they should be unique and used for only one purpose within the software modules where they are employed.",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 154,
        "hopy_requirement": "The system should ensure that all flight control command identifiers within software modules are unique and serve only one purpose to prevent command confusion and misoperation."
    },
    {
        "id": 366,
        "safety_criterion": "Data and global variables shared by two or more modules must be explicitly identified, and changes to global variables should be minimized to reduce inter-module side effects.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 89,
        "hopy_requirement": "Flight control software should clearly identify and minimize modifications to shared flight parameters (e.g., attitude angle, speed, altitude) to reduce interference between modules."
    },
    {
        "id": 367,
        "safety_criterion": "8. Error Prevention Design (EPD) - 8.2 Safety-Critical Information Design",
        "class": "Redundancy Criteria",
        "document_name": "2.json",
        "document_chunk_index": 175,
        "hopy_requirement": "The system should ensure redundant design for critical flight data (e.g., altitude, speed, attitude) to prevent single-point failures from causing data loss or errors."
    },
    {
        "id": 368,
        "safety_criterion": "There should be a certain code distance between safety-critical information and other information.",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system should ensure that the transmission code distance between flight control commands and non-critical data is at least 10 bits to prevent data interference and misoperation."
    },
    {
        "id": 369,
        "safety_criterion": "If there are errors in safety-critical information, these errors should be detectable, and the system should be able to return to a safe state.",
        "class": "Redundancy Switching Criteria",
        "document_name": "5.json",
        "document_chunk_index": 231,
        "hopy_requirement": "The flight control system should be capable of checking the integrity of navigation data; upon detecting an error, it should immediately switch to a backup navigation system and report the fault."
    },
    {
        "id": 370,
        "safety_criterion": "Judgment decisions involving safety-critical information must not rely on all '1' or all '0' inputs.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 212,
        "hopy_requirement": "The flight control system must ensure data diversity and validity during critical decision-making processes, avoiding reliance on singular all '1' or all '0' signals."
    },
    {
        "id": 371,
        "safety_criterion": "Error Prevention Design (FCSJ) - 8.3 Critical Function Design",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system should have redundancy design to ensure critical flight control functions can still operate normally in the event of a single-point failure."
    },
    {
        "id": 372,
        "safety_criterion": "Critical functions must be controlled by two independent functions",
        "class": "Redundancy Criteria",
        "document_name": "4.json",
        "document_chunk_index": 126,
        "hopy_requirement": "The primary and backup units of the flight control system must operate independently, ensuring that the backup unit can seamlessly take over control when the primary unit fails."
    },
    {
        "id": 373,
        "safety_criterion": "In the system control loop, execution of safety-critical functions must be confirmed or initiated by the operator when possible",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 232,
        "hopy_requirement": "When performing critical flight control operations (such as attitude adjustment or orbit change), the system should require confirmation or manual initiation by ground control personnel."
    },
    {
        "id": 374,
        "safety_criterion": "Safety-critical functions should only execute after receiving two or more identical pieces of information",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The flight control system should ensure that critical flight control commands are executed only after receiving identical navigation data from two or more redundant sensors."
    },
    {
        "id": 375,
        "safety_criterion": "Safety-critical functions should use strong data types; single-bit logic '0' or '1' must not be used to represent 'safe' or 'dangerous' states; their determination conditions must not rely on all '0's or all '1's as inputs",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 176,
        "hopy_requirement": "The flight control system should use strong data types to represent critical flight parameters, ensuring that the inputs and outputs of all safety-critical functions do not depend on the '0' or '1' state of a single logic bit."
    },
    {
        "id": 376,
        "safety_criterion": "Critical timing functions must be controlled by a computer, and operators must not be able to modify them arbitrarily",
        "class": "Task Timing Criteria",
        "document_name": "3.json",
        "document_chunk_index": 258,
        "hopy_requirement": "The flight control system should have key timing functions managed automatically by the computer, ensuring that operators cannot arbitrarily modify timing parameters."
    },
    {
        "id": 377,
        "safety_criterion": "Before initiating safety-critical functions, real-time testing of testable safety-critical units must be performed. When an unsafe condition is detected, measures must be taken to handle it",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 80,
        "hopy_requirement": "Before starting the flight control system, the status of critical sensors (such as accelerometers and gyroscopes) must be tested in real time. When sensor faults or anomalies are detected, the system should automatically switch to backup sensors or enter a safe mode."
    },
    {
        "id": 378,
        "safety_criterion": "External functions requiring two or more safety-critical pieces of information must not receive all necessary information from a single input/output interface",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The navigation system should obtain flight altitude and speed data from at least two independent sensors to ensure data accuracy and reliability."
    },
    {
        "id": 379,
        "safety_criterion": "Unintended jumps within safety-critical software or between safety-critical software must be monitored; if feasible, fault diagnosis should be performed and the cause of the unintended jump identified",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The flight control system should have real-time monitoring and diagnostic capabilities to detect and record unintended jumps within safety-critical software and determine their causes."
    },
    {
        "id": 380,
        "safety_criterion": "Recovery measures must be provided to transition into a fail-safe state from unintended instruction jumps",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The system should be capable of detecting and handling unintended instructions, ensuring automatic transition to a fail-safe state upon detection of abnormal instructions and providing recovery measures."
    },
    {
        "id": 381,
        "safety_criterion": "8. Error-Proofing Design (FCSJ) - 8.4 Unauthorized Access Restriction",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 298,
        "hopy_requirement": "The system should have the capability to prevent unauthorized access to flight control data and navigation parameters, ensuring that only authorized personnel can access and modify them."
    },
    {
        "id": 382,
        "safety_criterion": "Prevent unauthorized or unintentional access to or modification of programs (source code, assembly code, and object code), including self-modifying code",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The flight control system should have the capability to prevent unauthorized access and modification of control software, ensuring the integrity and security of the software code."
    },
    {
        "id": 383,
        "safety_criterion": "Prevent unauthorized or unintentional access to or modification of data",
        "class": "Redundancy Criteria",
        "document_name": "5.json",
        "document_chunk_index": 231,
        "hopy_requirement": "The system should ensure the integrity and confidentiality of flight control data, preventing unauthorized access or modification."
    },
    {
        "id": 384,
        "safety_criterion": "Security-critical function modules should be protected with passwords",
        "class": "Redundancy Criteria",
        "document_name": "5.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Critical modules in the flight control system should require a password for access, ensuring that only authorized personnel can perform operations."
    },
    {
        "id": 385,
        "safety_criterion": "8. Error-Proofing Design (FCSJ) - 8.5 Others",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The system should be designed with redundancy to ensure that in the event of a single-point failure, the backup system can seamlessly take over, guaranteeing continuity and safety of the flight mission."
    },
    {
        "id": 386,
        "safety_criterion": "Files should be successfully opened before use and successfully closed after use",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 249,
        "hopy_requirement": "Flight mission data files should be successfully loaded before the mission starts and safely closed after the mission ends, ensuring data integrity and consistency."
    },
    {
        "id": 387,
        "safety_criterion": "Real-time monitoring should be conducted on critical functional points; fault isolation should be performed upon detection of faults, and the system should enter a safe state when necessary",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 235,
        "hopy_requirement": "The flight control system should monitor engine status in real time; once a fault is detected, it should immediately isolate the fault and switch to the backup system to ensure flight safety."
    },
    {
        "id": 388,
        "safety_criterion": "Indirect addressing methods should be avoided as much as possible",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 273,
        "hopy_requirement": "Flight control software should directly access critical flight parameters and control instructions, avoiding indirect addressing methods."
    },
    {
        "id": 389,
        "safety_criterion": "Data and instructions should be stored separately",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 148,
        "hopy_requirement": "The flight control system should store flight data and control instructions in separate memory areas to ensure data integrity and instruction reliability."
    },
    {
        "id": 390,
        "safety_criterion": "Important information that does not require modification should be stored in non-volatile read-only memory (ROM). For important information requiring occasional modifications, electrically erasable programmable read-only memory (EEPROM) should be used. Electrically programmable read-only memory (EPROM) should not be used in space environments.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The flight control software of spacecraft should store critical flight parameters and mission instructions in read-only memory (ROM) to ensure data integrity and reliability under extreme conditions."
    },
    {
        "id": 391,
        "safety_criterion": "Safety-critical information should be stored in multiple or different chips and processed through voting mechanisms.",
        "class": "Redundancy Criteria",
        "document_name": "4.json",
        "document_chunk_index": 281,
        "hopy_requirement": "The flight control system should store critical flight parameters (such as attitude, speed, and altitude) in multiple independent redundant chips and ensure data consistency and reliability through a majority voting mechanism."
    },
    {
        "id": 392,
        "safety_criterion": "Important programs in programmable read-only memory (PROM) should be backed up (e.g., stored in different PROMs), so that the system can execute its backup program via remote commands if the program in the PROM is corrupted.",
        "class": "Redundancy Criteria",
        "document_name": "5.json",
        "document_chunk_index": 222,
        "hopy_requirement": "The system should have the capability to switch to a backup program stored in a redundant PROM via remote commands when the critical flight control program in the main PROM is corrupted, ensuring continuity and safety of the flight mission."
    },
    {
        "id": 393,
        "safety_criterion": "Important programs and data in random access memory (RAM) should be stored in three different locations, with access to these programs and data decided through a triple modular redundancy (TMR) voting method.",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 198,
        "hopy_requirement": "In the flight control system's RAM, critical flight control programs and data should be redundantly stored in three independent memory regions and accessed through a TMR voting mechanism for decision-making."
    },
    {
        "id": 394,
        "safety_criterion": "For functional modules required to complete specified tasks within a given time frame, algorithms should iterate computations until they exceed a defined value or converge results below a certain threshold.",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The navigation system should ensure trajectory calculations are completed within a specified timeframe by employing an iterative algorithm that ensures precision and reliability of computational results."
    },
    {
        "id": 395,
        "safety_criterion": "The memory space used by algorithms should be fully determined, avoiding dynamic heap allocation as much as possible.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 144,
        "hopy_requirement": "The navigation system should use fixed-size buffers to store flight trajectory data, avoiding dynamic memory allocation."
    },
    {
        "id": 396,
        "safety_criterion": "Design requests, usage, and release of shared resources to prevent anomalies such as resource monopolization, deadlocks, and read/write conflicts.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 309,
        "hopy_requirement": "The system should ensure that multiple task modules accessing satellite attitude control data do not experience data conflicts or deadlocks through mutual exclusion lock mechanisms."
    },
    {
        "id": 397,
        "safety_criterion": "9. Human-Machine Interface Design (HMID)-9.1 Interface Display",
        "class": "Operating State Criteria",
        "document_name": "4.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The system should provide a visual interface for real-time flight parameters and system status, ensuring pilots can clearly and accurately monitor and operate the system."
    },
    {
        "id": 398,
        "safety_criterion": "Safety-critical display information, icons, and other human-machine interaction methods provided to operators should be clear, concise, and unambiguous.",
        "class": "Operating State Criteria",
        "document_name": "5.json",
        "document_chunk_index": 161,
        "hopy_requirement": "The flight control interface should display key flight parameters (e.g., altitude, speed, attitude) and warning messages in real time, ensuring operators can clearly, concisely, and unambiguously understand the current flight status."
    },
    {
        "id": 399,
        "safety_criterion": "Displays should consider factors such as color, font size, and position to meet ergonomic requirements.",
        "class": "Operating State Criteria",
        "document_name": "1.json",
        "document_chunk_index": 110,
        "hopy_requirement": "The cockpit display should reasonably set colors, font sizes, and positions according to the pilot's visual and operational habits, ensuring information is clearly visible and easy to read."
    },
    {
        "id": 400,
        "safety_criterion": "Allocate information to different formats or pages based on mission requirements.",
        "class": "State Scenario Criteria",
        "document_name": "2.json",
        "document_chunk_index": 159,
        "hopy_requirement": "The flight mission management system should allocate critical flight parameters and status information to different display pages according to different flight phases and mission requirements."
    },
    {
        "id": 401,
        "safety_criterion": "All necessary information (name, identifier, graphics, etc.) included on different pages must be consistent with each other",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 193,
        "hopy_requirement": "All flight parameters and status information displayed on the flight control interface and status monitoring interface must remain consistent."
    },
    {
        "id": 402,
        "safety_criterion": "The display content of a page should not be excessive; only essential data should be shown, and irrelevant information should be omitted",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 203,
        "hopy_requirement": "The flight control interface should display only key flight parameters and alarm information; other non-critical information should be hidden or made optionally visible."
    },
    {
        "id": 403,
        "safety_criterion": "Related data should be displayed on the same interface, and the displayed data should be relevant to the user's current task",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 247,
        "hopy_requirement": "The flight control interface should display all key parameters related to the current flight mission in real time, including flight altitude, speed, attitude, and navigation information."
    },
    {
        "id": 404,
        "safety_criterion": "Software interface display should function normally under non-standard resolutions",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 189,
        "hopy_requirement": "Key flight parameters and warning information should be properly displayed on screens with varying resolutions by flight control software."
    },
    {
        "id": 405,
        "safety_criterion": "No redundant buttons or controls should exist, and the initial input focus should be on the most frequently used control",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 156,
        "hopy_requirement": "The flight control interface should contain only necessary operational buttons, with the initial input focus set by default to the most commonly used flight mode selection button."
    },
    {
        "id": 406,
        "safety_criterion": "Human-machine interaction design",
        "class": "Interconnected Equipment Criteria",
        "document_name": "2.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system should provide intuitive flight parameter display and operation interface, ensuring that pilots can operate quickly and accurately during emergencies."
    },
    {
        "id": 407,
        "safety_criterion": "Invalid operator requests should be flagged and clearly indicated to the operator",
        "class": "Interconnected Equipment Criteria",
        "document_name": "5.json",
        "document_chunk_index": 249,
        "hopy_requirement": "The system should be able to detect and flag invalid ground control commands, providing real-time error feedback to the ground control station."
    },
    {
        "id": 408,
        "safety_criterion": "At least two independent commands are required to execute safety-critical functions. Activation of safety-critical operations should involve two or more personnel operating in an 'AND' manner, with comprehensive measures against accidental triggering to prevent unintended activation",
        "class": "Redundancy Switching Criteria",
        "document_name": "3.json",
        "document_chunk_index": 220,
        "hopy_requirement": "The flight control system should have a dual confirmation mechanism, ensuring that critical operations (such as engine ignition, attitude adjustment, etc.) require simultaneous confirmation from two operators via independent channels to prevent accidental activation."
    },
    {
        "id": 409,
        "safety_criterion": "Safe state recovery. Human-machine interaction software should allow the operator to handle the current transaction with a single action, enabling the system to exit a potentially unsafe state and return to a safe state",
        "class": "Redundancy Switching Criteria",
        "document_name": "5.json",
        "document_chunk_index": 267,
        "hopy_requirement": "The flight control system should provide a one-button reset function, allowing the operator to quickly restore the system from an abnormal state to a safe state."
    },
    {
        "id": 410,
        "safety_criterion": "The software should be able to detect incorrect operator inputs or actions and prevent the execution of safety-critical functions due to such errors",
        "class": "Interconnected Equipment Criteria",
        "document_name": "4.json",
        "document_chunk_index": 214,
        "hopy_requirement": "The flight control system should be capable of detecting and blocking incorrect operator commands, ensuring that operations posing flight safety risks are not executed."
    },
    {
        "id": 411,
        "safety_criterion": "Avoid changing the system's safety status without the operator's knowledge",
        "class": "Operating State Criteria",
        "document_name": "5.json",
        "document_chunk_index": 234,
        "hopy_requirement": "The system shall ensure that flight control modes or safety parameters cannot be automatically changed without operator confirmation."
    },
    {
        "id": 412,
        "safety_criterion": "Ensure there is a display for state changes when safety-critical state changes occur",
        "class": "Operating State Criteria",
        "document_name": "2.json",
        "document_chunk_index": 235,
        "hopy_requirement": "The system shall be able to immediately display the current flight mode and state change information on the cockpit display during flight mode switching."
    },
    {
        "id": 413,
        "safety_criterion": "Clearly distinguish critical inputs and check the range and validity of the inputs",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 95,
        "hopy_requirement": "The system shall be able to distinguish critical flight control inputs and verify their range and validity, ensuring input values are within predefined safe ranges."
    },
    {
        "id": 414,
        "safety_criterion": "Allow undo and redo: actions should be reversible and errors should be recoverable",
        "class": "Operating State Criteria",
        "document_name": "3.json",
        "document_chunk_index": 128,
        "hopy_requirement": "The flight control system shall support mission abort and recovery functions, ensuring that it can safely return to a normal flight state after an abort."
    },
    {
        "id": 415,
        "safety_criterion": "Provide appropriate and timely feedback so that operators can promptly sense their control of the system and the system's response to their actions",
        "class": "Operating State Criteria",
        "document_name": "5.json",
        "document_chunk_index": 308,
        "hopy_requirement": "The flight control system shall provide real-time visual and auditory feedback to ensure that the operator can promptly perceive changes in flight status and system responses."
    },
    {
        "id": 416,
        "safety_criterion": "Provide real-time indication showing that the software is running",
        "class": "Operating State Criteria",
        "document_name": "4.json",
        "document_chunk_index": 136,
        "hopy_requirement": "The system shall provide real-time flight status indications including, but not limited to, engine status, flight altitude, speed, and heading."
    },
    {
        "id": 417,
        "safety_criterion": "For processing functions requiring several seconds or more, provide status indication to the operator during processing",
        "class": "Task Timing Criteria",
        "document_name": "3.json",
        "document_chunk_index": 235,
        "hopy_requirement": "During long-duration task processing, the system shall send real-time task status indications to the ground control station to ensure that the operator can monitor task progress."
    },
    {
        "id": 418,
        "safety_criterion": "Audible and visual alarms must be provided for operators, and audible alarm signals must exceed expected background noise",
        "class": "Operating State Criteria",
        "document_name": "2.json",
        "document_chunk_index": 105,
        "hopy_requirement": "In case of aircraft anomalies, the system shall immediately trigger audible and visual alarms to ensure that the audible alarm exceeds cabin background noise."
    },
    {
        "id": 419,
        "safety_criterion": "Alarm design must differentiate routine alarms from safety-critical alarms and must prevent operators from clearing safety-critical alarms without taking corrective action or completing required follow-up actions",
        "class": "Operating State Criteria",
        "document_name": "4.json",
        "document_chunk_index": 151,
        "hopy_requirement": "The system shall be able to distinguish between routine alarms and safety-critical alarms and ensure that operators cannot clear safety-critical alarms without taking corrective measures or completing required follow-up actions."
    },
    {
        "id": 420,
        "safety_criterion": "10. Other Design Considerations",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The system shall have redundant design to ensure normal operation in case of single-point failures."
    },
    {
        "id": 421,
        "safety_criterion": "The software must work with hardware to provide a safe shutdown in case of power failure. Avoid potentially unsafe initial states.",
        "class": "Power Management Criteria",
        "document_name": "5.json",
        "document_chunk_index": 162,
        "hopy_requirement": "The system should be able to automatically execute a safe shutdown procedure in the event of power failure, ensuring that flight control and navigation systems are in a safe state."
    },
    {
        "id": 422,
        "safety_criterion": "During power failure or power loss, the software must provide a safe and appropriate shutdown so that potentially unsafe conditions do not occur.",
        "class": "Power Management Criteria",
        "document_name": "3.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The system should have the capability to automatically switch to backup power during power faults or outages and safely shut down critical mission software, ensuring the aircraft remains in a safe state."
    },
    {
        "id": 423,
        "safety_criterion": "Software design must consider completing system-level checks upon system power-up to verify that the system is safe and functioning properly; when possible, the software should periodically check the system to monitor its safety status.",
        "class": "System Initialization and Health Monitoring Criteria",
        "document_name": "3.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system must execute a comprehensive self-test upon each power-on startup to ensure all critical subsystems (such as navigation, communication, and propulsion systems) are operating normally; during flight, the system should periodically perform health checks to continuously monitor the system's safety status."
    },
    {
        "id": 424,
        "safety_criterion": "Interface failures: All possible interface failures should be adequately anticipated, and corresponding measures should be taken.",
        "class": "Redundancy Criteria",
        "document_name": "3.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system should have redundant communication interfaces to ensure automatic switching to a backup interface in case of main interface failure, guaranteeing continuity and reliability of data transmission."
    },
    {
        "id": 425,
        "safety_criterion": "Incorrect operations: The software should be able to determine whether the operator’s input operations are correct (or reasonable), and if incorrect (or unreasonable) inputs and operations are detected, it should reject the execution of such operations, alert the operator, and indicate the type of error and corrective actions.",
        "class": "User Interface and Input Validation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The flight control system should be capable of detecting and rejecting invalid flight command inputs, while displaying the error type and corrective actions to the operator."
    },
    {
        "id": 426,
        "class": "Requirements Traceability Criteria",
        "safety_criterion": "Whether software functions are fully implemented. Verify that both safety-critical and non-safety-critical requirements have been realized during the design phase.",
        "document_name": "2.json",
        "document_chunk_index": 123,
        "hopy_requirement": "Flight control software should ensure that all safety-critical functions (such as attitude control, navigation, and communication) and non-safety-critical functions (such as data logging and report generation) have been implemented and verified during the design phase."
    },
    {
        "id": 427,
        "class": "Memory Management Criteria",
        "safety_criterion": "Memory usage and availability. In safety-critical code or software that may affect safety-critical components, dynamic memory allocation should be carefully considered. Dynamic memory allocation can lead to issues such as memory leaks (failure to release allocated memory), double freeing (causing exceptions), or buffer overflows that overwrite code or other regions. When dynamically allocating data structures, static analysis is often not feasible to verify that arrays and strings do not exceed the physical end of the structure.",
        "document_name": "5.json",
        "document_chunk_index": 264,
        "hopy_requirement": "The flight control system should ensure that dynamic memory allocation avoids memory leaks, double freeing, and buffer overflows to maintain the stability and security of critical task code."
    },
    {
        "id": 428,
        "class": "I/O Resource Allocation Criteria",
        "safety_criterion": "Usage (load) and capacity and availability of I/O channels. Consider the volume of input data (scientific data, housekeeping data, control sensors) and the volume of output data generated (communications). 'I/O channels' should include internal hardware (sensors), inter-process communication (messages), and external communication (data output, command and telemetry interfaces). Check for resource conflicts between scientific data collection and the availability of safety-critical data.",
        "document_name": "1.json",
        "document_chunk_index": 279,
        "hopy_requirement": "The system should ensure priority of transmission for critical flight control data and scientific data under high data load conditions to avoid safety-related resource conflicts."
    },
    {
        "id": 429,
        "class": "Task Timing Criteria",
        "safety_criterion": "Execution time versus CPU load and availability. Investigate variations in CPU load over time and identify environmental conditions that produce peak loads. Is the execution time acceptable under high-load conditions? Consider timing impacts caused by multitasking, such as message transmission delays or inability to access required resources due to occupation by other tasks.",
        "document_name": "4.json",
        "document_chunk_index": 259,
        "hopy_requirement": "The flight control system should ensure that the execution time of critical tasks still meets real-time requirements under high CPU load conditions, avoiding delays or resource access conflicts caused by multitasking scheduling."
    },
    {
        "id": 430,
        "class": "Fault Response and Recovery Criteria",
        "safety_criterion": "'Critical time' in safety-critical systems is the time interval between the occurrence of a fault and the system reaching an unsafe state. The design of safety protection and recovery mechanisms should fully consider real-world conditions and corresponding critical times. Automatic safety protection is only an effective hazard control method when sufficient margin exists between the maximum response time and the critical time.",
        "document_name": "5.json",
        "document_chunk_index": 130,
        "hopy_requirement": "The system should detect critical faults and initiate the redundancy system within 100 milliseconds, ensuring flight safety."
    },
    {
        "id": 431,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Automatic protection. If the critical time is less than the actual response time of the operator, or if there is no personnel involved in the loop, automatic safety protection should be considered. This can be performed by a combination of hardware and software.",
        "document_name": "2.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The system shall have an automatic protection function that automatically initiates safety measures when detecting that the critical time is less than the actual response time of the operator, ensuring flight safety."
    },
    {
        "id": 432,
        "class": "Data Criteria",
        "safety_criterion": "Sampling frequency and the rate of change of physical parameters. For critical signals and parameters used in closed-loop control, the sampling frequency must typically be higher. Usually, it must be at least 10 times the characteristic frequency of the system.",
        "document_name": "5.json",
        "document_chunk_index": 263,
        "hopy_requirement": "The flight control system shall sample and process critical flight parameters (e.g., attitude angle, speed, acceleration) in real-time at a rate no less than 10 times the characteristic frequency of the system to ensure accuracy and stability of closed-loop control."
    },
    {
        "id": 433,
        "class": "Redundancy Criteria",
        "safety_criterion": "Dynamic memory allocation. For safety-critical software, it should be specified how the software will handle failed dynamic allocations.",
        "document_name": "3.json",
        "document_chunk_index": 104,
        "hopy_requirement": "The system shall automatically switch to backup memory or trigger a fault protection mechanism in case of dynamic memory allocation failure, ensuring continuity and safety of flight operations."
    },
    {
        "id": 434,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Memory testing. Upon system power-up, random access memory (RAM) should be tested to verify that all memory addresses are available and that the RAM functions properly.",
        "document_name": "4.json",
        "document_chunk_index": 289,
        "hopy_requirement": "The flight control system shall perform RAM self-testing during each startup to ensure all memory addresses are available and functioning properly."
    },
    {
        "id": 435,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Program storage space and the size of executable code. Estimate the size of executable software stored in devices (EPROM, flash disk, etc.). This may be smaller than the memory footprint since only static or global variables occupy space. Additionally, if not all components reside in memory simultaneously, the executable code size may be larger. Program size includes both the operating system and application software.",
        "document_name": "1.json",
        "document_chunk_index": 168,
        "hopy_requirement": "Flight control software shall optimize storage space usage to ensure that the total storage requirements for the operating system and application software do not exceed the onboard computer's storage capacity."
    },
    {
        "id": 436,
        "class": "Data Criteria",
        "safety_criterion": "Amount of stored data versus available capacity. Consider how much scientific data, memory processing data, or other data will be generated and the available storage space (RAM, disk, etc.). If data is transmitted to the ground and then deleted from the storage medium, certain analysis should be conducted to determine how frequently the 'disk' might become full. Under certain conditions, inability to store data or overwriting previously stored data that has not yet been downloaded may be a safety-related issue.",
        "document_name": "3.json",
        "document_chunk_index": 174,
        "hopy_requirement": "Spacecraft shall have real-time monitoring and management of the storage capacity for scientific data, memory processing data, and other data to ensure that data loss or overwrite does not occur due to insufficient storage before transmitting data to the ground."
    },
    {
        "id": 437,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Ensure that there is no data or interface interaction between safety-critical and non-safety-critical functional modules;",
        "document_name": "5.json",
        "document_chunk_index": 228,
        "hopy_requirement": "Flight control software shall ensure that there is no data or interface interaction between safety-critical modules (e.g., flight control, navigation) and non-safety-critical modules (e.g., entertainment systems, cabin management)."
    },
    {
        "id": 438,
        "class": "Communication Criteria",
        "safety_criterion": "Use modular calling methods rather than directly accessing internal information within a module;",
        "document_name": "3.json",
        "document_chunk_index": 192,
        "hopy_requirement": "Flight control software shall use modular design to ensure that communication between functional modules occurs only through defined interfaces, prohibiting direct access to internal module data."
    },
    {
        "id": 439,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Variables within a module should be localized (set as local variables);",
        "document_name": "2.json",
        "document_chunk_index": 255,
        "hopy_requirement": "Each functional module of the flight control software shall ensure that its internal variables are localized to prevent cross-module data interference."
    },
    {
        "id": 440,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Place factors that may change or require frequent modifications into as few modules as possible;",
        "document_name": "2.json",
        "document_chunk_index": 297,
        "hopy_requirement": "Flight control software shall centrally manage flight parameters and configuration settings to ensure rapid updates and verification when changes occur."
    },
    {
        "id": 441,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The fan-out of a module should generally be limited to less than 7;",
        "document_name": "4.json",
        "document_chunk_index": 247,
        "hopy_requirement": "Each module of the flight control software shall limit the number of interfaces with other modules to no more than 7, ensuring the reliability and maintainability of communication and data exchange between modules."
    },
    {
        "id": 442,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Safety-critical software components of computer systems shall be independent from non-safety-critical functions;",
        "document_name": "2.json",
        "document_chunk_index": 167,
        "hopy_requirement": "Flight control software shall be separated from navigation and communication software, ensuring independence and safety of flight control."
    },
    {
        "id": 443,
        "class": "Data Criteria",
        "safety_criterion": "Decision statements. Decision statements in safety-critical computing system functions shall not rely on all-ones or all-zeros inputs, especially when this information comes from external sensors;",
        "document_name": "2.json",
        "document_chunk_index": 186,
        "hopy_requirement": "The flight control system shall ensure that all safety-critical decision statements do not depend on all-ones or all-zeros sensor inputs to prevent misjudgment."
    },
    {
        "id": 444,
        "class": "Communication Criteria",
        "safety_criterion": "External functions. Activation signals required for activation of safety-critical functions cannot all be received from a single input or output storage unit;",
        "document_name": "1.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system shall ensure that activation signals for critical control functions (such as engine ignition, attitude adjustment) come from multiple independent sources."
    },
    {
        "id": 445,
        "class": "Communication Criteria",
        "safety_criterion": "CPU-to-CPU communication. Communication between CPUs shall successfully pass verification checks on both CPUs before transmitting safety-critical data. If there are multiple consecutive transmission failures, an alarm shall be triggered to the operator, and transmission of safety-critical data shall be terminated until diagnostic checks can be performed;",
        "document_name": "4.json",
        "document_chunk_index": 94,
        "hopy_requirement": "The flight control system shall ensure that communication between the main CPU and backup CPU passes verification checks before transmitting safety-critical data; repeated transmission failures shall trigger alarms and terminate data transmission until diagnostic checks are completed."
    },
    {
        "id": 446,
        "class": "Data Criteria",
        "safety_criterion": "Input reasonableness check. Range and reasonableness checks shall be performed on all analog and digital inputs and outputs before using these values to perform safety-critical functions, including time ranges and dependency relationships.",
        "document_name": "1.json",
        "document_chunk_index": 158,
        "hopy_requirement": "The flight control system shall perform real-time checks on the reasonableness and range of all sensor inputs (e.g., altitude, speed, attitude angle), ensuring data remains within predefined safe limits."
    },
    {
        "id": 447,
        "class": "Communication Criteria",
        "safety_criterion": "Interface control. Interfaces with safety-critical hardware shall be controlled at all times; that is, the interface shall be monitored to ensure erroneous or false data does not inadvertently affect the system. Interface failures shall be detected, and the interface shall remain safe during power-up, power fluctuations and interruptions, and system errors or hardware failures.",
        "document_name": "2.json",
        "document_chunk_index": 223,
        "hopy_requirement": "The flight control system shall monitor interfaces with critical hardware (e.g., engines, navigation systems) in real time, ensuring data integrity and accuracy, and immediately taking safety measures upon detecting any anomalies."
    },
    {
        "id": 448,
        "class": "Redundancy Criteria",
        "safety_criterion": "Feedback loops. The design of feedback loops in system hardware shall ensure that the software cannot cause uncontrolled conditions due to failure of feedback sensors. Known component failure modes shall be considered in the software design, and checking mechanisms shall be designed into the software to detect failures.",
        "document_name": "3.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The flight control system shall have redundant feedback loop designs to ensure that if the primary feedback sensor fails, the backup sensor can take over immediately, preventing aircraft loss of control."
    },
    {
        "id": 449,
        "class": "Data Criteria",
        "safety_criterion": "Full-scale representation. In software design, full-scale and zero representations shall be fully compatible with any digital-to-analog, analog-to-digital, digital-to-synchro, or synchro-to-digital converters.",
        "document_name": "1.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The flight control system shall ensure that the full-scale and zero-point settings of all sensors and actuators are fully compatible with digital-to-analog and analog-to-digital converters."
    },
    {
        "id": 450,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Global variables have the same definition in all modules referencing them;",
        "document_name": "5.json",
        "document_chunk_index": 264,
        "hopy_requirement": "Global variables in flight control software (e.g., flight altitude, speed, attitude angle) shall maintain consistent definitions and usage across all modules."
    },
    {
        "id": 451,
        "class": "Data Criteria",
        "safety_criterion": "Parameters that are used only as input values must not be modified.",
        "document_name": "5.json",
        "document_chunk_index": 109,
        "hopy_requirement": "Flight control software should ensure that original input values are not modified during the processing of sensor data to guarantee data integrity and consistency."
    },
    {
        "id": 452,
        "class": "Data Criteria",
        "safety_criterion": "There should be no situation where constants are transmitted as if they were variables.",
        "document_name": "4.json",
        "document_chunk_index": 252,
        "hopy_requirement": "The system should ensure that constant parameters (such as maximum thrust, maximum speed, etc.) are not mistakenly treated as variables during the transmission of flight control commands."
    },
    {
        "id": 453,
        "class": "Data Criteria",
        "safety_criterion": "The number, attributes, units, and order of parameters for a module must match the number, attributes, units, and order of the input parameters accepted by the module.",
        "document_name": "3.json",
        "document_chunk_index": 87,
        "hopy_requirement": "Flight control modules should ensure that the number, attributes, units, and order of received flight parameters (e.g., altitude, speed, attitude angles) match those defined for the module's inputs."
    },
    {
        "id": 454,
        "class": "Data Criteria",
        "safety_criterion": "The number, attributes, units, and order of parameters passed to a called module must be consistent and compatible with the number, attributes, units, and order of the module's expected parameters.",
        "document_name": "1.json",
        "document_chunk_index": 264,
        "hopy_requirement": "When the navigation system invokes the attitude control module, it must ensure that the number, attributes, units, and order of the provided attitude parameters (e.g., roll angle, pitch angle, yaw angle) match the module’s definitions."
    },
    {
        "id": 455,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Initiation of safety-critical operations. Activation of safety-critical operations should require operation by two or more personnel in an AND configuration, along with robust anti-misfire protection measures to prevent unintended activation.",
        "document_name": "4.json",
        "document_chunk_index": 167,
        "hopy_requirement": "Safety-critical operations in the flight control system (e.g., emergency landing, engine restart) must be executed by two or more operators in dual confirmation mode, with mechanisms in place to prevent accidental activation."
    },
    {
        "id": 456,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Recovery to a safe state. Human-machine interface software should allow the operator to perform a single action to terminate the current transaction and bring the system out of a potentially unsafe state and into a safe one. This action may involve pressing two keys, buttons, or switches simultaneously. When the operator's reaction time is insufficient to prevent catastrophe, the software should return the system to a known safe state, report the failure, and inform the operator of the system status.",
        "document_name": "2.json",
        "document_chunk_index": 230,
        "hopy_requirement": "The flight control system should have a one-button reset function, allowing the operator to restore the system to a safe state through a single action in an emergency, followed by reporting the system status after recovery."
    },
    {
        "id": 457,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Protection against incorrect operations. The software should detect incorrect operator entries or actions and prevent the execution of safety-critical functions due to such errors. An alert should be issued for such errors, including error messages and corrective actions.",
        "document_name": "3.json",
        "document_chunk_index": 110,
        "hopy_requirement": "The flight control system should be capable of detecting and blocking incorrect operator commands, such as erroneous heading, speed, or altitude settings, and issue alerts to the operator with specific error information and corrective measures."
    },
    {
        "id": 458,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Alarm design. Alarm design should differentiate routine alarms from safety-critical alarms. It should also ensure that safety-critical alarms cannot be cleared without performing the required follow-up actions or taking corrective measures to complete the operation. Signals indicating unsafe states should be delivered directly to the operator interface whenever possible.",
        "document_name": "1.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The flight control system should have the capability to distinguish between routine and safety-critical alarms and ensure that safety-critical alarms cannot be dismissed until corrective actions are taken. In addition, all alarm signals related to unsafe conditions should be displayed directly on the operator interface."
    },
    {
        "id": 459,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Appropriate and timely feedback must be provided: If an operation is completed, an indication should be given; if further options or actions are available, these should also be indicated; the operator should feel in control of the system and software, and perceive the system's response to their actions.",
        "document_name": "5.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The flight control system should provide real-time feedback information, including confirmation of completed operations, prompts for next steps, and the system's response to operator commands."
    },
    {
        "id": 460,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Avoid changing the system's safety status without the operator's knowledge.",
        "document_name": "1.json",
        "document_chunk_index": 299,
        "hopy_requirement": "The system should ensure that flight control modes or navigation parameters are not automatically changed without the operator's explicit confirmation."
    },
    {
        "id": 461,
        "class": "Operating State Criteria",
        "safety_criterion": "Ensure that a status change report is generated when a safety-critical state changes.",
        "document_name": "3.json",
        "document_chunk_index": 194,
        "hopy_requirement": "When a critical state of the aircraft changes, the system should automatically generate and transmit a status change report, including the time of change, the state parameters before and after the change, and the reason for the change."
    },
    {
        "id": 462,
        "class": "Operating State Criteria",
        "safety_criterion": "The software should be able to determine whether the operator's input operations are correct. When incorrect inputs or operations are detected, the software should reject execution of the operation, alert the operator to the error, and indicate the type of error and corrective actions.",
        "document_name": "3.json",
        "document_chunk_index": 190,
        "hopy_requirement": "The flight control system should be capable of validating the operator’s input commands in real-time. For incorrect commands, the system should reject execution and immediately provide feedback to the operator regarding the error type and corrective measures."
    },
    {
        "id": 463,
        "class": "Data Criteria",
        "safety_criterion": "Safety-critical data must be isolated from other data, and non-safety-critical components must not be allowed to access safety-critical data.",
        "document_name": "1.json",
        "document_chunk_index": 215,
        "hopy_requirement": "The flight control system should isolate key flight parameters (such as attitude, speed, altitude) from non-critical data (such as passenger entertainment system data), ensuring that non-critical systems cannot access or modify key flight parameters."
    },
    {
        "id": 464,
        "class": "Communication Criteria",
        "safety_criterion": "Safety-critical data should be encrypted during transmission to protect safety criteria.",
        "document_name": "4.json",
        "document_chunk_index": 149,
        "hopy_requirement": "The system should encrypt flight control commands and sensitive flight data during transmission to ensure secure communication between the ground station and the aircraft."
    },
    {
        "id": 465,
        "class": "Data Criteria",
        "safety_criterion": "Databases and data files containing safety-critical data must be documented.",
        "document_name": "3.json",
        "document_chunk_index": 288,
        "hopy_requirement": "The system should maintain and document all flight control parameters and key mission data to ensure data integrity and traceability."
    },
    {
        "id": 466,
        "class": "Data Criteria",
        "safety_criterion": "Data area isolation. To prevent programs from treating data as instructions, measures should be taken to store data and instructions separately.",
        "document_name": "1.json",
        "document_chunk_index": 156,
        "hopy_requirement": "Flight control software should store flight data and control instructions in separate memory areas to ensure isolation between data and instructions."
    },
    {
        "id": 467,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The storage space used by algorithms should be completely deterministic. For example, dynamic heap allocation should not be used.",
        "document_name": "4.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Flight control software should use fixed-size buffers and arrays, avoiding dynamic memory allocation."
    },
    {
        "id": 468,
        "class": "Data Criteria",
        "safety_criterion": "Each piece of safety-critical data used at an interface must have a unique identifier.",
        "document_name": "1.json",
        "document_chunk_index": 262,
        "hopy_requirement": "All flight control commands and status data must include a unique identifier during transmission to ensure data integrity and traceability."
    },
    {
        "id": 469,
        "class": "Communication Criteria",
        "safety_criterion": "Data transmission messages should have a predefined format and content. Each transmission should contain a word or string indicating message length, data type, or content. At minimum, parity checking and checksum verification should be used to validate the correctness of the data transmission. No information from a data transmission message should be used until its correctness has been verified.",
        "document_name": "4.json",
        "document_chunk_index": 228,
        "hopy_requirement": "The satellite communication system should ensure that all data transmission messages use a predefined format and content. Each transmission should include information on message length, data type, or content, and should use parity checking and checksum validation to ensure correct data transmission."
    },
    {
        "id": 470,
        "class": "Operating State Criteria",
        "safety_criterion": "The software should be able to determine whether the operator's input operations are correct. When incorrect inputs or operations are detected, the software should reject execution of the operation, alert the operator to the error, and indicate the type of error and corrective actions.",
        "document_name": "1.json",
        "document_chunk_index": 146,
        "hopy_requirement": "The flight control software should be capable of validating operator command inputs. For incorrect commands, the system should reject execution and immediately provide feedback to the operator regarding the error type and corrective measures."
    },
    {
        "id": 471,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When performing mathematical operations, the handling of floating-point numbers near zero should be carefully considered. When underflow may occur, a suitably small floating-point number should be used to replace zero in order to avoid underflow. In comparisons involving floating-point numbers, direct equality checks should not be performed.",
        "document_name": "3.json",
        "document_chunk_index": 221,
        "hopy_requirement": "The flight control system shall ensure that floating-point calculations use appropriately small floating-point values to replace zero in order to prevent underflow, and avoid direct equality checks on floating-point numbers to ensure computational accuracy and stability."
    },
    {
        "id": 472,
        "class": "Data Criteria",
        "safety_criterion": "Unauthorized or unintended access to or modification of data should be prevented.",
        "document_name": "2.json",
        "document_chunk_index": 143,
        "hopy_requirement": "The system shall ensure that flight control data is not modified without authorization during transmission, ensuring data integrity and confidentiality."
    },
    {
        "id": 473,
        "class": "Data Criteria",
        "safety_criterion": "A certain code distance should be maintained between safety-critical information and other information so that safety-critical information will not cause system failure due to one-bit or two-bit errors.",
        "document_name": "3.json",
        "document_chunk_index": 149,
        "hopy_requirement": "The system shall ensure that the transmitted code distance between flight control commands and status monitoring data is at least three to prevent system failures caused by single or double bit errors."
    },
    {
        "id": 474,
        "class": "Redundancy Criteria",
        "safety_criterion": "Safety-critical information and data should be stored in multiple or different chips and subjected to voting processing.",
        "document_name": "5.json",
        "document_chunk_index": 159,
        "hopy_requirement": "The flight control system shall store critical flight data (such as attitude, speed, altitude) in multiple independent memory chips and ensure data accuracy and reliability through majority voting mechanisms."
    },
    {
        "id": 475,
        "class": "Data Criteria",
        "safety_criterion": "Input data elements should be passed to another module interface in the form of explicit parameters. The calling module does not need to know how the data is processed.",
        "document_name": "3.json",
        "document_chunk_index": 261,
        "hopy_requirement": "Flight control modules shall be able to receive and process real-time sensor data without needing to understand the internal data processing procedures."
    },
    {
        "id": 476,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Security passwords should be set for security-critical modules;",
        "document_name": "4.json",
        "document_chunk_index": 169,
        "hopy_requirement": "Security-critical modules in the flight control system shall be protected with access passwords to ensure only authorized personnel can access and operate them."
    },
    {
        "id": 477,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Execution of safety-critical functions should require receiving two or more identical inputs before proceeding;",
        "document_name": "2.json",
        "document_chunk_index": 150,
        "hopy_requirement": "The flight control system shall execute critical flight control commands only after receiving identical navigation data from two or more redundant sensors."
    },
    {
        "id": 478,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Safety-critical information should not be generated solely by a single CPU command;",
        "document_name": "5.json",
        "document_chunk_index": 216,
        "hopy_requirement": "The flight control system shall employ redundancy design to ensure that safety-critical commands (such as attitude control, engine ignition) are verified and executed by multiple independent CPUs."
    },
    {
        "id": 479,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Registers and I/O ports should not be used to store safety-critical information;",
        "document_name": "1.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The flight control system shall use non-volatile memory to store critical flight parameters and safety data."
    },
    {
        "id": 480,
        "class": "Communication Criteria",
        "safety_criterion": "Representation of safety-critical information: Safety-critical information should not cause system failure due to one-bit or two-bit errors. A certain code distance should be maintained between safety-critical information and other information.",
        "document_name": "4.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The navigation system shall ensure that the encoding method of critical flight data (such as altitude, speed, heading) can prevent system failures caused by one-bit or two-bit errors."
    },
    {
        "id": 481,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The basis for decision-making regarding safety-critical information must not rely on all '1's or all '0's input (especially information received from external sensors).",
        "document_name": "1.json",
        "document_chunk_index": 234,
        "hopy_requirement": "The flight control system shall ensure that decisions for all safety-critical information do not depend on all '1's or all '0's sensor inputs to prevent misjudgment."
    },
    {
        "id": 482,
        "class": "Task Timing Criteria",
        "safety_criterion": "Program design related to hardware state changes shall consider the number of state detections or time. Where no time reference is available, loop wait counts may be used as a reference, and timeout handling shall be performed if a certain count is exceeded.",
        "document_name": "4.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The flight control system shall periodically monitor engine status, and if valid status feedback is not received within the specified time, the system shall trigger timeout handling and switch to backup control mode."
    },
    {
        "id": 483,
        "class": "Task Timing Criteria",
        "safety_criterion": "A watchdog timer or similar measure shall be provided to ensure that microprocessors or computers have the capability to handle program timeout or infinite loop faults.",
        "document_name": "4.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The flight control system shall be equipped with a watchdog timer to ensure that when a program timeout or infinite loop fault is detected, an automatic fault recovery mechanism can be triggered."
    },
    {
        "id": 484,
        "class": "Timing Criteria",
        "safety_criterion": "Watchdog timers should preferably use independent clock sources and be implemented in independent hardware. If programmable timers are used, the design should comprehensively consider the counting clock frequency and timing parameters to ensure that under external interference conditions, the minimum value of the timer after interference is greater than the time required for system reinitialization, and the maximum value is less than the longest allowable fault handling time of the system.",
        "document_name": "3.json",
        "document_chunk_index": 118,
        "hopy_requirement": "The flight control system shall be equipped with an independent hardware watchdog timer to ensure that under external interference conditions, the minimum value of the timer is greater than the time required for system reinitialization, and the maximum value is less than the longest allowable fault handling time of the system."
    },
    {
        "id": 485,
        "class": "Task Timing Criteria",
        "safety_criterion": "Timer reset design must be implemented, and the software should not enter an internal loop or reset the timer as part of a looping instruction sequence. When applicable, the system must return to a known safe state and alert the operator.",
        "document_name": "5.json",
        "document_chunk_index": 143,
        "hopy_requirement": "The flight control system shall have a timer reset mechanism to ensure that when the software enters an infinite loop, the system can automatically reset and return to a safe state while sending an alarm to the ground control station."
    },
    {
        "id": 486,
        "class": "Redundancy Criteria",
        "safety_criterion": "The design of the timer must ensure that the failure of the main CPU clock cannot impair its function.",
        "document_name": "3.json",
        "document_chunk_index": 223,
        "hopy_requirement": "The system shall have redundant timers to ensure accurate execution of critical tasks' timing and synchronization functions even when the main CPU clock fails."
    },
    {
        "id": 487,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Safety-critical components must be separated from non-safety-critical components.",
        "document_name": "2.json",
        "document_chunk_index": 228,
        "hopy_requirement": "Flight control computers and navigation systems shall be physically isolated to ensure that safety-critical functions are not affected by non-safety-critical functions."
    },
    {
        "id": 488,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "The position and function of safety-critical components in the design architecture must be documented.",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The system shall document in detail the position and function of key flight control components (e.g., autopilot, navigation system) within the system architecture."
    },
    {
        "id": 489,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Minimize the number of safety-critical components. The design of interfaces between safety-critical components should also achieve minimal interaction (low coupling).",
        "document_name": "2.json",
        "document_chunk_index": 277,
        "hopy_requirement": "The flight control system shall minimize the number of key sensors and actuators and ensure that the interface design between these key components is low coupling."
    },
    {
        "id": 490,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Documentation is required showing how each safety-critical component traces back to the initial safety requirements and how those requirements are implemented.",
        "document_name": "4.json",
        "document_chunk_index": 266,
        "hopy_requirement": "The system shall be able to generate and maintain traceability documentation for each safety-critical component to ensure that the requirements and implementation process of each component are traceable."
    },
    {
        "id": 491,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Except in the case of interrupts, software modules must use single-entry and single-exit control structures.",
        "document_name": "5.json",
        "document_chunk_index": 232,
        "hopy_requirement": "Flight control software modules shall ensure the use of single-entry and single-exit control structures under non-interrupt conditions to guarantee the stability and safety of flight missions."
    },
    {
        "id": 492,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault detection and isolation procedures must be developed for safety-critical subsystems of computing systems.",
        "document_name": "4.json",
        "document_chunk_index": 182,
        "hopy_requirement": "The flight control system must have fault detection and isolation capabilities to ensure timely identification and isolation of faults when failures occur in critical subsystems, thereby ensuring flight safety."
    },
    {
        "id": 493,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Modules should be invoked through an interface rather than directly accessing internal information within modules.",
        "document_name": "5.json",
        "document_chunk_index": 309,
        "hopy_requirement": "Flight control software shall invoke subsystem functions through modular interfaces and direct access to internal data and states of subsystems shall be prohibited."
    },
    {
        "id": 494,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "Factors that may change or require frequent modifications should be placed in as few modules as possible.",
        "document_name": "3.json",
        "document_chunk_index": 257,
        "hopy_requirement": "Flight control software shall centrally manage all configurations related to flight parameters and environmental variables to ensure that only a few modules need to be updated during modifications."
    },
    {
        "id": 495,
        "class": "Data Criteria",
        "safety_criterion": "All flags must be strictly defined and documentation on flag usage must be prepared; for safety-critical flags, they must be unique and used for a single purpose within the software unit where they are used.",
        "document_name": "4.json",
        "document_chunk_index": 130,
        "hopy_requirement": "All safety-critical flags in the flight control system (e.g., emergency landing flag, engine failure flag) must be uniquely defined within the software units and can only be used for a single purpose."
    },
    {
        "id": 496,
        "class": "Task Timing Criteria",
        "safety_criterion": "Unused interrupts must be masked, and entry points with returns must be set for unused interrupts.",
        "document_name": "2.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The flight control system must be able to mask and handle irrelevant interrupt signals to ensure continuity and safety of flight missions."
    },
    {
        "id": 497,
        "class": "Timing Criteria",
        "safety_criterion": "Pre-glitch measures (either hardware or software methods) must be implemented to ensure edge-triggered interrupts, and level-triggered interrupts must ensure pulse width.",
        "document_name": "5.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The flight control system must have anti-glitch measures to ensure reliable triggering of interrupt signals and perform width detection on level-triggered signals."
    },
    {
        "id": 498,
        "class": "Task Timing Criteria",
        "safety_criterion": "Reasonable measures must be taken to address the impact of potential false interrupts and frequent interrupts.",
        "document_name": "2.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The system shall have the capability to resist false and frequent interrupts to ensure continuity and stability of navigation and control functions."
    },
    {
        "id": 499,
        "class": "Communication Criteria",
        "safety_criterion": "Unused interrupt sources must be masked. Unused interrupt sources must be masked through control words, etc., and their interrupt service subroutines must be written as empty handlers containing only a return statement.",
        "document_name": "5.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The flight control system shall disable all unused interrupt sources and set empty handler subroutines for these interrupt sources to prevent accidental triggering."
    },
    {
        "id": 500,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Non-interrupt return statements must not be used in interrupt service subroutines. Except for special cases, jump statements or subroutine return statements shall not be used directly from interrupt service subroutines; normal interrupt return instructions must be used.",
        "document_name": "3.json",
        "document_chunk_index": 276,
        "hopy_requirement": "Interrupt service subroutines of the flight control system shall ensure returning only via normal interrupt return instructions to prevent unexpected jumps and system instability."
    },
    {
        "id": 501,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Ensure that interrupts are disabled before setting system function registers to prevent interrupts from affecting register settings. Interrupts should be disabled before clearing the interrupt enable register and setting the interrupt mask register to prevent other interrupts from affecting the settings of these two registers.",
        "document_name": "3.json",
        "document_chunk_index": 107,
        "hopy_requirement": "The interrupt management module of the flight control system should disable interrupts before setting function registers to ensure the integrity and consistency of register settings."
    },
    {
        "id": 502,
        "class": "Task Timing Criteria",
        "safety_criterion": "The timing of interrupt handling must be considered in software design. When there are multiple interrupt handlers in the software, attention must be paid to the timing relationship between each interrupt handler, especially the timing relationship between nested interrupts.",
        "document_name": "5.json",
        "document_chunk_index": 301,
        "hopy_requirement": "Flight control software should ensure correct timing relationships between multiple interrupt handlers (e.g., attitude control, navigation updates, and fault detection) when they occur simultaneously, avoiding system instability caused by nested interrupts."
    },
    {
        "id": 503,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Interrupt context saving and restoration must be implemented. Fully consider the characteristic that interrupts can occur at any time, properly save the context that needs protection, and correctly restore the context upon returning from the interrupt service subroutine.",
        "document_name": "4.json",
        "document_chunk_index": 302,
        "hopy_requirement": "The flight control system should have the capability to save the current flight state and task parameters when an interrupt occurs and correctly restore these parameters after interrupt processing is completed."
    },
    {
        "id": 504,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Verify whether the program design considers interrupt priority. Since interrupts in the software have priorities and there is also a priority order between the interrupt program and the main program, try to avoid assigning values to the same variable across these programs with different priorities. If unavoidable, critical section protection must be applied.",
        "document_name": "2.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The flight control system should ensure mutual exclusion when interrupt handling routines and the main program access critical flight parameters to prevent data inconsistency and race conditions."
    },
    {
        "id": 505,
        "class": "Initialization Criteria",
        "safety_criterion": "All required resources must be initialized during interrupt initialization, such as triggering methods and variables to be used.",
        "document_name": "5.json",
        "document_chunk_index": 127,
        "hopy_requirement": "During aircraft startup, the system should initialize all necessary sensors and communication links to ensure their proper operation."
    },
    {
        "id": 506,
        "class": "Control Calculation Criteria",
        "safety_criterion": "During the use of interrupts, operations must strictly follow the sequence: 'disable interrupts, initialize, enable interrupts'.",
        "document_name": "2.json",
        "document_chunk_index": 260,
        "hopy_requirement": "The system should ensure that during flight control task interrupt handling, operations are performed strictly in the sequence of 'disabling interrupts, initializing, restoring interrupt enable' to ensure task continuity and safety."
    },
    {
        "id": 507,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Verify whether the software has measures to handle potential repeated responses to the same interrupt (e.g., in level-triggered mode or when the level width is wide) according to the specific CPU interrupt mechanism.",
        "document_name": "4.json",
        "document_chunk_index": 87,
        "hopy_requirement": "Flight control software should have the ability to handle multiple CPU interrupts and ensure that flight control does not fail due to delayed interrupt responses in level-triggered mode."
    },
    {
        "id": 508,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Self-nesting interrupts are prohibited.",
        "document_name": "3.json",
        "document_chunk_index": 147,
        "hopy_requirement": "Flight control software should prohibit self-nesting interrupts to ensure stable system operation under high load conditions."
    },
    {
        "id": 509,
        "class": "Operating State Criteria",
        "safety_criterion": "System and software must start synchronization in a safe state (in a safe state). (Here, a safe state refers to a state relative to a fault state.)",
        "document_name": "2.json",
        "document_chunk_index": 307,
        "hopy_requirement": "The flight control system must verify the status of all key sensors and actuators during startup to ensure they are operating normally."
    },
    {
        "id": 510,
        "class": "Operating State Criteria",
        "safety_criterion": "The internal software process model must be updated to reflect the actual process state after initial startup and temporary shutdown. After startup, all local variables must be correctly initialized.",
        "document_name": "5.json",
        "document_chunk_index": 221,
        "hopy_requirement": "After every startup and restart, the system must correctly initialize all flight control variables and state parameters to ensure normal operation of the flight control system."
    },
    {
        "id": 511,
        "class": "Timing Criteria",
        "safety_criterion": "There must be corresponding software behavior to handle the absence of input.",
        "document_name": "5.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The flight control system shall automatically switch to a predefined safe mode and record fault information when invalid or missing sensor data is received."
    },
    {
        "id": 512,
        "class": "Timing Criteria",
        "safety_criterion": "A delay factor must be included before the timeout control measures are triggered (the delay time value is affected by the system's input sampling frequency, response time, and output generation time, and the delay time cannot be zero) when the required input is not received within the specified time interval or just before the timeout control measures are triggered.",
        "document_name": "1.json",
        "document_chunk_index": 144,
        "hopy_requirement": "The system shall have a timeout detection mechanism to ensure that if critical flight data is not received within the specified time, delay measures are automatically triggered to prevent erroneous control commands from being executed."
    },
    {
        "id": 513,
        "class": "Timing Criteria",
        "safety_criterion": "The situation where input signals are not delivered within a specified time interval or deadline must be handled, for example through fault handling or fault recovery mechanisms.",
        "document_name": "1.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system shall automatically trigger fault handling and recovery mechanisms when critical sensor data is not received within a specified time interval."
    },
    {
        "id": 514,
        "class": "Timing Criteria",
        "safety_criterion": "Interrupts are prohibited during synchronization; interrupts can be enabled after synchronization is completed.",
        "document_name": "4.json",
        "document_chunk_index": 297,
        "hopy_requirement": "During the data synchronization process in the flight control system, interrupt operations are prohibited to ensure data integrity and consistency; interrupt operations are allowed after synchronization is completed."
    },
    {
        "id": 515,
        "class": "Timing Criteria",
        "safety_criterion": "After synchronization recovery, paths leading to hazardous conditions must be redirected to safe paths. The termination of the synchronization recovery mechanism must result in a safe system state.",
        "document_name": "5.json",
        "document_chunk_index": 230,
        "hopy_requirement": "After synchronization recovery in the flight control system, any path that could lead to flight safety risks must automatically switch to a predefined safe path, ensuring the system returns to a safe state."
    },
    {
        "id": 516,
        "class": "Data Criteria",
        "safety_criterion": "The amount of stored data should not exceed the available capacity.",
        "document_name": "2.json",
        "document_chunk_index": 259,
        "hopy_requirement": "The flight control system shall ensure that the storage capacity of the flight data recorder never exceeds its maximum capacity to prevent data loss or overwrite."
    },
    {
        "id": 517,
        "class": "Data Criteria",
        "safety_criterion": "Define corresponding behaviors and acceptable ranges of variation for each transmitted data variable value. Every value, whether within or out of bounds, must be handled.",
        "document_name": "4.json",
        "document_chunk_index": 256,
        "hopy_requirement": "The flight control system shall define and handle normal ranges and out-of-bound situations for all flight parameters (e.g., altitude, speed, attitude angle), ensuring the system operates safely under all conditions."
    },
    {
        "id": 518,
        "class": "Timing Criteria",
        "safety_criterion": "Corresponding software behavior must exist to handle the absence of input within a given time, avoiding the impact of input faults on the system state.",
        "document_name": "4.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The flight control system shall have a timeout detection mechanism to ensure that if navigation commands are not received within the preset time, it automatically switches to a safe mode."
    },
    {
        "id": 519,
        "class": "Data Criteria",
        "safety_criterion": "Exception handling must be considered when the data input rate exceeds the input capacity, including signal saturation (data overflow), duplicate commands, and overflow protection.",
        "document_name": "5.json",
        "document_chunk_index": 260,
        "hopy_requirement": "The flight control system shall have data overload protection mechanisms capable of handling signal saturation, duplicate commands, and overflow situations to ensure system stability."
    },
    {
        "id": 520,
        "class": "Data Criteria",
        "safety_criterion": "Memory usage shall meet availability requirements (dynamic memory allocation issues).",
        "document_name": "4.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The flight control system shall ensure that dynamic memory allocation does not lead to system crashes or performance degradation during mission execution."
    },
    {
        "id": 521,
        "class": "Communication Criteria",
        "safety_criterion": "The use of I/O channels (load) should meet capacity and availability requirements.",
        "document_name": "2.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The system shall ensure that the load on all flight control I/O channels does not exceed their maximum capacity and maintains high availability."
    },
    {
        "id": 522,
        "class": "Data Criteria",
        "safety_criterion": "Program storage space must adequately accommodate the size of executable code.",
        "document_name": "4.json",
        "document_chunk_index": 252,
        "hopy_requirement": "Flight control software storage space should be sufficiently large to support all executable code and data required for flight missions."
    },
    {
        "id": 523,
        "class": "Timing Criteria",
        "safety_criterion": "For flag units, mutual exclusion rules must be followed, such as write-side set, read-side clear.",
        "document_name": "2.json",
        "document_chunk_index": 251,
        "hopy_requirement": "Flag units in the flight control system must ensure mutual exclusion during state flag read/write operations to prevent data conflicts and inconsistencies."
    },
    {
        "id": 524,
        "class": "Operating State Criteria",
        "safety_criterion": "Timeout conditions (data not received within a specified interval or before a specific time) must be handled in each state.",
        "document_name": "3.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The system shall automatically switch to a safe mode and record timeout events when flight control commands timeout (e.g., no new commands received for over one second)."
    },
    {
        "id": 525,
        "class": "Redundancy Criteria",
        "safety_criterion": "In the event of a failure, the software must provide fault containment mechanisms to prevent errors from propagating across unit interfaces in redundant systems, such as setting permanent faults or disconnecting channels.",
        "document_name": "3.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system shall have fault isolation mechanisms to ensure that a single channel failure does not affect the normal operation of other channels."
    },
    {
        "id": 526,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If a correct member variable depends on a certain value, then after voting, all correct member variables must depend on the same value.",
        "document_name": "5.json",
        "document_chunk_index": 114,
        "hopy_requirement": "Redundant sensors in the flight control system shall ensure that all correct sensor output values are consistent during the voting process."
    },
    {
        "id": 527,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If all member variables have the same initial proposed value, then after voting, all member variables shall adopt this value.",
        "document_name": "4.json",
        "document_chunk_index": 296,
        "hopy_requirement": "During initialization, all redundant channels of the flight control system shall have consistent initial status parameters to ensure the correctness of the voting mechanism."
    },
    {
        "id": 528,
        "class": "Task Timing Criteria",
        "safety_criterion": "The degradation process should be smooth, and response time should not change suddenly or abnormally. The transition to different redundancy processing logic should be smooth.",
        "document_name": "2.json",
        "document_chunk_index": 308,
        "hopy_requirement": "During the degradation process of the flight control system, the response time of attitude control and navigation systems should transition smoothly to avoid abrupt changes."
    },
    {
        "id": 529,
        "class": "State Scenario Criteria",
        "safety_criterion": "The mode path from a fault state to a safe state (fail-safe, partial or complete shutdown) must be clearly defined. The duration of a safe but functionally degraded mode should be minimized.",
        "document_name": "4.json",
        "document_chunk_index": 171,
        "hopy_requirement": "Upon detecting a critical system failure, the flight control system shall automatically switch to a safe mode and restore to the minimum safe functional state in the shortest time possible."
    },
    {
        "id": 530,
        "class": "State Scenario Criteria",
        "safety_criterion": "Temporal history of mode transitions should be used to prevent entering into cycles between continuous degradation and normal states.",
        "document_name": "5.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The system shall have mode transition management functionality to ensure that it avoids cycling between continuous degradation and normal states during mode transitions."
    },
    {
        "id": 531,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Resource allocation and margin requirements; during software design, storage capacity of relevant software modules, throughput capacity of input/output channels, and processing time requirements should be determined to ensure compliance with system-specified margin requirements. Generally, a margin of no less than 20% should be reserved.",
        "document_name": "2.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The flight control system must ensure that at least 20% processing capacity and storage margin are retained even under maximum mission load to handle unexpected situations."
    },
    {
        "id": 532,
        "class": "Timing Criteria",
        "safety_criterion": "Consideration of timing margin in scheduling; the timing schedule for software operations should determine various cycles (e.g., sampling cycle, data computation cycle, and control cycle) based on specific controlled objects. If these cycles cannot fit on the timeline, higher-performance CPUs or parallel CPU processing should be used to ensure sufficient timing margin between software operations.",
        "document_name": "3.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The flight control system must ensure reasonable arrangement of sampling cycles, data computation cycles, and control cycles across different flight phases (e.g., takeoff, cruise, landing), leaving sufficient timing margins. High-performance CPUs or multi-CPU parallel processing may be used when necessary."
    },
    {
        "id": 533,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Verification of how safety-critical components meet safety requirements; this includes analysis or simulation information from any prototypes, and specifies design margins for these components.",
        "document_name": "5.json",
        "document_chunk_index": 303,
        "hopy_requirement": "Critical flight control components (e.g., autopilot, attitude control system) must have their designs verified through simulation and prototype testing for reliability and fault tolerance under extreme conditions, ensuring that design margins meet safety requirements."
    },
    {
        "id": 534,
        "class": "Data Criteria",
        "safety_criterion": "Sampling frequency and rate of change of physical parameters (for critical signals and parameters used in closed-loop control, sampling is typically at least 10 times the system characteristic frequency; validity of system performance models, simulations, and test data)",
        "document_name": "4.json",
        "document_chunk_index": 162,
        "hopy_requirement": "The system must ensure that the sampling frequency of critical flight control parameters (e.g., attitude angle, speed, altitude) is no less than 10 times the system characteristic frequency to guarantee stability and accuracy of closed-loop control."
    },
    {
        "id": 535,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Digital systems must have sufficiently long word lengths to reduce the impact of quantization noise, thereby ensuring system stability.",
        "document_name": "4.json",
        "document_chunk_index": 136,
        "hopy_requirement": "The flight control system must have high-precision digital signal processing capabilities to ensure the accuracy and stability of navigation and control commands."
    },
    {
        "id": 536,
        "class": "Timing Criteria",
        "safety_criterion": "Check reference data, synchronization, and precision (time jitter) of timing clocks to ensure the control system can accommodate outdated control parameters.",
        "document_name": "3.json",
        "document_chunk_index": 260,
        "hopy_requirement": "The navigation system must have high-precision clock synchronization functionality to ensure accurate execution of flight control parameters even when clock data is outdated."
    },
    {
        "id": 537,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "User interfaces must incorporate error-proofing design.",
        "document_name": "1.json",
        "document_chunk_index": 158,
        "hopy_requirement": "The user interface of the flight control system must include error-proofing features to prevent operators from entering invalid or hazardous commands."
    },
    {
        "id": 538,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "There should be no mandatory conditions that enhance errors; for example, 'use any possible means to complete this task' or imposing requirements within a certain timeframe.",
        "document_name": "1.json",
        "document_chunk_index": 297,
        "hopy_requirement": "The system must ensure that execution of flight control commands under any circumstances will not cause the aircraft to exceed its safe operating limits."
    },
    {
        "id": 539,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Consistency should be maintained throughout the system (e.g., consistent colors, window layouts, font sizes).",
        "document_name": "3.json",
        "document_chunk_index": 191,
        "hopy_requirement": "The flight control interface should maintain a consistent visual style, including color schemes, window layouts, and font sizes, to reduce pilot operational errors."
    },
    {
        "id": 540,
        "class": "Task Timing Criteria",
        "safety_criterion": "If processing functions require several seconds or longer, status indications should be provided to the operator during processing.",
        "document_name": "4.json",
        "document_chunk_index": 302,
        "hopy_requirement": "During long-duration task processing, the system should provide real-time status indications to the ground control station, including task progress and current status."
    },
    {
        "id": 541,
        "class": "Operating State Criteria",
        "safety_criterion": "When a safety-critical state changes, ensure that a state change report or record is generated.",
        "document_name": "1.json",
        "document_chunk_index": 190,
        "hopy_requirement": "In the flight control system, any safety-critical state change (e.g., autopilot mode switching, engine status variation) shall generate a real-time state change report and be recorded."
    },
    {
        "id": 542,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Software coding should comply with the requirements of safety-coding guidelines for the software.",
        "document_name": "1.json",
        "document_chunk_index": 176,
        "hopy_requirement": "Flight control software coding shall follow rigorous safety coding standards to ensure code robustness and security."
    },
    {
        "id": 543,
        "class": "Control Calculation Criteria",
        "safety_criterion": "All allocated dynamic memory should be released within a certain time period to prevent memory leaks.",
        "document_name": "5.json",
        "document_chunk_index": 212,
        "hopy_requirement": "The flight control system shall ensure that all dynamically allocated memory resources are promptly released after task completion to prevent memory leaks leading to system performance degradation or failure."
    },
    {
        "id": 544,
        "class": "Task Timing Criteria",
        "safety_criterion": "Strictly restrict the use of page scheduling and memory swapping to prevent timing delays.",
        "document_name": "5.json",
        "document_chunk_index": 201,
        "hopy_requirement": "The flight control system shall prohibit the use of page scheduling and memory swapping to ensure real-time response and control accuracy."
    },
    {
        "id": 545,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Avoid using goto statements.",
        "document_name": "3.json",
        "document_chunk_index": 250,
        "hopy_requirement": "Flight control software shall avoid the use of goto statements to ensure code readability and maintainability."
    },
    {
        "id": 546,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The nesting level should be limited to reduce the complexity of control flow.",
        "document_name": "1.json",
        "document_chunk_index": 133,
        "hopy_requirement": "Flight control software shall limit the depth of nested logic to ensure simplicity and maintainability of the control flow."
    },
    {
        "id": 547,
        "class": "Data Criteria",
        "safety_criterion": "Variables should be initialized before use.",
        "document_name": "4.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The system shall ensure that all flight control parameters have been properly initialized before use."
    },
    {
        "id": 548,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Single entry and single exit should be used in larger programs.",
        "document_name": "1.json",
        "document_chunk_index": 205,
        "hopy_requirement": "Flight control software shall adopt modular design, ensuring each module has a single entry point and a single exit point to improve code maintainability and safety."
    },
    {
        "id": 549,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Use parentheses to clarify operator precedence.",
        "document_name": "3.json",
        "document_chunk_index": 200,
        "hopy_requirement": "Flight control software shall ensure that parentheses are used to explicitly define operator precedence during flight trajectory calculations to prevent computational errors."
    },
    {
        "id": 550,
        "class": "Task Timing Criteria",
        "safety_criterion": "Interrupt handling should perform only one fundamental task and return control to the main program as quickly as possible.",
        "document_name": "4.json",
        "document_chunk_index": 304,
        "hopy_requirement": "The flight control system's interrupt handler shall perform only essential emergency tasks and ensure rapid return to the main control loop to maintain flight stability and responsiveness."
    },
    {
        "id": 551,
        "class": "Data Criteria",
        "safety_criterion": "The validity of input and output data should be checked.",
        "document_name": "4.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system should be able to verify the validity of flight control commands and sensor data to ensure they are within predefined safety ranges."
    },
    {
        "id": 552,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Coding standards regarding naming, comments, and subroutine size should be established.",
        "document_name": "2.json",
        "document_chunk_index": 138,
        "hopy_requirement": "The source code of the flight control software should follow strict naming conventions, commenting standards, and subroutine size limitations to ensure code readability and maintainability."
    },
    {
        "id": 553,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Use functions with a single purpose.",
        "document_name": "1.json",
        "document_chunk_index": 196,
        "hopy_requirement": "Each functional module in the navigation system should perform only a single task, ensuring clear responsibilities among modules and avoiding functional overlap."
    },
    {
        "id": 554,
        "class": "Data Criteria",
        "safety_criterion": "Each variable is used for a single purpose.",
        "document_name": "3.json",
        "document_chunk_index": 246,
        "hopy_requirement": "Each variable in the flight control system should be used for a single purpose to ensure clarity and traceability of variables."
    },
    {
        "id": 555,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Code related to hardware configuration should be isolated from the rest of the software code.",
        "document_name": "5.json",
        "document_chunk_index": 163,
        "hopy_requirement": "Flight control software should isolate code related to hardware configuration (such as sensor and actuator drivers) from the core control logic."
    },
    {
        "id": 556,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Check whether unreachable code exists in the program.",
        "document_name": "4.json",
        "document_chunk_index": 165,
        "hopy_requirement": "Flight control software should ensure that all flight mode transition logic code can be correctly executed without any dead code."
    },
    {
        "id": 557,
        "class": "Task Timing Criteria",
        "safety_criterion": "Avoid using no-operation instructions or empty loops to implement delays.",
        "document_name": "5.json",
        "document_chunk_index": 184,
        "hopy_requirement": "Flight control software should avoid using no-operation instructions or empty loops to implement delays, ensuring real-time performance and responsiveness."
    },
    {
        "id": 558,
        "class": "Processing Logic Criteria",
        "safety_criterion": "1 Code Verification Criteria (DMYZZZ)-1.1 Code Logic Analysis",
        "document_name": "4.json",
        "document_chunk_index": 278,
        "hopy_requirement": "Flight control software should undergo logic verification through static code analysis tools to ensure there are no logical errors or potential safety vulnerabilities."
    },
    {
        "id": 559,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Logic reconstruction requires generating flowcharts from the code and comparing the code with the design specifications and flowcharts.",
        "document_name": "5.json",
        "document_chunk_index": 261,
        "hopy_requirement": "The system should be able to automatically generate logic flowcharts for the flight control software and compare them with design documents to ensure logic consistency."
    },
    {
        "id": 560,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Equation reconstruction is completed by comparing equations in the code with those in the design documentation.",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "Flight control software should be able to automatically compare mathematical models in design documentation with equations in the actual code to ensure consistency."
    },
    {
        "id": 561,
        "safety_criterion": "Critical instruction sequences should be identified even in cases where they may be disguised as data. Analysts should determine whether each instruction is valid and whether the conditions for executing the instruction are valid.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 82,
        "hopy_requirement": "The flight control system shall be capable of identifying and validating all critical instruction sequences to ensure their validity and confirm the correctness of execution conditions before instruction execution."
    },
    {
        "id": 562,
        "safety_criterion": "Automated tools should be used as much as possible to assist in code logic analysis.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 308,
        "hopy_requirement": "The system shall integrate automated code analysis tools to ensure the logical correctness and safety of flight control software."
    },
    {
        "id": 563,
        "safety_criterion": "Code verification criteria - Code data analysis",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 236,
        "hopy_requirement": "The system shall perform static and dynamic analysis on the flight control software code to ensure the correctness and safety of the code."
    },
    {
        "id": 564,
        "safety_criterion": "The focus of code data analysis is to analyze the data structures and usage within the software. Data analysis should focus on how data items are defined and organized. Code data analysis is completed by comparing the values of all data items in the code with the described items provided in the design.",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 128,
        "hopy_requirement": "Flight control software shall ensure that the definition and usage of all flight parameters and status data are consistent with the design specifications to prevent flight anomalies caused by data errors."
    },
    {
        "id": 565,
        "safety_criterion": "Special attention shall be given to the integrity of safety-critical data, preventing it from being inadvertently changed or overwritten. For example, check whether interrupt processes interfere with safety-critical data; check the 'type' of variables specified as safety-critical.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The system shall ensure that flight control parameters (such as attitude angles, speed, altitude, etc.) are not unintentionally modified or overwritten during transmission and storage."
    },
    {
        "id": 566,
        "safety_criterion": "Code verification criteria - Code interface analysis",
        "class": "Interconnected Equipment Criteria",
        "document_name": "4.json",
        "document_chunk_index": 229,
        "hopy_requirement": "The system shall ensure consistency and integrity of interface data between all flight control software modules during transmission."
    },
    {
        "id": 567,
        "safety_criterion": "Verify the compatibility of internal and external interfaces of a software component.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "5.json",
        "document_chunk_index": 310,
        "hopy_requirement": "Flight control software shall ensure compatibility of data interfaces with navigation systems, sensors, and actuators to guarantee accurate and real-time data transmission."
    },
    {
        "id": 568,
        "safety_criterion": "Check that parameters have been properly transmitted through the interface.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "5.json",
        "document_chunk_index": 174,
        "hopy_requirement": "The system shall ensure error-free transmission of flight control parameters (such as attitude angle, speed, altitude) between the ground station and the aircraft."
    },
    {
        "id": 569,
        "safety_criterion": "Verify that the data size, measurement units, byte order, and bit order within bytes are the same on both sides of the interface.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The system shall ensure consistent data size, measurement units, byte order, and bit order within bytes during transmission of all flight control data."
    },
    {
        "id": 570,
        "safety_criterion": "Code verification criteria - Unused code analysis",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 156,
        "hopy_requirement": "Flight control software shall ensure that all code is used and there is no redundant code to avoid potential safety hazards."
    },
    {
        "id": 571,
        "safety_criterion": "Manual methods (such as code walkthroughs) or tools should be used during the coding phase to check for unused code, and analysis should be conducted on any unused code.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 203,
        "hopy_requirement": "During the development of flight control software, code reviews should be regularly conducted to ensure there is no redundant or unused code in order to improve system reliability and safety."
    },
    {
        "id": 572,
        "safety_criterion": "1 Code Verification Criteria (DMYZZZ)-1.5 Interrupt Analysis",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system should be capable of detecting and processing interrupts in flight control software in real time to ensure the timeliness and accuracy of interrupt handling."
    },
    {
        "id": 573,
        "safety_criterion": "List all interrupts used by the software, excluding software interrupts. Analyze whether they are timer interrupts, periodic interrupts, or random interrupts; whether they are occasional or frequent; and whether they originate from within or outside the system.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The flight control system should be able to identify and handle all hardware interrupts, including timer interrupts, periodic interrupts, and random interrupts, and distinguish whether their sources are internal or external to the system."
    },
    {
        "id": 574,
        "safety_criterion": "Relationship between interrupts: Check the assignment of interrupt priorities; whether there are constraints between interrupts, such as A interrupt must occur after B interrupt, etc.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The flight control system should ensure that navigation interrupts have higher priority than communication interrupts, and that navigation interrupts are processed after communication interrupts."
    },
    {
        "id": 575,
        "safety_criterion": "Interrupt handling process: protection at the interrupt entry point; recovery at the interrupt exit point; whether the execution time of the interrupt is appropriate; and whether the timing of enabling interrupts is appropriate.",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The flight control system should ensure that the interrupt entry point is protected and the exit point is restored when an interrupt occurs, and that the interrupt is handled within an appropriate timeframe to ensure continuity and safety of flight operations."
    },
    {
        "id": 576,
        "safety_criterion": "Interrupt nesting: Whether the initialization of interrupt control is compatible with the hardware circuit and consistent with system functional requirements; the maximum possible nesting level; testing and estimation of execution time under maximum nesting; stack usage under maximum nesting; whether self-nesting exists; whether lower-priority interrupts can be lost; and whether deadlocks can occur.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 81,
        "hopy_requirement": "The flight control system should ensure that execution times and stack usage under multiple interrupt nesting levels meet safety requirements to avoid deadlocks and loss of low-priority interrupts."
    },
    {
        "id": 577,
        "safety_criterion": "Resource contention check: Check if there are shared buffers, shared variables, and I/O ports. Determine whether read/write operations conflict and whether simultaneous interrupt requests occur.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The flight control system should ensure synchronized access to shared flight data buffers and control variables in a multi-tasking environment to prevent read/write conflicts and interrupt conflicts."
    },
    {
        "id": 578,
        "safety_criterion": "Exception handling: Are measures taken to prevent false triggering of interrupts caused by interference (including hardware), such as suppressing interference sources, cutting off interference paths, and improving anti-interference capability? What impact does false triggering or loss of interrupts have on system functionality?",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 287,
        "hopy_requirement": "The system should have electromagnetic interference resistance to ensure that interrupt signals in the flight control system do not falsely trigger or get lost in strong electromagnetic environments, ensuring flight safety."
    },
    {
        "id": 579,
        "safety_criterion": "Re-entrant code: Re-entrant code is designed to prevent loss of state information during interrupts. Check whether the re-entry component saves sufficient data for each interrupt and correctly restores the data and system state.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 270,
        "hopy_requirement": "The system should ensure that after a flight interruption, it can recover and continue mission execution while maintaining the integrity of flight status parameters and mission data."
    },
    {
        "id": 580,
        "safety_criterion": "Code segments/components that can be interrupted: If time-critical regions cannot tolerate delays, ensure they are protected from being interrupted. Check instruction sequences that should not be interrupted.",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 103,
        "hopy_requirement": "Flight control software should ensure that critical task code segments (such as attitude control and navigation calculations) are not interrupted during execution to prevent flight safety issues caused by delays."
    },
    {
        "id": 581,
        "safety_criterion": "Interrupt Handling in Air: Consider what happens when an interrupt is received in air and how it should be handled",
        "class": "Task Timing Criteria",
        "document_name": "1.json",
        "document_chunk_index": 229,
        "hopy_requirement": "The system shall automatically switch to the backup system and record breakpoints upon receiving an interrupt signal, ensuring continuity of tasks and integrity of data."
    },
    {
        "id": 582,
        "safety_criterion": "1 Code Verification Criteria (DMYZZZ)-1.6 Code Review",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 156,
        "hopy_requirement": "The system shall have a code review mechanism to ensure the logical correctness and safety of flight control software."
    },
    {
        "id": 583,
        "safety_criterion": "Critical important software shall be reviewed to ensure compliance with coding standards or specifications. A code review checklist may be prepared when necessary to improve the effectiveness of reviews",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 276,
        "hopy_requirement": "Flight control software code shall be reviewed regularly to ensure compliance with aviation industry coding standards and specifications."
    },
    {
        "id": 584,
        "safety_criterion": "1 Code Verification Criteria (DMYZZZ)-1.7 Timing, Throughput, and Size Analysis",
        "class": "Task Timing Criteria",
        "document_name": "1.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system shall be capable of real-time monitoring and analysis of timing performance, data throughput, and code size of flight control software to ensure stable operation under high load and complex task conditions."
    },
    {
        "id": 585,
        "safety_criterion": "As the coding phase ends, timing, throughput, and size parameters can be measured",
        "class": "Task Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system shall be able to monitor and record response time, data processing throughput, and system resource usage of the flight control system in real time."
    },
    {
        "id": 586,
        "safety_criterion": "Specific tests may be required to determine maximum memory usage, timing, and throughput parameters. Some of these tests may be postponed until the testing phase, as these parameters are formally included in functional testing or load/stress testing during that phase",
        "class": "Task Timing Criteria",
        "document_name": "3.json",
        "document_chunk_index": 285,
        "hopy_requirement": "The system shall be capable of real-time monitoring and recording of memory usage, timing, and throughput parameters, and specific load and stress tests shall be conducted during the testing phase to ensure the stability and reliability of the flight control system."
    },
    {
        "id": 587,
        "safety_criterion": "2 General Programming Guidelines (TYBCGF)",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 270,
        "hopy_requirement": "Flight control software shall follow general programming guidelines to ensure code readability, maintainability, and safety."
    },
    {
        "id": 588,
        "safety_criterion": "Program using standardized programming languages",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 306,
        "hopy_requirement": "Flight control software shall be developed using standardized programming languages (e.g., C++ or Ada) to ensure code readability and maintainability."
    },
    {
        "id": 589,
        "safety_criterion": "In the same system, the variety of programming languages should be minimized; for implementing similar software types, only one version of a high-level language should be used, and optionally one machine assembly language if necessary",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 118,
        "hopy_requirement": ""
    },
    {
        "id": 590,
        "safety_criterion": "Software coding shall follow programming standards or guidelines to ensure the safety of implementation",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 128,
        "hopy_requirement": "Flight control software shall follow the MISRA C programming standard to ensure code safety and reliability."
    },
    {
        "id": 591,
        "safety_criterion": "Certified compilers or assemblers should be selected, and pirated software must not be used",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 284,
        "hopy_requirement": "Flight control software should use certified compilers and assemblers to ensure code reliability and safety."
    },
    {
        "id": 592,
        "safety_criterion": "To improve software portability and ensure program correctness, it is recommended to use only standard-compliant parts of the compiler, minimizing the use of non-standard extensions introduced by the compiler",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 105,
        "hopy_requirement": "Flight control software should use programming languages and compilers that comply with industry standards to ensure software portability and correctness."
    },
    {
        "id": 593,
        "safety_criterion": "GOTO statements must not be used",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 229,
        "hopy_requirement": "Flight control software should avoid using GOTO statements to ensure code readability and maintainability."
    },
    {
        "id": 594,
        "safety_criterion": "Use of uninitialized variables is prohibited",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 118,
        "hopy_requirement": "Flight control software should ensure all variables are initialized before use to prevent undefined behavior affecting flight safety."
    },
    {
        "id": 595,
        "safety_criterion": "Pay attention to memory management and usage to avoid memory leaks",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 265,
        "hopy_requirement": "Flight control software should have the capability to automatically detect and release unused memory to ensure no memory leaks occur during long-term operation."
    },
    {
        "id": 596,
        "safety_criterion": "Directly exiting from a procedure during normal program execution is prohibited",
        "class": "Task Timing Criteria",
        "document_name": "2.json",
        "document_chunk_index": 154,
        "hopy_requirement": "Flight control software should ensure that the execution of any subroutine or module must not be abnormally interrupted during normal flight to prevent sudden changes in flight status."
    },
    {
        "id": 597,
        "safety_criterion": "Be cautious about unpredictable behaviors introduced by the compiler (e.g., generating untestable target code)",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 106,
        "hopy_requirement": "The compiler should generate predictable and verifiable flight control software code to ensure all target code is covered and tested."
    },
    {
        "id": 598,
        "safety_criterion": "C Language Programming Standards (CYBCGF) - 3.1 Declarations and Definitions",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 218,
        "hopy_requirement": "Flight control software should follow C language programming standards to ensure all variables and functions are declared and defined before use."
    },
    {
        "id": 599,
        "safety_criterion": "It is prohibited to redefine keywords and basic types through macro definitions",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 237,
        "hopy_requirement": "Flight control software should prohibit the use of macro definitions to change the meaning of keywords and basic types to ensure code readability and maintainability."
    },
    {
        "id": 600,
        "safety_criterion": "Other identifiers must not be macro-defined as keywords or basic types",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 191,
        "hopy_requirement": "Flight control software should prohibit using custom macro definitions to override system keywords and basic data types to ensure code readability and security."
    },
    {
        "id": 601,
        "safety_criterion": "User-defined types using 'typedef' must not be redefined",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 162,
        "hopy_requirement": "All user-defined data types in flight control systems (e.g., flight modes, navigation parameters) must be prohibited from being redefined to ensure data consistency and safety."
    },
    {
        "id": 602,
        "safety_criterion": "C or C++ keywords must not be redefined",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 279,
        "hopy_requirement": "Flight control software must prohibit the redefinition of C or C++ keywords to ensure code readability and safety."
    },
    {
        "id": 603,
        "safety_criterion": "#define macros must not be redefined",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 289,
        "hopy_requirement": "Flight control software must ensure that all macro definitions (e.g., flight modes, status flags) are defined only once during compilation to prevent logic errors caused by duplicate definitions."
    },
    {
        "id": 604,
        "safety_criterion": "#define and #undef in functions must be used in pairs",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 298,
        "hopy_requirement": "In flight control software, all preprocessing directives #define and #undef must appear in pairs to ensure correct and consistent macro definition during compilation."
    },
    {
        "id": 605,
        "safety_criterion": "Macro definitions in function form must enclose parameters and results in parentheses",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 85,
        "hopy_requirement": "The system must ensure that all macro definitions for flight control parameters are defined in function form, with parameters and results enclosed in parentheses to prevent calculation errors."
    },
    {
        "id": 606,
        "safety_criterion": "Tags must be defined in structure, union, and enumeration definitions",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 115,
        "hopy_requirement": "All structures, unions, and enumerations in flight control software must have clearly defined tags to ensure data accuracy and traceability."
    },
    {
        "id": 607,
        "safety_criterion": "Unnamed structures are prohibited in structure definitions",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 143,
        "hopy_requirement": "Unnamed structures must be avoided in flight control software structure definitions to ensure clarity and maintainability of data structures."
    },
    {
        "id": 608,
        "safety_criterion": "Signed integer variables used for bit definitions must have a bit length greater than 1",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 113,
        "hopy_requirement": "Flight control software must use signed integer variables with a bit length greater than 1 to represent critical flight parameters (e.g., altitude, speed) to ensure data accuracy and reliability."
    },
    {
        "id": 609,
        "safety_criterion": "Integer variables used for bit definitions must explicitly be declared as signed or unsigned",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 165,
        "hopy_requirement": "All integer variables in flight control software must be explicitly defined as signed or unsigned to ensure accurate and consistent data processing."
    },
    {
        "id": 610,
        "safety_criterion": "Bit-defined variables must be of the same length, and bit definitions must not cross type boundaries",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 247,
        "hopy_requirement": "Flight control software must ensure that all bit-defined variables within data structures are of the same length, and bit definitions must not exceed the length limits of the data type."
    },
    {
        "id": 611,
        "safety_criterion": "The parameter types must be declared in the function declaration, along with variable names",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 81,
        "hopy_requirement": "Flight control software function declarations must explicitly specify parameter types and variable names to ensure accurate and traceable parameter passing."
    },
    {
        "id": 612,
        "safety_criterion": "Function declarations must match their function prototypes",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 281,
        "hopy_requirement": "All function declarations in flight control software must match their function prototypes to ensure code consistency and maintainability."
    },
    {
        "id": 613,
        "safety_criterion": "Parameters within functions must use type declarations",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 256,
        "hopy_requirement": "All parameters in flight control software must have explicitly declared data types to ensure accuracy and consistency in data processing."
    },
    {
        "id": 614,
        "safety_criterion": "Externally declared variables must have types consistent with their definitions",
        "class": "Communication Criteria",
        "document_name": "1.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The system must ensure that variable types for all external communication interfaces are consistent with internally defined variable types to prevent errors caused by type mismatches."
    },
    {
        "id": 615,
        "safety_criterion": "External declarations must not be used within function bodies",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 259,
        "hopy_requirement": "Flight control software must ensure that all variables used inside functions are declared within those functions; external declarations must not be used."
    },
    {
        "id": 616,
        "safety_criterion": "Array definitions must not lack explicit boundary limits",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 297,
        "hopy_requirement": "Flight control software must ensure that all array definitions have clear boundary limits to prevent system failures caused by out-of-bounds array access."
    },
    {
        "id": 617,
        "safety_criterion": "Using extern declarations to initialize variables is prohibited",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 288,
        "hopy_requirement": "Global variables in flight control system code must not be initialized using extern declarations to ensure data integrity and consistency."
    },
    {
        "id": 618,
        "safety_criterion": "Character-type variables used in numerical computations must explicitly define whether they are signed or unsigned",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 286,
        "hopy_requirement": "Flight control software must ensure that all character-type variables used in numerical computations (e.g., altitude, speed) explicitly define whether they are signed or unsigned."
    },
    {
        "id": 619,
        "safety_criterion": "Absolute paths must not be used in #include statements",
        "class": "Communication Criteria",
        "document_name": "1.json",
        "document_chunk_index": 139,
        "hopy_requirement": "Flight control software source code must not use absolute paths in #include statements to ensure portability and security of the code."
    },
    {
        "id": 620,
        "safety_criterion": "Duplicate inclusion of header files is prohibited",
        "class": "Redundancy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 122,
        "hopy_requirement": "Flight control software must ensure that header files are not included multiple times to prevent compilation errors and potential runtime failures."
    },
    {
        "id": 621,
        "safety_criterion": "When the function parameter list is empty, void must be explicitly used to indicate it.",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 290,
        "hopy_requirement": "Flight control software must explicitly use void when defining functions with no parameters to ensure code clarity and maintainability."
    },
    {
        "id": 622,
        "safety_criterion": "3 C Language Programming Specification (CYBCGF)-3.2 Code Layout",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 240,
        "hopy_requirement": "The source code of flight control software should follow the C language programming specification to ensure code readability and maintainability."
    },
    {
        "id": 623,
        "safety_criterion": "Loop bodies must be enclosed in curly braces.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 158,
        "hopy_requirement": "All loop structures in flight control software must clearly define the body using curly braces to ensure code readability and maintainability."
    },
    {
        "id": 624,
        "safety_criterion": "if, else if, and else blocks must be enclosed in curly braces.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 265,
        "hopy_requirement": "Conditional statements in flight control software must be enclosed in curly braces to ensure code readability and safety."
    },
    {
        "id": 625,
        "safety_criterion": "Executable code must not precede header files.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 139,
        "hopy_requirement": "Header files in flight control software must not contain any executable code to ensure code readability and maintainability."
    },
    {
        "id": 626,
        "safety_criterion": "Logical expressions that cause ambiguous interpretations must use parentheses to explicitly indicate precedence order.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 90,
        "hopy_requirement": "The system must ensure that all logical expressions for flight control commands explicitly define precedence using parentheses to avoid ambiguity."
    },
    {
        "id": 627,
        "safety_criterion": "Parentheses must be used for all operands in logical comparison expressions.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 282,
        "hopy_requirement": "Logical comparison expressions in flight control software must use parentheses to explicitly define operator precedence, ensuring correct execution of control commands."
    },
    {
        "id": 628,
        "safety_criterion": "Nested comments are prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 212,
        "hopy_requirement": "Flight control software must prohibit the use of nested comments to ensure code readability and maintainability."
    },
    {
        "id": 629,
        "safety_criterion": "3 C Language Programming Specification (CYBCGF)-3.3 Pointer Usage",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 223,
        "hopy_requirement": "Flight control software must strictly follow the C language programming specification to ensure pointer usage safety and prevent memory leaks and illegal access."
    },
    {
        "id": 630,
        "safety_criterion": "Pointers to pointers must not exceed two levels.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 304,
        "hopy_requirement": "Flight control software must ensure pointer usage does not exceed two levels to prevent memory access errors and potential security vulnerabilities."
    },
    {
        "id": 631,
        "safety_criterion": "The use of function pointers must be clearly specified.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 291,
        "hopy_requirement": "Flight control software should clearly specify and verify the use of all function pointers to ensure their correctness and safety in different flight modes."
    },
    {
        "id": 632,
        "safety_criterion": "Assignment to parameter pointers is prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 91,
        "hopy_requirement": "Flight control software should prohibit direct assignment to critical parameter pointers to ensure data integrity and safety."
    },
    {
        "id": 633,
        "safety_criterion": "Returning the address of a local variable as a function return value is prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 254,
        "hopy_requirement": "Flight control software should ensure that the address of a local variable is never returned as a function return value to prevent potential memory safety issues."
    },
    {
        "id": 634,
        "safety_criterion": "Using or freeing unallocated space or already freed pointers is prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 274,
        "hopy_requirement": "Flight control systems should strictly manage all memory resources during allocation, usage, and release to prevent the use of unallocated or already freed pointers."
    },
    {
        "id": 635,
        "safety_criterion": "Pointer variables must be set to NULL after being freed.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 203,
        "hopy_requirement": "After freeing pointer variables, flight control software must set them to NULL to prevent system anomalies caused by dangling pointers."
    },
    {
        "id": 636,
        "safety_criterion": "Dynamically allocated pointer variables must be initialized to NULL if not allocated at definition.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 245,
        "hopy_requirement": "Dynamically allocated pointer variables in flight control software must be initialized to NULL at definition to prevent system anomalies caused by uninitialized pointers."
    },
    {
        "id": 637,
        "safety_criterion": "Before first use, dynamically allocated pointer variables must be checked for NULL.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 156,
        "hopy_requirement": "When allocating new flight mission parameter pointers, flight control software must first check whether the pointer is NULL to ensure safe initialization."
    },
    {
        "id": 638,
        "safety_criterion": "NULL must be used for null pointers; using the integer 0 is prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 112,
        "hopy_requirement": "In flight control software, NULL must be used to represent null pointers; the use of the integer 0 is prohibited."
    },
    {
        "id": 639,
        "safety_criterion": "Files must not exit with open file pointers.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 243,
        "hopy_requirement": "After completing missions, flight control software must ensure that all log files and data files are properly closed to prevent data loss or corruption."
    },
    {
        "id": 640,
        "safety_criterion": "3 C Language Programming Guidelines (CYBCGF) - 3.4 Branch Control",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 269,
        "hopy_requirement": "Flight control software should ensure that all branch control logic executes correctly during transitions between flight modes to prevent flight anomalies due to logical errors."
    },
    {
        "id": 641,
        "safety_criterion": "An else branch must be used in if-else if statements",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 303,
        "hopy_requirement": "Flight control software must include default error handling logic when processing flight mode transitions, ensuring the system can safely enter a predefined default mode under all unforeseen circumstances."
    },
    {
        "id": 642,
        "safety_criterion": "If a conditional decision branch is empty, it must be explicitly stated with a semicolon on a separate line along with a comment",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 112,
        "hopy_requirement": "Conditional decision branches in flight control software must explicitly indicate an empty branch with a semicolon and comment on a separate line to ensure code readability and maintainability."
    },
    {
        "id": 643,
        "safety_criterion": "Empty switch statements are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 232,
        "hopy_requirement": "Flight control software should prohibit the use of empty switch statements to ensure that all state transition logic has explicit handling logic."
    },
    {
        "id": 644,
        "safety_criterion": "Switch statements must not be used with boolean variables",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 224,
        "hopy_requirement": "Flight control software should avoid using switch statements for boolean values to prevent logical errors and improve code readability."
    },
    {
        "id": 645,
        "safety_criterion": "A switch statement must not contain only a default statement",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 253,
        "hopy_requirement": "Flight control software must ensure that explicit mode handling logic exists for all flight mode transitions and must not rely solely on default handling logic."
    },
    {
        "id": 646,
        "safety_criterion": "Each case and default in a switch must terminate with break or return; shared cases must be clearly commented",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 177,
        "hopy_requirement": "The state transition logic in flight control software must ensure each case and default branch terminates with break or return; shared cases must be clearly commented to prevent unintended state transitions leading to flight control anomalies."
    },
    {
        "id": 647,
        "safety_criterion": "All branches of a switch statement must operate within the same hierarchical scope",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 174,
        "hopy_requirement": "The state transition logic in flight control software must ensure all branches execute within the same hierarchical scope to avoid logic errors during state transitions."
    },
    {
        "id": 648,
        "safety_criterion": "3 C Language Programming Standard (CYBCGF) - 3.5 Jump Control",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 310,
        "hopy_requirement": "Flight control software must strictly follow the C language programming standard to ensure that jump control statements (e.g., goto, break, continue) do not cause logic errors or security vulnerabilities."
    },
    {
        "id": 649,
        "safety_criterion": "Jumping into a compound statement from outside or jumping upward using goto is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 198,
        "hopy_requirement": "Flight control software must prohibit jumping from outside to inside a compound statement to ensure sequential and predictable code execution."
    },
    {
        "id": 650,
        "safety_criterion": "Use of setjmp/longjmp is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 203,
        "hopy_requirement": "Flight control software should avoid using setjmp/longjmp functions to ensure reliability and predictability of the exception handling mechanism."
    },
    {
        "id": 651,
        "safety_criterion": "3 C Language Programming Guidelines (CYBCGF) - 3.6 Operation Processing",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 266,
        "hopy_requirement": "Flight control software shall comply with C language programming guidelines to ensure the correctness and reliability of all operation processing logic."
    },
    {
        "id": 652,
        "safety_criterion": "Assigning floating-point constants to integer variables is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 88,
        "hopy_requirement": "Flight control software shall ensure appropriate rounding processing before assigning floating-point calculation results to integer variables."
    },
    {
        "id": 653,
        "safety_criterion": "Assigning out-of-bound integers to integer variables is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 128,
        "hopy_requirement": "Flight control software shall ensure that all assignments to integer variables are within valid ranges to prevent system anomalies caused by overflow."
    },
    {
        "id": 654,
        "safety_criterion": "Assignment statements shall not be used in logical expressions",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 266,
        "hopy_requirement": "Flight control software shall prohibit the use of assignment statements in logical expressions to prevent logic errors and potential safety hazards."
    },
    {
        "id": 655,
        "safety_criterion": "Bitwise operations on logical expressions are prohibited",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 279,
        "hopy_requirement": "Flight control software shall prohibit bitwise operations on logical expressions to ensure accurate and reliable logical judgments."
    },
    {
        "id": 656,
        "safety_criterion": "Use of ++ or -- operators in arithmetic expressions or function call parameters is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 214,
        "hopy_requirement": "Flight control software shall avoid using increment (++) or decrement (--) operators in critical arithmetic expressions or function call parameters to prevent potential logic errors and data inconsistency."
    },
    {
        "id": 657,
        "safety_criterion": "Shift operations on variables shall not exceed variable length",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 145,
        "hopy_requirement": "Flight control software shall ensure that all shift operations on variables do not exceed the variable length to prevent data overflow and errors."
    },
    {
        "id": 658,
        "safety_criterion": "Shift count in shift operations must not be negative",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 195,
        "hopy_requirement": "Flight control software shall ensure that all shift counts in shift operations are non-negative to prevent data errors and system anomalies."
    },
    {
        "id": 659,
        "safety_criterion": "Array usage beyond bounds is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 282,
        "hopy_requirement": "Flight control software shall ensure that all array accesses are within defined boundaries to prevent system anomalies caused by out-of-bounds access."
    },
    {
        "id": 660,
        "safety_criterion": "Array indices must be non-negative integers",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 238,
        "hopy_requirement": "Navigation systems shall ensure that all flight trajectory data array indices are non-negative integers to prevent out-of-bounds access and data errors."
    },
    {
        "id": 661,
        "safety_criterion": "Enumeration type values shall not be assigned to non-enumeration type variables",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 153,
        "hopy_requirement": "Flight control software shall prohibit the use of non-enumeration type variables to represent flight modes (e.g., manual, automatic, return), ensuring correctness and safety of flight modes."
    },
    {
        "id": 662,
        "safety_criterion": "Division by zero is prohibited in division operations",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 136,
        "hopy_requirement": "Flight control systems shall ensure that divisors are non-zero during division operations to prevent system anomalies or crashes."
    },
    {
        "id": 663,
        "safety_criterion": "Assignment inside sizeof operator is prohibited",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 268,
        "hopy_requirement": "Flight control software shall prohibit assignment operations within the sizeof operator to prevent incorrect compile-time size calculations."
    },
    {
        "id": 664,
        "safety_criterion": "Buffer read operations shall not exceed bounds",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 206,
        "hopy_requirement": "Flight control software shall ensure all buffer read operations remain within valid ranges to prevent system anomalies caused by out-of-bounds access."
    },
    {
        "id": 665,
        "safety_criterion": "Buffer write operations shall not exceed bounds",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 243,
        "hopy_requirement": "Flight control software shall ensure all buffer write operations remain within specified boundaries to prevent data overflow and system anomalies."
    },
    {
        "id": 666,
        "safety_criterion": "Released memory space shall not be accessed or used",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 259,
        "hopy_requirement": "Flight control systems shall ensure that memory space already released shall no longer be accessed or used during task execution."
    },
    {
        "id": 667,
        "safety_criterion": "Pointers passed to free must point to the original address allocated by malloc or calloc",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 101,
        "hopy_requirement": "Flight control systems shall ensure that all dynamically allocated memory pointers passed to free must point to their originally allocated addresses to prevent memory leaks and data corruption."
    },
    {
        "id": 668,
        "safety_criterion": "Use of gets function is prohibited; it shall be replaced with fgets",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 125,
        "hopy_requirement": "Flight control software shall prohibit the use of unsafe input functions (e.g., gets) and shall use secure alternatives (e.g., fgets) to prevent buffer overflows."
    },
    {
        "id": 669,
        "safety_criterion": "String operations such as assignment, copy, and append shall not cause buffer overflows",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 225,
        "hopy_requirement": "Flight control software shall ensure that all string operations involved in processing flight commands and status information do not result in buffer overflows."
    },
    {
        "id": 670,
        "safety_criterion": "C Programming Standards (CYBCGF) - 3.7 Function Calls",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 194,
        "hopy_requirement": "Flight control software shall follow C programming standards to ensure correct parameter types and numbers during function calls, preventing system anomalies caused by function call errors."
    },
    {
        "id": 671,
        "safety_criterion": "Standard library functions must not be overridden",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 294,
        "hopy_requirement": "Flight control software must prohibit overriding critical functions in the standard library to ensure system stability and safety."
    },
    {
        "id": 672,
        "safety_criterion": "Function actual parameters and formal parameter types must be consistent",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 185,
        "hopy_requirement": "Flight control software must ensure that the types of all input parameters are completely consistent with the parameter types defined in the function to prevent system anomalies caused by type inconsistency."
    },
    {
        "id": 673,
        "safety_criterion": "The number of actual and formal parameters must be consistent",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 180,
        "hopy_requirement": "When calling navigation algorithms, flight control software must ensure that the number of input parameters is consistent with the number defined in the algorithm."
    },
    {
        "id": 674,
        "safety_criterion": "Old-style function parameter list definitions are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 89,
        "hopy_requirement": "Flight control software should use the latest parameter list definition format to ensure the accuracy and security of parameter transmission."
    },
    {
        "id": 675,
        "safety_criterion": "Parameter types in function declarations and definitions must be consistent",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 207,
        "hopy_requirement": "All function declarations and definitions in flight control software must ensure consistency of parameter types to prevent flight control errors caused by type mismatches."
    },
    {
        "id": 676,
        "safety_criterion": "Return types in function declarations and definitions must be consistent",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 96,
        "hopy_requirement": "All functions in flight control software must ensure that the return types in declarations and definitions are consistent to guarantee the correct execution of flight control commands."
    },
    {
        "id": 677,
        "safety_criterion": "Functions with return values must return via a return statement",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 125,
        "hopy_requirement": "All functions with return values in flight control software must return via a return statement to ensure correctness and completeness of flight control commands."
    },
    {
        "id": 678,
        "safety_criterion": "Return statements in void functions must not carry return values",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 160,
        "hopy_requirement": "All void functions in flight control software must strictly adhere to the rule of not carrying return values to ensure code reliability and maintainability."
    },
    {
        "id": 679,
        "safety_criterion": "Return statements in functions with return values must carry return values",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 206,
        "hopy_requirement": "All functions with return values in flight control software must ensure that return values are present on all execution paths to ensure the completeness and reliability of flight control logic."
    },
    {
        "id": 680,
        "safety_criterion": "The type of function return value must match the declared type",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 94,
        "hopy_requirement": "Flight control software must ensure that the type of all return values matches the declared type to guarantee accurate execution of flight control commands."
    },
    {
        "id": 681,
        "safety_criterion": "For functions with a return value, if the return value is not used, it should be explicitly cast to (void) when calling.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 310,
        "hopy_requirement": "All return values in flight control software must be checked or explicitly ignored to ensure the accuracy and reliability of the system state."
    },
    {
        "id": 682,
        "safety_criterion": "Functions without a return value must not be redundantly cast to (void) when called.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 97,
        "hopy_requirement": "The system shall ensure that no redundant casts or assignments occur when calling flight control functions that do not return a value."
    },
    {
        "id": 683,
        "safety_criterion": "Static functions must be used within the program.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 232,
        "hopy_requirement": "All static functions in the flight control software must be invoked within the critical path of flight operations to ensure code completeness and reliability."
    },
    {
        "id": 684,
        "safety_criterion": "Calling multiple order-dependent functions within the same expression is prohibited.",
        "class": "Task Timing Criteria",
        "document_name": "1.json",
        "document_chunk_index": 131,
        "hopy_requirement": "Flight control software must ensure that multiple order-dependent functions affecting flight status are not called simultaneously within the same control cycle."
    },
    {
        "id": 685,
        "safety_criterion": "Ellipsis (...) must not be used in function parameter lists.",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 191,
        "hopy_requirement": "Flight control software must prohibit the use of ellipsis parameters to ensure all input parameters are explicit and controllable."
    },
    {
        "id": 686,
        "safety_criterion": "Direct or indirect recursive function calls are prohibited.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 162,
        "hopy_requirement": "Flight control software must avoid using recursive functions to ensure the system does not fail due to stack overflow under high load conditions."
    },
    {
        "id": 687,
        "safety_criterion": "C Language Programming Standard (CYBCGF) - 3.8 Statement Usage",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 114,
        "hopy_requirement": "Flight control software must follow C language programming standards to ensure correctness and reliability of all control logic statements."
    },
    {
        "id": 688,
        "safety_criterion": "Unreachable statements are prohibited.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 162,
        "hopy_requirement": "Flight control software must ensure that all code paths are reachable and avoid having unreachable control instructions."
    },
    {
        "id": 689,
        "safety_criterion": "Unreachable branches are prohibited.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Flight control software must ensure that all logical control branches are reachable and avoid any unreachable control paths."
    },
    {
        "id": 690,
        "safety_criterion": "Invalid statements are prohibited.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 174,
        "hopy_requirement": "Flight control software must prohibit the use of invalid or undefined instruction codes, ensuring all instructions are valid and verified."
    },
    {
        "id": 691,
        "safety_criterion": "Octal numbers must be clearly commented",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 284,
        "hopy_requirement": "All octal numbers in flight control software must be explicitly commented in the code regarding their purpose and their equivalent decimal value."
    },
    {
        "id": 692,
        "safety_criterion": "Numeric type suffixes must use uppercase letters",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 165,
        "hopy_requirement": "The system shall ensure that all numeric type suffixes of flight control parameters use uppercase letters to prevent data parsing errors."
    },
    {
        "id": 693,
        "safety_criterion": "C Language Programming Specification (CYBCGF) - 3.9 Loop Control",
        "class": "Task Timing Criteria",
        "document_name": "1.json",
        "document_chunk_index": 231,
        "hopy_requirement": "Flight control software shall ensure that execution time and frequency of critical tasks in loop control meet predetermined safety standards."
    },
    {
        "id": 694,
        "safety_criterion": "Loop control variables in for loops must be local variables",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 216,
        "hopy_requirement": "All loop control variables in flight control software must be defined as local variables to prevent unintended data overwriting and ensure predictability of the code."
    },
    {
        "id": 695,
        "safety_criterion": "Loop control variables in for loops must be integer variables",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 168,
        "hopy_requirement": "All loop control variables in flight control software must be integer variables to ensure accuracy and reliability of calculations."
    },
    {
        "id": 696,
        "safety_criterion": "Modifying loop control variables inside the body of a for loop is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 123,
        "hopy_requirement": "Flight control software shall ensure that loop control variables are not modified during the execution of critical tasks within the loop body to prevent unintended changes in control flow and potential safety risks."
    },
    {
        "id": 697,
        "safety_criterion": "Infinite loops must use while(1) statements; other forms such as for(;;) are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 305,
        "hopy_requirement": "Flight control software shall implement infinite loops using while(1) statements to ensure continuous execution and monitoring of critical tasks."
    },
    {
        "id": 698,
        "safety_criterion": "C Language Programming Specification (CYBCGF) - 3.10 Type Conversion",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system shall ensure that type conversion of flight control parameters does not result in data loss or overflow, guaranteeing accuracy and reliability of control commands."
    },
    {
        "id": 699,
        "safety_criterion": "Explicit casting is required when assigning floating-point values to integer variables",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 260,
        "hopy_requirement": "Flight control software must perform explicit type casting when handling floating-point flight parameters to ensure accuracy and consistency when assigned to integer variables."
    },
    {
        "id": 700,
        "safety_criterion": "Explicit casting is required when assigning long integer values to short integer variables",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 261,
        "hopy_requirement": "Flight control software must ensure safe assignment of long integer values to short integer variables through explicit casting to prevent data overflow and errors."
    },
    {
        "id": 701,
        "safety_criterion": "A double variable must be explicitly cast when assigned to a float variable",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 144,
        "hopy_requirement": "The flight control software must explicitly convert double-precision floating-point numbers to single-precision floating-point numbers to ensure data consistency and accuracy."
    },
    {
        "id": 702,
        "safety_criterion": "The assignment type of a pointer variable must match the pointer variable type",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The flight control software must ensure that all pointer variable assignment types are consistent with their declared types to prevent memory access errors."
    },
    {
        "id": 703,
        "safety_criterion": "Explicit casting must be used when assigning a pointer to a non-pointer or vice versa",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 252,
        "hopy_requirement": "The flight control software must ensure that explicit type conversion is used when passing data between pointers and non-pointers to prevent data corruption or undefined behavior."
    },
    {
        "id": 704,
        "safety_criterion": "Type conversions with no substantive effect are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 299,
        "hopy_requirement": "The flight control software must prohibit the use of type conversions with no substantive effect to ensure data integrity and consistency during inter-module data transmission."
    },
    {
        "id": 705,
        "safety_criterion": "3 C Language Programming Standard (CYBCGF) - 3.11 Initialization",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 144,
        "hopy_requirement": "All variables and data structures in the flight control software must be initialized before use to ensure correctness and consistency of the initial state."
    },
    {
        "id": 706,
        "safety_criterion": "Variables must not be used before being assigned a value",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 183,
        "hopy_requirement": "The system must ensure that all flight control parameters have been properly initialized before use."
    },
    {
        "id": 707,
        "safety_criterion": "Variable initialization must not implicitly rely on system default values",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 308,
        "hopy_requirement": "All flight control parameters and status variables must be explicitly initialized at system startup and must not rely on system default values."
    },
    {
        "id": 708,
        "safety_criterion": "The nested structure of structure initialization must be consistent with the definition",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 256,
        "hopy_requirement": "When initializing structures, the flight control software must ensure that all nested structure initializations are fully consistent with their definitions to guarantee data integrity and consistency."
    },
    {
        "id": 709,
        "safety_criterion": "Initialization in enumeration element definitions must be complete",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 258,
        "hopy_requirement": "All state variables and enumeration types in the flight control software must be assigned explicit initial values during initialization."
    },
    {
        "id": 710,
        "safety_criterion": "3 C Language Programming Standard (CYBCGF) - 3.12 Comparison Judgment",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 100,
        "hopy_requirement": "The flight control software must follow the C language programming standard to ensure the correctness and reliability of all comparison logic."
    },
    {
        "id": 711,
        "safety_criterion": "Logical quantities must not be subjected to logical comparisons using greater than or less than operators",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 256,
        "hopy_requirement": "The system must prohibit the use of greater than or less than logical comparisons on the logic states of flight control commands to ensure command accuracy and reliability."
    },
    {
        "id": 712,
        "safety_criterion": "Pointers must not be subjected to logical comparisons using greater than or less than operators",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 260,
        "hopy_requirement": "The system must prohibit the use of greater than or less than logical comparisons on pointers in flight control software to prevent potential memory access errors."
    },
    {
        "id": 713,
        "safety_criterion": "Equality comparisons on floating-point numbers must be avoided",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 285,
        "hopy_requirement": "The flight control system must avoid exact equality comparisons using floating-point numbers to prevent control errors caused by precision issues."
    },
    {
        "id": 714,
        "safety_criterion": "Unsigned numbers must not be compared using greater than or equal to zero or less than zero",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The system must ensure that all comparison operations involving unsigned numbers in flight control algorithms only use greater than or less than operators, avoiding comparisons such as greater than or equal to zero or less than zero."
    },
    {
        "id": 715,
        "safety_criterion": "Direct comparisons between signed and unsigned numbers must be prohibited",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 239,
        "hopy_requirement": "Flight control software must avoid direct comparisons between signed and unsigned numbers when processing altitude and speed data to prevent potential computational errors."
    },
    {
        "id": 716,
        "safety_criterion": "All variables must be properly initialized before use and dynamically updated during flight missions",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 266,
        "hopy_requirement": "Flight control software must ensure that all variables are properly initialized before use and dynamically updated during flight missions to prevent undefined behavior from affecting flight safety."
    },
    {
        "id": 717,
        "safety_criterion": "Local variables must not have the same name as global variables",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 108,
        "hopy_requirement": "Flight control software must ensure that local variable names do not conflict with global variable names to prevent data overwriting and incorrect operations."
    },
    {
        "id": 718,
        "safety_criterion": "Function parameters must not have the same name as global variables",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 135,
        "hopy_requirement": "Flight control software must prohibit function parameters from having the same name as global variables to avoid data conflicts and incorrect operations."
    },
    {
        "id": 719,
        "safety_criterion": "Variable names must not match function names",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 107,
        "hopy_requirement": "Flight control software must prohibit the use of variable names that match function names to avoid naming conflicts and potential safety risks."
    },
    {
        "id": 720,
        "safety_criterion": "Variable names must not match label names",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 110,
        "hopy_requirement": "In flight control software, all variable names and label names must be unique to ensure no naming conflicts occur."
    },
    {
        "id": 721,
        "safety_criterion": "Variable names must not be the same as enumeration element names",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 151,
        "hopy_requirement": "In flight control software, variable names that are the same as predefined flight mode enumeration elements must not be used."
    },
    {
        "id": 722,
        "safety_criterion": "Variable names must not be the same as typedef custom type names",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 162,
        "hopy_requirement": "Flight control software must ensure that all variable names do not conflict with custom type names to avoid compilation and runtime errors."
    },
    {
        "id": 723,
        "safety_criterion": "Redeclaring existing variable names within inner blocks is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 241,
        "hopy_requirement": "Flight control software must ensure that any module or function does not redeclare existing variable names to prevent data conflicts and errors."
    },
    {
        "id": 724,
        "safety_criterion": "Variables distinguished solely by case sensitivity are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 293,
        "hopy_requirement": "Flight control software must avoid using variable names that differ only by case to ensure code readability and safety."
    },
    {
        "id": 725,
        "safety_criterion": "Variables distinguished solely by lowercase 'l' and digit '1' are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "4.json",
        "document_chunk_index": 303,
        "hopy_requirement": "Flight control software must avoid using variables differentiated solely by lowercase 'l' and digit '1' to prevent confusion during code review and maintenance."
    },
    {
        "id": 726,
        "safety_criterion": "Variables distinguished solely by uppercase 'O' and digit '0' are prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 85,
        "hopy_requirement": "Flight control systems must avoid using variable names differentiated solely by uppercase 'O' and digit '0' to ensure code readability and prevent misoperations."
    },
    {
        "id": 727,
        "safety_criterion": "Using only lowercase 'l' or uppercase 'O' as variable names is prohibited",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 276,
        "hopy_requirement": "Flight control software must avoid using lowercase 'l' or uppercase 'O' as variable names to prevent code confusion and misreading."
    },
    {
        "id": 728,
        "safety_criterion": "Externally modifiable variables must be declared as volatile",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 252,
        "hopy_requirement": "All variables in flight control software that can be modified by external sensors or ground stations must be declared as volatile to ensure real-time performance and data consistency."
    },
    {
        "id": 729,
        "safety_criterion": "Avoid performing operations involving multiple volatile variables in a single expression",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 265,
        "hopy_requirement": "Flight control software must avoid complex operations involving multiple volatile variables in real-time sensor data processing to prevent data inconsistency and errors."
    },
    {
        "id": 730,
        "safety_criterion": "NULL must not be used as the integer value 0",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 216,
        "hopy_requirement": "Flight control systems must ensure that all integer variables are not assigned the value NULL during initialization and usage."
    },
    {
        "id": 731,
        "safety_criterion": "Do not assign negative values to unsigned type variables",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 124,
        "hopy_requirement": "The system should ensure that all flight control parameters of unsigned type variables are not assigned negative values under any circumstances."
    },
    {
        "id": 732,
        "safety_criterion": "Arrays used to represent strings must end with \"\\0\"",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 176,
        "hopy_requirement": "Flight control software should ensure that arrays used to represent strings end with \"\\0\" during storage and transmission to prevent data overflow and parsing errors."
    },
    {
        "id": 733,
        "safety_criterion": "Comment Guidelines (ZSZZ)",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The system should have the capability to monitor and record key flight parameters (e.g., attitude angles, speed, altitude, etc.) in real time during flight missions to ensure data accuracy and integrity."
    },
    {
        "id": 734,
        "safety_criterion": "There must be sufficiently detailed comments in source code. Comments should describe functionality rather than provide line-by-line instruction descriptions. The number of comment lines should be no less than 20% of the total source code lines.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 194,
        "hopy_requirement": "The source code of flight control software must contain detailed comments, with comment lines accounting for no less than 20% of the source code lines, to ensure code maintainability and readability."
    },
    {
        "id": 735,
        "safety_criterion": "Header comment requirements: Before the executable code of each module, a section of comment text must be provided to describe the following content:\nModule name comment: Identify the module's name, version number, entry point, developer's name, organization, and development date; if modified, also identify the modifier's name, organization, and modification date;\nModule function comment: Explain the purpose and function of the module;\nInput/Output comment: Describe the input/output file names used by the module, indicating whether each file inputs into or outputs from the module, or both;\nParameter comment: Describe the name, data type, size, physical unit, and usage of all parameters required by the module, explain the name, data type, size, physical unit, and usage method of global variables applicable to the module, and describe the return value of the module;\nCall comment: List all called module names within the module and all modules that call this module;\nConstraint comment: List all special factors limiting the module's execution characteristics;\nException termination comment: List all exceptional return conditions and actions;\nMethod comment: Describe the methods used by the module to achieve its functions; for brevity, reference documentation describing these methods may also be cited;\nExternal environment and resource comment: Describe the external operating environment and resources used by the module, such as operating systems, compilers, assembly languages, CPUs, memory, registers, stacks, etc.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 228,
        "hopy_requirement": "Flight control software modules should include detailed header comments covering module name, version number, developer information, functional description, input/output files, parameter descriptions, calling relationships, constraints, exception handling, and external environment dependencies to ensure code maintainability and traceability."
    },
    {
        "id": 736,
        "safety_criterion": "Internal comment requirements: Within the module, at least statements that conditionally change data values or execution order (i.e., branch transfer statements, input/output statements, loop statements, call statements) must be commented. These comments should not disrupt the clarity of the module, i.e., they should conform to the program's indentation format. Specific commenting methods are as follows:\nBranch transfer statements: Indicate the reason for the execution action;\nInput/output statements: Indicate the nature of the processed file or record;\nLoop statements: Explain the execution reason and exit conditions;\nCall statements: Describe the reason for the call and the functionality of the called module.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 179,
        "hopy_requirement": "Each module of flight control software should include detailed comments, especially for statements that conditionally change data values or execution order, ensuring code readability and maintainability."
    },
    {
        "id": 737,
        "safety_criterion": "Safety-critical content comment requirements: In each module and software unit (CSU), critical statement labels and data names must have accurate reference information, and the allowed and expected ranges for all input values must be defined; counter value comments must include descriptions of timing functions, their values, rationale, or reference documents explaining the basis for counter values.",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 190,
        "hopy_requirement": "Each module and unit of flight control software must accurately comment on critical statements and data names, clearly defining the allowed and expected ranges of input values, and including descriptions of timing functions and their rationale in counter value comments."
    },
    {
        "id": 738,
        "safety_criterion": "Complexity Control (FZKZ)",
        "class": "Task Timing Criteria",
        "document_name": "2.json",
        "document_chunk_index": 263,
        "hopy_requirement": "The system should have complexity control mechanisms to ensure that priority and response times of critical flight control tasks meet safety requirements during multi-task parallel processing."
    },
    {
        "id": 739,
        "safety_criterion": "The cyclomatic complexity (i.e., McCabe index) of a module should generally not exceed 10",
        "class": "Task Timing Criteria",
        "document_name": "2.json",
        "document_chunk_index": 304,
        "hopy_requirement": "The cyclomatic complexity (McCabe index) of each module in flight control software should not exceed 10 to ensure code maintainability and testability."
    },
    {
        "id": 740,
        "safety_criterion": "For modules implemented in high-level languages, each module’s source code should not exceed 200 lines, generally controlled within 60 lines",
        "class": "Task Timing Criteria",
        "document_name": "3.json",
        "document_chunk_index": 309,
        "hopy_requirement": "Each module of flight control software's source code should be limited to within 60 lines to ensure code readability and maintainability."
    },
    {
        "id": 741,
        "safety_criterion": "The number of parameters transmitted by each CSU shall not exceed 6",
        "class": "Control Calculation Criteria (控制计算准则)",
        "document_name": "1.json",
        "document_chunk_index": 181,
        "hopy_requirement": "Each Control Sub-Unit (CSU) shall not transmit more than 6 flight control parameters during communication."
    },
    {
        "id": 742,
        "safety_criterion": "The fan-in and fan-out of each CSU shall not exceed 7",
        "class": "Control Calculation Criteria (控制计算准则)",
        "document_name": "4.json",
        "document_chunk_index": 263,
        "hopy_requirement": "Each Control Sub-Unit (CSU) shall limit its input and output connections to no more than 7 to ensure system stability and maintainability."
    },
    {
        "id": 743,
        "safety_criterion": "6 Handling of Redundant Items (DYWCL) - 6.1 Handling of Content Not Included in the Document",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "4.json",
        "document_chunk_index": 197,
        "hopy_requirement": "The system shall have the capability to detect and handle unrecorded redundant items within the aircraft to ensure they do not affect flight safety and mission execution."
    },
    {
        "id": 744,
        "safety_criterion": "Operational and support programs must include only those features and capabilities required by the documentation and must not include features not specified in the documentation. Any necessary functions and features introduced for software testing must be verified to ensure they do not impact software safety.",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "2.json",
        "document_chunk_index": 176,
        "hopy_requirement": "Flight control software test functions must undergo rigorous verification before formal operation to ensure these test functions do not compromise flight safety."
    },
    {
        "id": 745,
        "safety_criterion": "6 Handling of Redundant Items (DYWCL) - 6.2 Handling of Redundant Code in Programs",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "4.json",
        "document_chunk_index": 211,
        "hopy_requirement": "Flight control software shall ensure that all unused code and variables are removed during compilation and runtime to prevent potential safety hazards."
    },
    {
        "id": 746,
        "safety_criterion": "Operational programs shall not contain executable code that is not used (not covering requirements). Unused executable code must be removed from both the source program and the recompiled program.",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "3.json",
        "document_chunk_index": 201,
        "hopy_requirement": "Flight control software shall ensure that all code is relevant to functional requirements, and unused code must be removed from the source code to avoid potential safety risks."
    },
    {
        "id": 747,
        "safety_criterion": "Loaded operational programs shall not contain unreferenced variables. Parts of the program no longer in use should be removed prior to finalizing the program.",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "1.json",
        "document_chunk_index": 275,
        "hopy_requirement": "Flight control software shall ensure that all loaded program modules do not contain unreferenced variables and that all obsolete code segments are removed before final program deployment."
    },
    {
        "id": 748,
        "safety_criterion": "Redundant items in different operational phases (e.g., monitoring programs used during ground debugging) should be carefully considered",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "5.json",
        "document_chunk_index": 252,
        "hopy_requirement": "The system shall ensure that all monitoring programs used during ground debugging are removed during flight phases to prevent interference with flight operations."
    },
    {
        "id": 749,
        "safety_criterion": "Invalid code caused by optional features or software reuse must be described in the software requirements and subjected to necessary testing and analysis to ensure it does not impact system safety",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "1.json",
        "document_chunk_index": 197,
        "hopy_requirement": "The system shall provide detailed descriptions of all optional features and reused software modules and conduct thorough testing and analysis to ensure they do not compromise the safety of the flight control system."
    },
    {
        "id": 750,
        "safety_criterion": "6 Handling of Redundant Items (DYWCL) - 6.3 Handling of Unused Memory",
        "class": "Redundancy Criteria (冗余准则)",
        "document_name": "3.json",
        "document_chunk_index": 307,
        "hopy_requirement": "The system shall ensure that all unused memory areas are cleared during flight missions to prevent potential unauthorized access or data leakage."
    },
    {
        "id": 751,
        "safety_criterion": "All unused memory not used by the running program must be initialized to a specific pattern that, when executed, will cause the system to recover to a deterministic safe state; random numbers, pause instructions, or wait instructions must not be used to fill the processor's memory; use of no-operation (NOP) and stop instructions should be cautious; data or code from previous overlays or loads must not be retained. When the processor halts execution due to such non-executable code patterns, the watchdog timer must provide an interrupt handler to recover the system to a safe state. If the processor treats these non-executable code patterns as errors, then an error handling routine must be developed to bring the system back to a safe state and terminate processing.",
        "class": "Data Criteria",
        "document_name": "5.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The flight control system must initialize unused memory regions to a specific safe pattern to ensure that the system can automatically recover to a safe state in case of any unexpected code execution."
    },
    {
        "id": 752,
        "safety_criterion": "Unused memory includes 'blank areas' in programs and 'blank areas' in data. The 'blank areas' in programs should be handled appropriately during firmware programming, while the 'blank areas' in data should be handled appropriately during system initialization. The handling strategy should be determined according to the instruction set functionality, real-time requirements for fault handling, and other requirements.",
        "class": "Data Criteria",
        "document_name": "3.json",
        "document_chunk_index": 82,
        "hopy_requirement": "The flight control system must zero out unused memory regions during system initialization and verify them during firmware updates to prevent potential memory errors and security vulnerabilities."
    },
    {
        "id": 753,
        "safety_criterion": "7 Pointer Usage (ZZSY)",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system must ensure that all pointers in flight control software are checked for validity before use, preventing system crashes caused by null or invalid pointer accesses."
    },
    {
        "id": 754,
        "safety_criterion": "Parameter pointers must not be assigned to procedure pointers: assigning parameter pointers to procedure pointers may lead to unpredictable results, therefore such assignments are prohibited.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system must ensure that in flight control software, parameter pointers cannot be assigned to procedure pointers to prevent unpredictable flight control behaviors."
    },
    {
        "id": 755,
        "safety_criterion": "Pointer indirection levels must not exceed two: controlling pointers is inherently difficult, and using pointers beyond two levels of indirection increases risk; therefore, pointer indirection levels must not exceed two. In special cases where more than two levels of indirection are absolutely necessary, they must be explicitly commented upon, the rationale clearly explained in the pointer-specific design section of the software detailed design documentation, and targeted test results provided in the unit test report.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 114,
        "hopy_requirement": "Flight control software must limit pointer usage to no more than two levels of indirection to ensure code maintainability and safety. In exceptional cases requiring more than two levels of indirection, the rationale must be clearly documented in the design documents and supported by targeted testing in the unit test reports."
    },
    {
        "id": 756,
        "safety_criterion": "Null and invalid pointers must not be dereferenced: referencing a pointer that could be null or invalid will obviously result in incorrect behavior and potentially serious problems.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 89,
        "hopy_requirement": "Flight control software must ensure that all pointers are validated before use to prevent references to null or invalid pointers."
    },
    {
        "id": 757,
        "safety_criterion": "Logical comparisons of pointers must be used with caution: comparing pointers using greater-than or less-than operators is highly risky; therefore, logical pointer comparisons must be used with caution.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 185,
        "hopy_requirement": "Flight control software must avoid logical pointer comparisons to ensure that pointer comparison errors do not lead to system anomalies when processing flight data."
    },
    {
        "id": 758,
        "safety_criterion": "Arithmetic operations on pointers must be used with caution: performing arithmetic operations on pointers is highly risky; therefore, pointer arithmetic must be used with caution.",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 152,
        "hopy_requirement": "Flight control software must avoid complex arithmetic operations on pointers to ensure the safety and reliability of pointer operations."
    },
    {
        "id": 759,
        "safety_criterion": "Declaring procedures as pointer types must be done with caution: using function pointers is inherently risky; therefore, declaring procedures as pointer types must be done with caution.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 92,
        "hopy_requirement": "Flight control software must avoid using function pointers to reduce potential safety risks."
    },
    {
        "id": 760,
        "safety_criterion": "8 Other Coding Requirements (QTYQ)",
        "class": "Control Calculation Criteria",
        "document_name": "2.json",
        "document_chunk_index": 296,
        "hopy_requirement": "The system must ensure that the encoding and decoding processes for all flight control commands comply with aviation standards to prevent data transmission errors and misinterpretation of decoded data."
    },
    {
        "id": 761,
        "safety_criterion": "Monitor critical points in key important software and perform fault isolation when faults are detected; place the system in a safe state if necessary",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 82,
        "hopy_requirement": "The flight control system shall have the capability to monitor critical software modules in real time and automatically isolate faulty modules upon detection, switching the system to a safe mode if necessary."
    },
    {
        "id": 762,
        "safety_criterion": "Under the premise of fulfilling necessary testing functions, minimize the number of test points",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The satellite attitude control system shall optimize the layout of test points, ensuring comprehensive attitude monitoring and control with minimal number of test points."
    },
    {
        "id": 763,
        "safety_criterion": "Test feature output channels should be independent to ensure that failure of test functionality does not affect other functionalities",
        "class": "Communication Criteria",
        "document_name": "2.json",
        "document_chunk_index": 249,
        "hopy_requirement": "The flight control system shall ensure physical isolation between test data channels and primary control data channels to prevent failures in test functions from affecting primary flight control functions."
    },
    {
        "id": 764,
        "safety_criterion": "Common Data and Variables: Clearly identify data and variables shared by two or more modules, and minimize changes to public variables to reduce inter-module dependencies and conflicts",
        "class": "Processing Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 160,
        "hopy_requirement": "Flight control software shall explicitly define and minimize shared flight parameters and status variables across modules to reduce interdependencies and potential conflicts."
    },
    {
        "id": 765,
        "safety_criterion": "File Handling Requirements: Files should be unique and used for a single purpose; files should be successfully opened before use and properly closed after use, and file attributes should align with their usage group",
        "class": "Data Criteria",
        "document_name": "4.json",
        "document_chunk_index": 263,
        "hopy_requirement": "Flight mission data files shall be unique and dedicated to specific missions; files shall be successfully opened before mission start and properly closed after mission completion, with access permissions restricted to modules executing that mission."
    },
    {
        "id": 766,
        "safety_criterion": "Prohibit Program Patching: Patches should not be allowed throughout the development process; all software modifications must be implemented at the source code level and compiled before deployment into operational or testing environments",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 80,
        "hopy_requirement": "Any modification to flight control software must follow a formal change management process, ensuring all changes are made at the source code level and thoroughly tested and compiled before deployment."
    },
    {
        "id": 767,
        "safety_criterion": "C# Language Programming Standards",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 226,
        "hopy_requirement": "Flight control software shall adhere to C# language programming standards to ensure code readability, maintainability, and safety."
    },
    {
        "id": 768,
        "safety_criterion": "Method names should use mixed case format and be sufficiently descriptive. Additionally, method names should begin with a verb, such as InitNameArray or CloseDialog",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 271,
        "hopy_requirement": "Flight control software shall utilize descriptive and convention-compliant method names, such as InitFlightParameters or UpdateNavigationData, to ensure code readability and maintainability."
    },
    {
        "id": 769,
        "safety_criterion": "For frequently used or lengthy terms, standard abbreviations are recommended to keep name lengths reasonable",
        "class": "Data Criteria",
        "document_name": "2.json",
        "document_chunk_index": 105,
        "hopy_requirement": "The system shall use standardized abbreviations to represent common flight parameters and system states to ensure concise and readable naming conventions."
    },
    {
        "id": 770,
        "safety_criterion": "Member variables should not be declared as public or protected; instead, they should all be declared as private, with access provided through public/protected properties",
        "class": "Interconnected Equipment Criteria",
        "document_name": "4.json",
        "document_chunk_index": 264,
        "hopy_requirement": "All sensitive parameters and configuration items in flight control software shall be declared private, with access and modification managed through public interfaces."
    },
    {
        "id": 771,
        "safety_criterion": "To better distinguish the valid range of variables, for example Class-level variables, use lowercase prefixes in the variable name to differentiate them",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 140,
        "hopy_requirement": "Flight control software shall use lowercase prefixes to distinguish different categories of variables, ensuring that the valid range and type of variables are clearly visible in the code."
    },
    {
        "id": 772,
        "safety_criterion": "Add specific variable type prefixes according to the variable type when defining variables, generally represented by three lowercase letters",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 279,
        "hopy_requirement": "The system shall use specific variable type prefixes (e.g., flt_ for floating point numbers, int_ for integers) to define flight control parameters."
    },
    {
        "id": 773,
        "safety_criterion": "All external resources must be explicitly released. For example: database connection objects, IO objects, etc.",
        "class": "Interconnected Equipment Criteria",
        "document_name": "3.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The system shall ensure that all external resources, including satellite communication links and ground station data connections, are explicitly released after task completion."
    },
    {
        "id": 774,
        "safety_criterion": "When an exception occurs, provide a friendly message to the user, but precisely record all possible details of the error, including the time it occurred, related methods, class names, etc.",
        "class": "Communication Criteria",
        "document_name": "5.json",
        "document_chunk_index": 284,
        "hopy_requirement": "When any exception is detected in the flight control system, an immediate detailed error report shall be sent to the ground control station, including the time of the error, the specific module, and related parameters."
    },
    {
        "id": 775,
        "safety_criterion": "For captured exceptions, a clear handling method must be provided",
        "class": "Communication Criteria",
        "document_name": "1.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system shall be capable of real-time monitoring and recording of the aircraft's abnormal status and immediately trigger predefined fault handling procedures upon detection of anomalies."
    },
    {
        "id": 776,
        "safety_criterion": "If implementing a certain function requires many lines of code and involves multiple logical structure blocks, comments should be added at the beginning of the code block explaining the processing logic and precautions",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Flight control software shall include detailed comments explaining the processing logic and precautions for each complex functional module, ensuring code maintainability and readability."
    },
    {
        "id": 777,
        "safety_criterion": "Public methods in public class libraries need to have author, date, and modification history information added after the general method comment, uniformly formatted using XML tags",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 103,
        "hopy_requirement": "All methods in the public class library of flight control software shall include author, date, and modification history information in the comments, uniformly formatted using XML tags."
    },
    {
        "id": 778,
        "safety_criterion": "All methods and functions should begin with a concise comment describing the function of this block of code (what the method does). This description should not include implementation details (how it is done), as these often change over time and can lead to unnecessary comment maintenance or even incorrect comments. The code itself and necessary inline comments will describe the implementation",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 137,
        "hopy_requirement": "Each functional module in flight control software shall have clear comments describing its function and purpose, ensuring maintenance personnel can quickly understand the module’s functionality without delving into code details."
    },
    {
        "id": 779,
        "safety_criterion": "When the function of a parameter is not obvious and the process expects the parameter to be within a specific range, the passed parameters should also be described. Function return values and global variables changed by the process, especially those passed by reference, must also be described at the beginning of each process",
        "class": "Control Calculation Criteria",
        "document_name": "5.json",
        "document_chunk_index": 271,
        "hopy_requirement": "The system shall ensure that all parameters passed to the control algorithm (such as attitude angles, speed, altitude, etc.) are within predefined safety ranges and shall explicitly describe the initial state and variation range of these parameters at the beginning of each control cycle."
    },
    {
        "id": 780,
        "safety_criterion": "A method should only perform one task. Do not combine multiple tasks into a single method, even if those tasks are very small",
        "class": "Processing Logic Criteria",
        "document_name": "4.json",
        "document_chunk_index": 299,
        "hopy_requirement": "Each functional module in flight control software shall be responsible for a single task only, such as attitude control, orbit calculation, or communication management, ensuring clear responsibilities between modules."
    },
    {
        "id": 781,
        "safety_criterion": "To maintain better reading habits, do not write multiple variable declarations in a single line; that is, declare only one variable per line.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The flight control software code should ensure that each variable declaration occupies a separate line to improve code readability and maintainability."
    },
    {
        "id": 782,
        "safety_criterion": "Avoid having more than five parameters in a method. If exceeded, use a struct to pass multiple parameters.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 139,
        "hopy_requirement": "The flight control software should be designed to pass multiple parameters using structures to ensure clarity and maintainability of parameter passing."
    },
    {
        "id": 783,
        "safety_criterion": "The use of goto statements is generally prohibited.",
        "class": "Processing Logic Criteria",
        "document_name": "5.json",
        "document_chunk_index": 244,
        "hopy_requirement": "Flight control software should avoid the use of goto statements to ensure code readability and maintainability."
    },
    {
        "id": 784,
        "safety_criterion": "Always include a default clause in switch statements to display information.",
        "class": "State Scenario Criteria",
        "document_name": "3.json",
        "document_chunk_index": 242,
        "hopy_requirement": "Flight control software should ensure the safety and stability of the default mode when handling different flight mode switches and provide corresponding status information."
    },
    {
        "id": 785,
        "safety_criterion": "Use structs or classes to pass method parameters when there are more than eight parameters.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 153,
        "hopy_requirement": "Flight control software should use structs or classes to pass complex flight parameters to ensure completeness and maintainability of parameter passing."
    },
    {
        "id": 786,
        "safety_criterion": "Use C# or VB.NET specific types instead of alias types defined in the System namespace.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 271,
        "hopy_requirement": "Flight control software should use C# or VB.NET specific types to ensure type safety and code consistency."
    },
    {
        "id": 787,
        "safety_criterion": "Prohibit the use of fixed numerical values in programs; use constants instead.",
        "class": "Control Calculation Criteria",
        "document_name": "3.json",
        "document_chunk_index": 120,
        "hopy_requirement": "Defined constants should be used in flight control software to represent all fixed numerical values, such as maximum flight altitude and maximum speed."
    },
    {
        "id": 788,
        "safety_criterion": "Avoid using many member variables. Declare local variables and pass them to methods. Do not share member variables between methods.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 159,
        "hopy_requirement": "Flight control software should use local variables to store temporary data and pass data through parameters, avoiding sharing member variables between different methods."
    },
    {
        "id": 789,
        "safety_criterion": "Do not use specific paths and drive names in the code. Use relative paths and make the path programmable.",
        "class": "Communication Criteria",
        "document_name": "1.json",
        "document_chunk_index": 223,
        "hopy_requirement": "Flight control software should use relative paths to access critical mission data files to ensure consistency and portability across different operating systems and hardware configurations."
    },
    {
        "id": 790,
        "safety_criterion": "If the required configuration file cannot be found, the application needs to be able to create a new one with default values.",
        "class": "Operating State Criteria",
        "document_name": "2.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The flight control system should be capable of automatically generating and using a default configuration file when key configuration files are missing to ensure normal system operation."
    },
    {
        "id": 791,
        "safety_criterion": "If an erroneous value is found in the configuration file, the application should throw an error and provide a prompt message to inform the user of the correct value.",
        "class": "Control Calculation Criteria",
        "document_name": "1.json",
        "document_chunk_index": 156,
        "hopy_requirement": "The system should be capable of detecting and handling erroneous values in flight control parameter configuration files, sending error prompt messages to the ground control station, and providing correct parameter values."
    },
    {
        "id": 792,
        "safety_criterion": "When retrieving columns from DataColumn, use field names instead of index numbers.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 201,
        "hopy_requirement": "The flight data recording system should access and process flight data using field names rather than index numbers to ensure data accuracy and consistency."
    },
    {
        "id": 793,
        "safety_criterion": "In a class, all field definitions should be placed uniformly at the top of the class, before any methods or properties.",
        "class": "Processing Logic Criteria",
        "document_name": "3.json",
        "document_chunk_index": 83,
        "hopy_requirement": "In the class definitions of flight control software, all flight parameters and state variables should be uniformly defined at the top of the class to ensure code readability and maintainability."
    },
    {
        "id": 794,
        "safety_criterion": "In a class, all properties should be defined collectively within a single property block.",
        "class": "Processing Logic Criteria",
        "document_name": "1.json",
        "document_chunk_index": 123,
        "hopy_requirement": "Flight control software should centrally define all flight parameters and state variables within a single configuration module."
    },
    {
        "id": 795,
        "safety_criterion": "Prevent the absence of detailed descriptions for certain software functionalities.",
        "class": "Functional Hierarchy Criteria",
        "document_name": "1.json",
        "document_chunk_index": 153,
        "hopy_requirement": "The system should provide detailed descriptions of specific operational procedures and parameter settings for each functional module in flight control software."
    },
    {
        "id": 796,
        "safety_criterion": "Prevent the absence of descriptions for input and output data of the software.",
        "class": "Data Criteria",
        "document_name": "1.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The system should provide detailed descriptions of input and output flight control commands and sensor data to ensure data integrity and accuracy."
    },
    {
        "id": 797,
        "safety_criterion": "Prevent the absence of descriptions for information transfer methods between internal and external interfaces of the software.",
        "class": "Communication Criteria",
        "document_name": "3.json",
        "document_chunk_index": 230,
        "hopy_requirement": "The system should detail the data transmission protocols and interface specifications between flight control software, ground stations, sensors, and actuators."
    },
    {
        "id": 798,
        "safety_criterion": "Prevent the absence of descriptions for software functional processes.",
        "class": "Functional Logic Criteria",
        "document_name": "2.json",
        "document_chunk_index": 206,
        "hopy_requirement": "The system should have detailed descriptions of flight control software functional processes, ensuring that the execution process and logical relationships of each control command are clear and traceable."
    },
    {
        "id": 799,
        "safety_criterion": "Prevent the absence of descriptions for software response time requirements. Software developers should guide users in considering performance requirements such as time, capacity, precision, and margins under different usage scenarios based on system characteristics.",
        "class": "Task Timing Criteria",
        "document_name": "4.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system should have the capability to precisely measure and record response times of critical control commands under different flight modes (e.g., takeoff, cruise, landing)."
    },
    {
        "id": 800,
        "safety_criterion": "Prevent the absence of descriptions for software safety requirements. Carefully analyze various possible abnormal conditions during software operation; the handling process should consider corresponding protective measures, and the system must transition into a safe state.",
        "class": "Operating State Criteria",
        "document_name": "2.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The flight control system should have exception detection and protection mechanisms to ensure the system automatically transitions into a safe mode in case of software anomalies, preventing mission failure."
    },
    {
        "id": 801,
        "class": "Control Calculation Criteria",
        "safety_criterion": "List possible undesirable events, analyze the possible causes of these undesirable events, and propose corresponding software processing requirements",
        "document_name": "1.json",
        "document_chunk_index": 167,
        "hopy_requirement": "The system shall be able to identify and handle abnormal situations that may occur during flight, such as sensor failures, communication interruptions, etc., and provide corresponding fault recovery mechanisms."
    },
    {
        "id": 802,
        "class": "Data Criteria",
        "safety_criterion": "For software that needs to handle sensitive data, confidentiality requirements must be specified",
        "document_name": "2.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The flight control system shall have encryption capabilities to ensure the security of sensitive flight data during transmission and storage."
    },
    {
        "id": 803,
        "class": "Redundancy Criteria",
        "safety_criterion": "Lacks reliability functions for recovery after crashes, offsite data backup, etc.",
        "document_name": "4.json",
        "document_chunk_index": 239,
        "hopy_requirement": "The system shall have the capability to automatically recover after a crash and perform backups of critical data in different geographic locations."
    },
    {
        "id": 804,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent descriptions of functionalities not required by the software. Communicate sufficiently with users, consider user experience, and avoid adding unnecessary features",
        "document_name": "3.json",
        "document_chunk_index": 243,
        "hopy_requirement": "The flight control system shall provide only necessary operations and monitoring functions, avoiding additional unnecessary functions to ensure pilot operations are simple and efficient."
    },
    {
        "id": 805,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "Prevent requirement descriptions that do not align with user needs",
        "document_name": "3.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The system shall ensure that all flight mission requirements fully align with user requirements, avoiding any inconsistencies in requirement descriptions."
    },
    {
        "id": 806,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent meaningless function descriptions",
        "document_name": "3.json",
        "document_chunk_index": 103,
        "hopy_requirement": "The system shall ensure that all flight control commands and status reports have clear definitions and purposes, avoiding meaningless or redundant commands and reports."
    },
    {
        "id": 807,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "Duplicate requirements",
        "document_name": "1.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The system shall be able to monitor and record flight navigation parameters in real time, ensuring parameter accuracy and consistency when states change."
    },
    {
        "id": 808,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent unclear requirement descriptions that are hard to understand",
        "document_name": "5.json",
        "document_chunk_index": 275,
        "hopy_requirement": "The system shall provide clear and detailed flight mission descriptions and operating instructions to ensure that all operators can accurately understand and execute missions."
    },
    {
        "id": 809,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent content where customer requirements are not clearly understood; ambiguous language in requirements documents",
        "document_name": "3.json",
        "document_chunk_index": 189,
        "hopy_requirement": "System requirement documentation shall clearly describe all flight mission parameters and operational procedures to ensure there is no ambiguity."
    },
    {
        "id": 810,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent unclear descriptions due to high complexity of requirements",
        "document_name": "2.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system shall clearly define and manage complex flight mission requirements, ensuring accurate and unambiguous descriptions of each mission parameter and command."
    },
    {
        "id": 811,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Prevent unclear design of the system structure, including incomplete hierarchical and component structures.",
        "document_name": "5.json",
        "document_chunk_index": 92,
        "hopy_requirement": "The system shall have a clear modular design to ensure well-defined interfaces between subsystems and components, with a reasonable hierarchical structure."
    },
    {
        "id": 812,
        "class": "Functional Logic Criteria",
        "safety_criterion": "Prevent vague descriptions of non-functional requirements.",
        "document_name": "4.json",
        "document_chunk_index": 100,
        "hopy_requirement": "The system shall clearly define all non-functional requirements, including but not limited to response time, reliability, availability, and security metrics."
    },
    {
        "id": 813,
        "class": "Data Criteria",
        "safety_criterion": "Prevent vague descriptions of interface requirements.",
        "document_name": "4.json",
        "document_chunk_index": 99,
        "hopy_requirement": "The system shall clearly define parameters and data formats for all flight control interfaces to ensure unambiguous interpretation."
    },
    {
        "id": 814,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "The software functional hierarchy diagram must be clearly defined, with each subsystem's functions specified.",
        "document_name": "3.json",
        "document_chunk_index": 100,
        "hopy_requirement": "The flight control system shall have a clear functional hierarchy structure, with each subsystem (e.g., navigation, attitude control, propulsion) having distinct and independent functionalities."
    },
    {
        "id": 815,
        "class": "Data Criteria",
        "safety_criterion": "All input information related to functions should be clearly defined, including its source, meaning, format, reception method, quantity, range, conversion method, time requirements, and priority.",
        "document_name": "4.json",
        "document_chunk_index": 154,
        "hopy_requirement": "The flight control system shall clearly define all input information for navigation data, including satellite signals, ground station data, sensor data sources, formats, reception methods, ranges, and time requirements."
    },
    {
        "id": 816,
        "class": "Data Criteria",
        "safety_criterion": "All output information related to functions should be clearly defined, including transmission method, meaning, format, quantity, range, conversion method, time requirements, priority, and output form.",
        "document_name": "5.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The flight control system shall be capable of real-time output of flight parameters (e.g., altitude, speed, attitude angle) and their rate of change, ensuring uniform data format, reliable transmission, and timely output completion."
    },
    {
        "id": 817,
        "class": "Functional Logic Criteria",
        "safety_criterion": "Performance indicators should be discussed with users to clarify requirements early in development.",
        "document_name": "3.json",
        "document_chunk_index": 197,
        "hopy_requirement": "The system shall dynamically adjust the aircraft's performance parameters according to user needs to ensure mission objectives are achieved."
    },
    {
        "id": 818,
        "class": "Data Criteria",
        "safety_criterion": "Development units should clearly define interface characteristic parameters and data characteristics.",
        "document_name": "3.json",
        "document_chunk_index": 265,
        "hopy_requirement": "The system shall clearly define and specify all characteristic parameters of flight control interfaces, including data format, transmission protocol, and frequency."
    },
    {
        "id": 819,
        "class": "Functional Logic Criteria",
        "safety_criterion": "Avoid using ambiguous terms such as 'under normal circumstances', 'basic', 'mainly includes', or 'aspects'. All constraints should be explicitly stated.",
        "document_name": "3.json",
        "document_chunk_index": 218,
        "hopy_requirement": "The system shall clearly define and strictly enforce threshold values and ranges for all flight control parameters, ensuring they never exceed predefined safety limits under any condition."
    },
    {
        "id": 820,
        "class": "Functional Logic Criteria",
        "safety_criterion": "Prevent expression or authoring errors in requirement documents.",
        "document_name": "1.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The system shall have the capability to automatically detect and verify the correctness and consistency of flight mission requirement documents."
    },
    {
        "id": 821,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent erroneous descriptions of the system design architecture.",
        "document_name": "3.json",
        "document_chunk_index": 174,
        "hopy_requirement": "The system shall ensure that the architectural description of all flight control software modules is accurate and error-free to prevent system failures caused by incorrect descriptions."
    },
    {
        "id": 822,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent errors in the description of software output methods and content.",
        "document_name": "1.json",
        "document_chunk_index": 167,
        "hopy_requirement": "Flight control software shall ensure that flight commands and parameters are output correctly to prevent flight deviations caused by software errors."
    },
    {
        "id": 823,
        "class": "Data Criteria",
        "safety_criterion": "Prevent erroneous descriptions of software interface methods.",
        "document_name": "5.json",
        "document_chunk_index": 190,
        "hopy_requirement": "The system shall ensure that the interface descriptions of all flight control software are accurate and error-free to prevent misinterpretation of control commands."
    },
    {
        "id": 824,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent erroneous descriptions of software functional processes.",
        "document_name": "5.json",
        "document_chunk_index": 218,
        "hopy_requirement": "The system shall ensure that the functional process descriptions of flight control software are accurate and error-free to prevent flight control failures caused by incorrect descriptions."
    },
    {
        "id": 825,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Prevent erroneous descriptions of the software operating environment.",
        "document_name": "4.json",
        "document_chunk_index": 122,
        "hopy_requirement": "The system shall ensure that the operating environment parameters of the flight control software (e.g., atmospheric pressure, temperature, humidity) are accurate and error-free."
    },
    {
        "id": 826,
        "class": "Task Timing Criteria",
        "safety_criterion": "Prevent erroneous descriptions of software performance requirements.",
        "document_name": "4.json",
        "document_chunk_index": 140,
        "hopy_requirement": "The system shall ensure that the performance parameters of the flight control software (e.g., response time, calculation accuracy) comply with the design specifications during all flight phases."
    },
    {
        "id": 827,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Conduct a feasibility analysis on the system specification or user requirements before performing requirement analysis to ensure that the requirements can be implemented with current technology and cost budget.",
        "document_name": "3.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The system shall be capable of conducting a feasibility analysis on each mission requirement specified in the flight mission document to ensure that all mission objectives can be achieved under current technology and cost constraints."
    },
    {
        "id": 828,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Each requirement must be verifiable. For functions that cannot be verified, sufficient communication with users should be conducted, and those requirements should be rewritten or deleted.",
        "document_name": "3.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The system shall have a verification mechanism for all flight control commands to ensure that each command can be accurately validated before execution."
    },
    {
        "id": 829,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Conduct requirement verification and review activities involving users, industry experts, and testing experts.",
        "document_name": "3.json",
        "document_chunk_index": 223,
        "hopy_requirement": "The system shall support requirement verification and review of flight mission requirements with multi-role participation, including pilots, aerospace engineers, and test experts."
    },
    {
        "id": 830,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent inconsistencies with actual user requirements.",
        "document_name": "3.json",
        "document_chunk_index": 206,
        "hopy_requirement": "The system shall ensure that flight mission parameters and commands are fully consistent with the instructions issued by the ground control center."
    },
    {
        "id": 831,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent requirement contradictions, including object characteristics, logic, or timing;",
        "document_name": "2.json",
        "document_chunk_index": 221,
        "hopy_requirement": "The system shall ensure consistency between flight control commands and the current flight status and mission requirements to avoid command conflicts."
    },
    {
        "id": 832,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent language description inconsistencies;",
        "document_name": "5.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system shall ensure consistency and accuracy of all flight control commands and status reports across different modules and subsystems."
    },
    {
        "id": 833,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent requirement parameter inconsistencies.",
        "document_name": "3.json",
        "document_chunk_index": 143,
        "hopy_requirement": "The system shall ensure that all flight control parameters remain consistent across modules to prevent control errors caused by parameter inconsistency."
    },
    {
        "id": 834,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent incomplete descriptions of input information for software functions",
        "document_name": "2.json",
        "document_chunk_index": 106,
        "hopy_requirement": "The system shall ensure completeness and accuracy of all input parameters for flight control commands, including but not limited to heading, speed, altitude, and attitude angles."
    },
    {
        "id": 835,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent incomplete descriptions of output information for software functions",
        "document_name": "1.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The flight control system shall ensure completeness of all output information, including but not limited to flight parameters, fault statuses, and operation commands."
    },
    {
        "id": 836,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent incomplete descriptions of process handling for software functions",
        "document_name": "3.json",
        "document_chunk_index": 252,
        "hopy_requirement": "The system shall ensure complete description of process handling for all flight control software, including exception handling and fault recovery mechanisms."
    },
    {
        "id": 837,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent incomplete handling processes when inputs do not meet requirements",
        "document_name": "5.json",
        "document_chunk_index": 244,
        "hopy_requirement": "The system shall be capable of detecting and rejecting non-compliant flight control commands, ensuring completeness and safety in command processing."
    },
    {
        "id": 838,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent incomplete descriptions of abnormal condition detection",
        "document_name": "3.json",
        "document_chunk_index": 256,
        "hopy_requirement": "The system shall have complete mechanisms for detecting and handling abnormal conditions, ensuring accurate identification and response to all possible anomalies during flight."
    },
    {
        "id": 839,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Software design shall cover 100% of software requirements as per the requirements specification. Traceability between each software component or module and the requirements specification shall be described",
        "document_name": "5.json",
        "document_chunk_index": 192,
        "hopy_requirement": "The design of flight control software shall ensure full traceability between each module and the flight mission requirements specification to guarantee 100% coverage of all requirements."
    },
    {
        "id": 840,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Prevent omissions in software redundancy design; decide whether redundancy is required based on the requirements specification. Consider both software reliability requirements and the safety criticality level of the software or module;",
        "document_name": "3.json",
        "document_chunk_index": 197,
        "hopy_requirement": "Flight control software shall feature redundancy design to ensure seamless takeover by backup modules in case of primary module failure, guaranteeing continuity and safety of flight missions."
    },
    {
        "id": 841,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent design omissions for low-probability events;",
        "document_name": "3.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should have redundant design to ensure normal operation in case of single-point failures."
    },
    {
        "id": 842,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against illegal operations;",
        "document_name": "5.json",
        "document_chunk_index": 230,
        "hopy_requirement": "The system should have protection mechanisms against unauthorized access and illegal operations to ensure the integrity and safety of flight control commands."
    },
    {
        "id": 843,
        "class": "Data Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against illegal input data;",
        "document_name": "3.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The system should have functionality to validate the legality of all input data, ensuring that only data conforming to predefined formats and ranges can be processed."
    },
    {
        "id": 844,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against illegal configuration environments;",
        "document_name": "2.json",
        "document_chunk_index": 309,
        "hopy_requirement": "The system should have the capability to detect and prevent illegal configurations, ensuring that flight control parameters and system settings cannot be modified without authorization."
    },
    {
        "id": 845,
        "class": "Task Timing Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against rapid operations;",
        "document_name": "5.json",
        "document_chunk_index": 146,
        "hopy_requirement": "The system should have protection mechanisms against mis-triggering caused by rapid consecutive operations, ensuring the accuracy and stability of flight control commands."
    },
    {
        "id": 846,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against communication errors;",
        "document_name": "3.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The system should have redundant communication links and error detection mechanisms to ensure the integrity and reliability of flight data transmission."
    },
    {
        "id": 847,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent insufficient design for detection and protection against hardware failures;",
        "document_name": "1.json",
        "document_chunk_index": 258,
        "hopy_requirement": "The system should have redundant design to ensure normal operation and provide necessary protective measures in case of single-point hardware failures."
    },
    {
        "id": 848,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Several design considerations related to hardware processing, including power failure protection, power-on detection, system instability, interface faults, and incorrect operations;",
        "document_name": "4.json",
        "document_chunk_index": 269,
        "hopy_requirement": "The system should have power failure protection mechanisms to ensure critical flight data is safely saved during power interruptions and automatically restored to the pre-power-off state after power recovery."
    },
    {
        "id": 849,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Design of watchdog timers to handle program timeouts or infinite loop faults;",
        "document_name": "5.json",
        "document_chunk_index": 227,
        "hopy_requirement": "The system should have a watchdog timer function to detect and handle timeouts or infinite loop faults in flight control software."
    },
    {
        "id": 850,
        "class": "Data Criteria",
        "safety_criterion": "Reasonableness checks for data at module entry points, exit points, and other critical locations;",
        "document_name": "4.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The system should be capable of performing real-time reasonableness checks on inputs, outputs, and critical point data of flight control modules to ensure data remains within preset ranges."
    },
    {
        "id": 851,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent the design of requirements not derived from software requirements;",
        "document_name": "2.json",
        "document_chunk_index": 128,
        "hopy_requirement": "The system shall ensure that all software designs are based on verified flight mission requirements and prevent the addition of unauthorized software functions."
    },
    {
        "id": 852,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent redundant design.",
        "document_name": "4.json",
        "document_chunk_index": 200,
        "hopy_requirement": "The system design shall ensure that no unnecessary components or functions are included to reduce potential failure points and improve system reliability."
    },
    {
        "id": 853,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent logic ambiguity in modules or functions;",
        "document_name": "2.json",
        "document_chunk_index": 262,
        "hopy_requirement": "Flight control software shall ensure clear logic for all modules and functions, avoiding any logic handling that may cause ambiguity."
    },
    {
        "id": 854,
        "class": "Data Criteria",
        "safety_criterion": "Prevent data ambiguity in modules or functions;",
        "document_name": "5.json",
        "document_chunk_index": 183,
        "hopy_requirement": "The system shall ensure clarity and accuracy of data formats and content when the navigation module receives and processes satellite signals."
    },
    {
        "id": 855,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent ambiguous interface design;",
        "document_name": "3.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system shall clearly define data formats and communication protocols for all flight control interfaces to ensure unambiguous communication."
    },
    {
        "id": 856,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Design documentation must use precise, unambiguous language descriptions.",
        "document_name": "3.json",
        "document_chunk_index": 248,
        "hopy_requirement": "System design documents shall use precise and unambiguous language to describe flight control logic and parameter definitions."
    },
    {
        "id": 857,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The processing logic of each module/function, including logic structure, timing, and judgment conditions, must be clearly defined. Critical modules shall be designed to the level of pseudocode.",
        "document_name": "5.json",
        "document_chunk_index": 197,
        "hopy_requirement": "Critical modules in flight control software (such as attitude control and orbit calculation) shall have detailed pseudocode designs to ensure clarity of logic structure, timing, and judgment conditions."
    },
    {
        "id": 858,
        "class": "Data Criteria",
        "safety_criterion": "Input/output data for each module/function must be clearly defined, including data format, precision, range, validation methods, and constraints;",
        "document_name": "4.json",
        "document_chunk_index": 167,
        "hopy_requirement": "Each module of the flight control software must clearly define the format, precision, range, validation methods, and constraints for input/output data to ensure data accuracy and reliability."
    },
    {
        "id": 859,
        "class": "Communication Criteria",
        "safety_criterion": "For interface processing modules/functions, interface parameters and data characteristics must be clearly defined;",
        "document_name": "4.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Interface modules of the flight control system shall clearly define and verify characteristic parameters and data characteristics of all flight parameters (e.g., attitude angle, speed, altitude) to ensure data accuracy and consistency."
    },
    {
        "id": 860,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Refer to the requirements specification to clearly describe the function of each module, and verify software design consistency with the requirements specification through design reviews;",
        "document_name": "3.json",
        "document_chunk_index": 119,
        "hopy_requirement": "Navigation system modules shall clearly describe their functions, including but not limited to track calculation, attitude control, and fault detection, and ensure design consistency with the requirements specification through design reviews."
    },
    {
        "id": 861,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Before software design, the project team should receive training on the development environment and programming language being used.",
        "document_name": "3.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The project team should receive training on the development environment (e.g., Simulink) and programming language (e.g., Ada) used in the development of aviation software."
    },
    {
        "id": 862,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Prevent errors in the design logic itself;",
        "document_name": "4.json",
        "document_chunk_index": 270,
        "hopy_requirement": "The system should have redundant design to ensure that critical flight control logic can seamlessly switch to backup logic when the primary logic fails."
    },
    {
        "id": 863,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent inconsistencies between design and requirements/implicit requirements; language description errors.",
        "document_name": "3.json",
        "document_chunk_index": 167,
        "hopy_requirement": "The system should ensure that the flight control software design is fully consistent with flight mission requirements, avoiding erroneous control commands caused by misunderstanding of requirements."
    },
    {
        "id": 864,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent misunderstandings in software function implementation.",
        "document_name": "2.json",
        "document_chunk_index": 270,
        "hopy_requirement": "The system should have a self-check function to ensure that the flight control software loads and initializes correctly upon each startup, preventing flight anomalies caused by software implementation errors."
    },
    {
        "id": 865,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent excessively high time or space complexity; use appropriate and optimized methods for design. If a function cannot be implemented using a simplified structure, consider decomposing the software functions appropriately;",
        "document_name": "4.json",
        "document_chunk_index": 289,
        "hopy_requirement": "Flight control software should optimize path planning algorithms to ensure real-time calculation of optimal paths in complex flight environments while ensuring efficient use of computing resources."
    },
    {
        "id": 866,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent excessive computational errors;",
        "document_name": "2.json",
        "document_chunk_index": 279,
        "hopy_requirement": "The system should have high-precision computing capabilities to ensure that the computational errors of navigation and control algorithms are within an acceptable range."
    },
    {
        "id": 867,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent singularities in algorithms;",
        "document_name": "3.json",
        "document_chunk_index": 146,
        "hopy_requirement": "The navigation system should have singularity detection and avoidance capabilities to ensure algorithm stability and reliability under any flight conditions."
    },
    {
        "id": 868,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent high module or function complexity;",
        "document_name": "1.json",
        "document_chunk_index": 87,
        "hopy_requirement": "Each module and function of the flight control software should remain simple, ensuring that the complexity of a single module does not exceed 10 logical decisions."
    },
    {
        "id": 869,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent redundant design logic",
        "document_name": "4.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The system should ensure that there are no redundant instructions in the flight control logic to prevent flight anomalies caused by logic errors."
    },
    {
        "id": 870,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Prevent non-standard human-machine interface design.",
        "document_name": "2.json",
        "document_chunk_index": 301,
        "hopy_requirement": "The cockpit human-machine interface should comply with aviation standards, ensuring that all control and display devices are reasonably arranged and clearly labeled to avoid operational errors."
    },
    {
        "id": 871,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Establish software simplification design principles and provide training to developers. Simplification principles include: low coupling, high cohesion, controlling module size, depth, width, fan-out, fan-in, and interface parameters.",
        "document_name": "2.json",
        "document_chunk_index": 230,
        "hopy_requirement": "Flight control system software should follow the design principles of low coupling and high cohesion, ensuring concise and clear inter-module interface parameters to improve system maintainability and reliability."
    },
    {
        "id": 872,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Consider existing system operation habits for important or frequently used software functions, and further confirm with all potential users after completing the preliminary design.",
        "document_name": "3.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The flight control software's operation interface should follow industry standards and user habits, and undergo user validation and confirmation after the design is completed."
    },
    {
        "id": 873,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Consider reasonable/aesthetic interface layout, prompt messages, confirmation opportunities for critical operations, dead-state prompts, responses to commonly used shortcuts or blank inputs, etc.",
        "document_name": "1.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The flight control interface should provide clear operational prompts and confirmation dialog boxes to ensure pilots can accurately and without error confirm key operations."
    },
    {
        "id": 874,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Consider whether the characteristics of the programming development framework being used (e.g., default shortcut response methods) meet the current project requirements and perform corresponding design handling.",
        "document_name": "3.json",
        "document_chunk_index": 131,
        "hopy_requirement": "Flight control software should use programming frameworks compliant with aerospace standards and ensure that common shortcut response methods meet the safety requirements of flight operations."
    },
    {
        "id": 875,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Verify whether all software functions have been fully implemented. Confirm during the design phase that both safety-critical and non-safety-critical requirements have been fulfilled.",
        "document_name": "4.json",
        "document_chunk_index": 192,
        "hopy_requirement": "The flight control system should ensure that all safety-critical functions (such as attitude control, navigation, and communication) have been fully implemented and verified during the software design phase."
    },
    {
        "id": 876,
        "class": "Data Criteria",
        "safety_criterion": "Memory usage and availability should be constrained. Dynamic memory allocation may lead to issues such as un-freed allocated memory (memory leaks), double-freeing memory (causing exceptions), or buffer overflows that overwrite code or other regions. With dynamically allocated data structures, static analysis is often not possible to verify that arrays and strings do not exceed the physical end of the data structure.",
        "document_name": "2.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The flight control system should ensure effective management of all memory allocation operations, preventing memory leaks, double-freeing, and buffer overflows to guarantee system stability and safety."
    },
    {
        "id": 877,
        "class": "Communication Criteria",
        "safety_criterion": "I/O channel usage (load) and capacity and availability should be constrained. I/O channels should include internal hardware (sensors), inter-process communication (messages), and external communication (data output, command, and telemetry interfaces). Check for resource conflicts between scientific data collection and safety-critical data availability.",
        "document_name": "5.json",
        "document_chunk_index": 146,
        "hopy_requirement": "The system should reasonably allocate I/O channel resources between scientific data collection and flight safety-critical data transmission to avoid resource conflicts, ensuring the real-time performance and reliability of critical data."
    },
    {
        "id": 878,
        "class": "Timing Criteria",
        "safety_criterion": "Execution time, CPU load, and availability should be constrained. Investigate variations in CPU load over time and identify environmental conditions that cause peak loads.",
        "document_name": "5.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The flight control system should monitor CPU load in real-time and trigger alarms when the load exceeds preset thresholds, ensuring stable system operation under high-load conditions."
    },
    {
        "id": 879,
        "class": "Task Timing Criteria",
        "safety_criterion": "Critical time should be constrained. The 'critical time' in safety-critical systems refers to the time interval between the occurrence of a fault and the system reaching an unsafe state.",
        "document_name": "4.json",
        "document_chunk_index": 255,
        "hopy_requirement": "The system should ensure safe mode switching within 5 seconds after detecting a critical fault to prevent the occurrence of unsafe states."
    },
    {
        "id": 880,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Automatic protection should be constrained. If critical time is less than the actual response time of operators, or if there is no human involvement in the loop, automatic safety protection mechanisms should be considered, which can be executed by a combination of hardware and software.",
        "document_name": "3.json",
        "document_chunk_index": 304,
        "hopy_requirement": "In the flight control system of spacecraft, automatic protection mechanisms should be implemented to ensure that safety measures are automatically executed within the critical time frame, preventing accidents caused by operator response delays."
    },
    {
        "id": 881,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Sampling frequency should be constrained according to the rate of change of physical parameters. For critical signals and parameters used in closed-loop control, the sampling frequency must typically be higher.",
        "document_name": "2.json",
        "document_chunk_index": 191,
        "hopy_requirement": "The system shall ensure that the sampling frequency of critical flight parameters (e.g., attitude angle, speed, altitude) is no less than 100Hz to meet the real-time requirements of closed-loop control."
    },
    {
        "id": 882,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Dynamic memory allocation should be constrained. For safety-critical software, it must be specified how the software will handle failed dynamic allocations.",
        "document_name": "2.json",
        "document_chunk_index": 242,
        "hopy_requirement": "Flight control software shall limit dynamic memory allocation and implement safety measures in case of allocation failure to ensure stable system operation."
    },
    {
        "id": 883,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Memory checks should be constrained. At system power-on, Random Access Memory (RAM) should be tested to verify that all memory addresses are available and that RAM operates properly.",
        "document_name": "3.json",
        "document_chunk_index": 151,
        "hopy_requirement": "The spacecraft shall execute a RAM self-test procedure during each startup to ensure all memory addresses are accessible and functioning correctly."
    },
    {
        "id": 884,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Program storage space and executable code size should be constrained. Estimate the size of executable software stored in devices (EPROM, flash disk, etc.). This may be smaller than the memory footprint because only static or global variables occupy space. If not all components reside in memory simultaneously, the executable code size may be larger. The program size includes both the operating system and application software.",
        "document_name": "2.json",
        "document_chunk_index": 270,
        "hopy_requirement": "Flight control software shall limit its storage space and the size of executable code to ensure it does not exceed the storage capacity of the device (e.g., EPROM, Flash memory), and load only necessary modules at runtime to optimize memory usage."
    },
    {
        "id": 885,
        "class": "Data Criteria",
        "safety_criterion": "The volume of stored data and available capacity should be constrained. Consider how much scientific data, memory-processed data, or other data will be generated, and compare this with the available storage space (RAM, disk, etc.). If data will be sent to the ground and then deleted from the storage medium, certain analysis should be performed to determine how frequently the 'disk' might become full. Under certain conditions, being unable to store data or overwriting previously stored data that has not yet been downloaded could be a safety concern.",
        "document_name": "3.json",
        "document_chunk_index": 199,
        "hopy_requirement": "Satellites shall have real-time monitoring and management of storage capacity to ensure that the storage of scientific data, memory-processed data, and other data does not exceed available storage (RAM, disk, etc.), and shall trigger alarms and implement data deletion or transmission measures when storage nears full capacity to prevent data loss or overwrite."
    },
    {
        "id": 886,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Digital systems must have sufficiently long word lengths to reduce the effects of quantization noise, thereby ensuring system stability; design sufficiently long word lengths to reduce the effects of quantization noise.",
        "document_name": "4.json",
        "document_chunk_index": 113,
        "hopy_requirement": "Flight control systems shall possess high-precision digital signal processing capabilities to minimize quantization noise during data transmission and processing, thus maintaining system stability and reliability."
    },
    {
        "id": 887,
        "class": "Task Timing Criteria",
        "safety_criterion": "Resource allocation and margin requirements should be constrained; during software design, storage requirements for software modules, throughput capacity of input/output channels, and processing time requirements should be determined, ensuring compliance with the system's specified margin requirements, typically requiring a margin of no less than 20%.",
        "document_name": "2.json",
        "document_chunk_index": 257,
        "hopy_requirement": "Flight control systems shall ensure that at least a 20% margin of processing capability and storage remains under maximum mission load to handle unexpected situations."
    },
    {
        "id": 888,
        "class": "Task Timing Criteria",
        "safety_criterion": "Timing schedule margins should be constrained. The timing schedules of software operations should be determined based on the specific controlled object, including various cycles such as sampling cycle, data computation cycle, and control cycle; if these cycles cannot fit along the time axis, higher-performance CPUs or parallel CPU processing should be used to resolve the issue, ensuring sufficient timing margins between software operations.",
        "document_name": "5.json",
        "document_chunk_index": 111,
        "hopy_requirement": "Flight control systems shall ensure proper scheduling of sampling cycles, data computation cycles, and control cycles across different flight phases (e.g., takeoff, cruise, landing) to avoid time conflicts, and employ high-performance CPUs or parallel processing when necessary to guarantee real-time performance and reliability."
    },
    {
        "id": 889,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent improper initialization of all input data",
        "document_name": "3.json",
        "document_chunk_index": 151,
        "hopy_requirement": "The system shall ensure that all flight control input data is properly initialized before use."
    },
    {
        "id": 890,
        "class": "Communication Criteria",
        "safety_criterion": "Faults in RS-422A/RS-232/RS-485 devices should be detectable or tolerateable",
        "document_name": "1.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The communication system shall include fault detection and automatic switching functionality for RS-422A/RS-232/RS-485 interfaces to ensure continuous and reliable data transmission."
    },
    {
        "id": 891,
        "class": "Communication Criteria",
        "safety_criterion": "Judgment or fault-tolerant measures should be available for external communication initialization failures.",
        "document_name": "2.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The system should have the capability to detect and automatically recover from external communication initialization failures, ensuring the stability and reliability of communication links."
    },
    {
        "id": 892,
        "class": "Memory Management Criteria",
        "safety_criterion": "Judgment or fault-tolerant measures should be available for memory allocation failures.",
        "document_name": "1.json",
        "document_chunk_index": 307,
        "hopy_requirement": "The flight control system should have a memory management mechanism to ensure effective judgment and fault tolerance during memory allocation failures, maintaining system stability."
    },
    {
        "id": 893,
        "class": "Redundancy Criteria",
        "safety_criterion": "Judgment or fault-tolerant measures should be available for binary semaphore creation failures.",
        "document_name": "3.json",
        "document_chunk_index": 133,
        "hopy_requirement": "The system should have the ability to detect and handle binary semaphore creation failures, ensuring the stability and reliability of the flight control system."
    },
    {
        "id": 894,
        "class": "Redundancy Criteria",
        "safety_criterion": "Judgment or fault-tolerant measures should be available for mutual exclusion semaphore creation failures.",
        "document_name": "1.json",
        "document_chunk_index": 300,
        "hopy_requirement": "The flight control system should have detection and fault tolerance mechanisms for mutual exclusion semaphore creation failures, ensuring no resource contention or deadlock occurs during multitasking."
    },
    {
        "id": 895,
        "class": "Redundancy Criteria",
        "safety_criterion": "Judgment or fault-tolerant measures should be available for counting semaphore creation failures.",
        "document_name": "4.json",
        "document_chunk_index": 208,
        "hopy_requirement": "The system should have detection and fault tolerance mechanisms for counting semaphore creation failures, ensuring reliable execution of flight control commands."
    },
    {
        "id": 896,
        "class": "Data Criteria",
        "safety_criterion": "Prevent incomplete data definitions and unclear classifications of data used by the software.",
        "document_name": "1.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The system should ensure complete and clearly defined flight control data, including but not limited to flight parameters, navigation data, and fault diagnostic information."
    },
    {
        "id": 897,
        "class": "Data Criteria",
        "safety_criterion": "Constraints should be applied to input data before processing.",
        "document_name": "3.json",
        "document_chunk_index": 245,
        "hopy_requirement": "The system should ensure that all incoming flight control commands are within predefined valid ranges; commands outside these ranges should be rejected."
    },
    {
        "id": 898,
        "class": "Data Criteria",
        "safety_criterion": "Collected data should be verified before data processing to confirm usability.",
        "document_name": "3.json",
        "document_chunk_index": 141,
        "hopy_requirement": "The system should be capable of real-time validation of sensor-collected flight data to ensure its accuracy and usability."
    },
    {
        "id": 899,
        "class": "Data Criteria",
        "safety_criterion": "Output data should be checked after data processing.",
        "document_name": "3.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The system should be capable of real-time validation of output flight control commands to ensure their accuracy and integrity."
    },
    {
        "id": 900,
        "class": "Data Criteria",
        "safety_criterion": "Self-inspection design should be included in the application data processing mechanism.",
        "document_name": "5.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system should have self-inspection capabilities to periodically verify the integrity and consistency of flight control data, ensuring the reliability of the data processing mechanism."
    },
    {
        "id": 901,
        "class": "Data Criteria",
        "safety_criterion": "Use parity checks and checksum checks.",
        "document_name": "1.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system shall have the capability to perform parity checks and checksum checks on critical flight data (such as attitude angles, speed, altitude) to ensure the integrity and accuracy of data transmission."
    },
    {
        "id": 902,
        "class": "Data Criteria",
        "safety_criterion": "Verify data transmission correctness before using message information.",
        "document_name": "3.json",
        "document_chunk_index": 198,
        "hopy_requirement": "The system shall be able to perform integrity checks on flight control commands received from the ground station to ensure the correctness and integrity of command data."
    },
    {
        "id": 903,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Control the numerical operation range.",
        "document_name": "4.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The system shall ensure that all numerical operations of flight control parameters are within predefined safe ranges to prevent system failures caused by exceeding these ranges."
    },
    {
        "id": 904,
        "class": "Data Criteria",
        "safety_criterion": "There should be words or strings indicating message length, data type, or message content.",
        "document_name": "2.json",
        "document_chunk_index": 167,
        "hopy_requirement": "The system shall be able to monitor and indicate the length, data type, and content of flight control messages in real time to ensure the integrity and accuracy of data transmission."
    },
    {
        "id": 905,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "When a single output data takes a default value, the function should be considered.",
        "document_name": "2.json",
        "document_chunk_index": 278,
        "hopy_requirement": "In the navigation system, when a single sensor output data fails, the system shall automatically switch to the backup sensor and maintain navigation accuracy."
    },
    {
        "id": 906,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent input data diagnosed as abnormal from causing changes in function execution conditions, which may result in incorrect execution of functions during prohibited operational phases.",
        "document_name": "1.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system shall be capable of setting input data to predefined safe values when data anomalies are detected, ensuring that specific functions will not be erroneously triggered during operational phases where execution is prohibited."
    },
    {
        "id": 907,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent input data diagnosed as abnormal from causing changes in function execution conditions, which may result in erroneous execution of functions during the execution of high-priority functions, interrupting their operation.",
        "document_name": "4.json",
        "document_chunk_index": 264,
        "hopy_requirement": "The system shall be capable of switching to a backup data source or predefined safe value upon detecting input data anomalies, ensuring continuity and reliability of high-priority flight control functions."
    },
    {
        "id": 908,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent input data diagnosed as abnormal from causing changes in function execution conditions, which may result in erroneous execution of functions during the execution of mutually exclusive functions, leading to conflicting output data.",
        "document_name": "5.json",
        "document_chunk_index": 83,
        "hopy_requirement": "The system shall be capable of setting input data to predefined safe values upon detecting data anomalies, ensuring that fault handling does not interfere with the normal execution of mutually exclusive functions and avoids conflicts in output data."
    },
    {
        "id": 909,
        "class": "Processing Logic Criteria",
        "safety_criterion": "When multiple input data take values such as normal, abnormal, boundary, initial, safe, or default values, or combinations thereof, the function should handle them accordingly.",
        "document_name": "1.json",
        "document_chunk_index": 234,
        "hopy_requirement": "The flight control system shall be capable of handling combinations of input data from multiple sensors, including normal values, abnormal values, boundary values, initial values, safe values, and default values, ensuring the correctness and safety of flight control commands."
    },
    {
        "id": 910,
        "class": "Processing Logic Criteria",
        "safety_criterion": "When multiple input data take equivalent classes of normal values, the function should handle them accordingly.",
        "document_name": "3.json",
        "document_chunk_index": 176,
        "hopy_requirement": "The navigation system shall be capable of processing combined data from multiple sensors (e.g., GPS, inertial navigation system) representing equivalent classes of normal values, ensuring flight path accuracy."
    },
    {
        "id": 911,
        "class": "Data Criteria",
        "safety_criterion": "When multiple input data values are in an abnormal value equivalence class combination, the function should handle them.",
        "document_name": "3.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should be able to detect and process abnormal data from multiple sensors, ensuring the stability and reliability of the flight control system."
    },
    {
        "id": 912,
        "class": "Data Criteria",
        "safety_criterion": "When multiple input data values are in a safe value combination, the function should handle them.",
        "document_name": "4.json",
        "document_chunk_index": 255,
        "hopy_requirement": "The system should be able to process combined safe values from multiple sensor inputs, ensuring the correctness and safety of flight control commands."
    },
    {
        "id": 913,
        "class": "Data Criteria",
        "safety_criterion": "When multiple input data values are in a default value combination, the function should handle them.",
        "document_name": "2.json",
        "document_chunk_index": 106,
        "hopy_requirement": "The system should be able to handle situations where multiple sensor data are simultaneously lost or invalid, ensuring the stability and safety of the flight control system."
    },
    {
        "id": 914,
        "class": "Data Criteria",
        "safety_criterion": "When one or more faults such as data anomalies, timing faults, communication faults, or source equipment faults occur in a single input data, the function does not perform fault diagnosis and handling.",
        "document_name": "4.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system should have the capability to monitor and diagnose faults in the flight control data link in real-time, ensuring timely fault handling and recovery when anomalies occur in a single input data."
    },
    {
        "id": 915,
        "class": "Data Criteria",
        "safety_criterion": "Incorrect reference values are used when normalizing input data.",
        "document_name": "4.json",
        "document_chunk_index": 172,
        "hopy_requirement": "The system should ensure that correct reference values are used during flight data normalization to guarantee the accuracy of flight control and navigation."
    },
    {
        "id": 916,
        "class": "Data Criteria",
        "safety_criterion": "The slope of input data involved in the calculation between adjacent cycles exceeds the threshold.",
        "document_name": "2.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The system should be able to detect and process abnormal changes in flight control parameters (e.g., attitude angle, speed, altitude) within adjacent cycles to ensure the accuracy of the calculation results."
    },
    {
        "id": 917,
        "class": "Data Criteria",
        "safety_criterion": "The calculation result is +∞.",
        "document_name": "4.json",
        "document_chunk_index": 250,
        "hopy_requirement": "The navigation system should be able to detect and handle infinite value results during flight trajectory calculations to ensure system stability and safety."
    },
    {
        "id": 918,
        "class": "Data Criteria",
        "safety_criterion": "When multi-function output data values are in an abnormal value equivalence class combination, they should be handled.",
        "document_name": "3.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The system should be able to detect and process abnormal values in flight control commands to ensure command correctness and flight safety."
    },
    {
        "id": 919,
        "class": "Data Criteria",
        "safety_criterion": "When multi-function output data values are in a safe value combination, they should be handled.",
        "document_name": "3.json",
        "document_chunk_index": 115,
        "hopy_requirement": "The flight control system should ensure that the output control commands are safe value combinations during multi-sensor data fusion to prevent flight risks caused by abnormal data."
    },
    {
        "id": 920,
        "class": "Data Criteria",
        "safety_criterion": "When multi-function input data values are in an abnormal value equivalence class combination, they should be handled.",
        "document_name": "1.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The system should be able to detect and process abnormal sensor input data to ensure the stability and reliability of the flight control system."
    },
    {
        "id": 921,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Multifunctional input data takes boundary value combinations and should be processed accordingly.",
        "document_name": "5.json",
        "document_chunk_index": 117,
        "hopy_requirement": "The system should be able to process boundary value combinations of flight control parameters (e.g., altitude, speed, attitude angle) to ensure normal operation under extreme conditions."
    },
    {
        "id": 922,
        "class": "Data Criteria",
        "safety_criterion": "Multiple functions output different data to the same interface simultaneously, causing output conflicts.",
        "document_name": "2.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system should have a conflict detection mechanism to ensure that sending commands from multiple subsystems to the navigation system simultaneously does not result in navigation command conflicts."
    },
    {
        "id": 923,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent low-priority control processes from being interrupted by high-priority processes, which may affect current execution.",
        "document_name": "5.json",
        "document_chunk_index": 294,
        "hopy_requirement": "The system should ensure that when a high-priority task arises, it can safely interrupt the current low-priority task while maintaining continuity and stability of flight control."
    },
    {
        "id": 924,
        "class": "Control Calculation Criteria",
        "safety_criterion": "During the execution of a low-priority process, after being interrupted by a higher priority task, the handling procedure after the interruption should be considered.",
        "document_name": "1.json",
        "document_chunk_index": 98,
        "hopy_requirement": "In flight control software, after a low-priority task (e.g., data logging) is interrupted by a high-priority task (e.g., emergency obstacle avoidance), the low-priority task should be able to safely resume and continue execution."
    },
    {
        "id": 925,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent low-priority tasks from executing even though their execution conditions are satisfied due to preemption by high-priority tasks.",
        "document_name": "4.json",
        "document_chunk_index": 125,
        "hopy_requirement": "During the execution of high-priority tasks, if the execution conditions for low-priority tasks are met, the flight control system should record and delay execution to ensure system stability and safety."
    },
    {
        "id": 926,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent abrupt changes in output data when switching from automatic to manual control upon satisfying the transition condition.",
        "document_name": "5.json",
        "document_chunk_index": 254,
        "hopy_requirement": "When transitioning from automatic control mode to manual control mode, the system should ensure smooth data transition and avoid abrupt changes."
    },
    {
        "id": 927,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent steady-state errors caused by flaws in the control laws.",
        "document_name": "1.json",
        "document_chunk_index": 240,
        "hopy_requirement": "The flight control system should have adaptive adjustment capabilities to maintain aircraft steady-state performance even with flaws in the control laws."
    },
    {
        "id": 928,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent pole-zero cancellation caused by flaws in the control laws.",
        "document_name": "4.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system should have redundant control law design to ensure seamless takeover by backup control laws when the primary control law fails, preventing instability due to pole-zero cancellation."
    },
    {
        "id": 929,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent system divergence caused by flaws in the control laws.",
        "document_name": "5.json",
        "document_chunk_index": 183,
        "hopy_requirement": "The flight control system should have real-time monitoring and correction of control law parameters to ensure system stability and safety."
    },
    {
        "id": 930,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent errors in the definition of software computation logic.",
        "document_name": "4.json",
        "document_chunk_index": 190,
        "hopy_requirement": "Flight control software should include logic verification mechanisms to ensure all computational logic is correct during compilation and runtime."
    },
    {
        "id": 931,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent unreasonable settings of partial constraint conditions.",
        "document_name": "3.json",
        "document_chunk_index": 116,
        "hopy_requirement": "The system shall be capable of automatically detecting and preventing unreasonable settings of constraints (e.g., maximum speed, minimum safety distance) in flight path planning."
    },
    {
        "id": 932,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent lack of self-checking mechanisms for logic operation results.",
        "document_name": "3.json",
        "document_chunk_index": 269,
        "hopy_requirement": "The flight control system shall have a self-checking mechanism to ensure the integrity and accuracy of logic operation results."
    },
    {
        "id": 933,
        "class": "Task Timing Criteria",
        "safety_criterion": "Prevent excessive thresholds for logical judgments involving time.",
        "document_name": "5.json",
        "document_chunk_index": 298,
        "hopy_requirement": "The system shall ensure that all time-related logic judgment thresholds do not exceed 1 second to prevent flight control errors due to time delays."
    },
    {
        "id": 934,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent missing logic branches.",
        "document_name": "2.json",
        "document_chunk_index": 232,
        "hopy_requirement": "Flight control software shall ensure that all possible flight mode switching logic branches are covered and tested to prevent control failure due to logic omission."
    },
    {
        "id": 935,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The function handling during functional execution should correctly handle situations where execution conditions change from 'not satisfied' to 'satisfied again'.",
        "document_name": "5.json",
        "document_chunk_index": 110,
        "hopy_requirement": "During flight control, when navigation signals are reacquired after being lost, the system shall correctly recover and continue executing the flight mission."
    },
    {
        "id": 936,
        "class": "Task Timing Criteria",
        "safety_criterion": "Consider margin requirements for software response time.",
        "document_name": "2.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The system shall ensure that the response time of flight control software does not exceed 100 milliseconds under worst-case scenarios."
    },
    {
        "id": 937,
        "class": "Task Timing Criteria",
        "safety_criterion": "Provide alarms for time-out or insufficient time.",
        "document_name": "1.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The system shall be capable of real-time monitoring and alarming for engine ignition time-outs or insufficiencies."
    },
    {
        "id": 938,
        "class": "Task Timing Criteria",
        "safety_criterion": "Combine user reaction time with software processing time.",
        "document_name": "1.json",
        "document_chunk_index": 184,
        "hopy_requirement": "The system shall be capable of real-time monitoring and responding to pilot commands, ensuring that the time from command issuance to system response does not exceed 100 milliseconds."
    },
    {
        "id": 939,
        "class": "Task Timing Criteria",
        "safety_criterion": "Reasonably set the software sampling frequency.",
        "document_name": "1.json",
        "document_chunk_index": 135,
        "hopy_requirement": "The flight control system shall set a reasonable sensor sampling frequency to ensure the real-time performance and accuracy of flight status."
    },
    {
        "id": 940,
        "class": "Task Timing Criteria",
        "safety_criterion": "Fully consider the period of the controlled object.",
        "document_name": "1.json",
        "document_chunk_index": 175,
        "hopy_requirement": "The flight control system shall ensure that all critical periodic tasks (e.g., attitude control, navigation updates) are executed within their designated time intervals."
    },
    {
        "id": 941,
        "class": "Task Timing Criteria",
        "safety_criterion": "Reasonable arrangement of various cycles on the timeline.",
        "document_name": "2.json",
        "document_chunk_index": 290,
        "hopy_requirement": "The system shall ensure that task scheduling and control instructions are executed accurately within the scheduled time cycle to guarantee stable operation of the aircraft."
    },
    {
        "id": 942,
        "class": "Task Timing Criteria",
        "safety_criterion": "Appropriate margin is reserved between software operation timings.",
        "document_name": "4.json",
        "document_chunk_index": 221,
        "hopy_requirement": "Flight control software shall ensure sufficient time margin exists between task scheduling and execution to prevent task timeout or conflict."
    },
    {
        "id": 943,
        "class": "Task Timing Criteria",
        "safety_criterion": "Function execution time equals +∞, always executing. Analyze the correctness of function processing under conditions such as 'greater than specified time, less than specified time, maximum/minimum values'.",
        "document_name": "5.json",
        "document_chunk_index": 106,
        "hopy_requirement": "Flight control software shall be capable of detecting and handling task execution timeouts, ensuring safe system operation even under extreme conditions (e.g., computation time exceeds preset threshold)."
    },
    {
        "id": 944,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Input data for subsequent functions is a combination of normal value equivalence classes from outputs of preceding functions; subsequent functions should process accordingly.",
        "document_name": "4.json",
        "document_chunk_index": 248,
        "hopy_requirement": "The navigation system shall receive and process flight data from sensors, ensuring accuracy and reliability of subsequent flight control commands."
    },
    {
        "id": 945,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Input data for subsequent functions is a combination of initial values from outputs of preceding functions; subsequent functions should process accordingly.",
        "document_name": "1.json",
        "document_chunk_index": 188,
        "hopy_requirement": "The navigation system shall use attitude data output from the attitude control module as input to perform trajectory correction and target positioning."
    },
    {
        "id": 946,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "Input data for subsequent functions is a combination of default values from outputs of preceding functions; subsequent functions should process accordingly.",
        "document_name": "3.json",
        "document_chunk_index": 303,
        "hopy_requirement": "The navigation system shall process and verify combinations of default values from sensors to ensure accuracy in flight path calculations."
    },
    {
        "id": 947,
        "class": "Serial Relationship Criteria",
        "safety_criterion": "The system specifies two functions to be executed serially, but the two functions share the same input data, and execution conditions do not constrain the value of this input data, causing both functions to satisfy execution conditions concurrently, violating the specified sequence.",
        "document_name": "5.json",
        "document_chunk_index": 182,
        "hopy_requirement": "The system shall ensure that processing tasks with the same input data during flight control command processing are executed in the specified serial order to prevent concurrent execution leading to timing errors."
    },
    {
        "id": 948,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent lack of diversity in software within parallel paths;",
        "document_name": "4.json",
        "document_chunk_index": 309,
        "hopy_requirement": "Flight control systems shall have redundancy design to ensure diverse software implementation in primary and backup paths to prevent single-point failures."
    },
    {
        "id": 949,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent absence of enforcement requiring different processors using different software for control;",
        "document_name": "1.json",
        "document_chunk_index": 282,
        "hopy_requirement": "Flight control systems shall use redundant processors and diverse software implementations to prevent single-point failures."
    },
    {
        "id": 950,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Prevent unclear definition of allowable interconnection extent and scope among software components;",
        "document_name": "4.json",
        "document_chunk_index": 98,
        "hopy_requirement": "The system shall clearly define communication interfaces and data exchange scopes among software modules to ensure data interaction is limited to predefined interfaces only."
    },
    {
        "id": 951,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Establish mechanisms for software fault detection, isolation, and recovery;",
        "document_name": "5.json",
        "document_chunk_index": 89,
        "hopy_requirement": "The flight control system should have the capability to monitor the status of critical software modules in real-time and automatically isolate faulty modules upon fault detection, while initiating backup modules for recovery."
    },
    {
        "id": 952,
        "class": "Redundancy Criteria",
        "safety_criterion": "Consider system hardware resources, control coupling, data coupling, and failure mechanisms of hardware devices related to protection mechanisms when designing partitioned protection;",
        "document_name": "4.json",
        "document_chunk_index": 223,
        "hopy_requirement": "The system should be designed with redundancy to ensure that critical flight control hardware (e.g., flight computers, sensors) can continue normal operation in the event of a single-point failure."
    },
    {
        "id": 953,
        "class": "Communication Criteria",
        "safety_criterion": "Retransmission mechanism for interface data transmission failures;",
        "document_name": "5.json",
        "document_chunk_index": 304,
        "hopy_requirement": "The system should have the capability to automatically retransmit flight control commands upon transmission failure, ensuring reliable command transmission."
    },
    {
        "id": 954,
        "class": "Data Criteria",
        "safety_criterion": "Capture and feedback mechanism for packet parsing anomalies;",
        "document_name": "3.json",
        "document_chunk_index": 125,
        "hopy_requirement": "The system should have the capability to monitor and process flight packet parsing anomalies in real-time, ensuring the integrity and accuracy of data transmission."
    },
    {
        "id": 955,
        "class": "Communication Criteria",
        "safety_criterion": "Handling mechanism for packet retransmission after server anomalies;",
        "document_name": "4.json",
        "document_chunk_index": 101,
        "hopy_requirement": "After communication interruption between the ground station and satellite, the ground station should be able to automatically retransmit critical command packets to ensure reliable mission command transmission."
    },
    {
        "id": 956,
        "class": "Data Criteria",
        "safety_criterion": "Timely log file updates;",
        "document_name": "2.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system should be capable of recording and updating the aircraft's operational logs in real-time, including key operations and state changes."
    },
    {
        "id": 957,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Prevent BIT function from missing diagnostic result reporting;",
        "document_name": "4.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The system should ensure that the Built-In Test (BIT) function can report diagnostic results timely and accurately upon detecting any faults."
    },
    {
        "id": 958,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Prevent other functions from abnormally interrupting when BIT function execution conditions are met and other functions are executed concurrently;",
        "document_name": "1.json",
        "document_chunk_index": 178,
        "hopy_requirement": "The system should ensure that other critical flight control functions do not abnormally interrupt during the execution of the Built-In Test (BIT) function."
    },
    {
        "id": 959,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Fault diagnosis function identifies input data as faulty and outputs a fault word; other functions using this input data should consider the fault word of the input data.",
        "document_name": "4.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The flight control system should have a fault diagnosis function capable of generating a fault word and transmitting it in real-time to other relevant subsystems, ensuring that all subsystems take appropriate safety measures upon receiving the fault word."
    },
    {
        "id": 960,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Timely feedback of states during equipment collaboration.",
        "document_name": "3.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system should be capable of providing real-time feedback on the collaborative status of subsystems, ensuring the stability and safety of the aircraft during multi-system collaborative operations."
    },
    {
        "id": 961,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Ensure that functions do not continue execution before and after channel switching",
        "document_name": "4.json",
        "document_chunk_index": 97,
        "hopy_requirement": "The system shall ensure that the currently executing function can stop immediately during primary-to-backup channel switching and be taken over by the backup channel to prevent the function from continuing execution before and after the switch."
    },
    {
        "id": 962,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Prevent A channel from remaining as the primary control channel when B channel diagnoses A as faulty but A self-checks as normal",
        "document_name": "1.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system shall have a dual-channel redundancy design to ensure automatic switching of the primary control channel to B when A is diagnosed as faulty by B but self-checks as normal."
    },
    {
        "id": 963,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent misreporting of both A and B channels as faulty due to communication failure between B and A when A is the primary channel and self-checks as faulty",
        "document_name": "1.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system shall have a dual-channel redundancy design to ensure real-time monitoring of communication status between the primary and backup channels, and accurately report the fault status of both channels when the primary channel self-checks as faulty."
    },
    {
        "id": 964,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Prevent frequent channel switching",
        "document_name": "3.json",
        "document_chunk_index": 186,
        "hopy_requirement": "The system shall have a stable data transmission channel to ensure no data loss or delay occurs due to frequent channel switching during flight."
    },
    {
        "id": 965,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent single redundant channel failure",
        "document_name": "1.json",
        "document_chunk_index": 234,
        "hopy_requirement": "The system shall have redundancy design to ensure seamless takeover by other channels in case of failure in one redundant channel, guaranteeing continuity and safety of flight missions."
    },
    {
        "id": 966,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent inconsistent output data due to communication faults between redundant channels performing the same function",
        "document_name": "5.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The system shall have a multi-channel redundancy design to ensure data consistency across all channels and prevent output inconsistency caused by communication faults."
    },
    {
        "id": 967,
        "class": "Operating State Criteria",
        "safety_criterion": "System maintenance mechanisms during software operation",
        "document_name": "1.json",
        "document_chunk_index": 244,
        "hopy_requirement": "The system shall have the capability to perform software updates and maintenance during flight missions without affecting normal mission execution."
    },
    {
        "id": 968,
        "class": "Operating State Criteria",
        "safety_criterion": "Complete feedback and display of software operational status",
        "document_name": "4.json",
        "document_chunk_index": 176,
        "hopy_requirement": "The system shall be able to display the current status of the aircraft in real time, including but not limited to attitude, speed, altitude, and system health status."
    },
    {
        "id": 969,
        "class": "State Scenario Criteria",
        "safety_criterion": "Alarm mechanism for abnormal software operational status",
        "document_name": "2.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The system shall have the ability to trigger an immediate alarm and record anomaly information when flight control software operates abnormally."
    },
    {
        "id": 970,
        "class": "Operating State Criteria",
        "safety_criterion": "System state shall correspond to software state",
        "document_name": "5.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The flight control system shall monitor and record the current software state in real time to ensure it matches the expected flight mission state."
    },
    {
        "id": 971,
        "class": "Operating State Criteria",
        "safety_criterion": "There should be corresponding software states for each operational phase.",
        "document_name": "1.json",
        "document_chunk_index": 167,
        "hopy_requirement": "The flight control system should have clear software state identifiers and corresponding control logic for different flight phases (e.g., takeoff, cruise, landing)."
    },
    {
        "id": 972,
        "class": "Operating State Criteria",
        "safety_criterion": "Software states should align with the operational phase.",
        "document_name": "1.json",
        "document_chunk_index": 285,
        "hopy_requirement": "The flight control system should ensure that software states correspond to the current flight phase (e.g., takeoff, cruise, landing) to guarantee correct execution of control logic."
    },
    {
        "id": 973,
        "class": "Operating State Criteria",
        "safety_criterion": "Software states should align with system tasks.",
        "document_name": "4.json",
        "document_chunk_index": 303,
        "hopy_requirement": "Flight control software should synchronize in real-time and match the state of the current flight mission to ensure accurate and safe task execution."
    },
    {
        "id": 974,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "All redundancy channels should maintain identical states.",
        "document_name": "5.json",
        "document_chunk_index": 272,
        "hopy_requirement": "The system should ensure that all redundant channels maintain the same operational state at all times."
    },
    {
        "id": 975,
        "class": "Operating State Criteria",
        "safety_criterion": "Functions should account for different input data values under different states. After a state transition, if the input data value changes normally, it should not be treated as an abnormal input.",
        "document_name": "1.json",
        "document_chunk_index": 288,
        "hopy_requirement": "The system should be capable of identifying and processing variations in navigation data inputs under different flight modes (e.g., cruise, landing, takeoff), ensuring correctness and consistency of data."
    },
    {
        "id": 976,
        "class": "Operating State Criteria",
        "safety_criterion": "Functions should account for different input data values under different states. After a state transition, if the input data value is abnormal, it should not be mistakenly treated as normal input.",
        "document_name": "3.json",
        "document_chunk_index": 217,
        "hopy_requirement": "The flight control system should have the capability to validate and verify input data under different flight modes, ensuring the correctness and validity of input data after state transitions."
    },
    {
        "id": 977,
        "class": "State Scenario Criteria",
        "safety_criterion": "Avoid using the same input data for both state entry conditions and function execution conditions when these conditions require different input values. This may prevent state entry or proper function execution when input values change normally.",
        "document_name": "4.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system should ensure that during flight mode transitions, the range and conditions of input data (e.g., altitude, speed, attitude angle) meet the requirements of both the current and target modes to prevent failure in mode switching or subsequent function execution."
    },
    {
        "id": 978,
        "class": "State Scenario Criteria",
        "safety_criterion": "Avoid using the same input data for both state entry conditions and function judgment conditions when these conditions require different input values. This may prevent state entry or lead to abnormal function execution after entering the state.",
        "document_name": "2.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The system should ensure that during flight mode transitions, the range and logical conditions of input data are independent to prevent failure in mode switching or abnormal function execution after switching."
    },
    {
        "id": 979,
        "class": "State Scenario Criteria",
        "safety_criterion": "Avoid using the same input data for both state entry conditions and function loop judgment conditions when these conditions require different input values. This may prevent state entry or lead to abnormal function execution after entering the state.",
        "document_name": "1.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The system should ensure that during flight mode transitions, the ranges and conditions of input data meet the requirements of their respective modes to prevent failure in mode switching or abnormal function execution."
    },
    {
        "id": 980,
        "class": "State Scenario Criteria",
        "safety_criterion": "Avoid using the same input data for both state entry conditions and function judgment conditions when these conditions require different input values. This may prevent state entry or lead to abnormal function execution after entering the state due to abnormal input values.",
        "document_name": "2.json",
        "document_chunk_index": 288,
        "hopy_requirement": "The system should ensure that during flight mode transitions, the ranges and logical conditions of input data are independent to avoid failure in mode switching or abnormal function execution due to anomalies in a single input."
    },
    {
        "id": 981,
        "class": "State Scenario Criteria",
        "safety_criterion": "Prevent the state entry condition and the function execution condition under the state from sharing the same input data, where the requirements for the input data values differ. When the input data is at boundary/initial/default values, it may not be possible to satisfy both the state entry condition and the function execution condition simultaneously, which can result in failure to enter the state or prevent function execution after entering the state.",
        "document_name": "3.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The system shall ensure that during flight mode transitions, input data (e.g., altitude, speed, attitude angle) meets both the mode entry conditions and function execution conditions, avoiding mode transition failures or function malfunctions caused by boundary values, initial values, or default values."
    },
    {
        "id": 982,
        "class": "State Scenario Criteria",
        "safety_criterion": "Prevent the state entry condition and the function loop judgment condition under the state from sharing the same input data, where the requirements for the input data values differ. When the input data is at boundary/initial/default values, it may not be possible to satisfy both the state entry condition and the function loop judgment condition simultaneously, which can result in failure to enter the state or cause abnormal function execution after entering the state.",
        "document_name": "1.json",
        "document_chunk_index": 110,
        "hopy_requirement": "The system shall ensure that during flight mode transitions, all input data (e.g., altitude, speed, attitude angle) boundary values, initial values, and default values meet both the mode transition conditions and function execution conditions to prevent mode transition failures or function anomalies."
    },
    {
        "id": 983,
        "class": "Operating State Criteria",
        "safety_criterion": "Prevent the state entry condition from transitioning from satisfied to unsatisfied during state execution.",
        "document_name": "1.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system shall continuously monitor the aircraft's state parameters to ensure that the state entry conditions remain satisfied during state execution; otherwise, it shall automatically trigger a safety protection mechanism."
    },
    {
        "id": 984,
        "class": "Operating State Criteria",
        "safety_criterion": "Prevent the watchdog from resetting during state execution, resulting in incorrect recovery to the previous state after reset.",
        "document_name": "5.json",
        "document_chunk_index": 274,
        "hopy_requirement": "The system shall have a state recovery mechanism after a watchdog reset, ensuring that the system returns to a safe state after the reset, preventing the continuation of an erroneous state."
    },
    {
        "id": 985,
        "class": "Operating State Criteria",
        "safety_criterion": "Prevent software power loss and restart during state execution without restoring the state prior to power loss after restart.",
        "document_name": "2.json",
        "document_chunk_index": 167,
        "hopy_requirement": "The system shall have the capability to automatically restore the flight state and mission parameters prior to power loss after power recovery."
    },
    {
        "id": 986,
        "class": "Operating State Criteria",
        "safety_criterion": "Prevent software power loss and restart during state execution, resulting in incorrect recovery to the state prior to power loss after restart.",
        "document_name": "4.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The system shall have the ability to automatically return to the state before power loss after a power failure, ensuring continuity and safety of flight missions."
    },
    {
        "id": 987,
        "class": "State Scenario Criteria",
        "safety_criterion": "Prevent the state entry condition and exit condition from being satisfied simultaneously during state execution.",
        "document_name": "4.json",
        "document_chunk_index": 152,
        "hopy_requirement": "The system shall ensure that during flight mode transitions, the conditions for entering a new mode and exiting the current mode cannot be satisfied simultaneously to prevent mode transition conflicts."
    },
    {
        "id": 988,
        "class": "State Scenario Criteria",
        "safety_criterion": "Prevent the state entry condition and transfer condition from being satisfied simultaneously.",
        "document_name": "1.json",
        "document_chunk_index": 244,
        "hopy_requirement": "The system shall ensure that during flight mode transitions, the exit condition of the current mode and the entry condition of the new mode cannot be satisfied simultaneously."
    },
    {
        "id": 989,
        "class": "Operating State Criteria",
        "safety_criterion": "Enhance handling when the state exit condition changes from not satisfied to satisfied during state execution.",
        "document_name": "4.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The flight control system shall be able to monitor and process changes in flight state exit conditions in real time, ensuring that corresponding state exit actions are executed immediately when the conditions are met."
    },
    {
        "id": 990,
        "class": "Processing Logic Criteria",
        "safety_criterion": "File creation failure shall be identified and handled appropriately.",
        "document_name": "4.json",
        "document_chunk_index": 101,
        "hopy_requirement": "The system shall be capable of detecting and handling failures in creating flight mission data files, ensuring the integrity and availability of mission data."
    },
    {
        "id": 991,
        "class": "Data Criteria",
        "safety_criterion": "File deletion failure should be identified and handled",
        "document_name": "3.json",
        "document_chunk_index": 298,
        "hopy_requirement": "The system should be able to detect and handle failures in deleting flight mission data files, ensuring the integrity and consistency of mission data."
    },
    {
        "id": 992,
        "class": "Data Criteria",
        "safety_criterion": "Incorrect file permission settings",
        "document_name": "5.json",
        "document_chunk_index": 258,
        "hopy_requirement": "The system should ensure that access permissions for flight mission data files are limited to authorized flight control personnel."
    },
    {
        "id": 993,
        "class": "Data Criteria",
        "safety_criterion": "File open failure should be identified and handled",
        "document_name": "2.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The system should be able to detect and handle failures in opening flight mission data files, ensuring the integrity and availability of mission parameters."
    },
    {
        "id": 994,
        "class": "Data Criteria",
        "safety_criterion": "File read failure should be identified and handled",
        "document_name": "3.json",
        "document_chunk_index": 254,
        "hopy_requirement": "The system should be able to detect and handle failures in reading flight mission configuration files, ensuring mission safety can continue or be terminated safely."
    },
    {
        "id": 995,
        "class": "Data Criteria",
        "safety_criterion": "File write failure should be identified and handled",
        "document_name": "4.json",
        "document_chunk_index": 214,
        "hopy_requirement": "The system should be able to detect and handle failures in writing flight mission data files, ensuring data integrity."
    },
    {
        "id": 996,
        "class": "Data Criteria",
        "safety_criterion": "File close failure should be identified and handled",
        "document_name": "3.json",
        "document_chunk_index": 244,
        "hopy_requirement": "Flight mission data files should undergo status checks during closure to ensure data integrity and consistency."
    },
    {
        "id": 997,
        "class": "Communication Criteria",
        "safety_criterion": "Message queue creation faults should be detected and handled",
        "document_name": "2.json",
        "document_chunk_index": 106,
        "hopy_requirement": "The system should be able to detect and handle faults in creating message queues for flight control commands, ensuring reliable command transmission."
    },
    {
        "id": 998,
        "class": "Communication Criteria",
        "safety_criterion": "Message queue deletion faults should be detected and handled",
        "document_name": "3.json",
        "document_chunk_index": 195,
        "hopy_requirement": "The system should be able to detect and handle faults within message queues for flight control commands, ensuring reliable command transmission and execution."
    },
    {
        "id": 999,
        "class": "Communication Criteria",
        "safety_criterion": "Message queue sending faults should be detected and handled",
        "document_name": "3.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The system should have the capability to detect and handle sending faults in message queues for flight control commands, ensuring reliable command transmission."
    },
    {
        "id": 1000,
        "class": "Communication Criteria",
        "safety_criterion": "Message queue receiving faults should be detected and handled",
        "document_name": "4.json",
        "document_chunk_index": 279,
        "hopy_requirement": "The system should be able to detect and handle receiving faults in message queues for flight control commands, ensuring reliable command transmission and execution."
    },
    {
        "id": 1001,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Message queue overflow faults should be detected and handled properly.",
        "document_name": "1.json",
        "document_chunk_index": 116,
        "hopy_requirement": "The system should have the capability to detect and handle message queue overflow in flight control commands, ensuring reliable transmission and execution of commands."
    },
    {
        "id": 1002,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Ring buffer creation faults should be detected and handled properly.",
        "document_name": "5.json",
        "document_chunk_index": 303,
        "hopy_requirement": "The system should have the capability to detect and handle ring buffer creation faults, ensuring the integrity and reliability of flight data recording."
    },
    {
        "id": 1003,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Ring buffer read-empty faults should be detected and handled properly.",
        "document_name": "5.json",
        "document_chunk_index": 158,
        "hopy_requirement": "The flight control system should have the ability to detect and handle ring buffer read-empty faults, ensuring continuity and reliability of data transmission."
    },
    {
        "id": 1004,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Ring buffer full-write faults should be detected and handled properly.",
        "document_name": "4.json",
        "document_chunk_index": 91,
        "hopy_requirement": "The flight control system should have the capability to detect and handle ring buffer full-write faults, ensuring no data loss and stable system operation."
    },
    {
        "id": 1005,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Combined function settings must align with the requirements document.",
        "document_name": "3.json",
        "document_chunk_index": 302,
        "hopy_requirement": "The system must ensure that the combined function settings of the navigation and control modules are fully consistent with the flight mission requirements document."
    },
    {
        "id": 1006,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Combined function settings must align with actual user requirements.",
        "document_name": "2.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The combined function settings of the flight control system should be consistent with the actual operational needs of the pilot."
    },
    {
        "id": 1007,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Mutual exclusions between different functions should be correctly handled.",
        "document_name": "2.json",
        "document_chunk_index": 139,
        "hopy_requirement": "The system should ensure that when there is a mutual exclusion between navigation and control functions, the navigation function takes priority to ensure flight safety."
    },
    {
        "id": 1008,
        "class": "Task Timing Criteria",
        "safety_criterion": "Task creation faults should be detected and handled properly.",
        "document_name": "2.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The system should be able to detect and handle faults during task creation, ensuring the reliability and safety of tasks."
    },
    {
        "id": 1009,
        "class": "Task Timing Criteria",
        "safety_criterion": "Task activation faults should be detected and handled properly.",
        "document_name": "1.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The system should have the capability to monitor and handle task activation faults in real-time, ensuring timely detection and appropriate exception handling measures when faults occur during task activation."
    },
    {
        "id": 1010,
        "class": "Task Timing Criteria",
        "safety_criterion": "Task deletion faults should be detected and handled properly.",
        "document_name": "2.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The system should have the capability to detect and handle task deletion faults, ensuring the reliability and safety of task deletion operations."
    },
    {
        "id": 1011,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for forced task deletion failures.",
        "document_name": "2.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The system should have the capability to detect and handle forced task deletion failures, ensuring the reliability and safety of tasks."
    },
    {
        "id": 1012,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for task restart failures.",
        "document_name": "4.json",
        "document_chunk_index": 81,
        "hopy_requirement": "The system should have the capability to detect and handle task restart failures, ensuring that tasks can resume normal operation after restarting."
    },
    {
        "id": 1013,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for task priority setting failures.",
        "document_name": "1.json",
        "document_chunk_index": 260,
        "hopy_requirement": "The system should be able to detect and handle task priority setting failures, ensuring the priority execution of critical tasks."
    },
    {
        "id": 1014,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for task priority acquisition failures.",
        "document_name": "5.json",
        "document_chunk_index": 241,
        "hopy_requirement": "The system should be able to detect and handle task priority acquisition failures in real time, ensuring the normal execution of critical tasks."
    },
    {
        "id": 1015,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for task lock failures.",
        "document_name": "4.json",
        "document_chunk_index": 179,
        "hopy_requirement": "The system should have the capability to detect and handle task lock failures in real time, ensuring task continuity and safety."
    },
    {
        "id": 1016,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for task unlock failures.",
        "document_name": "4.json",
        "document_chunk_index": 100,
        "hopy_requirement": "The system should have the capability to detect and handle task unlock failures, ensuring timely response and action when exceptions occur during the unlocking process."
    },
    {
        "id": 1017,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for time slice reset failures.",
        "document_name": "5.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The system should have the capability to detect and handle time slice reset failures, ensuring the correctness and real-time performance of task scheduling."
    },
    {
        "id": 1018,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for semaphore acquisition failures.",
        "document_name": "2.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The system should have the capability to detect and handle flight control semaphore acquisition failures, ensuring timely switching to a backup signal source or entering safe mode when semaphore acquisition fails."
    },
    {
        "id": 1019,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for semaphore deletion failures.",
        "document_name": "4.json",
        "document_chunk_index": 124,
        "hopy_requirement": "The system should be able to detect and handle flight control semaphore deletion failures, ensuring the continuity and safety of flight tasks."
    },
    {
        "id": 1020,
        "class": "Control Calculation Criteria",
        "safety_criterion": "There should be detection and exception handling for semaphore release failures.",
        "document_name": "5.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The system should have the capability to detect and handle semaphore release failures, ensuring no resource deadlocks or race conditions occur in multi-task scheduling."
    },
    {
        "id": 1021,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for watchdog creation failures.",
        "document_name": "5.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The system should have the capability to monitor and handle watchdog faults in flight control software in real-time, ensuring timely recovery or switching to a backup system upon fault detection."
    },
    {
        "id": 1022,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for watchdog deletion failures.",
        "document_name": "4.json",
        "document_chunk_index": 180,
        "hopy_requirement": "The system should have the capability to monitor and detect the watchdog function of the flight control software in real-time, ensuring timely exception handling and system recovery upon fault detection."
    },
    {
        "id": 1023,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for watchdog startup failures.",
        "document_name": "3.json",
        "document_chunk_index": 246,
        "hopy_requirement": "The system should have the capability to monitor and handle watchdog startup faults in flight control computers in real-time, ensuring timely alerts and switching to a backup system upon fault occurrence."
    },
    {
        "id": 1024,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for watchdog timer cancellation failures.",
        "document_name": "2.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system should have the capability to detect and handle watchdog timing faults in real-time, ensuring stable operation of the flight control system."
    },
    {
        "id": 1025,
        "class": "Data Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for device driver data reading failures.",
        "document_name": "2.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The system should have the capability to detect and handle data reading faults in flight control device drivers, ensuring timely alerts and switching to a backup system upon fault occurrence."
    },
    {
        "id": 1026,
        "class": "Data Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for device driver data writing failures.",
        "document_name": "3.json",
        "document_chunk_index": 282,
        "hopy_requirement": "The flight control system should have the capability to detect and handle data writing faults in device drivers, ensuring timely implementation of safety measures upon fault occurrence."
    },
    {
        "id": 1027,
        "class": "Communication Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for general control faults in device drivers.",
        "document_name": "2.json",
        "document_chunk_index": 245,
        "hopy_requirement": "The flight control system should have the capability to detect and handle driver faults, ensuring timely switching to a backup driver and logging of fault information upon fault occurrence."
    },
    {
        "id": 1028,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for device driver creation failures.",
        "document_name": "1.json",
        "document_chunk_index": 246,
        "hopy_requirement": "The flight control system should have the capability to detect and handle sensor faults in real-time, ensuring timely switching to a backup sensor or implementing safety measures upon sensor failure."
    },
    {
        "id": 1029,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for device driver opening failures.",
        "document_name": "4.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The flight control system should have the capability to detect and handle driver faults, ensuring safe switching to a backup system upon driver failure."
    },
    {
        "id": 1030,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Fault detection and exception handling should be in place for device driver closing failures.",
        "document_name": "4.json",
        "document_chunk_index": 233,
        "hopy_requirement": "The system should have the capability to detect and handle device driver closure faults in the flight control system, ensuring timely implementation of safety measures upon fault occurrence."
    },
    {
        "id": 1031,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault in selecting the device control channel should be detected and handled.",
        "document_name": "4.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The flight control system should have the capability to detect and handle faults in selecting the control channel, ensuring automatic switching to a backup channel and issuing an alarm when a fault occurs."
    },
    {
        "id": 1032,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Fault in selecting the device control mode should be detected and handled.",
        "document_name": "1.json",
        "document_chunk_index": 308,
        "hopy_requirement": "The flight control system should have the capability to detect and handle faults in selecting the control mode, ensuring system stability and safety during mode transitions."
    },
    {
        "id": 1033,
        "class": "Data Criteria",
        "safety_criterion": "Fault in writing device configuration information should be detected and handled.",
        "document_name": "2.json",
        "document_chunk_index": 210,
        "hopy_requirement": "The flight control system should have the capability to detect and handle faults in writing configuration information, ensuring the integrity and consistency of configuration data."
    },
    {
        "id": 1034,
        "class": "Data Criteria",
        "safety_criterion": "Fault in reading device configuration information should be detected and handled.",
        "document_name": "4.json",
        "document_chunk_index": 246,
        "hopy_requirement": "The flight control system should have the capability to detect and handle faults in reading configuration information, ensuring safe switching to a backup configuration or entering a safe mode if configuration data cannot be read."
    },
    {
        "id": 1035,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "CPU faults should be detected and handled.",
        "document_name": "4.json",
        "document_chunk_index": 127,
        "hopy_requirement": "The system should have the ability to monitor CPU status in real time and automatically switch to a backup CPU upon detecting a fault, ensuring continuity and safety of flight operations."
    },
    {
        "id": 1036,
        "class": "Data Criteria",
        "safety_criterion": "Empty read fault in dual-port RAM should be detected and handled.",
        "document_name": "1.json",
        "document_chunk_index": 230,
        "hopy_requirement": "The flight control computer should have mechanisms for detecting and handling empty read faults in dual-port RAM, ensuring data integrity and system stability."
    },
    {
        "id": 1037,
        "class": "Data Criteria",
        "safety_criterion": "Full write fault in dual-port RAM should be detected and handled.",
        "document_name": "5.json",
        "document_chunk_index": 178,
        "hopy_requirement": "The system should have a detection mechanism for full write faults in dual-port RAM and automatically switch to a backup storage unit upon detecting such a fault, while triggering an alarm to notify the ground control center."
    },
    {
        "id": 1038,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Dual-port RAM fault detection should be implemented with detection and exception handling.",
        "document_name": "5.json",
        "document_chunk_index": 238,
        "hopy_requirement": "The flight control system should have mechanisms for detecting and handling dual-port RAM faults, ensuring timely switching to a backup channel and logging fault information when a fault is detected."
    },
    {
        "id": 1039,
        "class": "Data Criteria",
        "safety_criterion": "EEPROM verification faults should be detected and handled.",
        "document_name": "2.json",
        "document_chunk_index": 282,
        "hopy_requirement": "The system should have real-time capabilities to detect and handle EEPROM faults, ensuring the integrity and reliability of flight control parameters."
    },
    {
        "id": 1040,
        "class": "Data Criteria",
        "safety_criterion": "Initialization faults in the analog-to-digital converter should be detected and handled.",
        "document_name": "2.json",
        "document_chunk_index": 230,
        "hopy_requirement": "The system should have the capability to detect and handle initialization faults in the analog-to-digital converter, ensuring the accuracy and reliability of flight data."
    },
    {
        "id": 1041,
        "class": "Redundancy Criteria",
        "safety_criterion": "FPGA status faults should be detected and handled properly.",
        "document_name": "3.json",
        "document_chunk_index": 193,
        "hopy_requirement": "The system should have the capability to monitor FPGA status in real-time and automatically switch to a backup FPGA upon detecting a fault, ensuring continuity and reliability of the flight control system."
    },
    {
        "id": 1042,
        "class": "Data Criteria",
        "safety_criterion": "Read errors should be detected and handled properly.",
        "document_name": "4.json",
        "document_chunk_index": 168,
        "hopy_requirement": "The system should be capable of detecting and processing sensor faults on the aircraft in real-time to ensure the accuracy and reliability of data."
    },
    {
        "id": 1043,
        "class": "Data Criteria",
        "safety_criterion": "Write errors should be detected and handled properly.",
        "document_name": "2.json",
        "document_chunk_index": 109,
        "hopy_requirement": "The system should have the ability to detect and handle faults in the flight control system in real-time, ensuring timely action is taken when faults occur to guarantee flight safety."
    },
    {
        "id": 1044,
        "class": "Redundancy Criteria",
        "safety_criterion": "Timer faults should be detected and handled properly.",
        "document_name": "2.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system should have a timer fault detection mechanism and automatically switch to a backup timer upon detecting a fault, ensuring continuity of mission-critical operations."
    },
    {
        "id": 1045,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Critical inputs should be clearly distinguished.",
        "document_name": "2.json",
        "document_chunk_index": 285,
        "hopy_requirement": "The system should be able to clearly differentiate between critical and non-critical flight control inputs, ensuring that critical inputs are processed with priority and executed accurately."
    },
    {
        "id": 1046,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Design should verify input ranges and validity.",
        "document_name": "5.json",
        "document_chunk_index": 237,
        "hopy_requirement": "The system should be capable of validating all flight control commands to ensure they fall within predefined valid ranges."
    },
    {
        "id": 1047,
        "class": "State Scenario Criteria",
        "safety_criterion": "Design should allow for action reversal and error recovery.",
        "document_name": "1.json",
        "document_chunk_index": 300,
        "hopy_requirement": "The system should support undoing the previous operation during flight missions and reverting to a prior flight state."
    },
    {
        "id": 1048,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When parameter settings change, associated settings or states should also change accordingly.",
        "document_name": "2.json",
        "document_chunk_index": 229,
        "hopy_requirement": "The system should be capable of automatically adjusting flight control parameters to adapt to different flight modes and environmental conditions."
    },
    {
        "id": 1049,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Mechanism to prevent erroneous operations.",
        "document_name": "4.json",
        "document_chunk_index": 159,
        "hopy_requirement": "The system should include mechanisms to prevent erroneous operations, ensuring that when incorrect flight control commands are entered, the system either corrects them automatically or prompts the operator for confirmation."
    },
    {
        "id": 1050,
        "class": "Operating State Criteria",
        "safety_criterion": "Reasonable and effective alarm mechanism.",
        "document_name": "5.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should have the capability to monitor flight parameters in real-time and issue timely alerts when anomalies are detected."
    },
    {
        "id": 1051,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prevent frequent button presses",
        "document_name": "2.json",
        "document_chunk_index": 149,
        "hopy_requirement": "The system shall have a function to prevent the emergency landing button from being triggered frequently, ensuring that it will not be misoperated in non-emergency situations."
    },
    {
        "id": 1052,
        "class": "Task Timing Criteria",
        "safety_criterion": "Premature button pressing should be detected and handled as an exception",
        "document_name": "1.json",
        "document_chunk_index": 293,
        "hopy_requirement": "The system shall have the ability to detect and handle premature pressing of the takeoff button, ensuring that the aircraft starts only in a safe condition."
    },
    {
        "id": 1053,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Incorrect button press duration should be detected and handled as an exception",
        "document_name": "5.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The system shall be able to detect and handle prolonged pressing of the emergency button, ensuring that it does not lead to misoperation or system failure."
    },
    {
        "id": 1054,
        "class": "Task Timing Criteria",
        "safety_criterion": "Delayed button pressing should be detected and handled as an exception",
        "document_name": "2.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The system shall have the capability to detect and handle delayed flight control commands, ensuring flight safety is maintained even when commands are delayed."
    },
    {
        "id": 1055,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Button sequence errors for multiple buttons should be detected and handled as exceptions",
        "document_name": "1.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The flight control system shall have the ability to detect and handle incorrect timing sequences for multiple buttons, ensuring the correctness and safety of operation commands."
    },
    {
        "id": 1056,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Emergency shutdown button press during execution should be detected and handled as an exception",
        "document_name": "5.json",
        "document_chunk_index": 82,
        "hopy_requirement": "The system shall have the ability to detect an emergency shutdown button press during flight, immediately execute a safe shutdown procedure, and record the exception log."
    },
    {
        "id": 1057,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Safety-critical operations activation. Activation of safety-critical operations shall require two or more personnel operating in an AND configuration, with comprehensive measures against accidental activation.",
        "document_name": "4.json",
        "document_chunk_index": 160,
        "hopy_requirement": "Safety-critical operations of the flight control system (e.g., emergency landing, engine restart) must be executed by two or more operators under dual confirmation mode, with anti-misactivation mechanisms."
    },
    {
        "id": 1058,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Safe state recovery. Human-machine interaction software shall allow operators to handle current tasks with a single action, enabling the system to exit potentially unsafe conditions and return to a safe state.",
        "document_name": "3.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The flight control system shall provide a one-button reset function, allowing operators to quickly restore the system from an abnormal state to a safe state."
    },
    {
        "id": 1059,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Error operation protection. The software shall be able to detect incorrect operator inputs or operations and prevent safety-critical functions from being executed due to such errors.",
        "document_name": "1.json",
        "document_chunk_index": 214,
        "hopy_requirement": "The flight control system shall be capable of detecting and blocking incorrect operator commands, preventing flight path deviation or engine anomalies caused by misoperations."
    },
    {
        "id": 1060,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Alarm design. Alarm design should distinguish routine alarms from safety-critical alarms and ensure that relevant operators cannot clear safety-critical alarms unless required follow-up actions or corrective measures have been performed.",
        "document_name": "2.json",
        "document_chunk_index": 303,
        "hopy_requirement": "The system shall be able to distinguish between routine alarms and safety-critical alarms and ensure that operators cannot clear safety-critical alarms without performing necessary follow-up actions or taking corrective measures."
    },
    {
        "id": 1061,
        "class": "Human-Machine Operation Criteria",
        "safety_criterion": "Appropriate and timely status feedback must be provided.",
        "document_name": "3.json",
        "document_chunk_index": 243,
        "hopy_requirement": "The system shall provide real-time status feedback of the aircraft's current state, including position, speed, attitude, and system health status."
    },
    {
        "id": 1062,
        "class": "Human-Machine Operation Criteria",
        "safety_criterion": "Changing the safety status of the system without the operator's knowledge should be avoided.",
        "document_name": "2.json",
        "document_chunk_index": 135,
        "hopy_requirement": "The system shall ensure that flight control modes or navigation parameters cannot be automatically changed without operator confirmation."
    },
    {
        "id": 1063,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Decision statements. Decision statements in safety-critical computing system functions should not rely on all-ones or all-zeros inputs, especially when this information comes from external sensors.",
        "document_name": "3.json",
        "document_chunk_index": 147,
        "hopy_requirement": "The flight control system shall ensure that decision statements in all safety-critical computations do not depend on all-ones or all-zeros sensor inputs."
    },
    {
        "id": 1064,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "External functions. For the activation of safety-critical functions, the required activation signals cannot all be received from a single input or output storage unit.",
        "document_name": "3.json",
        "document_chunk_index": 201,
        "hopy_requirement": "The flight control system shall ensure that activation signals for critical control commands (such as attitude adjustment, engine ignition) come from multiple independent input channels."
    },
    {
        "id": 1065,
        "class": "Communication Criteria",
        "safety_criterion": "CPU-to-CPU communication. CPU communication should successfully pass verification checks on both CPUs before transmitting safety-critical data. If multiple consecutive transmissions fail, an alarm should be sent to the operator, and transmission of safety-critical data should be terminated until diagnostic checks can be performed.",
        "document_name": "2.json",
        "document_chunk_index": 308,
        "hopy_requirement": "The flight control system shall ensure that communication between the primary and backup CPUs passes verification checks before transmitting critical flight data. If multiple consecutive transmissions fail, the system shall send an alert to the ground control station and suspend data transmission until diagnostic checks are completed."
    },
    {
        "id": 1066,
        "class": "Data Criteria",
        "safety_criterion": "Input reasonableness check: All analog and digital inputs and outputs shall undergo range and reasonableness checks, including time ranges and dependencies, before these values are used to perform safety-critical functions.",
        "document_name": "1.json",
        "document_chunk_index": 228,
        "hopy_requirement": "The flight control system shall perform real-time range and reasonableness checks on all sensor inputs (e.g., altitude, speed, attitude angle) to ensure the data is within safe limits."
    },
    {
        "id": 1067,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Interface control. Interfaces with safety-critical hardware shall be controlled at all times; that is, the interface should be monitored to ensure that erroneous or false data does not inadvertently affect the system. Interface failures should be detected, and the interface should remain safe during power-up, power fluctuations and interruptions, and system errors or hardware failures.",
        "document_name": "4.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The flight control system shall monitor interfaces with critical hardware (e.g., engines, navigation systems) in real-time to ensure data integrity and accuracy, and take immediate safety measures upon detecting any anomalies."
    },
    {
        "id": 1068,
        "class": "Redundancy Criteria",
        "safety_criterion": "Feedback loops. The design of system hardware feedback loops should ensure that software cannot cause loss-of-control conditions due to feedback sensor failure.",
        "document_name": "1.json",
        "document_chunk_index": 165,
        "hopy_requirement": "The flight control system shall have redundant feedback sensors to ensure that if the primary sensor fails, the backup sensor can immediately take over and maintain flight stability."
    },
    {
        "id": 1069,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Full-scale representation. In software design, full-scale and zero representations should be fully compatible with any digital-to-analog, analog-to-digital, digital-to-synchro, or synchro-to-digital converters.",
        "document_name": "3.json",
        "document_chunk_index": 274,
        "hopy_requirement": "The flight control system shall ensure that full-scale and zero-point settings of all sensors and actuators are fully compatible with digital-to-analog converters and analog-to-digital converters."
    },
    {
        "id": 1070,
        "class": "Data Criteria",
        "safety_criterion": "Safety-critical data shall be isolated from other data, and non-safety-critical components shall be prevented from accessing safety-critical data;",
        "document_name": "4.json",
        "document_chunk_index": 102,
        "hopy_requirement": "The flight control system shall isolate navigation data from non-critical mission data and ensure that non-critical modules cannot access navigation data."
    },
    {
        "id": 1071,
        "class": "Data Criteria",
        "safety_criterion": "Safety-critical data should be encrypted during data transmission to protect safety criteria;",
        "document_name": "5.json",
        "document_chunk_index": 82,
        "hopy_requirement": "The system shall be capable of encrypting flight control commands and sensitive flight data during transmission, ensuring secure data transfer between the ground station and the aircraft."
    },
    {
        "id": 1072,
        "class": "Data Criteria",
        "safety_criterion": "Databases and data files containing safety-critical data should be documented.",
        "document_name": "2.json",
        "document_chunk_index": 178,
        "hopy_requirement": "The system shall have a documentation management function for flight control parameters and critical mission data, ensuring data integrity and traceability."
    },
    {
        "id": 1073,
        "class": "Data Criteria",
        "safety_criterion": "Data area isolation. To prevent programs from misinterpreting data as instructions, measures should be taken to store data and instructions separately.",
        "document_name": "1.json",
        "document_chunk_index": 155,
        "hopy_requirement": "The flight control system shall ensure that instructions and data are stored in separate memory areas to prevent instructions from being misinterpreted as data."
    },
    {
        "id": 1074,
        "class": "Data Criteria",
        "safety_criterion": "The memory space used by algorithms should be completely deterministic. For example, dynamic heap allocation should not be used.",
        "document_name": "2.json",
        "document_chunk_index": 271,
        "hopy_requirement": "Flight control software shall use fixed-size buffers and arrays, avoiding dynamic memory allocation."
    },
    {
        "id": 1075,
        "class": "Data Criteria",
        "safety_criterion": "Safety-critical data used in interfaces should have unique identifiers.",
        "document_name": "4.json",
        "document_chunk_index": 103,
        "hopy_requirement": "The system shall assign unique identifiers to all safety-critical flight control data, ensuring data traceability and integrity."
    },
    {
        "id": 1076,
        "class": "Data Criteria",
        "safety_criterion": "Data transmission messages should have predefined format and content. Each transmission should include words or strings representing data types or message contents. At a minimum, parity checks and checksums should be used to verify data transmission accuracy, and no information from the message should be used before verifying the correctness of data transmission;",
        "document_name": "5.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The flight control system shall ensure that all telemetry and command data transmissions conform to predefined standards, and each transmission shall use parity checks and checksums to verify data integrity, ensuring correct and complete data transmission."
    },
    {
        "id": 1077,
        "class": "Processing Logic Criteria",
        "safety_criterion": "The software should be able to determine whether an operator's input operation is correct. When incorrect inputs or operations occur, the software should reject execution, alert the operator, and indicate the error type along with corrective actions;",
        "document_name": "2.json",
        "document_chunk_index": 150,
        "hopy_requirement": "Flight control software shall validate operator command inputs in real-time; for invalid commands, the system shall reject execution, immediately notify the operator, and provide the error type and suggested corrective actions."
    },
    {
        "id": 1078,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When performing mathematical operations, careful consideration should be given to handling floating-point numbers near zero. In cases where underflow may occur, a sufficiently small floating-point number should be used instead of zero to avoid underflow. In comparisons involving floating-point numbers, direct equality comparisons should not be made.",
        "document_name": "5.json",
        "document_chunk_index": 104,
        "hopy_requirement": "The flight control system shall ensure that when performing floating-point calculations, a small non-zero floating-point value is used instead of zero to prevent underflow, and direct equality comparisons on floating-point values are avoided, ensuring accurate and stable computation."
    },
    {
        "id": 1079,
        "class": "Data Criteria",
        "safety_criterion": "A certain code distance should be maintained between safety-critical information and other information.",
        "document_name": "1.json",
        "document_chunk_index": 302,
        "hopy_requirement": "The system shall ensure a minimum code distance between flight control commands and non-critical data to prevent data interference and erroneous operations."
    },
    {
        "id": 1080,
        "class": "Redundancy Criteria",
        "safety_criterion": "Safety-critical information and data should be stored across multiple or different chips and subjected to voting processing.",
        "document_name": "3.json",
        "document_chunk_index": 194,
        "hopy_requirement": "The flight control system shall store critical flight data (e.g., attitude, speed, altitude) across multiple independent memory chips and ensure data accuracy and reliability through majority voting mechanisms."
    },
    {
        "id": 1081,
        "class": "Data Criteria",
        "safety_criterion": "Input data elements should be passed to another module interface in the form of explicit parameters. The calling module does not need to know how the data is used.",
        "document_name": "2.json",
        "document_chunk_index": 278,
        "hopy_requirement": "The flight control module should be able to receive and process real-time data from sensors without knowledge of the internal processing procedures."
    },
    {
        "id": 1082,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Security key codes should be set for safety-critical modules.",
        "document_name": "3.json",
        "document_chunk_index": 116,
        "hopy_requirement": "Key modules in the flight control system should have access codes to ensure that only authorized personnel can perform operations."
    },
    {
        "id": 1083,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Execution of safety-critical functions should occur only after receiving two or more identical pieces of information.",
        "document_name": "4.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The flight control system should execute critical flight commands only after receiving identical flight parameters from two or more redundant sensors."
    },
    {
        "id": 1084,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Safety-critical information should not be generated solely by a single CPU command.",
        "document_name": "5.json",
        "document_chunk_index": 227,
        "hopy_requirement": "The flight control system should use a multi-processor redundancy design, ensuring that critical control commands are executed only after being independently verified by multiple processors."
    },
    {
        "id": 1085,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Registers and I/O ports should not be used to store safety-critical information.",
        "document_name": "2.json",
        "document_chunk_index": 197,
        "hopy_requirement": "The flight control system should use non-volatile memory to store critical flight parameters and fault logs, ensuring data is not lost during power failures or system restarts."
    },
    {
        "id": 1086,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Judgment criteria for safety-critical data must not rely on all-ones or all-zeros inputs (especially information coming from external sensors).",
        "document_name": "5.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system should ensure the validity of navigation sensor data, avoiding navigation calculation errors caused by abnormal all-ones or all-zeros inputs."
    },
    {
        "id": 1087,
        "class": "Task Timing Criteria",
        "safety_criterion": "Program design related to hardware state changes should consider the number or time of state detections; if there is no actual basis, the signal wait count can be used as a reference, with timeout handling performed when a certain count is exceeded.",
        "document_name": "1.json",
        "document_chunk_index": 200,
        "hopy_requirement": "In the flight control system, hardware state change detection should have a maximum wait count, triggering a timeout handling mechanism when this count is exceeded."
    },
    {
        "id": 1088,
        "class": "Task Timing Criteria",
        "safety_criterion": "Monitoring timers or similar measures should be provided to ensure that microprocessors or computers can handle program timeouts or infinite loop faults.",
        "document_name": "2.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The flight control system should have monitoring timers to ensure that automatic switching to a backup unit or activation of safety measures occurs upon detecting program timeouts or infinite loops."
    },
    {
        "id": 1089,
        "class": "Timing Criteria",
        "safety_criterion": "Monitoring timers should ideally use independent clock sources implemented through separate hardware; if programmable timers are used, the clock frequency and timing parameters should be designed comprehensively to ensure that under external interference conditions, the minimum timer value exceeds the time required for system reinitialization, and the maximum value is less than the longest allowable system fault handling time.",
        "document_name": "4.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The flight control system should have independent hardware monitoring timers to ensure that under external interference conditions, the minimum timer value exceeds the time required for system reinitialization, and the maximum value is less than the longest allowable system fault handling time."
    },
    {
        "id": 1090,
        "class": "Task Timing Criteria",
        "safety_criterion": "Timer reset design must exist, and software should not enter an internal loop or become part of a looping instruction sequence that resets the timer. Where applicable, the system must return to a known safe state and alert the operator.",
        "document_name": "5.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The flight control system should have a timer reset mechanism to ensure that when the software enters an infinite loop, the system can automatically reset and return to a safe state, sending an alarm signal to the ground control station."
    },
    {
        "id": 1091,
        "class": "Task Timing Criteria",
        "safety_criterion": "The design of timers must ensure that the failure of the main CPU clock cannot impair their functionality;",
        "document_name": "5.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The flight control system should have independent redundant timers to ensure accurate execution of task scheduling and time synchronization even in the event of a main CPU clock failure."
    },
    {
        "id": 1092,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Safety-critical components must be isolated from non-safety-critical components;",
        "document_name": "5.json",
        "document_chunk_index": 180,
        "hopy_requirement": "Safety-critical components in the flight control system (e.g., control computers, sensors) must be physically isolated and independently powered to prevent failures in non-safety-critical components (e.g., entertainment systems, communication devices) from affecting their normal operation."
    },
    {
        "id": 1093,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "The location and function of safety-critical components within the design hierarchy must be documented;",
        "document_name": "2.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system should thoroughly document the location and function of safety-critical components (e.g., navigation module, attitude control module) within the design hierarchy of the flight control system."
    },
    {
        "id": 1094,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "The number of safety-critical components should be minimized. The interfaces between these components should also be designed for minimal interaction (low coupling);",
        "document_name": "2.json",
        "document_chunk_index": 117,
        "hopy_requirement": "The flight control system should minimize the number of critical sensors and actuators and ensure that the interfaces between these critical components are designed for low coupling."
    },
    {
        "id": 1095,
        "class": "Functional Hierarchy Criteria",
        "safety_criterion": "Documentation is required to show how each safety-critical component traces back to the initial safety requirements and how those requirements are implemented;",
        "document_name": "3.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The system should provide detailed documentation tracing each safety-critical component (e.g., flight control unit, navigation system) back to its initial safety requirements and describing how those requirements were implemented."
    },
    {
        "id": 1096,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Except for interrupt cases, software modules must use single-entry and single-exit control structures;",
        "document_name": "2.json",
        "document_chunk_index": 279,
        "hopy_requirement": "Each module of the flight control software should follow single-entry and single-exit control structures to ensure orderly execution under non-interrupt conditions."
    },
    {
        "id": 1097,
        "class": "Redundancy Criteria",
        "safety_criterion": "Fault detection and isolation procedures must be developed for safety-critical subsystems of computing systems;",
        "document_name": "5.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The flight control system must have fault detection and isolation capabilities to identify and isolate faults when failures occur in critical subsystems, ensuring flight safety."
    },
    {
        "id": 1098,
        "class": "Communication Criteria",
        "safety_criterion": "Modules should communicate via standard interfaces rather than by directly accessing internal data of other modules;",
        "document_name": "3.json",
        "document_chunk_index": 136,
        "hopy_requirement": "Flight control software modules should communicate through standard interfaces; direct access to internal data of other modules is prohibited."
    },
    {
        "id": 1099,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Factors that may change or require frequent modifications should be confined to as few modules as possible;",
        "document_name": "5.json",
        "document_chunk_index": 147,
        "hopy_requirement": "Flight control software should centralize all functions related to flight parameter adjustments within a single module to facilitate maintenance and updates."
    },
    {
        "id": 1100,
        "class": "Data Criteria",
        "safety_criterion": "All flags must be strictly defined, and flag usage instructions must be created: For safety-critical flags, they must be unique and used for a single purpose within the software units where they are used;",
        "document_name": "4.json",
        "document_chunk_index": 141,
        "hopy_requirement": "The system should ensure that all safety-critical flags (e.g., flight mode, fault status) are uniquely defined in the software and used for only one specific purpose."
    },
    {
        "id": 1101,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Unused interrupts should be masked, and an entry with return should be set for unused interrupts.",
        "document_name": "1.json",
        "document_chunk_index": 289,
        "hopy_requirement": "The flight control system should be able to mask and handle irrelevant interrupt signals to ensure the normal execution of critical tasks."
    },
    {
        "id": 1102,
        "class": "Timing Criteria",
        "safety_criterion": "Measures to prevent glitches (either hardware or software methods) should be ensured for edge-triggered interrupts, and the pulse width should be ensured for level-triggered interrupts.",
        "document_name": "3.json",
        "document_chunk_index": 249,
        "hopy_requirement": "The system should have measures to prevent glitches, ensuring reliable triggering of interrupt signals, and performing width detection on level-triggered signals to guarantee accurate execution of flight control commands."
    },
    {
        "id": 1103,
        "class": "Redundancy Criteria",
        "safety_criterion": "Reasonable measures must be in place for the impact of potential false interrupts and frequent interrupts.",
        "document_name": "4.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system should have fault detection and recovery mechanisms to prevent the impact of false interrupts and frequent interrupts on flight missions."
    },
    {
        "id": 1104,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Unused interrupt sources must be masked. Unused interrupt sources must be masked through control words, etc., and their interrupt service subroutines should be written as empty-handling routines containing only a return statement.",
        "document_name": "5.json",
        "document_chunk_index": 239,
        "hopy_requirement": "The flight control system should disable all unused interrupt sources and set the handlers for these interrupt sources as null processing subroutines to prevent accidental triggering."
    },
    {
        "id": 1105,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Non-interrupt return statements must not be used to exit from interrupt service subroutines. Except for special requirements, jump instructions or subroutine return statements should not be used directly to exit from interrupt service subroutines; instead, normal interrupt return instructions should be used.",
        "document_name": "2.json",
        "document_chunk_index": 111,
        "hopy_requirement": "Interrupt service subroutines of the flight control system should ensure that they only return via normal interrupt return instructions to prevent unexpected jumps and system instability."
    },
    {
        "id": 1106,
        "class": "Timing Criteria",
        "safety_criterion": "Interrupts should be disabled before setting system function registers to prevent interrupts from affecting register settings. Interrupts should be disabled before clearing the interrupt enable register and setting the interrupt mask register to prevent other interrupts from interfering with the settings of these two registers.",
        "document_name": "4.json",
        "document_chunk_index": 278,
        "hopy_requirement": "The interrupt management module of the flight control system should disable interrupts before setting function registers to ensure integrity and consistency of register settings."
    },
    {
        "id": 1107,
        "class": "Task Timing Criteria",
        "safety_criterion": "The timing of interrupt handling should be considered in software design. When there are multiple interrupt handlers in the software, attention should be paid to the timing relationship between each interrupt handler, especially the timing relationship between nested interrupts.",
        "document_name": "4.json",
        "document_chunk_index": 143,
        "hopy_requirement": "Flight control software should ensure correct timing relationships when multiple interrupts (e.g., attitude control, navigation updates, and fault detection) occur simultaneously, avoiding system instability caused by nested interrupts."
    },
    {
        "id": 1108,
        "class": "Redundancy Criteria",
        "safety_criterion": "Saving and restoring the interrupt context is required. Fully consider the characteristic that interrupts can occur at any time, properly save the context that needs protection, and correctly restore the context when returning from the interrupt service subroutine.",
        "document_name": "5.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The flight control system should have the capability to save the current flight status and task parameters upon an interrupt occurrence and correctly restore these parameters after the interrupt handling is completed."
    },
    {
        "id": 1109,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Verify whether interrupt priorities are considered in program design. Since interrupts in the software have priorities and there is also a priority sequence between the interrupt programs and the main program, assignment operations on the same variable should be avoided among these priority-ordered programs. If unavoidable, critical section protection should be applied.",
        "document_name": "2.json",
        "document_chunk_index": 249,
        "hopy_requirement": "The flight control system should ensure mutual exclusion when interrupt handling programs and the main program access critical flight parameters to prevent data inconsistency and race conditions."
    },
    {
        "id": 1110,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "All necessary resources should be initialized during interrupt initialization, such as trigger methods and variables to be used.",
        "document_name": "1.json",
        "document_chunk_index": 160,
        "hopy_requirement": "During aircraft startup, the system should initialize all necessary sensors and communication links to ensure their normal operation."
    },
    {
        "id": 1111,
        "class": "Task Timing Criteria",
        "safety_criterion": "The use of interrupts must strictly follow the sequence: 'block -> disable interrupt -> initialize -> enable interrupt ->'.",
        "document_name": "3.json",
        "document_chunk_index": 144,
        "hopy_requirement": "In handling interrupts, the flight control system must follow the sequence: 'block interrupt -> disable interrupt -> initialize interrupt handling -> re-enable interrupt' to ensure system stability and safety."
    },
    {
        "id": 1112,
        "class": "Task Timing Criteria",
        "safety_criterion": "Verify whether the software has measures to handle potential multiple responses to the same interrupt (e.g., in level-triggered mode or when the pulse width is wide) based on the specific CPU interrupt mechanism.",
        "document_name": "5.json",
        "document_chunk_index": 199,
        "hopy_requirement": "Flight control software should be capable of handling multiple CPU interrupts, ensuring that level-triggered mode does not lead to flight control failure due to slow interrupt response."
    },
    {
        "id": 1113,
        "class": "Task Timing Criteria",
        "safety_criterion": "Interrupt nesting is prohibited.",
        "document_name": "1.json",
        "document_chunk_index": 82,
        "hopy_requirement": "Flight control software must prohibit interrupt nesting to ensure stable operation under high load conditions."
    },
    {
        "id": 1114,
        "class": "Operating State Criteria",
        "safety_criterion": "The system and software must start up and synchronize in a safe state (where 'safe state' refers to a state relative to a fault condition).",
        "document_name": "2.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The flight control system must perform a self-check during startup to ensure all critical sensors and actuators are in normal operating condition."
    },
    {
        "id": 1115,
        "class": "Operating State Criteria",
        "safety_criterion": "The internal software process model must be updated to reflect the actual process state after initial startup and temporary shutdown.",
        "document_name": "4.json",
        "document_chunk_index": 143,
        "hopy_requirement": "After initial startup and temporary shutdown, the system should automatically update and synchronize the internal state model of the flight control software to ensure consistency with the current flight status."
    },
    {
        "id": 1116,
        "class": "Communication Criteria",
        "safety_criterion": "There must be corresponding software behavior to handle situations where no input is received.",
        "document_name": "1.json",
        "document_chunk_index": 155,
        "hopy_requirement": "When the flight control system receives invalid or missing sensor data, it should automatically switch to a predefined safe mode and record the fault information."
    },
    {
        "id": 1117,
        "class": "Timing Criteria",
        "safety_criterion": "A delay factor must be included before the timeout control measures are triggered if the required input is not received as the waiting time interval elapses or just before the time interval ends (the delay time value depends on the system's input sampling frequency, reaction time, and output generation time; the delay time cannot be zero).",
        "document_name": "5.json",
        "document_chunk_index": 115,
        "hopy_requirement": "The system should have a timeout detection mechanism to ensure that if critical flight data is not received within the specified time, a delay measure can be automatically triggered to prevent erroneous control commands from being executed."
    },
    {
        "id": 1118,
        "class": "Timing Criteria",
        "safety_criterion": "Situations where input signals do not arrive within a specified time interval or by a specific time must be handled, such as through fault handling or fault recovery mechanisms.",
        "document_name": "3.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system should automatically trigger fault handling and recovery mechanisms when critical sensor data is not received within the specified time interval."
    },
    {
        "id": 1119,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Interrupts are prohibited during synchronization; interrupts are enabled after synchronization is completed.",
        "document_name": "5.json",
        "document_chunk_index": 295,
        "hopy_requirement": "During data synchronization in the flight control system, processing of interrupt signals is prohibited to ensure the integrity and consistency of data synchronization."
    },
    {
        "id": 1120,
        "class": "State Scenario Criteria",
        "safety_criterion": "After synchronization recovery, any path leading to a hazardous condition must be redirected to a safe path.",
        "document_name": "3.json",
        "document_chunk_index": 238,
        "hopy_requirement": "After synchronization recovery, the system should ensure that any flight path potentially leading to a hazardous condition (e.g., abnormal attitude, speed, or altitude) is automatically adjusted to a safe path."
    },
    {
        "id": 1121,
        "class": "Data Criteria",
        "safety_criterion": "The amount of stored data should not exceed the available capacity.",
        "document_name": "1.json",
        "document_chunk_index": 302,
        "hopy_requirement": "The flight control system shall ensure that the storage capacity of the flight data recorder never exceeds its maximum capacity to prevent data loss or overwrite."
    },
    {
        "id": 1122,
        "class": "Data Criteria",
        "safety_criterion": "Each transmitted data variable value must have a defined behavior and an acceptable range of variation. All values, both in-boundary and out-of-boundary, must be handled. There must be corresponding software behavior to handle cases where no input is received within a given time, to avoid the impact of input faults on the system state.",
        "document_name": "4.json",
        "document_chunk_index": 101,
        "hopy_requirement": "The system shall define and process all flight control data variable values and their ranges of variation, including in-boundary and out-of-boundary values, and shall take appropriate safety measures if no input is received within the specified time."
    },
    {
        "id": 1123,
        "class": "Data Criteria",
        "safety_criterion": "When the data input rate exceeds the input capacity, exception handling must be considered, including signal saturation (data overflow), duplicate commands, and overflow protection.",
        "document_name": "2.json",
        "document_chunk_index": 281,
        "hopy_requirement": "The flight control system shall have the capability to handle data input overload, including signal saturation, duplicate commands, and overflow protection, to ensure stable system operation."
    },
    {
        "id": 1124,
        "class": "Data Criteria",
        "safety_criterion": "Memory usage must meet availability requirements (dynamic memory allocation issues).",
        "document_name": "2.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The flight control system shall ensure that dynamic memory allocation during mission execution does not lead to system crashes or performance degradation."
    },
    {
        "id": 1125,
        "class": "Communication Criteria",
        "safety_criterion": "I/O channel usage (load) must meet capacity and availability requirements.",
        "document_name": "5.json",
        "document_chunk_index": 142,
        "hopy_requirement": "The flight control system shall ensure that the load on all I/O channels does not exceed their design capacity to guarantee high availability and reliability of the system."
    },
    {
        "id": 1126,
        "class": "Data Criteria",
        "safety_criterion": "Program storage space must adequately consider the size of executable code.",
        "document_name": "4.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The storage space for flight control software shall be sufficient to support all executable code and data required for flight missions."
    },
    {
        "id": 1127,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "For flag units, mutual exclusion rules for read/write operations must be followed, such as write-side setting and read-side clearing.",
        "document_name": "4.json",
        "document_chunk_index": 250,
        "hopy_requirement": "In the flight control system, when reading and writing status flags in flag units, mutual exclusion must be ensured to prevent data conflicts and inconsistencies."
    },
    {
        "id": 1128,
        "class": "Timing Criteria",
        "safety_criterion": "Timeouts (no input data delivery within a specified interval or time) must be handled in every state.",
        "document_name": "2.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system shall automatically switch to a safe mode and log timeout events when flight control commands time out (e.g., no new commands received within 10 seconds)."
    },
    {
        "id": 1129,
        "class": "Redundancy Criteria",
        "safety_criterion": "In the event of a failure, the software must provide a fault containment mechanism to prevent errors from propagating across unit interfaces in redundant systems, such as by setting permanent faults or removing channels.",
        "document_name": "3.json",
        "document_chunk_index": 112,
        "hopy_requirement": "The flight control system shall have a fault isolation mechanism to ensure that a failure in one component does not affect the normal operation of other redundant components."
    },
    {
        "id": 1130,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If a correct member variable depends on a certain value, then after voting, all correct member variables must depend on the same value.",
        "document_name": "1.json",
        "document_chunk_index": 274,
        "hopy_requirement": "In the flight control system, redundant sensors shall ensure that all correct sensor output values are consistent during the voting process."
    },
    {
        "id": 1131,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "If all member variables have the same initial suggested value, then after voting, all member variables must be determined by this value.",
        "document_name": "3.json",
        "document_chunk_index": 217,
        "hopy_requirement": "During initialization of the flight control system's redundant modules, the initial state parameters of all redundant channels should be consistent to ensure the correctness of the voting mechanism."
    },
    {
        "id": 1132,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "The degradation process should be smooth, and the response time should not change suddenly or abnormally. The transition to different redundancy levels in processing logic should also be smooth.",
        "document_name": "3.json",
        "document_chunk_index": 286,
        "hopy_requirement": "During the degradation process of the flight control system, the response time of the attitude control and navigation systems should transition smoothly to avoid sudden changes."
    },
    {
        "id": 1133,
        "class": "Operating State Criteria",
        "safety_criterion": "The mode path from a fault state to a safe state (fail-safe, partial or complete shutdown) must be specified. The duration of a safe but functionally degraded mode should be minimized as much as possible.",
        "document_name": "2.json",
        "document_chunk_index": 305,
        "hopy_requirement": "Upon detecting a critical system failure, the flight control system should automatically switch to a safe mode and restore to the minimum functional state within the shortest possible time to ensure flight safety."
    },
    {
        "id": 1134,
        "class": "State Scenario Criteria",
        "safety_criterion": "Temporal history of mode transitions should be used to prevent entering into a cycle between continuously degraded and normal states.",
        "document_name": "5.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system should have a temporary history recording function for mode transitions to prevent frequent switching between degraded and normal states."
    },
    {
        "id": 1135,
        "class": "Data Criteria",
        "safety_criterion": "Ethernet message continuous data should be processed with upper and lower limit checks; values exceeding the upper bound or below the lower bound should be handled appropriately.",
        "document_name": "3.json",
        "document_chunk_index": 198,
        "hopy_requirement": "The system should be capable of performing real-time upper and lower limit checks on flight control command Ethernet message data to ensure that command values remain within safe ranges."
    },
    {
        "id": 1136,
        "class": "Data Criteria",
        "safety_criterion": "Ethernet message continuous data should check whether the upper and lower bounds include the maximum and minimum values.",
        "document_name": "5.json",
        "document_chunk_index": 194,
        "hopy_requirement": "The system should be capable of real-time monitoring and validation of upper and lower bounds for flight control data (e.g., attitude angles, speed, altitude) to ensure they remain within safe ranges."
    },
    {
        "id": 1137,
        "class": "Data Criteria",
        "safety_criterion": "Ethernet message continuous data should cover all values within the valid range, including boundary values of each effective interval.",
        "document_name": "4.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The system should ensure that flight control command values in Ethernet communication cover the entire valid interval and perform strict validation at boundary values."
    },
    {
        "id": 1138,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Ethernet message continuous data remains unchanged for a consecutive period or multiple cycles. If no change occurs, it should be checked for anomalies, considering other system states.",
        "document_name": "4.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The flight control system should monitor continuous data (e.g., attitude angle, speed) in Ethernet messages and, when data remains unchanged over multiple cycles, use other sensor data to determine if an anomaly exists, triggering corresponding alarms or fault handling mechanisms."
    },
    {
        "id": 1139,
        "class": "Communication Criteria",
        "safety_criterion": "Ethernet message continuous data should allow margins for both excessively fast and slow variation rates to prevent data loss.",
        "document_name": "4.json",
        "document_chunk_index": 95,
        "hopy_requirement": "The system should ensure that the transmission frequency of flight control data in Ethernet communication remains within safe limits to prevent data loss or delay due to excessively fast or slow frequencies."
    },
    {
        "id": 1140,
        "class": "Communication Criteria",
        "safety_criterion": "Ethernet message continuous data should allow margins for both excessively large and small variation amplitudes to prevent data loss.",
        "document_name": "1.json",
        "document_chunk_index": 204,
        "hopy_requirement": "The system should ensure the transmission stability of flight control data in Ethernet communication to prevent data loss due to excessive or insufficient amplitude variations."
    },
    {
        "id": 1141,
        "class": "Data Criteria",
        "safety_criterion": "Continuous data in Ethernet messages should be initialized with default and safe values.",
        "document_name": "5.json",
        "document_chunk_index": 164,
        "hopy_requirement": "The flight control system should set initial and safe values for continuous data (e.g., attitude angles, speed) in Ethernet communications."
    },
    {
        "id": 1142,
        "class": "Data Criteria",
        "safety_criterion": "The precision of continuous data in Ethernet messages should be checked to ensure it is within acceptable limits to prevent precision errors.",
        "document_name": "1.json",
        "document_chunk_index": 192,
        "hopy_requirement": "The system should monitor and verify the precision of flight control data transmitted via Ethernet in real-time to ensure it remains within predefined limits, preventing loss of control due to precision errors."
    },
    {
        "id": 1143,
        "class": "Data Criteria",
        "safety_criterion": "In cases where interference affects continuous data in Ethernet messages (e.g., irregular data appears within a regular input stream), multiple calculations may be performed to identify and remove outliers.",
        "document_name": "1.json",
        "document_chunk_index": 254,
        "hopy_requirement": "The flight control system should have the capability to detect and remove abnormal data in Ethernet communications, ensuring the accuracy and reliability of flight control commands."
    },
    {
        "id": 1144,
        "class": "Data Criteria",
        "safety_criterion": "Discrete data in Ethernet messages that falls outside defined value ranges and includes undefined values should be handled with fault-tolerant mechanisms.",
        "document_name": "5.json",
        "document_chunk_index": 308,
        "hopy_requirement": "The flight control system should be capable of detecting and handling undefined discrete data values in Ethernet messages to ensure stable system operation."
    },
    {
        "id": 1145,
        "class": "Data Criteria",
        "safety_criterion": "Data read from buffer memory should be validated after retrieval.",
        "document_name": "3.json",
        "document_chunk_index": 220,
        "hopy_requirement": "The system should read and validate flight parameter data from flight control buffers to ensure data integrity and accuracy."
    },
    {
        "id": 1146,
        "class": "Data Criteria",
        "safety_criterion": "Conditions under which input data is considered faulty or invalid should be clearly defined.",
        "document_name": "4.json",
        "document_chunk_index": 242,
        "hopy_requirement": "The system should be able to detect and determine fault or invalid value conditions for flight control inputs (e.g., attitude angles, speed) and trigger appropriate fault handling mechanisms."
    },
    {
        "id": 1147,
        "class": "Data Criteria",
        "safety_criterion": "Criteria for identifying faults such as slope anomalies, extreme values, or data non-updates in continuous data, along with handling procedures and recovery strategies, should be clearly defined.",
        "document_name": "1.json",
        "document_chunk_index": 130,
        "hopy_requirement": "The system should continuously monitor parameters such as slope, extreme values, and update status of flight control data. When anomalies are detected, the system should automatically trigger fault handling mechanisms and log fault information to ensure flight safety."
    },
    {
        "id": 1148,
        "class": "Data Criteria",
        "safety_criterion": "Fault detection criteria, handling strategies, and recovery procedures for undefined discrete data values and abrupt value changes should be clearly defined.",
        "document_name": "5.json",
        "document_chunk_index": 104,
        "hopy_requirement": "The system should be able to detect and handle undefined and abrupt values in flight control parameters to ensure the stability and safety of the flight control system."
    },
    {
        "id": 1149,
        "class": "Timing Criteria",
        "safety_criterion": "Timeout during data retrieval should be detected and appropriately handled.",
        "document_name": "3.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The system should be capable of detecting and handling data retrieval timeouts or failures from satellite communications to ensure data completeness and timeliness."
    },
    {
        "id": 1150,
        "class": "Timing Criteria",
        "safety_criterion": "When required data cannot be retrieved from the buffer, timeout or failure conditions should be evaluated.",
        "document_name": "3.json",
        "document_chunk_index": 290,
        "hopy_requirement": "The system should have the ability to automatically switch to a backup data source and log errors when cache data retrieval fails or times out."
    },
    {
        "id": 1151,
        "class": "Data Criteria",
        "safety_criterion": "Limit the input range of the interface on the programming interface. \nFor defects on the programming interface, it is important to test the input range. If the input range is expanded, it becomes easier to be exploited for attacks.",
        "document_name": "3.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The flight control system's programming interface shall limit the range of input parameters to ensure that input values are within a safe range, preventing system failure or exploitation due to abnormal input values."
    },
    {
        "id": 1152,
        "class": "Timing Criteria",
        "safety_criterion": "When continuous data is represented by multiple Ethernet data packets, determine the validity of the packet interval",
        "document_name": "3.json",
        "document_chunk_index": 170,
        "hopy_requirement": "The system should be able to detect and validate the time interval between multiple Ethernet data packets to ensure the integrity and real-time performance of continuous flight data."
    },
    {
        "id": 1153,
        "class": "Communication Criteria",
        "safety_criterion": "Clarify the checksum method for Ethernet data packets",
        "document_name": "5.json",
        "document_chunk_index": 210,
        "hopy_requirement": "The system should perform CRC checks on Ethernet data packets to ensure the integrity and accuracy of data transmission."
    },
    {
        "id": 1154,
        "class": "Data Criteria",
        "safety_criterion": "The numeric range that an Ethernet data packet can represent may be smaller than the actual value range of the collected data. Check whether the software processing range matches the actual range",
        "document_name": "5.json",
        "document_chunk_index": 80,
        "hopy_requirement": "The system should ensure that the numeric range of Ethernet data packets matches the actual range of collected flight data to avoid data overflow or truncation."
    },
    {
        "id": 1155,
        "class": "Data Criteria",
        "safety_criterion": "The precision supported by Ethernet data packets may not meet the required precision of the collected data. Check whether the configured precision matches the actual precision",
        "document_name": "1.json",
        "document_chunk_index": 96,
        "hopy_requirement": "The system should ensure that the precision of Ethernet data transmission meets the collection precision requirements of flight control parameters (e.g., attitude angle, speed)."
    },
    {
        "id": 1156,
        "class": "Redundancy Criteria",
        "safety_criterion": "Check the buffer size setting to prevent receiving buffer faults when data volume exceeds buffer capacity",
        "document_name": "4.json",
        "document_chunk_index": 290,
        "hopy_requirement": "The flight control system should ensure that the size of received data packets does not exceed the preset buffer capacity to prevent data overflow and system failure."
    },
    {
        "id": 1157,
        "class": "Timing Criteria",
        "safety_criterion": "For time-sensitive operations, check whether time synchronization is performed to ensure consistent timestamps across Ethernet devices",
        "document_name": "1.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The system should ensure timestamp synchronization among all flight control devices to guarantee correct execution of time-sensitive tasks."
    },
    {
        "id": 1158,
        "class": "Timing Criteria",
        "safety_criterion": "Check whether there is a continuous time-synchronization mechanism to prevent failure in Ethernet time synchronization, which could lead to inconsistency between this device and other network devices if local time is used",
        "document_name": "2.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The system should have a continuous time-synchronization mechanism to ensure time synchronization between the aircraft and ground stations as well as other network devices, preventing time inconsistency caused by failed synchronization."
    },
    {
        "id": 1159,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Received data should determine node status to prevent abnormal states such as normal power-on, normal power-off, abnormal power-off, and re-powering of Ethernet nodes",
        "document_name": "4.json",
        "document_chunk_index": 122,
        "hopy_requirement": "The flight control system should monitor the operational status of each node device in real time to ensure timely response and stable operation when node devices experience normal power-on, normal power-off, abnormal power-off, or re-powering."
    },
    {
        "id": 1160,
        "class": "Communication Criteria",
        "safety_criterion": "Important messages must verify total length, sender address, sender port number, receiver address, receiver port number, sequence number, and message identifier to prevent errors in these fields in Ethernet data packets",
        "document_name": "5.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The flight control system should be able to verify the integrity of all critical command packets, including total packet length, sender address, sender port number, receiver address, receiver port number, sequence number, and message identifier, ensuring accurate and secure commands."
    },
    {
        "id": 1161,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Input or operation should be validated and exceptions should be handled to prevent unreasonable input or operations.",
        "document_name": "4.json",
        "document_chunk_index": 173,
        "hopy_requirement": "The system shall validate the effectiveness of flight control commands to prevent illegal or erroneous commands from causing flight anomalies."
    },
    {
        "id": 1162,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Determine whether user input data exceeds the functional processing range.",
        "document_name": "4.json",
        "document_chunk_index": 161,
        "hopy_requirement": "The system shall detect and process flight control commands that exceed preset ranges to ensure flight safety."
    },
    {
        "id": 1163,
        "class": "Data Criteria",
        "safety_criterion": "Determine whether user input data exceeds the displayable range on the interface.",
        "document_name": "4.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system shall detect and handle flight parameters that exceed the display range to ensure accuracy and completeness of the display interface."
    },
    {
        "id": 1164,
        "class": "Task Timing Criteria",
        "safety_criterion": "When repeated control or calculation commands are sent by the user, a time interval should be set to prevent misoperation.",
        "document_name": "1.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The system shall have functionality to prevent repeated transmission of control commands, ensuring that each command is transmitted at intervals no less than one second to avoid misoperations."
    },
    {
        "id": 1165,
        "class": "Timing Criteria",
        "safety_criterion": "A delay judgment should be implemented, allowing users sufficient operational time. If the time is exceeded, fault-tolerant handling should occur to prevent abnormal function inputs due to delayed or absent user actions.",
        "document_name": "2.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The system shall include a delay judgment mechanism that automatically triggers fault tolerance when pilots fail to operate within a set time, ensuring flight safety."
    },
    {
        "id": 1166,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Unauthorized operations should be detected and exception handling applied to prevent users from pressing multiple buttons simultaneously or toggling multiple switches.",
        "document_name": "3.json",
        "document_chunk_index": 92,
        "hopy_requirement": "The flight control system shall include mechanisms to prevent simultaneous input of multiple commands, ensuring only one operation command is executed at a time."
    },
    {
        "id": 1167,
        "class": "Timing Criteria",
        "safety_criterion": "Sufficient operational time should be allowed for the user; if exceeded, fault-tolerant handling should occur to prevent rapid or frequent button presses or switch toggles.",
        "document_name": "5.json",
        "document_chunk_index": 92,
        "hopy_requirement": "The flight control system shall provide an operation timeout protection mechanism to ensure that the system automatically enters a safe state if the user fails to complete an operation within the specified time."
    },
    {
        "id": 1168,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Abnormal user behavior should be blocked during critical operations to prevent premature termination, interruption, or interference with currently executing functions.",
        "document_name": "4.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The flight control system shall include measures to prevent unauthorized user interventions, ensuring continuity and integrity of critical operations (e.g., takeoff, landing, and emergency obstacle avoidance)."
    },
    {
        "id": 1169,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Unreasonable response processes should be terminated and alerts provided.",
        "document_name": "3.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system shall be capable of detecting and terminating abnormal flight control commands and sending alarms to the ground control center."
    },
    {
        "id": 1170,
        "class": "Timing Criteria",
        "safety_criterion": "If software does not respond to user operations in a timely manner or remains unresponsive for extended periods, time-based prompts should be provided.",
        "document_name": "5.json",
        "document_chunk_index": 189,
        "hopy_requirement": "The flight control system shall include a timeout prompt function to ensure that operators are notified promptly in case of delayed operational responses."
    },
    {
        "id": 1171,
        "class": "Task Timing Criteria",
        "safety_criterion": "The software is processing a time-consuming function and should provide a prompt.",
        "document_name": "4.json",
        "document_chunk_index": 270,
        "hopy_requirement": "The system shall display the progress of task execution in real-time and provide clear prompts when the task takes an extended period."
    },
    {
        "id": 1172,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Validity checks should be performed on 'command data' sent from the man-machine interface.",
        "document_name": "2.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system shall validate flight control command data to ensure its integrity and accuracy."
    },
    {
        "id": 1173,
        "class": "Communication Criteria",
        "safety_criterion": "Set reasonable username or password.",
        "document_name": "1.json",
        "document_chunk_index": 96,
        "hopy_requirement": "The system shall require all ground control station users to undergo strong authentication, including setting complex usernames and passwords."
    },
    {
        "id": 1174,
        "class": "Communication Criteria",
        "safety_criterion": "User login should be controlled to prevent the same user from logging in from different network nodes.",
        "document_name": "3.json",
        "document_chunk_index": 126,
        "hopy_requirement": "The system shall secure communication links between ground control stations and aircraft, preventing simultaneous logins of the same user from different ground stations."
    },
    {
        "id": 1175,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent the same user from logging in from different network nodes and performing different operations.",
        "document_name": "2.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system shall ensure that each flight control terminal can only be logged in and operated by one authorized user at any time to prevent command conflicts caused by multi-point control."
    },
    {
        "id": 1176,
        "class": "Communication Criteria",
        "safety_criterion": "If a logged-in user remains inactive for a long time, the system should log out the user or take other handling measures.",
        "document_name": "1.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The ground control station shall have the capability to automatically log out or prompt the operator after a prolonged period of inactivity."
    },
    {
        "id": 1177,
        "class": "Communication Criteria",
        "safety_criterion": "Confirm whether multiple users are allowed to log in simultaneously from the same network node.",
        "document_name": "4.json",
        "document_chunk_index": 218,
        "hopy_requirement": "The ground control station shall prohibit multiple users from logging in simultaneously from the same network node to ensure the uniqueness and security of operation commands."
    },
    {
        "id": 1178,
        "class": "Communication Criteria",
        "safety_criterion": "Remote login requires secure policies, including reasonable password length and requirements.",
        "document_name": "5.json",
        "document_chunk_index": 195,
        "hopy_requirement": "The ground control station shall support secure remote login functionality, including setting appropriate password lengths and complexity requirements to ensure the safety of remote operations."
    },
    {
        "id": 1179,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent power failure at the database node and perform backups.",
        "document_name": "2.json",
        "document_chunk_index": 132,
        "hopy_requirement": "Critical flight mission data shall have redundancy backup mechanisms to ensure data is not lost during node power failures."
    },
    {
        "id": 1180,
        "class": "Interconnected Equipment Criteria",
        "safety_criterion": "Provide a read failure prompt and have a network recovery mechanism to prevent communication interruption during database reading.",
        "document_name": "4.json",
        "document_chunk_index": 254,
        "hopy_requirement": "The flight control system shall have network communication interruption detection and recovery mechanisms to ensure that if the connection is interrupted during database reading, the system can promptly notify and automatically restore the connection."
    },
    {
        "id": 1181,
        "class": "Data Criteria",
        "safety_criterion": "Prevent data read timeout from the database; a timeout check should be implemented with prompt messages provided.",
        "document_name": "3.json",
        "document_chunk_index": 171,
        "hopy_requirement": "The flight control system should have a database read timeout detection function and issue an alarm to the operator in case of a timeout."
    },
    {
        "id": 1182,
        "class": "Redundancy Criteria",
        "safety_criterion": "Prevent database access denial; verify the design to ensure it meets the design requirements.",
        "document_name": "5.json",
        "document_chunk_index": 245,
        "hopy_requirement": "The system should have a redundant database design to ensure that the backup database can seamlessly take over when the primary database is unavailable, guaranteeing continuity and safety of flight missions."
    },
    {
        "id": 1183,
        "class": "Data Criteria",
        "safety_criterion": "Prevent add, delete, or modify operations during the database read process. A security policy should be set to disallow other operations during data processing.",
        "document_name": "5.json",
        "document_chunk_index": 247,
        "hopy_requirement": "During flight mission data retrieval, the flight mission database should prohibit simultaneous addition, deletion, or modification of data to ensure data consistency and integrity."
    },
    {
        "id": 1184,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent database network interruption during query processes. Clear prompt information should be provided.",
        "document_name": "2.json",
        "document_chunk_index": 129,
        "hopy_requirement": "During flight mission data queries, if the database network is interrupted, the system should immediately display clear prompt messages and log the interruption event."
    },
    {
        "id": 1185,
        "class": "Data Criteria",
        "safety_criterion": "Prevent network node folders from becoming full. A full storage handling mechanism should be implemented, such as clearing or overwriting old data.",
        "document_name": "2.json",
        "document_chunk_index": 304,
        "hopy_requirement": "The flight data recording system should have storage capacity management functionality. When storage reaches a preset threshold, the system should automatically delete the oldest data or overwrite old data to ensure continuous operation."
    },
    {
        "id": 1186,
        "class": "Data Criteria",
        "safety_criterion": "Prevent data file corruption by performing data file verification or checking whether files are successfully opened.",
        "document_name": "5.json",
        "document_chunk_index": 120,
        "hopy_requirement": "The system should be capable of verifying the integrity of flight mission data files to ensure they are undamaged and can be successfully opened."
    },
    {
        "id": 1187,
        "class": "Power Failure Protection Criteria",
        "safety_criterion": "Prevent power loss at network nodes by implementing secure methods for accessing data files to prevent file damage due to power failure.",
        "document_name": "4.json",
        "document_chunk_index": 114,
        "hopy_requirement": "The flight control system should have a power failure protection mechanism to ensure the integrity and consistency of critical flight data during power failures."
    },
    {
        "id": 1188,
        "class": "Communication Criteria",
        "safety_criterion": "Prevent network communication interruptions during folder reading processes. Clear prompt messages should be provided.",
        "document_name": "2.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system should be able to detect network communication interruptions during data transmission between the ground station and satellites and immediately send clear alarm messages to the operator."
    },
    {
        "id": 1189,
        "class": "Data Criteria",
        "safety_criterion": "Prevent accidental deletion of network node folders; read checks should be performed, along with prompt messages.",
        "document_name": "1.json",
        "document_chunk_index": 268,
        "hopy_requirement": "The flight control system should have functionality to prevent critical configuration files from being accidentally deleted and should immediately issue an alarm upon detecting a deletion attempt."
    },
    {
        "id": 1190,
        "class": "Data Criteria",
        "safety_criterion": "Prevent folder read timeouts; timeout checks should be implemented along with prompt messages.",
        "document_name": "2.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The flight control system should have a file read timeout detection function and provide clear prompt messages when timeouts occur."
    },
    {
        "id": 1191,
        "class": "Data Criteria",
        "safety_criterion": "Prevent multiple new data from arriving simultaneously; data should be buffered to prevent loss.",
        "document_name": "4.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The system should have a data buffering mechanism to ensure that critical flight data is not lost when multiple data arrive simultaneously."
    },
    {
        "id": 1192,
        "class": "Data Criteria",
        "safety_criterion": "Prevent new data from arriving while data is being processed. Data should be buffered to prevent loss.",
        "document_name": "2.json",
        "document_chunk_index": 137,
        "hopy_requirement": "The system should have a data buffering mechanism to ensure that new flight data arrival during processing does not result in data loss."
    },
    {
        "id": 1193,
        "class": "Data Criteria",
        "safety_criterion": "Prevent unclear naming methods for newly arrived data files; file naming rules should be defined.",
        "document_name": "4.json",
        "document_chunk_index": 213,
        "hopy_requirement": "The system should define and implement unified flight data file naming rules to ensure that each data file has a unique and traceable name."
    },
    {
        "id": 1194,
        "class": "Data Criteria",
        "safety_criterion": "Prevent mismatch between the newly arrived data files and commands. Discrimination should be performed before executing important data.",
        "document_name": "3.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The system should ensure that uploaded flight mission data files completely match the commands issued by the ground control center and perform verification before execution."
    },
    {
        "id": 1195,
        "class": "Data Criteria",
        "safety_criterion": "Prevent unconfirmed validity of rule files or standards used for verification.",
        "document_name": "1.json",
        "document_chunk_index": 218,
        "hopy_requirement": "The system should ensure that all verification rule files for flight control parameters are validated for validity before use."
    },
    {
        "id": 1196,
        "class": "Data Criteria",
        "safety_criterion": "Unauthorized accidental access or modification of data should be prevented. Data should be protected with authorization, and secondary prompts should be provided for access or modification operations.",
        "document_name": "3.json",
        "document_chunk_index": 291,
        "hopy_requirement": "The system should ensure the integrity and confidentiality of flight control data, prevent unauthorized access or modification, and provide secondary confirmation prompts when performing any data access or modification operations."
    },
    {
        "id": 1197,
        "class": "Timing Criteria",
        "safety_criterion": "Prevent processing timing vulnerabilities. Processing timing means that multiple operations must be handled in a specific order. An attack may pause the software at a specific step during processing, allowing an attacker to make some modifications to the software, after which the software resumes operation using carefully prepared problematic input data, leading to potential errors that attackers can exploit to obtain required privileges.",
        "document_name": "3.json",
        "document_chunk_index": 261,
        "hopy_requirement": "The flight control system should ensure that all mission-critical operations are executed in the predetermined sequence to prevent timing vulnerabilities caused by external interference."
    },
    {
        "id": 1198,
        "class": "Communication Criteria",
        "safety_criterion": "Dual-factor authentication should be used for client-side, database logins, and logins in secure modes involving sensitive data;",
        "document_name": "2.json",
        "document_chunk_index": 293,
        "hopy_requirement": "Login and data access for spacecraft ground control systems must use dual-factor authentication to ensure that only authorized personnel can access sensitive data."
    },
    {
        "id": 1199,
        "class": "Communication Criteria",
        "safety_criterion": "Client-side and database login information for sensitive data should be auditable;",
        "document_name": "4.json",
        "document_chunk_index": 86,
        "hopy_requirement": "The system should be capable of recording and auditing all accesses and operations of sensitive data, including client-side and database login information for flight control parameters and navigation data."
    },
    {
        "id": 1200,
        "class": "Communication Criteria",
        "safety_criterion": "Login timeout authentication and limitations on the number of failed identity verification attempts",
        "document_name": "4.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The ground control station should have login timeout mechanisms and limitations on the number of failed identity verification attempts to ensure that unauthorized access cannot continuously attempt to log in."
    },
    {
        "id": 1201,
        "class": "Communication Criteria",
        "safety_criterion": "Adopt a 'deny unless permitted' control strategy on the firewall and set packet filtering rules to control data packets. Identity authentication policies should be set for important servers, enforcing identity verification.",
        "document_name": "4.json",
        "document_chunk_index": 96,
        "hopy_requirement": "The spacecraft ground control station's network firewall should adopt a 'deny unless permitted' control strategy and set packet filtering rules to control data packets. Important servers should enforce identity verification to ensure that only authorized users can access them."
    },
    {
        "id": 1202,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Important operations should define roles and permissions within the system. The software's data backup and recovery functions should have an operator role, with each user assigned an operator role and password (passwords should be changed periodically or irregularly). Based on the scope of business managed by each operator, assign an appropriate identity to limit their operations on the application software (i.e., operational permissions). If many individuals use the application software, group them according to their tasks, assigning different operational permissions (i.e., different roles) to each group. For example, operators can simply be divided into the following three roles: \n(1) Query Role: Only capable of querying and performing statistics on data.\n(2) Data Definition Role: In addition to (1) permissions, can perform input, modification, and deletion operations on software data.\n(3) System Administrator Role: In addition to (1) and (2) permissions, can perform data backup and recovery, add or delete operators, set or change passwords for operators, create system databases, and manage other system-related operations.",
        "document_name": "3.json",
        "document_chunk_index": 193,
        "hopy_requirement": "The spacecraft ground control system should implement multi-level user role and permission management, including query roles, data definition roles, and system administrator roles, to ensure data security and operational controllability."
    },
    {
        "id": 1203,
        "class": "Data Criteria",
        "safety_criterion": "Validate transformation rules in design space to prevent illegal data from passing undetected through the external input layer and entering the interface and implementation layers, where it may cause overflow due to exceeding corresponding test or design space boundaries.",
        "document_name": "4.json",
        "document_chunk_index": 148,
        "hopy_requirement": "The system should strictly validate all externally input flight control commands to ensure they fall within predefined valid ranges, preventing illegal commands from causing overflows or abnormal behaviors."
    },
    {
        "id": 1204,
        "class": "Data Criteria",
        "safety_criterion": "Set reasonable local test and design spaces. Prevent overflow during program processing when valid data enters due to insufficient corresponding test or design space within the program implementation layer.",
        "document_name": "1.json",
        "document_chunk_index": 289,
        "hopy_requirement": "The flight control system should ensure sufficient design and test spaces across all valid flight parameter input ranges to prevent system failures caused by data overflow."
    },
    {
        "id": 1205,
        "class": "Data Criteria",
        "safety_criterion": "Prevent corruption of function return addresses. This prevents specially designed data from overwriting function return addresses to execute arbitrary code and gain unauthorized privileges.",
        "document_name": "3.json",
        "document_chunk_index": 93,
        "hopy_requirement": "Flight control software should include protections against buffer overflows to ensure that function return addresses cannot be overwritten by malicious data."
    },
    {
        "id": 1206,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Ensure the integrity of information and processes throughout the system (during storage, processing, transmission, and presentation), preventing unauthorized or accidental modifications.",
        "document_name": "1.json",
        "document_chunk_index": 286,
        "hopy_requirement": "The system should ensure that flight control commands and telemetry data remain unaltered during storage, processing, transmission, and presentation to maintain mission integrity and safety."
    },
    {
        "id": 1207,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Provide sufficient protection against attempts by users to bypass system access controls, accountability, or procedures to operate unauthorized systems.",
        "document_name": "5.json",
        "document_chunk_index": 243,
        "hopy_requirement": "The system should prevent unauthorized ground station operators from accessing the flight control system, ensuring that only authenticated and authorized personnel can perform critical operations."
    },
    {
        "id": 1208,
        "class": "Communication Criteria",
        "safety_criterion": "All switches should have login passwords, disable unused ports, and bind active ports using 'MAC + port' binding to prevent unauthorized access.",
        "document_name": "1.json",
        "document_chunk_index": 287,
        "hopy_requirement": "Onboard network switches should be configured with login passwords, unused ports should be disabled, and active ports should implement MAC address and port binding to ensure network security."
    },
    {
        "id": 1209,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Application system access control should be achieved through integration of an identity authentication system with personnel permission management in the application system to realize user permission division and ensure compliance with the least privilege policy.",
        "document_name": "1.json",
        "document_chunk_index": 185,
        "hopy_requirement": "The flight control system should use identity authentication and permission management to ensure that only authorized personnel can access and operate critical flight parameters and control instructions."
    },
    {
        "id": 1210,
        "class": "Redundancy Criteria",
        "safety_criterion": "Divide security domains based on differences in functionality and business attributes. Isolation measures between security domains should employ both software and hardware methods, such as VLANs and firewalls. When exchanging information between security domains, ensure: mandatory access control strategies are used for confidential data access within the information system. Mandatory access control can prevent trojan horses and user privilege abuse, offering higher security.",
        "document_name": "3.json",
        "document_chunk_index": 301,
        "hopy_requirement": "The flight control system should be divided into multiple security domains, including flight control domain, navigation domain, and communication domain. These domains should be isolated using VLANs and hardware firewalls, ensuring that access to confidential data employs mandatory access control policies."
    },
    {
        "id": 1211,
        "class": "Access Control",
        "safety_criterion": "Query roles can be associated with 'read-only' database users; data definition roles can be associated with 'write' database users; the system administrator has the highest authority and can be associated with the system administrator SA or database creator.",
        "document_name": "2.json",
        "document_chunk_index": 288,
        "hopy_requirement": "The flight mission management system should have role-based access control functionality to ensure that different roles can only access and operate data within their authorized scope. For example, flight operators have read-only permissions, while system administrators have the highest level of access."
    },
    {
        "id": 1212,
        "class": "Access Control",
        "safety_criterion": "User access rights and password protection are important safeguards for improving system security. However, there are still many security vulnerabilities in current user authentication and access control systems, such as ambiguous definitions of user access rights and the use of username/password protection, which is considered a weak authentication mechanism. The current use of username plus password authentication alone is insufficient and provides low security strength. A more common form of identity authentication involves combining USBKey with passwords or using fingerprint recognition-based identity authentication systems. These strong identity authentication measures are centered on cryptographic technology and can integrate with application systems to some extent to achieve unified user management and unified authorization mechanisms.",
        "document_name": "2.json",
        "document_chunk_index": 225,
        "hopy_requirement": "The ground control station should adopt a strong identity authentication mechanism based on USBKey combined with passwords or fingerprint recognition to ensure that only authorized personnel can access critical systems and data."
    },
    {
        "id": 1213,
        "class": "Access Control",
        "safety_criterion": "There should be dedicated intrusion detection devices or intrusion detection software to provide intrusion information so that timely security measures can be taken to prevent intrusion attempts. According to the actual situation of shipyard information systems, intrusion detection devices can be deployed at core switches or at access switches for critical applications.",
        "document_name": "5.json",
        "document_chunk_index": 227,
        "hopy_requirement": "The spacecraft ground control center should deploy an intrusion detection system to monitor and report any abnormal access or intrusion behavior in real-time, ensuring the security of the ground control system."
    },
    {
        "id": 1214,
        "class": "Access Control",
        "safety_criterion": "Management controls for unauthorized external connections of critical equipment: It should be able to monitor and block unauthorized Internet access via various methods by classified computers in real-time and send alarm messages to the management terminal;",
        "document_name": "2.json",
        "document_chunk_index": 188,
        "hopy_requirement": "The satellite communication system should have the capability to monitor and block unauthorized Internet access by ground station computers in real-time and send alarm messages to the control center."
    },
    {
        "id": 1215,
        "class": "Access Control",
        "safety_criterion": "Management control for mobile storage media usage on critical equipment: Administrators can define the usage scope of classified dedicated USB drives within the system, allowing them to exchange data only on permitted classified computers. Classified dedicated USB drives cannot be directly connected to non-classified computers, and ordinary USB drives cannot be directly connected to classified computers, thereby preventing cross-use of mobile storage media.",
        "document_name": "4.json",
        "document_chunk_index": 197,
        "hopy_requirement": "The ground control station should have strict management functionality for classified flight mission data storage media, ensuring they can only be used on authorized ground control computers to prevent data leakage and cross-use."
    },
    {
        "id": 1216,
        "class": "Access Control",
        "safety_criterion": "Important data access should have records or alerts.",
        "document_name": "2.json",
        "document_chunk_index": 258,
        "hopy_requirement": "The system should record all accesses to flight control parameters and navigation data and issue alerts upon unauthorized access attempts."
    },
    {
        "id": 1217,
        "class": "Data Confidentiality",
        "safety_criterion": "Critical information should be stored with encryption. Content-based encryption should be used instead of encrypting the entire network to ensure information security.",
        "document_name": "5.json",
        "document_chunk_index": 210,
        "hopy_requirement": "Sensitive data in the flight control system (such as flight paths, mission parameters, and security keys) should be stored using content-based encryption technology to ensure data confidentiality and integrity."
    },
    {
        "id": 1218,
        "class": "Data Confidentiality",
        "safety_criterion": "Self-destruct designs should be implemented for important data when devices are lost. Check the effectiveness of the mechanism.",
        "document_name": "4.json",
        "document_chunk_index": 107,
        "hopy_requirement": "Satellites should automatically trigger a self-destruct program upon detecting loss of critical data to ensure the data cannot be accessed without authorization."
    },
    {
        "id": 1219,
        "class": "Data Confidentiality",
        "safety_criterion": "Transmission media uses data links, which are less prone to information leaks, but cryptographic protection measures should also be applied.",
        "document_name": "1.json",
        "document_chunk_index": 129,
        "hopy_requirement": "The satellite communication system should use encryption algorithms to protect the data link to ensure the confidentiality and integrity of transmitted data."
    },
    {
        "id": 1220,
        "class": "Data Confidentiality",
        "safety_criterion": "Important data should be marked with classification levels. Classified electronic files and materials stored, processed, transmitted, or outputted by application systems should have corresponding classification markings, which cannot be separated from the main text and should be placed at the top right corner of the text. Classification markings must start from the drive letter, and folders storing classified information and classified documents must all be labeled accordingly.",
        "document_name": "3.json",
        "document_chunk_index": 216,
        "hopy_requirement": "Flight mission data and sensitive information must be marked with classification levels during storage, transmission, and processing, and the classification markings must not be separable from the data to ensure data integrity and security."
    },
    {
        "id": 1221,
        "class": "Data Criteria",
        "safety_criterion": "Database Vulnerability Scanning: Scan the database using security detection devices and patch any discovered vulnerabilities;\nDatabase Security Policy Configuration: Configure dedicated security protection policies for the database to enhance overall database security.",
        "document_name": "4.json",
        "document_chunk_index": 87,
        "hopy_requirement": "The flight mission management system should perform regular database vulnerability scans and automatically apply security patches, while configuring dedicated security protection policies to ensure the security and integrity of mission data."
    },
    {
        "id": 1222,
        "class": "Data Criteria",
        "safety_criterion": "Implement strategies to reduce software installation, explain the impact of such software in the user manual, monitor illegal processes, and prohibit the use of unauthorized storage devices to store sensitive information.",
        "document_name": "3.json",
        "document_chunk_index": 194,
        "hopy_requirement": "The system should have the capability to monitor and log all software installations, process executions, and storage device usage in real-time, ensuring that only authorized software and storage devices can access sensitive information."
    },
    {
        "id": 1223,
        "class": "Data Criteria",
        "safety_criterion": "Install an anti-virus database and perform virus scanning and removal. Prevent viruses from causing data security issues.\n① Server Protection: Perform virus scanning and removal on servers running various operating systems;\n② Client Protection: Perform virus scanning and removal on various desktop operating systems;\n③ Anti-Virus Management Functionality: Centrally manage anti-virus software across all clients, providing centralized distribution of policies, updates, configurations, management, and statistics functions to enable centralized monitoring of virus prevention.",
        "document_name": "3.json",
        "document_chunk_index": 252,
        "hopy_requirement": "The ground control station should have virus protection functionality, including virus scanning, removal for servers and clients, and centralized management, to ensure data security of the ground control system."
    },
    {
        "id": 1224,
        "class": "Data Criteria",
        "safety_criterion": "Check common folders or user sharing settings. When shared data is used without effective protection and verification, malicious users may exploit this shared data to launch attacks. For example, if an entire directory is shared with all users, any user could delete files on the server.",
        "document_name": "4.json",
        "document_chunk_index": 231,
        "hopy_requirement": "The system should ensure that shared folders containing flight mission data have strict access controls and validation mechanisms to prevent unauthorized users from modifying or deleting files."
    },
    {
        "id": 1225,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Important operations should be automatically recorded. Data should be generated when critical or important operations (e.g., setting runtime parameters, creating a software database, adding, deleting, or modifying data) are performed by the software.",
        "document_name": "4.json",
        "document_chunk_index": 273,
        "hopy_requirement": "The system should automatically record all critical flight operations, including but not limited to flight parameter settings, mission plan creation and modification, and flight data additions, deletions, or modifications."
    },
    {
        "id": 1226,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Control illegal software installation and unauthorized process execution by users, and monitor network ports.\nAudit and control protocols such as Telnet and FTP; perform security audits on various databases such as Oracle, DB2, and SQLServer; comprehensively record session information; and store original IP packet records.",
        "document_name": "4.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The ground control station should have strict control over all software installations and process executions on the aircraft to prevent unauthorized software and processes from running, and monitor network communication ports in real-time to ensure secure communication between the aircraft and the ground station."
    },
    {
        "id": 1227,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Critical data should be encrypted, and transmission information should be recorded to trace the source, enabling traceability of critical data.",
        "document_name": "3.json",
        "document_chunk_index": 160,
        "hopy_requirement": "The flight control system should use encryption technology to protect critical flight data and record all data transmission information to ensure traceability of data sources."
    },
    {
        "id": 1228,
        "class": "Redundancy Criteria",
        "safety_criterion": "Databases should have backup and recovery mechanisms, and important databases should have multi-machine redundant backups.",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "The flight control system's database should have real-time backup and recovery mechanisms, and key flight data should have multi-machine redundant backups."
    },
    {
        "id": 1229,
        "class": "Redundancy Criteria",
        "safety_criterion": "Select three backup strategies: full (complete) data, changed data, and logs. Full data backup involves copying the entire database, table, or file at a specific point in time; changed data backup involves copying data that has changed or been added since the last full backup; log backup involves copying all operations recorded in the database log since the last log backup.",
        "document_name": "3.json",
        "document_chunk_index": 135,
        "hopy_requirement": "The flight control system should support full, incremental, and log-based backup strategies to ensure the integrity and recoverability of flight data."
    },
    {
        "id": 1230,
        "class": "Redundancy Criteria",
        "safety_criterion": "Recovery operations should be available at any time when needed.",
        "document_name": "4.json",
        "document_chunk_index": 81,
        "hopy_requirement": "The system should be capable of performing fault recovery operations at any stage of flight, including takeoff, cruise, and landing."
    },
    {
        "id": 1231,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Autonomously select a corresponding series of backup files (i.e., the recovery sequence) based on previous backups and the target recovery time, using numerical order to represent the sequence. For example:\n1—A full backup file at time t;\n2—A change backup file from time t to time k;\n3—A log backup file from time k to the current recovery time s.\nThese three backup files and their numbers form a recovery sequence that can restore data to its state at time s.",
        "document_name": "4.json",
        "document_chunk_index": 284,
        "hopy_requirement": "The flight control system should have the capability to automatically select and apply backup files to ensure accurate restoration to a specified flight condition during system recovery."
    },
    {
        "id": 1232,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Validate the effectiveness of the determined recovery sequence to ensure correct data recovery. For instance, check whether there is only one full backup file in the sequence, whether its sequence number is 1, and whether the order of full, differential, or log backup files matches their creation times. If inconsistencies exist, such as a full backup not being numbered 1 or an incorrect sequence, the recovery process cannot proceed, and the operator must be alerted to correct it.",
        "document_name": "2.json",
        "document_chunk_index": 165,
        "hopy_requirement": "The flight control system should be capable of verifying the integrity and sequence of backup data to ensure the use of correct backup files during system recovery, thereby guaranteeing continuity and safety of flight operations."
    },
    {
        "id": 1233,
        "class": "Redundancy Switching Criteria",
        "safety_criterion": "Verify the effectiveness of mission cluster capabilities related to task migration, deployment, backup, and recovery.",
        "document_name": "5.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The system should be capable of automatically migrating tasks to a backup mission computer upon failure of the primary mission computer, ensuring data integrity and consistency."
    },
    {
        "id": 1234,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Information presented to the operator, including displays, icons, and other human-machine interaction methods, should be clear, concise, and unambiguous.",
        "document_name": "3.json",
        "document_chunk_index": 169,
        "hopy_requirement": "The flight control interface should display critical flight parameters (e.g., altitude, speed, attitude angle) and system status (e.g., engine status, navigation status) in real-time, ensuring the operator can monitor and operate clearly and accurately."
    },
    {
        "id": 1235,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Display design should consider factors such as color, font size, and positioning to meet ergonomic requirements.",
        "document_name": "2.json",
        "document_chunk_index": 89,
        "hopy_requirement": "Cockpit displays should feature high-contrast color schemes and adjustable font sizes to ensure pilots can clearly read critical flight data under various lighting conditions."
    },
    {
        "id": 1236,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Allocate information to different formats or pages according to mission requirements.",
        "document_name": "4.json",
        "document_chunk_index": 108,
        "hopy_requirement": "The flight control interface should dynamically adjust displayed content based on mission needs, ensuring priority display of critical information during different flight phases."
    },
    {
        "id": 1237,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Ensure all necessary information across different pages is consistent.",
        "document_name": "1.json",
        "document_chunk_index": 248,
        "hopy_requirement": "Critical parameters (e.g., heading, speed, altitude) in the flight control and mission planning interfaces should remain consistent, ensuring no discrepancies when operators view them on different pages."
    },
    {
        "id": 1238,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Provide alerts upon detecting invalid input or operations.",
        "document_name": "3.json",
        "document_chunk_index": 310,
        "hopy_requirement": "The system should detect and alert for invalid flight control commands to ensure operational safety."
    },
    {
        "id": 1239,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "The human-machine interface should be user-friendly, standardized, reasonable, and aesthetically coordinated.",
        "document_name": "3.json",
        "document_chunk_index": 244,
        "hopy_requirement": "The flight control interface should provide intuitive and clear flight parameter displays and operation buttons, ensuring pilots can perform operations quickly and accurately in emergency situations."
    },
    {
        "id": 1240,
        "class": "Human-Machine Interface Criteria",
        "safety_criterion": "Icons preceding menus and buttons should intuitively represent the intended operation;",
        "document_name": "1.json",
        "document_chunk_index": 126,
        "hopy_requirement": "Control buttons and icons within the cockpit should intuitively indicate their functions, ensuring pilots can perform operations quickly and accurately in emergency situations."
    },
    {
        "id": 1241,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Buttons with the same or similar functions should be placed together;",
        "document_name": "4.json",
        "document_chunk_index": 295,
        "hopy_requirement": "Flight control buttons in the cockpit should be categorized by function, and buttons with the same or similar functions should be grouped together."
    },
    {
        "id": 1242,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Important command buttons and frequently used buttons should be placed in prominent positions on the interface;",
        "document_name": "1.json",
        "document_chunk_index": 238,
        "hopy_requirement": "Critical operation buttons in the cockpit (e.g., emergency landing, engine restart) should be positioned where they are clearly visible and easy to operate."
    },
    {
        "id": 1243,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Buttons whose misuse could easily cause the interface to exit or close should not be placed in easily clickable positions; typically, the beginning or end of a horizontal row and the end of a vertical column are vulnerable spots;",
        "document_name": "2.json",
        "document_chunk_index": 256,
        "hopy_requirement": "Emergency stop buttons in the flight control interface should be located in positions that are difficult to accidentally touch, such as the edges or corners of the screen."
    },
    {
        "id": 1244,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Buttons unrelated to the current operation should be disabled;",
        "document_name": "3.json",
        "document_chunk_index": 280,
        "hopy_requirement": "During flight operations, control buttons unrelated to the current task should be disabled to prevent accidental activation."
    },
    {
        "id": 1245,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Operations that may result in irreversible data loss must include confirmation prompts to allow users to cancel the action;",
        "document_name": "4.json",
        "document_chunk_index": 134,
        "hopy_requirement": "Before executing critical flight operations (e.g., trajectory correction, attitude adjustment), the system should display a confirmation prompt to allow the operator to confirm or cancel the operation."
    },
    {
        "id": 1246,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Errors caused during operation should be clearly indicated so users understand the source of the problem and avoid indefinite waiting;",
        "document_name": "3.json",
        "document_chunk_index": 295,
        "hopy_requirement": "The system should detect and report any anomalies occurring during flight, including but not limited to sensor failures, communication interruptions, and control system malfunctions, along with clear error messages."
    },
    {
        "id": 1247,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Prompts, warnings, and error messages should be clear, concise, and appropriate;",
        "document_name": "5.json",
        "document_chunk_index": 196,
        "hopy_requirement": "The system should provide clear and concise flight status warnings and error messages to ensure pilots can promptly and accurately take corrective actions."
    },
    {
        "id": 1248,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The aspect ratio should be balanced; significant disproportion between length and width or excessive width compared to length should be avoided;",
        "document_name": "1.json",
        "document_chunk_index": 284,
        "hopy_requirement": "Spacecraft structural design should ensure a balanced length-to-width ratio to maintain flight stability and maneuverability."
    },
    {
        "id": 1249,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Layout should be reasonable—not overly dense nor excessively sparse;",
        "document_name": "3.json",
        "document_chunk_index": 189,
        "hopy_requirement": "Internal component layout of satellites should be rational to ensure heat dissipation and ease of maintenance."
    },
    {
        "id": 1250,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Font size should be proportionally coordinated with the size of the interface;",
        "document_name": "2.json",
        "document_chunk_index": 207,
        "hopy_requirement": "The font size on cockpit displays should be proportionally coordinated with the display size to ensure readability under all flight conditions."
    },
    {
        "id": 1251,
        "class": "Human-Machine Interface",
        "safety_criterion": "The foreground and background colors should be reasonably coordinated, and the contrast should not be too large.",
        "document_name": "5.json",
        "document_chunk_index": 289,
        "hopy_requirement": "Cockpit displays shall ensure that the foreground and background color combinations are reasonable and harmonious, avoiding excessive contrast to guarantee pilots' visual comfort and accurate information recognition under various lighting conditions."
    },
    {
        "id": 1252,
        "class": "Human-Machine Interface",
        "safety_criterion": "The interface style must remain consistent; the size, color, and font of text should be the same unless special artistic processing or specific requirements exist.",
        "document_name": "2.json",
        "document_chunk_index": 281,
        "hopy_requirement": "The flight control interface shall maintain a consistent style, including uniform fonts, colors, and sizes, to ensure pilots can quickly identify and operate under different operational modes."
    },
    {
        "id": 1253,
        "class": "Human-Machine Interface",
        "safety_criterion": "Graphics should clearly reflect their intended meanings.",
        "document_name": "3.json",
        "document_chunk_index": 254,
        "hopy_requirement": "The flight control interface shall clearly display key parameters such as aircraft attitude, speed, and altitude."
    },
    {
        "id": 1254,
        "class": "Human-Machine Interface",
        "safety_criterion": "The same status indication shall use the same color, while different statuses shall be displayed with clearly distinguishable colors.",
        "document_name": "3.json",
        "document_chunk_index": 215,
        "hopy_requirement": "The flight status monitoring system shall use a unified color scheme to ensure consistent color representation for the same status and clearly differentiated colors for different statuses."
    },
    {
        "id": 1255,
        "class": "Human-Machine Interface",
        "safety_criterion": "Important prompts should prevent incorrect display of information.",
        "document_name": "3.json",
        "document_chunk_index": 224,
        "hopy_requirement": "The system shall ensure accurate and complete display of critical flight parameters and warning information, preventing misrepresentation or omission."
    },
    {
        "id": 1256,
        "class": "Human-Machine Interface",
        "safety_criterion": "Prevent garbled characters from appearing.",
        "document_name": "4.json",
        "document_chunk_index": 88,
        "hopy_requirement": "The system shall ensure that all flight control commands and status information are transmitted without garbled characters, ensuring command accuracy and integrity."
    },
    {
        "id": 1257,
        "class": "Human-Machine Interface",
        "safety_criterion": "Prevent inconsistencies in altitude data from different sources.",
        "document_name": "1.json",
        "document_chunk_index": 166,
        "hopy_requirement": "The system shall perform real-time validation of altitude data from different sensors to ensure data consistency."
    },
    {
        "id": 1258,
        "class": "Human-Machine Interface",
        "safety_criterion": "Prevent inconsistencies in speed data from different sources.",
        "document_name": "5.json",
        "document_chunk_index": 123,
        "hopy_requirement": "The system shall ensure synchronization of flight speed data from different sensors during fusion processing to avoid control errors caused by data inconsistency."
    },
    {
        "id": 1259,
        "class": "Human-Machine Interface",
        "safety_criterion": "Prevent inconsistencies in angular data from different sources.",
        "document_name": "2.json",
        "document_chunk_index": 93,
        "hopy_requirement": "The system shall ensure consistency and accuracy of flight attitude angle data (e.g., pitch angle, roll angle, yaw angle) from different sensors."
    },
    {
        "id": 1260,
        "class": "Human-Machine Interface",
        "safety_criterion": "The order of identical list items should be as consistent as possible across different pages.",
        "document_name": "1.json",
        "document_chunk_index": 184,
        "hopy_requirement": "In the flight mission planning interface, the display order of each mission step should align with the actual execution sequence of tasks."
    },
    {
        "id": 1261,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Identifiers in the source code should be named according to their meaning.",
        "document_name": "2.json",
        "document_chunk_index": 195,
        "hopy_requirement": "Variables and functions in flight control software should use clear naming, such as 'altitude' for altitude and 'velocity' for velocity, to ensure code readability and maintainability."
    },
    {
        "id": 1262,
        "class": "Control Calculation Criteria",
        "safety_criterion": "If abbreviations are used for identifiers, the abbreviation rules should be consistent, and each name should be accompanied by a comment.",
        "document_name": "2.json",
        "document_chunk_index": 135,
        "hopy_requirement": "All abbreviated identifiers in flight control software should follow unified abbreviation rules, and comments explaining each abbreviated identifier should be added in the code."
    },
    {
        "id": 1263,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Comments are divided into block comments and line comments. Block comments should be placed at the beginning of a code segment; line comments can be inserted in the middle of the code to describe the function of a single line or block of code.",
        "document_name": "5.json",
        "document_chunk_index": 300,
        "hopy_requirement": "Flight control software should include detailed comments, including both block comments and line comments, to ensure code readability and maintainability."
    },
    {
        "id": 1264,
        "class": "Control Calculation Criteria",
        "safety_criterion": "In general, the effective comment ratio in source code must be more than 20%.",
        "document_name": "1.json",
        "document_chunk_index": 305,
        "hopy_requirement": "The source code of flight control software must have an effective comment ratio of at least 20% to ensure code maintainability and readability."
    },
    {
        "id": 1265,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Program listings should be laid out clearly and neatly. Indentation can be effectively used, and appropriate spaces can be used to improve program readability.",
        "document_name": "5.json",
        "document_chunk_index": 128,
        "hopy_requirement": "The code of flight control software should be highly readable and maintainable, ensuring that problems can be quickly located and repaired in emergency situations."
    },
    {
        "id": 1266,
        "class": "Data Criteria",
        "safety_criterion": "Data declaration style has a significant impact on data understanding and maintenance. The following practices help make data declarations easier to understand.",
        "document_name": "2.json",
        "document_chunk_index": 251,
        "hopy_requirement": "The system should provide a clear data dictionary, including definitions, units, and value ranges for all flight parameters and system states, to ensure data consistency and maintainability."
    },
    {
        "id": 1267,
        "class": "Data Criteria",
        "safety_criterion": "Explicitly declare all variables.",
        "document_name": "3.json",
        "document_chunk_index": 122,
        "hopy_requirement": "All flight control parameters and state variables should be explicitly defined and initialized in the system."
    },
    {
        "id": 1268,
        "class": "Data Criteria",
        "safety_criterion": "Standardize the order of data declarations (e.g., determine the order of declarations based on data structure or data type). An ordered list is easier to review and helps avoid omissions.",
        "document_name": "4.json",
        "document_chunk_index": 277,
        "hopy_requirement": "Flight control software should document and display flight parameters and system states in a predefined data structure and type order, ensuring data integrity and readability."
    },
    {
        "id": 1269,
        "class": "Data Criteria",
        "safety_criterion": "When multiple variables are declared in a single statement, the variables should be arranged alphabetically.",
        "document_name": "1.json",
        "document_chunk_index": 115,
        "hopy_requirement": "Flight control software should ensure that all variables are arranged alphabetically to improve code readability and maintainability."
    },
    {
        "id": 1270,
        "class": "Data Criteria",
        "safety_criterion": "If a complex data structure is used during design, comments should explain how this data structure is implemented using the programming language.",
        "document_name": "3.json",
        "document_chunk_index": 170,
        "hopy_requirement": "The system should provide detailed comments for complex flight control data structures, ensuring that development and maintenance personnel can accurately understand and implement related functions."
    },
    {
        "id": 1271,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Do not write multiple statements on the same line in order to save space.",
        "document_name": "3.json",
        "document_chunk_index": 259,
        "hopy_requirement": "The flight control software code should remain clear and readable, avoiding combining multiple statements into a single line to ensure code maintainability and reviewability."
    },
    {
        "id": 1272,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid making judgments based on negation conditions.",
        "document_name": "2.json",
        "document_chunk_index": 257,
        "hopy_requirement": "The system shall ensure that negation condition checks are not used in flight control logic to reduce the risk of misjudgment."
    },
    {
        "id": 1273,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid using complex judgment conditions.",
        "document_name": "2.json",
        "document_chunk_index": 187,
        "hopy_requirement": "The flight control system should simplify logical judgment conditions to ensure rapid and accurate decision-making at critical points."
    },
    {
        "id": 1274,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Use parentheses to indicate the order of operations in expressions.",
        "document_name": "2.json",
        "document_chunk_index": 262,
        "hopy_requirement": "The system should correctly parse and execute flight control commands with parentheses to ensure accuracy of operation order."
    },
    {
        "id": 1275,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Write programs using only the three basic control structures.",
        "document_name": "3.json",
        "document_chunk_index": 309,
        "hopy_requirement": "Flight control software should use only three basic control structures—sequence, selection, and loop—to ensure code readability and maintainability."
    },
    {
        "id": 1276,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Minimize or avoid the use of GOTO statements.",
        "document_name": "5.json",
        "document_chunk_index": 199,
        "hopy_requirement": "Flight control software should avoid using GOTO statements to reduce code complexity and potential logic errors."
    },
    {
        "id": 1277,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Minimize or avoid using statements outside standard texts.",
        "document_name": "2.json",
        "document_chunk_index": 190,
        "hopy_requirement": "Flight control software should use only programming statements and protocols that comply with industry standards to ensure code readability and maintainability."
    },
    {
        "id": 1278,
        "class": "Task Timing Criteria",
        "safety_criterion": "Efficiency is a performance requirement for software whose objectives are defined during the requirements analysis phase.",
        "document_name": "2.json",
        "document_chunk_index": 172,
        "hopy_requirement": "The flight control system should achieve flight trajectory calculations within specified timeframes to ensure real-time performance and accuracy."
    },
    {
        "id": 1279,
        "class": "Task Timing Criteria",
        "safety_criterion": "Efficiency aligns with simplicity; do not sacrifice program clarity and readability to improve efficiency.",
        "document_name": "4.json",
        "document_chunk_index": 202,
        "hopy_requirement": "Flight control software should maintain code clarity and readability to enable quick problem identification and resolution in emergency situations."
    },
    {
        "id": 1280,
        "class": "Task Timing Criteria",
        "safety_criterion": "The fundamental way to improve program efficiency lies in choosing good design methods, data structures, and algorithms—not by adjusting program statements during coding.",
        "document_name": "1.json",
        "document_chunk_index": 193,
        "hopy_requirement": "Flight control software should adopt efficient data structures and algorithms to ensure real-time processing of flight data and control commands under high load conditions."
    },
    {
        "id": 1281,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Relative paths, rather than absolute paths, shall be used when referencing header files.",
        "document_name": "5.json",
        "document_chunk_index": 131,
        "hopy_requirement": "During software development, all modules shall reference header files using relative paths to ensure code portability across different development environments and platforms."
    },
    {
        "id": 1282,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The use of global variables is discouraged. If required, careful analysis must be performed to clarify their meaning, function, value range, and relationships with other variables.",
        "document_name": "4.json",
        "document_chunk_index": 232,
        "hopy_requirement": "Flight control software shall avoid the use of global variables. If necessary, their meaning, function, value range, and relationships with other variables must be clearly defined in the design documentation."
    },
    {
        "id": 1283,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Variables must be initialized before use; using uninitialized variables is strictly prohibited.",
        "document_name": "1.json",
        "document_chunk_index": 293,
        "hopy_requirement": "Flight control software must initialize all critical variables during the initialization phase to ensure that uninitialized variables are never used under any circumstances."
    },
    {
        "id": 1284,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Data types on both sides of an assignment operation should match to prevent loss of precision.",
        "document_name": "4.json",
        "document_chunk_index": 240,
        "hopy_requirement": "Flight control software shall ensure data type matching in all assignment operations involving flight parameters to prevent control errors due to loss of precision."
    },
    {
        "id": 1285,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Data validity should be checked when performing mathematical operations.",
        "document_name": "2.json",
        "document_chunk_index": 292,
        "hopy_requirement": "The system shall be capable of real-time monitoring and validation of data validity in flight control algorithms to ensure accuracy of computational results."
    },
    {
        "id": 1286,
        "class": "Processing Logic Criteria",
        "safety_criterion": "After memory allocation via malloc or new, or after calling functions such as fgets, the pointer value should be immediately checked for NULL to prevent usage of a NULL pointer.",
        "document_name": "1.json",
        "document_chunk_index": 245,
        "hopy_requirement": "After memory allocation, the flight control system shall immediately check whether the pointer is NULL to ensure successful memory allocation before proceeding with data processing."
    },
    {
        "id": 1287,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Initialization of arrays and dynamically allocated memory must not be forgotten. Using uninitialized memory as a right-hand operand shall be prevented.",
        "document_name": "5.json",
        "document_chunk_index": 138,
        "hopy_requirement": "Flight control software shall ensure that all dynamically allocated memory and arrays are initialized before use to prevent flight control errors caused by uninitialized data."
    },
    {
        "id": 1288,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Memory allocation and release must be paired to prevent memory leaks.",
        "document_name": "2.json",
        "document_chunk_index": 98,
        "hopy_requirement": "The flight control system shall ensure that dynamically allocated memory during task execution is promptly released to prevent system performance degradation or failure due to memory leaks."
    },
    {
        "id": 1289,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Array or pointer index overruns must be avoided, especially off-by-one errors.",
        "document_name": "5.json",
        "document_chunk_index": 243,
        "hopy_requirement": "The flight control system shall ensure that all array and pointer operations remain within valid bounds to prevent system anomalies caused by index overruns."
    },
    {
        "id": 1290,
        "class": "Processing Logic Criteria",
        "safety_criterion": "After freeing memory with free or delete, the pointer shall be immediately set to NULL to prevent 'dangling pointers'.",
        "document_name": "1.json",
        "document_chunk_index": 103,
        "hopy_requirement": "After releasing memory, flight control software shall immediately set the associated pointer to NULL to prevent system anomalies caused by dangling pointers."
    },
    {
        "id": 1291,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Pay attention to prevent buffer overflow caused by data copying and format string operations.",
        "document_name": "5.json",
        "document_chunk_index": 174,
        "hopy_requirement": "The system shall ensure boundary checks on all buffer and string operations during data transmission and processing to prevent overflow."
    },
    {
        "id": 1292,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Do not use pointers to pointers.",
        "document_name": "5.json",
        "document_chunk_index": 260,
        "hopy_requirement": "Flight control software shall avoid using pointers to pointers to prevent memory management errors and potential security vulnerabilities."
    },
    {
        "id": 1293,
        "class": "Control Calculation Criteria",
        "safety_criterion": "For memory allocation in class constructors, pay attention to the following: ① If object copies appear in other functions, a copy constructor should be provided. ② If there are direct or indirect assignment operations between two objects in other functions, the '=' operator should be overloaded. ③ In the overloaded '=' operation, it must check whether the two objects are the same object. ④ The memory allocation method in the constructor and the deallocation method in the destructor should match.",
        "document_name": "4.json",
        "document_chunk_index": 143,
        "hopy_requirement": "Flight control software shall ensure correct memory management during object copying and assignment operations to prevent memory leaks and double freeing."
    },
    {
        "id": 1294,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Boolean variables shall not be directly compared with TRUE, FALSE, or 1, 0. According to Boolean semantics, zero represents 'false' (FALSE), and any non-zero value is considered 'true' (TRUE). However, the actual value of TRUE is not standardized across platforms. For example, Visual C++ defines TRUE as 1, while Visual Basic uses -1.",
        "document_name": "5.json",
        "document_chunk_index": 96,
        "hopy_requirement": "Flight control software shall avoid directly comparing Boolean variables with TRUE, FALSE, or numeric values to ensure logical consistency across different compilers and environments."
    },
    {
        "id": 1295,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Integer variables shall be directly compared with 0 using '==' or '!='.",
        "document_name": "4.json",
        "document_chunk_index": 216,
        "hopy_requirement": "Flight control systems shall ensure that all integer variable status flags (e.g., flight mode, fault flags) are directly compared with 0 to guarantee accurate state evaluation."
    },
    {
        "id": 1296,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Floating-point variables shall not be compared with any number using '==' or '!='.",
        "document_name": "4.json",
        "document_chunk_index": 88,
        "hopy_requirement": "Flight control software shall avoid exact comparisons of floating-point variables to prevent control errors due to floating-point arithmetic inaccuracies."
    },
    {
        "id": 1297,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Pointer variables shall be compared with NULL using '==' or '!='.",
        "document_name": "4.json",
        "document_chunk_index": 182,
        "hopy_requirement": "Flight control software shall ensure that pointer variables are checked against NULL before being used in critical operations to prevent null pointer dereference and system failure."
    },
    {
        "id": 1298,
        "class": "Processing Logic Criteria",
        "safety_criterion": "In conditional statements, no computation or assignment to other variables shall be performed.",
        "document_name": "4.json",
        "document_chunk_index": 189,
        "hopy_requirement": "Conditional statements in flight control software shall only be used for logical evaluation and shall not perform computations or assignments to other variables within the condition."
    },
    {
        "id": 1299,
        "class": "Processing Logic Criteria",
        "safety_criterion": "For code with only an if branch and no else branch, verify whether the else branch is truly unnecessary. This is especially important when the if branch involves assignment of a Boolean variable.",
        "document_name": "1.json",
        "document_chunk_index": 170,
        "hopy_requirement": "Flight control systems shall ensure that Boolean variables controlling critical commands are properly managed under all possible flight conditions to avoid system failure due to unhandled cases."
    },
    {
        "id": 1300,
        "class": "Processing Logic Criteria",
        "safety_criterion": "When using an if...else if...else if structure, do not forget to include an else branch for handling exceptional cases.",
        "document_name": "3.json",
        "document_chunk_index": 195,
        "hopy_requirement": "Flight control software shall ensure that all flight mode transitions have default exception handling mechanisms to prevent undefined states."
    },
    {
        "id": 1301,
        "class": "State Scenario Criteria",
        "safety_criterion": "All branches of an if statement should cover the entire value range of the decision variable, and overlapping ranges between branches should be avoided.",
        "document_name": "5.json",
        "document_chunk_index": 273,
        "hopy_requirement": "Flight control software shall ensure that all flight mode transition conditions logically cover all possible flight states without overlap to prevent undefined behavior."
    },
    {
        "id": 1302,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Decision variables in if statements should be checked for use of constants, constant values, or global variables. If their use is necessary, they must be carefully reviewed for合理性 and controllability.",
        "document_name": "2.json",
        "document_chunk_index": 245,
        "hopy_requirement": "Flight control software shall ensure that all decision variables used in if statements are reasonable and controllable local variables, avoiding constants, constant values, or global variables to prevent potential logic errors."
    },
    {
        "id": 1303,
        "class": "State Scenario Criteria",
        "safety_criterion": "Each case statement must end with a break unless multiple cases intentionally fall through. A default branch must also be included.",
        "document_name": "5.json",
        "document_chunk_index": 252,
        "hopy_requirement": "Flight control software shall ensure that each case statement in flight mode transition logic ends with a break and includes a default branch to prevent unintended mode overlaps and ensure proper flight control."
    },
    {
        "id": 1304,
        "class": "State Scenario Criteria",
        "safety_criterion": "Ensure that no possible cases are missed and avoid unnecessary branches.",
        "document_name": "4.json",
        "document_chunk_index": 301,
        "hopy_requirement": "Flight control systems shall ensure that all possible flight mode transitions are covered without redundant paths."
    },
    {
        "id": 1305,
        "class": "Task Timing Criteria",
        "safety_criterion": "The loop entry condition must be satisfied at least once to ensure the loop body can execute.",
        "document_name": "4.json",
        "document_chunk_index": 110,
        "hopy_requirement": "Flight control software shall ensure that at least one complete initialization check is performed upon task startup to verify the correctness of all system parameters and states."
    },
    {
        "id": 1306,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Minimize the workload inside loops by moving unrelated code outside the loop body.",
        "document_name": "4.json",
        "document_chunk_index": 93,
        "hopy_requirement": "Flight control software shall optimize loop structures by executing calculations and data processing unrelated to the loop outside its body to improve system response speed and stability."
    },
    {
        "id": 1307,
        "class": "Task Timing Criteria",
        "safety_criterion": "Ensure that loop exit conditions can be met to guarantee termination and prevent infinite loops.",
        "document_name": "2.json",
        "document_chunk_index": 163,
        "hopy_requirement": "Flight control software shall ensure that navigation algorithm loops terminate correctly upon meeting predefined conditions to prevent system failure due to infinite looping."
    },
    {
        "id": 1308,
        "class": "Control Calculation Criteria",
        "safety_criterion": "In nested loops, place the loop with more iterations inside for better efficiency.",
        "document_name": "3.json",
        "document_chunk_index": 308,
        "hopy_requirement": "Flight control software shall optimize nested loops by placing the most frequently executed innermost loop to improve computational efficiency and responsiveness."
    },
    {
        "id": 1309,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid modifying loop counters within for loops to prevent loss of control.",
        "document_name": "3.json",
        "document_chunk_index": 283,
        "hopy_requirement": "Flight control software shall ensure that loop counters in mission-critical loops are not modified during execution to prevent logic failures."
    },
    {
        "id": 1310,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid function calls within loop conditions as they may degrade performance.",
        "document_name": "5.json",
        "document_chunk_index": 253,
        "hopy_requirement": "Flight control software shall avoid time-consuming function calls in critical control loops to ensure real-time performance."
    },
    {
        "id": 1311,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid using recursive function calls as much as possible because they reduce program readability. If necessary, check the exit conditions to prevent infinite loops.",
        "document_name": "4.json",
        "document_chunk_index": 278,
        "hopy_requirement": "Flight control software should avoid recursive function calls to ensure program readability and stability."
    },
    {
        "id": 1312,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Check the validity of all inputs (including all parameters and non-parameters) of a function.",
        "document_name": "1.json",
        "document_chunk_index": 233,
        "hopy_requirement": "The system should validate all flight control commands and sensor input data to ensure they are within predefined ranges."
    },
    {
        "id": 1313,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When a function has a return value, ensure that each exit point returns a value, and that the return value is assigned.",
        "document_name": "1.json",
        "document_chunk_index": 167,
        "hopy_requirement": "Flight control software should ensure that the execution result of each control command has an explicit return value to verify the correctness and integrity of the command execution."
    },
    {
        "id": 1314,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When calling a function, the error return value of the called function must be handled.",
        "document_name": "4.json",
        "document_chunk_index": 229,
        "hopy_requirement": "Flight control software must check and handle error return values when calling navigation algorithm functions to ensure the correctness and safety of navigation commands."
    },
    {
        "id": 1315,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Note that the sizeof function returns the byte size of the corresponding operand. Avoid using expressions, pointer types, type names, or array names as arguments of the sizeof function.",
        "document_name": "1.json",
        "document_chunk_index": 195,
        "hopy_requirement": "The system should ensure that all memory size calculations in flight control software use correct data types and variables, avoiding expressions, pointer types, type names, or array names as arguments of the sizeof function."
    },
    {
        "id": 1316,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When calling a function, ensure that the parameter type list matches the argument type list and that the number of parameters matches the number of arguments.",
        "document_name": "3.json",
        "document_chunk_index": 178,
        "hopy_requirement": "Flight control software must ensure that the types and number of input parameters match the function definition when calling navigation algorithm functions."
    },
    {
        "id": 1317,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid using pointer functions as they reduce program readability.",
        "document_name": "5.json",
        "document_chunk_index": 308,
        "hopy_requirement": "Flight control software should avoid pointer functions to ensure code readability and maintainability."
    },
    {
        "id": 1318,
        "class": "Data Criteria",
        "safety_criterion": "Data from external input functions needs validation, especially inputs from external file functions and human-machine interface functions.",
        "document_name": "5.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system should validate received ground control commands and flight data to ensure their source is legitimate and the data format is correct."
    },
    {
        "id": 1319,
        "class": "Data Criteria",
        "safety_criterion": "Data from communication interface functions needs validation. The message identifier, IP address, data boundary, and abnormal values should be checked according to the protocol.",
        "document_name": "5.json",
        "document_chunk_index": 226,
        "hopy_requirement": "The system should validate command data from the ground station, including command identifiers, sender IP addresses, data boundaries, and abnormal values, to ensure the integrity and legality of the commands."
    },
    {
        "id": 1320,
        "class": "Data Criteria",
        "safety_criterion": "Use global variables with caution; validate them when necessary.",
        "document_name": "2.json",
        "document_chunk_index": 157,
        "hopy_requirement": "The system should validate all flight control parameters obtained from global variables before use to ensure their validity."
    },
    {
        "id": 1321,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid or use with caution mixed operations of variables of different types.",
        "document_name": "5.json",
        "document_chunk_index": 201,
        "hopy_requirement": "Flight control software should avoid mixed operations of variables of different types to ensure the accuracy and reliability of calculation results."
    },
    {
        "id": 1322,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Avoid or use with caution variable shifting and & and | operations on Boolean variables.",
        "document_name": "3.json",
        "document_chunk_index": 147,
        "hopy_requirement": "Flight control software should avoid variable shifting and bitwise AND/OR operations on Boolean variables to ensure the stability and reliability of control logic."
    },
    {
        "id": 1323,
        "class": "Control Calculation Criteria",
        "safety_criterion": "The length of variable shifting exceeds the machine word length.",
        "document_name": "1.json",
        "document_chunk_index": 283,
        "hopy_requirement": "The system should ensure that variable shifting operations in flight control data processing do not exceed the processor's word length limit."
    },
    {
        "id": 1324,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Pay attention to non-negative and zero checks when calculating square roots, logarithms, etc.",
        "document_name": "5.json",
        "document_chunk_index": 276,
        "hopy_requirement": "The system should ensure that input data must be non-negative when calculating square roots or logarithms of flight trajectory parameters (e.g., altitude, speed)."
    },
    {
        "id": 1325,
        "class": "Control Calculation Criteria",
        "safety_criterion": "Pay attention to non-zero and non-near-zero checks for divisors during division operations. Taking square roots of negative numbers.",
        "document_name": "1.json",
        "document_chunk_index": 286,
        "hopy_requirement": "The flight control system should ensure that the divisor in navigation calculations is neither zero nor close to zero to prevent calculation errors that could lead to flight anomalies."
    },
    {
        "id": 1326,
        "class": "Control Calculation Criteria",
        "safety_criterion": "When using macro expressions for calculations, pay attention to the use of necessary parentheses.",
        "document_name": "2.json",
        "document_chunk_index": 97,
        "hopy_requirement": "The system should ensure that macro-defined calculation formulas are used in flight trajectory and attitude control parameter calculations, and parentheses are correctly used to guarantee precedence and accuracy."
    },
    {
        "id": 1327,
        "class": "Task Timing Criteria",
        "safety_criterion": "When shared data is required, ensure the method modifying this data is protected; common methods include protecting object mutable fields with object locks, placing field access within synchronized methods or blocks, and requiring acquisition of the object lock before entering a synchronized area.",
        "document_name": "2.json",
        "document_chunk_index": 298,
        "hopy_requirement": "In a multi-task environment, the flight control system should ensure synchronized access to shared flight data to prevent data races and inconsistencies."
    },
    {
        "id": 1328,
        "class": "Task Timing Criteria",
        "safety_criterion": "Avoid potential deadlocks.",
        "document_name": "5.json",
        "document_chunk_index": 306,
        "hopy_requirement": "The system should ensure that resource allocation between tasks does not result in deadlocks, especially during the execution of critical tasks."
    },
    {
        "id": 1329,
        "class": "Task Timing Criteria",
        "safety_criterion": "Avoid situations where locks are not released or forgotten to be released.",
        "document_name": "4.json",
        "document_chunk_index": 301,
        "hopy_requirement": "The flight control system should ensure that all locked control surfaces and actuators can be promptly unlocked or reset during task switching or exceptional conditions."
    },
    {
        "id": 1330,
        "class": "Task Timing Criteria",
        "safety_criterion": "Interrupt enable should first allocate resources required by the interrupt handler function.",
        "document_name": "1.json",
        "document_chunk_index": 131,
        "hopy_requirement": "The system should ensure that necessary resources are allocated and locked before enabling interrupts to guarantee the reliability and safety of interrupt handling."
    },
    {
        "id": 1331,
        "class": "Task Timing Criteria",
        "safety_criterion": "Strictly follow the sequence of 'block -> disable interrupts -> initialize -> enable interrupts -> enable'.",
        "document_name": "4.json",
        "document_chunk_index": 295,
        "hopy_requirement": "The flight control system should strictly follow the sequence of 'block -> disable interrupts -> initialize -> enable interrupts -> enable' when performing critical operations to ensure system stability and safety."
    },
    {
        "id": 1332,
        "class": "Task Timing Criteria",
        "safety_criterion": "Avoid excessive levels of interrupt nesting.",
        "document_name": "4.json",
        "document_chunk_index": 153,
        "hopy_requirement": "The flight control system should limit the number of interrupt nesting levels to ensure the real-time performance and reliability of critical tasks."
    },
    {
        "id": 1333,
        "class": "Processing Logic Criteria",
        "safety_criterion": "Avoid situations where locks are not released or forgotten to be released.",
        "document_name": "4.json",
        "document_chunk_index": 119,
        "hopy_requirement": "The system should ensure that all flight control locks and data synchronization locks can be released in a timely manner during task switching or in case of exceptions."
    }
]