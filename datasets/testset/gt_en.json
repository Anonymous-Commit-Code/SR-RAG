[
    {
        "id": 1,
        "requirement": "Determine which flight phase should be entered based on the aircraft's current motion information such as flight altitude and status.",
        "original_safety_criterions": [
            "Does the timing of control state output meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "Before issuing dangerous control commands or actions, the system should verify the reasonableness of motion data such as aircraft flight altitude and status, and perform secondary logic validation based on real-time data.",
            "When determining the flight phase based on real-time flight altitude and status information, the system should simultaneously validate the strict alignment between the control state output timing and the current scenario.",
            "After switching flight phases, the system should enforce dynamic compliance checks on flight altitude thresholds and status parameter ranges to ensure continuity in control command output."
        ]
    },
    {
        "id": 2,
        "requirement": "When flight altitude is greater than 150m, landing gear compression signal is false, and flight phase is no more than descent phase, perform phase transition according to DH value if all three conditions are met simultaneously.",
        "original_safety_criterions": [
            "There is no transfer relationship between two or more states. Check entry conditions for these states and analyze correctness of state execution under conditions such as 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Check transition conditions between every pair of states in software state space, and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "One state has transition relationships with multiple other states. Check transition conditions for one state transitioning to multiple states and for multiple states transitioning to the same state, and analyze correctness of state transitions when multiple transition conditions are simultaneously satisfied.",
            "Check state entry conditions and analyze correctness of state execution under conditions such as 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "The system should check whether the three conditions—flight altitude > 150m, landing gear compression signal being false, and flight phase ≤ descent—are correctly set before performing phase transitions based on DH values, ensuring accuracy of phase transitions.",
            "If the three conditions (flight altitude > 150m, landing gear compression signal being false, and flight phase ≤ descent) are simultaneously satisfied, the system should verify the priority of multi-state transition conditions to ensure only phase transitions defined by DH values are executed.",
            "During state execution, the system should continuously monitor changes in the three conditions (flight altitude > 150m, landing gear compression signal being false, flight phase ≤ descent). If the conditions change from satisfied to unsatisfied or vice versa, phase transition should be immediately terminated or re-triggered.",
            "The system should verify mutual exclusivity among entry conditions of unrelated states. When flight altitude > 150m, landing gear compression signal being false, and flight phase ≤ descent are simultaneously satisfied along with other state conditions, phase transitions not defined by DH values should be prohibited."
        ]
    },
    {
        "id": 3,
        "requirement": "When DH > 10m, transition to descent phase, reset the airspeed control integrator, and set softening time limit to 2 seconds.",
        "original_safety_criterions": [
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Is redundancy switching time adequately handled by the software?",
            "Does the timing of control state output meet scenario requirements?",
            "Does the duration of output states meet constraint requirements?",
            "For critical controls or actions, is there a timeout detection mechanism to handle situations where hardware status fails to meet control requirements over an extended period?"
        ],
        "safety_requirements": [
            "When transitioning to descent phase due to DH > 10m, the system should ensure redundancy switching time meets requirements and properly execute resetting the airspeed control integrator and setting softening time limit to 2 seconds.",
            "After transitioning to descent phase, the system should implement timeout detection for resetting the airspeed control integrator and setting softening time limit. If hardware status remains unmet for an extended period, a safety handling mechanism should be triggered.",
            "The system should verify that the softening time limit strictly complies with the 2-second requirement after transitioning to descent phase due to DH > 10m, and issue an alert if timeout or non-compliance occurs.",
            "The system should verify whether the timing of transitioning to descent phase and outputting control states aligns with scenario requirements, and record any abnormal timing events.",
            "The system should conduct completeness checks on state transition conditions to ensure correct execution of transitioning to descent phase when DH > 10m, even under abnormal conditions such as 'not set', 'always satisfied', or 'never satisfied'."
        ]
    },
    {
        "id": 4,
        "requirement": "When DH < -10m, transition to climb phase 2, reset the airspeed control integrator, and set softening time limit to 2 seconds.",
        "original_safety_criterions": [
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Is there fault handling based on wrap-around detection? Is the state reporting strategy reasonable during faults?",
            "Different states and operational phases involve different functional control calculation processes. Check function inputs and analyze correctness of function handling when 'operational phase not considered' or 'operational state not considered'.",
            "Does the timing of control state output meet scenario requirements?",
            "For critical controls or actions, is there a timeout detection mechanism to handle situations where hardware status fails to meet control requirements over an extended period?"
        ],
        "safety_requirements": [
            "The system should check the trigger condition DH < -10m during state transition to ensure correctness of transitioning to climb phase 2 under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "When transitioning to climb phase 2 (DH < -10m), the system should implement fault handling mechanisms based on wrap-around detection and define state reporting strategies for resetting the airspeed control integrator and setting softening time limit to 2 seconds.",
            "The system should verify function inputs when transitioning to climb phase 2 (DH < -10m) to ensure logical correctness when 'operational phase not considered' or 'operational state not considered'.",
            "When transitioning to climb phase 2 (DH < -10m), the system should implement timeout detection mechanisms for resetting the airspeed control integrator and setting softening time limit to handle situations where hardware status remains unmet for an extended period.",
            "The system should verify whether the timing of transitioning to climb phase 2 (DH < -10m) and executing operations such as resetting the airspeed control integrator and setting softening time limit meets scenario requirements."
        ]
    },
    {
        "id": 5,
        "requirement": "When -10m ≤ DH ≤ 10m, transition to level flight phase, reset the altitude hold control integrator, and set softening time limit to 2 seconds.",
        "original_safety_criterions": [
            "Different states and operational phases involve different functional control calculation processes. Check function inputs and analyze correctness of function handling when 'operational phase not considered' or 'operational state not considered'.",
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "For states with transfer relationships and prioritized functions, check and analyze correctness of state and function handling when 'high priority switches to low priority' or 'low priority switches to high priority'.",
            "Check state entry conditions and analyze correctness of state execution when entry conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "When transitioning to level flight phase (-10m ≤ DH ≤ 10m), the system should check state transition logic between high-priority and low-priority states to ensure correct execution of resetting the altitude hold control integrator and setting softening time limit to 2 seconds.",
            "During level flight phase execution, the system should check state entry conditions (DH satisfied, not satisfied, or satisfied again) to ensure timeliness and accuracy of state transitions and integrator reset operations.",
            "The system should verify completeness of state transition condition settings when -10m ≤ DH ≤ 10m to prevent abnormal state transitions caused by conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "During level flight phase control calculations, the system should check the correlation between current operational phase and state to ensure strict matching between integrator reset and softening time limit settings and the operating phase."
        ]
    },
    {
        "id": 6,
        "requirement": "When flight altitude is less than or equal to 150m, perform phase transition processing based on current phase flag and aircraft's flight altitude, airspeed, and other status information.",
        "original_safety_criterions": [
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "One state has transfer relationships with multiple other states. Check conditions for one state transitioning to multiple states and multiple states transitioning to one state, and analyze correctness of state transitions when multiple transition conditions are simultaneously satisfied.",
            "Check state entry conditions and analyze correctness of state execution when entry conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "When flight altitude is less than or equal to 150m, the system should check transfer relationships between one state and other states to ensure accurate phase transition processing when multiple transition conditions are simultaneously satisfied, consistent with current flight altitude, airspeed, and phase flag.",
            "When flight altitude is less than or equal to 150m, the system should check phase transition conditions to ensure logical correctness of phase transition processing when entry conditions change (e.g., satisfied, not satisfied, satisfied again).",
            "The system should check transition condition settings between every pair of states in flight state space to ensure phase transition processing aligns strictly with current status information under abnormal conditions such as 'not set', 'always satisfied', or 'never satisfied' when flight altitude is less than or equal to 150m."
        ]
    },
    {
        "id": 7,
        "requirement": "In non-remote control mode phase transition processing, a series of phase transitions may occur until reaching a flight phase suitable for the current state.",
        "original_safety_criterions": [
            "When operational state transfers occur, check the values of functional interface data and analyze output correctness under conditions such as 'value changes' or 'value range changes'.",
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Two or more states with transfer relationships share the same function. Check function execution before and after state transition and analyze correctness of function handling when the function 'starts execution', 'continues execution', or 'interrupts execution' after state transition.",
            "Different states and operational phases involve different functional control calculation processes. Check function inputs and analyze correctness of function handling when 'operational phase not considered' or 'operational state not considered'.",
            "Are there potential abnormal paths between non-migratable operational modes that could lead to unintended state migration between non-migratable modes?"
        ],
        "safety_requirements": [
            "During non-remote control mode phase transition processing, the system should check for abnormal migration paths between non-migratable operational modes and ensure such migrations are prohibited.",
            "During non-remote control mode phase transition, the system should validate function inputs to ensure control calculation processes correctly cover current operational phase and state, avoiding function handling without considering relevant factors.",
            "After non-remote control mode phase transition, the system should check function execution states (start, continue, interrupt) to ensure they comply with post-transition logic requirements.",
            "During non-remote control mode phase transition processing, the system should check for changes in function interface data values or ranges to ensure output correctness.",
            "The system should verify state transition conditions during non-remote control mode phase transition processing to ensure transition conditions are correctly configured without abnormal scenarios such as 'not set', 'always satisfied', or 'never satisfied'."
        ]
    },
    {
        "id": 8,
        "requirement": "When the aircraft has already entered the glide phase, perform phase transition processing based on current flight status.",
        "original_safety_criterions": [
            "Is there fault handling based on wrap-around detection? Is the state reporting strategy reasonable during faults?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "When transitioning states during aircraft glide phase, the system should implement fault handling based on wrap-around detection to ensure effectiveness and rationality of fault state reporting strategies.",
            "Before issuing control commands or actions related to phase transition, the system should perform real-time reasonableness checks based on current equipment status to avoid invalid or conflicting operations.",
            "During flight phase transition processing, the system should perform dual verification of equipment status parameters to ensure strict alignment between control commands and current flight status.",
            "The system should record all fault events and handling results during phase transition and support audit interfaces to verify compliance of state reporting strategies."
        ]
    },
    {
        "id": 9,
        "requirement": "If flight altitude is higher than decision height (40m), control the aircraft to enter go-around procedure.",
        "original_safety_criterions": [
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "Check operational states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When redundancy operational states are inconsistent (two or more redundancies in different states), the system should ensure correct decision-making logic for go-around control and trigger a redundancy state anomaly alarm mechanism.",
            "Before issuing go-around control commands, the system must compare real-time flight altitude data with decision height (40m) to verify judgment reasonableness before execution.",
            "The system should perform multi-redundancy validation of flight altitude sensor data to ensure integrity and consistency of decision data for entering go-around procedure.",
            "When detecting abnormal logic judgments between flight altitude and decision height, the system should immediately freeze control command outputs and initiate fault diagnosis procedures."
        ]
    },
    {
        "id": 10,
        "requirement": "If flight altitude is less than or equal to decision height, perform phase transition processing based on current phase flag and flight altitude.",
        "original_safety_criterions": [
            "Two or more states with transfer relationships share the same function. Check function execution before and after state transition and analyze correctness of function handling when the function 'starts execution', 'continues execution', or 'interrupts execution' after state transition.",
            "Check transition conditions between every pair of states in the software state space and analyze correctness of state transitions when transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Check state entry conditions and analyze correctness of state execution when entry conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "The system should check flight altitude entry conditions to ensure correctness of phase transition processing under conditions such as 'satisfied', 'not satisfied', or 'satisfied again', maintaining alignment with current phase flag and flight altitude.",
            "The system should check flight state transition conditions (not set, always satisfied, never satisfied) to ensure logical correctness of phase transition processing when flight altitude is less than or equal to decision height.",
            "After state transition, the system should check execution status of flight altitude to ensure correctness of function handling when functions 'start execution', 'continue execution', or 'interrupt execution'.",
            "The system should verify the logic comparison between flight altitude and decision height during phase transition processing to prevent unintended state transitions caused by data errors."
        ]
    },
    {
        "id": 11,
        "requirement": "Record the old values of the specified attitude angles (roll, yaw, and pitch) before switching as the softening starting point.",
        "original_safety_criterions": [
            "When a working state transfer occurs, check the values of functional interface data and analyze output correctness under scenarios such as 'value changes or value range changes'.",
            "If redundancy switching takes too long, does the software handle it correctly?",
            "Check equivalence classes of interface data and analyze output correctness when data values switch between different output equivalence classes.",
            "Check equivalence classes of interface data and analyze output correctness when interface data values switch between different equivalence classes.",
            "When a working state transfer occurs, check the values of functional interface data and analyze output correctness under scenarios such as 'value remains unchanged'."
        ],
        "safety_requirements": [
            "The system shall verify output correctness of interface data when the attitude angles (roll, yaw, and pitch) switch between different equivalence classes.",
            "The system shall check for changes or range variations in the specified attitude angles (roll, yaw, and pitch) during working state transitions to ensure correct output.",
            "The system shall validate accurate recording and handling of previous attitude angle values before switching as the softening starting point if redundancy switching takes too long.",
            "The system shall perform output correctness checks for scenarios where the specified attitude angles (roll, yaw, and pitch) remain unchanged during working state transitions.",
            "The system shall protect the integrity of previous attitude angle values before switching to ensure the softening starting point data is not tampered with or lost."
        ]
    },
    {
        "id": 12,
        "requirement": "When switching with remote control modes without internal loops, record the previous rudder deflection command value before switching as the softening starting point.",
        "original_safety_criterions": [
            "Check equivalence classes of interface data and analyze output correctness when interface data values switch between different equivalence classes.",
            "Does the output loop have a detection mechanism to monitor loop status without affecting normal output?",
            "Check equivalence classes of interface data and analyze output correctness when data values switch between different output equivalence classes."
        ],
        "safety_requirements": [
            "The system shall activate an output loop detection mechanism during switching with remote control modes without internal loops to ensure accuracy of the recorded rudder deflection command value used as the softening starting point, without affecting normal output.",
            "The system shall perform real-time equivalence class checks on interface data during switching with remote control modes without internal loops to ensure output correctness during equivalence class transitions and validate the effectiveness of the recorded rudder deflection command value.",
            "The system shall dynamically analyze data value changes between output equivalence classes during switching with remote control modes without internal loops to ensure completeness of the recorded rudder deflection command value and smooth transition of commands after switching.",
            "The system shall ensure that the recorded rudder deflection command value remains immutable during mode switching and incorporates data integrity verification mechanisms."
        ]
    },
    {
        "id": 13,
        "requirement": "When switching with remote control modes that include internal loops, record the old values of the specified attitude angles (roll, yaw, and pitch) before switching as the softening starting point.",
        "original_safety_criterions": [
            "Check the transition conditions between pairwise states in the software state space and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "Two or more states with transition relationships share the same function; check the execution of the function before and after state transitions and analyze the correctness of function handling when the function 'starts executing, continues executing, or stops executing' after the state transition.",
            "Check equivalence classes of interface data and analyze output correctness when data values switch between different output equivalence classes.",
            "Check equivalence classes of interface data and analyze output correctness when interface data values switch between different equivalence classes.",
            "When a working state transfer occurs, check the values of functional interface data and analyze output correctness under scenarios such as 'value remains unchanged'."
        ],
        "safety_requirements": [
            "During switching with remote control modes that include internal loops, the system shall check interface data equivalence class transitions to ensure correctness of the recorded attitude angle (roll, yaw, pitch) old values and verify the accuracy of the softening starting point data output.",
            "During switching with remote control modes that include internal loops, the system shall check state transition conditions ('not set', 'always satisfied', 'never satisfied') to ensure correct state transition logic and integrity of recorded attitude angle old values.",
            "During switching with remote control modes that include internal loops, the system must check the processing logic after state transitions ('start execution', 'continue execution', 'interrupt execution') to ensure the validity of attitude angle old values as softening starting points.",
            "During switching with remote control modes that include internal loops, the system shall perform real-time validation of output equivalence class transitions to ensure consistency between recorded attitude angle old values and the softening starting point.",
            "During switching with remote control modes that include internal loops, the system shall check functional interface data values ('unchanged') to ensure accurate recording of attitude angle old values and correct output after switching."
        ]
    },
    {
        "id": 14,
        "requirement": "When switching between remote control modes with and without internal loops, record the old rudder deflection command value before switching as the softening starting point.",
        "original_safety_criterions": [
            "Check equivalence classes of interface data and analyze output correctness when interface data values switch between different equivalence classes.",
            "If redundancy switching takes too long, does the software handle it correctly?",
            "Does the output loop have a detection mechanism to monitor loop status without affecting normal output?"
        ],
        "safety_requirements": [
            "During switching between remote control modes with and without internal loops, the system shall have a real-time detection mechanism to ensure loop status monitoring does not affect normal output and records the previous rudder deflection command value as the softening starting point.",
            "The system shall ensure that the redundancy switching time between remote control modes with and without internal loops meets requirements and maintains the previous rudder deflection command value in case of timeout while triggering exception handling mechanisms.",
            "During mode switching, the system shall perform equivalence class checks on rudder deflection command interface data to verify switching logic across different value ranges and ensure output correctness and continuity."
        ]
    },
    {
        "id": 15,
        "requirement": "When a phase transition or a control mode switch related to remote control occurs, record the throttle deflection command value before the transition as the softening starting point.",
        "original_safety_criterions": [
            "When a working state transfer occurs, check the values of functional interface data and analyze output correctness under scenarios such as 'value remains unchanged'.",
            "Check the working states of different redundancies and analyze the correctness of functionality implementation when 'two or more redundancies are in different states'.",
            "When a working state transfer occurs, check the values of functional interface data and analyze output correctness under scenarios such as 'value changes or value range changes'.",
            "Check equivalence classes of interface data and analyze output correctness when data values switch between different output equivalence classes."
        ],
        "safety_requirements": [
            "During phase transitions or control mode switches related to remote control, the system shall check the working states of different redundancies to ensure correct recording of the throttle deflection command value before the transition as the softening starting point, even when 'two or more redundancies are in different states'.",
            "During working state transfers, the system shall check the values of functional interface data to ensure that during phase transitions or control mode switches, if 'values remain unchanged', the recorded throttle deflection command values are accurate and valid.",
            "During phase transitions or control mode switches, the system shall verify any changes or range variations in the functional interface data values to ensure the recorded throttle deflection command logic aligns with the current state.",
            "During interface data equivalence class transitions, the system shall verify the process of recording throttle deflection command values to ensure correctness when data crosses different output equivalence classes and isolate errors in abnormal situations."
        ]
    },
    {
        "id": 16,
        "requirement": "FCC collects necessary aircraft motion information, compares it with required motion parameters, calculates the deviation between actual and ideal motion, then resolves control laws based on this deviation to generate control signals. These signals are sent to relevant actuators to deflect control surfaces according to specific rules, thereby controlling aircraft attitude and motion.",
        "original_safety_criterions": [
            "Check discrete output data values from different redundancies and analyze functionality correctness when two or more redundancies produce 'inconsistent outputs'.",
            "Check the operating states of different redundancies and analyze functionality correctness when 'two or more redundancies are in different states'.",
            "Check logical judgment conditions and branches of functions and analyze functionality correctness under conditions such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'."
        ],
        "safety_requirements": [
            "During aircraft motion information acquisition, deviation comparison, control law resolution, and signal generation by FCC, the system shall check logical judgment conditions and branches to ensure correct function handling when conditions such as 'logic always false, always true, incorrect condition, or missing branch' occur.",
            "The system shall perform consistency checks on discrete output data from different redundancies to ensure that when outputs are inconsistent, the motion information collected by FCC and resolved control signals still maintain correct functionality.",
            "The system shall monitor the operating states of different redundancies to ensure that when 'two or more redundancies are in different states', the functions of collecting motion information, resolving control laws, and generating control signals by FCC execute correctly.",
            "Before sending control signals to actuators, the system shall perform redundancy verification on the results of control law resolution to ensure that control surface deflection logic aligns with current flight attitude and motion control objectives."
        ]
    },
    {
        "id": 17,
        "requirement": "When the aircraft is in ground waiting phase, elevator deflection command, aileron deflection command, and rudder deflection command shall all be set to 0°.",
        "original_safety_criterions": [
            "Check transition conditions between pairwise states in software state space and analyze state transition correctness under conditions such as 'not set, always satisfied, never satisfied'.",
            "For states with no transition relationship, check their entry conditions and analyze state execution correctness under conditions such as 'simultaneously satisfied, satisfied during execution'.",
            "Check state entry conditions and analyze state execution correctness under conditions such as 'satisfied, unsatisfied, satisfied again' during execution."
        ],
        "safety_requirements": [
            "During software state transitions, the system shall check the validity of transition condition settings to ensure elevator, aileron, and rudder deflection commands are correctly set to 0° when ground waiting phase is activated, and that state transition logic remains normal under conditions like 'not set, always satisfied, never satisfied'.",
            "When state entry conditions change (satisfied, unsatisfied, or satisfied again) during ground waiting phase, the system shall verify the correctness of state execution logic to ensure all control surface deflection commands remain at 0° continuously.",
            "The system shall check entry conditions of states without transition relationships (simultaneously satisfied or satisfied during execution) to ensure stability of elevator, aileron, and rudder deflection commands being forced to 0° during activation of ground waiting phase.",
            "The system shall continuously monitor the activation status of ground waiting phase and immediately terminate zero-deflection commands and trigger state transition verification mechanisms upon detecting exit conditions."
        ]
    },
    {
        "id": 18,
        "requirement": "The system shall be capable of real-time acquisition and processing of aircraft motion information, including but not limited to position, velocity, attitude, and other data.",
        "original_safety_criterions": [
            "In cases of abnormal external factors (e.g., high sea states, severe weather), has the software performed corresponding judgment and handling?",
            "Check the operating states of different redundancies and analyze functionality correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall check the operating states of different redundancies to ensure that real-time acquisition and processing of aircraft motion information (position, velocity, attitude, etc.) functions correctly when 'two or more redundancies are in different states'.",
            "Under abnormal external conditions (e.g., high sea states, severe weather), the system shall continue to acquire and process aircraft motion information (position, velocity, attitude, etc.) in real-time and trigger corresponding abnormality detection and handling mechanisms.",
            "The system shall perform data integrity checks on real-time acquired aircraft motion information (position, velocity, attitude, etc.) to ensure accuracy of processed results.",
            "The system shall activate redundancy mechanisms or fault-tolerant strategies when redundancy operation states or external environments become abnormal to maintain continuity and reliability of motion information processing functions."
        ]
    },
    {
        "id": 19,
        "requirement": "The system shall adjust control strategies and parameters according to different flight phases to ensure aircraft stability and safety throughout all phases.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware? Are control conditions complete and consistent?",
            "Different flight phases and states involve different control calculation processes; check function inputs and analyze functionality correctness when 'flight phase or state is not considered'.",
            "Check the operating states of different redundancies and analyze functionality correctness when 'two or more redundancies are in different states'.",
            "Does the timing of issuing control states meet scenario requirements?",
            "When dangerous control commands or actions are issued, is there a reasonableness judgment based on equipment status?"
        ],
        "safety_requirements": [
            "The system shall ensure that control strategy sequence and timing are strictly coordinated with flight phases, and that control conditions are complete and internally consistent to guarantee stability and safety throughout all flight phases.",
            "Before issuing dangerous control commands or actions, the system must perform reasonableness judgments based on current flight phase status to prevent unintended operations.",
            "When two or more redundancies are in different operating states, the system shall check and ensure the correctness of control parameter and strategy adjustments to adapt to safety requirements across all flight phases.",
            "The system shall verify whether the trigger timing of output control states meets the timing and logic requirements of the corresponding flight phase.",
            "During control calculations, the system shall strictly check function inputs to ensure correct handling and maintenance of safety even when 'flight phase' or 'flight state' is not considered."
        ]
    },
    {
        "id": 20,
        "requirement": "Longitudinal control law: δz = KJ (J-Jg) + Kwz · wz",
        "original_safety_criterions": [
            "Check the control calculation results of the function and analyze the correctness of function handling when the result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall perform real-time checks on the calculation results of the longitudinal control law δz = KJ (J-Jg) + Kwz · wz, covering scenarios such as normal values, abnormal values, boundary values, and extreme values to ensure the correctness of computation logic.",
            "The system shall trigger real-time warning mechanisms and execute predefined fault protection strategies when the longitudinal control law calculation results exceed preset ranges or show abnormal values."
        ]
    },
    {
        "id": 21,
        "requirement": "Lateral control law: δx = KY . (Y - Yg)",
        "original_safety_criterions": [
            "The functional control computation process varies under different states and operational phases. Check the function inputs and analyze whether the function handles correctly in cases such as 'operational phase not considered' or 'state not considered'.",
            "Check the results of functional control computation and analyze whether the function handles correctly when the control computation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "Verify whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of each function point are correct.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'."
        ],
        "safety_requirements": [
            "The system shall verify the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between the lateral control law (δx = KY . (Y - Yg)) and the control logic of each function point to ensure correctness.",
            "In different operational phases and states, the system shall check the function input to ensure that the lateral control law considers current operational phase and state parameters (such as Y, Yg) correctly.",
            "When multiple redundancies are in different states, the system shall check the computational logic of the lateral control law (δx = KY . (Y - Yg)) to ensure correct function implementation.",
            "The system shall perform real-time checks on the computation results of the lateral control law (δx = KY . (Y - Yg)) to ensure correct handling in situations such as normal values, abnormal values, boundary values, and extreme values."
        ]
    },
    {
        "id": 22,
        "requirement": "Lateral control law: δy = KyY . (Y - Yg) + Kywy . wy",
        "original_safety_criterions": [
            "The functional control computation process varies under different states and operational phases. Check the function inputs and analyze whether the function handles correctly in cases such as 'operational phase not considered' or 'state not considered'.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'.",
            "Check the results of functional control computation and analyze whether the function handles correctly when the control computation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "Verify whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of each function point are correct."
        ],
        "safety_requirements": [
            "The system shall verify the correctness of the temporal relationship, constraint relationship, concurrency relationship, and combination relationship of the lateral control law (δy = KyY*(Y - Yg) + Kywy*wy).",
            "During different operational phases and states, the system shall check the function inputs to ensure that the lateral control law has taken into account the operational phase and state, avoiding errors caused by 'not considering' them.",
            "The system shall validate the computation results of the lateral control law (normal value, abnormal value, boundary value, maximum/minimum value), ensuring correct handling of these conditions.",
            "When redundancies are in different states, the system shall check the implementation correctness of the lateral control law (δy = KyY*(Y - Yg) + Kywy*wy) to ensure the effectiveness of the redundancy mechanism."
        ]
    },
    {
        "id": 23,
        "requirement": "The system shall be able to calculate the control surface deflection angles δz, δx, and δy based on the current flight state and target state.",
        "original_safety_criterions": [
            "The functional control computation process varies under different states and operational phases. Check the function inputs and analyze whether the function handles correctly in cases such as 'operational phase not considered' or 'state not considered'.",
            "Check the loop judgment conditions of the function and analyze whether the function handles correctly in cases such as 'loop condition always false' or 'loop condition always true'.",
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'."
        ],
        "safety_requirements": [
            "The system shall check the loop judgment conditions for calculating the control surface deflection angles δz, δx, and δy to ensure correct handling when conditions are always false or always true.",
            "When multiple redundancies are in different operational states, the system shall ensure the correctness of calculated control surface deflection angles δz, δx, and δy, and perform state consistency verification.",
            "Based on different flight states and operational phases, the system shall adjust the control computation process, checking whether the input contains information about the phase and state to prevent errors due to unconsidered factors.",
            "The system shall perform a completeness check on the logical judgment conditions and branches used in calculating control surface deflections to ensure there are no cases such as logic always false, logic always true, incorrect conditions, or missing branches."
        ]
    },
    {
        "id": 24,
        "requirement": "The system needs to use the bilinear transform method to discretize the given pitch angle Jg and roll angle Yg, along with the rudder control amount yg, to compute the values of δz(k), δx(k), and δy(k).",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'.",
            "Check the discrete interface data values of different redundancies and analyze whether the function implementation is correct in cases such as 'inconsistent values between two or more redundancies'.",
            "Check the discrete output data values of different redundancies and analyze whether the function implementation is correct in cases such as 'inconsistent values between two or more redundancies'.",
            "Check the results of functional control computation and analyze whether the function handles correctly when the control computation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and branches of the bilinear transform method to ensure the correctness of calculation results (δz(k), δx(k), δy(k)) in cases such as logic always false, logic always true, incorrect condition, or missing branch.",
            "When the working states of different redundancies are inconsistent, the system shall ensure that the discretized computation results of pitch angle Jg, roll angle Yg, and rudder control amount yg match the logic of each redundancy's state.",
            "The system shall perform consistency checks on the discrete output data values of different redundancies and ensure the correctness of δz(k), δx(k), and δy(k) computation results even when multiple redundancies have inconsistent output data.",
            "The system shall verify the discrete interface data values of different redundancies and ensure accurate calculation of δz(k), δx(k), and δy(k) using the bilinear transform method even when the interface data values are inconsistent.",
            "The system shall perform anomaly detection on the computation results of δz(k), δx(k), and δy(k) to ensure correct handling logic in cases such as normal values, abnormal values, boundary values, or extreme values."
        ]
    },
    {
        "id": 25,
        "requirement": "During the takeoff departure segment, the system needs to set different reference attitude angles according to different flight phases, specifically: longitudinal Jg = 4.5°, lateral yg = 0°.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Verify whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of each function point are correct.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and logical branches of the reference attitude angles (longitudinal Jg = 4.5°, lateral yg = 0°) to ensure correct handling in cases such as 'logic always false, logic always true, incorrect condition, or missing branch'.",
            "The system shall ensure that the temporal relationship, constraint relationship, concurrency relationship, and combination relationship of control logic points are correct when setting the reference attitude angles for different flight phases during the takeoff departure segment.",
            "When detecting that two or more redundancies are in different operating states, the system shall still be able to correctly set the reference attitude angles (longitudinal Jg = 4.5°, lateral yg = 0°) based on the flight phase."
        ]
    },
    {
        "id": 26,
        "requirement": "The system needs to compute the value of yg based on the lateral deviation Dz, lateral deviation velocity Dz, and Δy through a formula.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the multiple input data of the function and analyze whether the function handles correctly when the input data combinations are 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the discrete output data values of different redundancies and analyze whether the function implementation is correct in cases such as 'inconsistent values between two or more redundancies'.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'."
        ],
        "safety_requirements": [
            "The system shall check the input data including lateral deviation Dz, lateral deviation velocity Dz, and Δy to ensure the correctness of computing yg under combinations of normal values, abnormal values, boundary values, initial values, safety values, and default values.",
            "When the discrete output data values of different redundancies are inconsistent, the system shall check the computation process of lateral deviation Dz, lateral deviation velocity Dz, and Δy to ensure the correct implementation of computing yg.",
            "The system shall check the logical judgment conditions and branches used in computing yg to ensure correct formula calculation in cases such as logic always false, logic always true, incorrect condition, or missing branch.",
            "The system shall check the working status of different redundancies and ensure correct computation results of lateral deviation Dz, lateral deviation velocity Dz, and Δy when two or more redundancies are in different states."
        ]
    },
    {
        "id": 27,
        "requirement": "The system shall support changing the throttle position via throttle fine-tuning during the takeoff departure segment, with an amplitude limit of [-15%, 0%].",
        "original_safety_criterions": [
            "Check the duration of each task and analyze whether the function handles correctly in cases where the task duration exceeds the specified time.",
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'.",
            "Check the results of functional control computation and analyze whether the function handles correctly when the control computation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "Verify whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of each function point are correct."
        ],
        "safety_requirements": [
            "The system shall check the control computation results of throttle fine-tuning (normal value, abnormal value, boundary value, etc.) to ensure correct handling when changing the throttle position during the takeoff departure segment, and the amplitude limit must meet the requirement of [-15%, 0%].",
            "The system shall verify the logical judgment conditions and branches of throttle fine-tuning to ensure correct handling in cases such as logic always false, logic always true, incorrect condition, or missing branch.",
            "The system shall monitor the duration of the throttle fine-tuning task and ensure correct handling and effective amplitude limitation if the duration exceeds the specified time.",
            "The system shall check the differences in working states of different redundancies to ensure correct execution of throttle fine-tuning when multiple redundancies are in different states.",
            "The system shall ensure the correctness of control logic (timing, constraints, concurrency relationships) for throttle fine-tuning during the takeoff departure segment and strictly limit the adjustment range to [-15%, 0%]."
        ]
    },
    {
        "id": 28,
        "requirement": "The system shall support autonomous throttle control in Climb Segment 1.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with the hardware? Are the control conditions complete and consistent?",
            "Check the execution timing of different redundancies and analyze whether the function is implemented correctly in cases such as 'execution timing of two or more redundancies not synchronized'.",
            "The control computation process of the function varies under different states and operational phases. Check the function inputs and analyze whether the function handles correctly in cases such as 'operational phase not considered' or 'state not considered'.",
            "Does the timing of outputting control status meet scenario requirements?",
            "Check the duration of each task and analyze whether the function handles correctly in cases where the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "The system shall check the execution timing of different redundancies in autonomous throttle control to ensure correct function output when 'execution timing of two or more redundancies is not synchronized'.",
            "The system shall verify that the output timing of autonomous throttle control strictly meets the scenario requirements of Climb Segment 1 to avoid timing deviations.",
            "The system shall ensure that the sequence and timing of autonomous throttle control in Climb Segment 1 are consistent with the hardware, and that control conditions are complete and logically consistent.",
            "When performing autonomous throttle control in different operational phases or states, the system shall validate the function inputs to avoid processing errors caused by 'operational phase not considered' or 'state not considered'.",
            "The system shall monitor the duration of autonomous throttle control tasks and activate a predefined error correction mechanism with alarm triggering if the task exceeds the time limit."
        ]
    },
    {
        "id": 29,
        "requirement": "The system shall support changing the throttle position via throttle fine-tuning in Climb Segment 1, with an amplitude limit of [-15%, 0%].",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logical branches of the function and analyze whether the function handles correctly in cases such as 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the working status of different redundancies and analyze whether the function implementation is correct in cases such as 'two or more redundancies being in different states'.",
            "Verify whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of each function point are correct.",
            "Check the results of functional control computation and analyze whether the function handles correctly when the control computation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall check the control computation results of throttle fine-tuning to ensure correct handling of throttle position changes in cases such as 'normal value, abnormal value, boundary value, maximum/minimum value', and the amplitude limit must strictly comply with [-15%, 0%].",
            "The system shall check the judgment conditions and logical branches of throttle fine-tuning to ensure correct handling in scenarios such as 'logic always false, logic always true, incorrect condition, missing branch', meeting the control requirements of Climb Segment 1.",
            "When multiple redundancies are in different working states, the system shall verify the correctness of throttle fine-tuning function and ensure the effective enforcement of the amplitude limit constraint [-15%, 0%].",
            "The system shall ensure the correctness of timing, constraints, and concurrency relationships of throttle fine-tuning logic in Climb Segment 1 and enforce the boundary condition of [-15%, 0%] during the change process."
        ]
    },
    {
        "id": 30,
        "requirement": "The system shall support discrete calculations for longitudinal and lateral directions.",
        "original_safety_criterions": [
            "Check the data bits of interface data with discrete value domains and analyze the correctness of outputs when the data bits take 'undefined abnormal values outside valid domain', etc.",
            "Check the discrete interface data values of different redundancies and analyze whether the function implementation is correct in cases such as 'inconsistent values between two or more redundancies'.",
            "Check the discrete output data values of different redundancies and analyze whether the function implementation is correct in cases such as 'inconsistent values between two or more redundancies'.",
            "Check the data bits of interface data with discrete value domains and analyze the correctness of outputs when the data bits take 'each enumerated value within the valid domain'.",
            "Check the duration of each task and analyze whether the function handles correctly in cases where the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "The system shall check the multi-redundancy values of longitudinal and lateral discrete interface data and ensure correct implementation of discrete calculation functions when two or more redundancies have inconsistent values.",
            "The system shall perform validity checks on the data bits of longitudinal and lateral discrete interface data and ensure correct output of discrete calculation when data bits take undefined abnormal values outside the valid domain.",
            "The system shall monitor the duration of longitudinal and lateral discrete calculation tasks and ensure correct handling logic when the execution time exceeds the specified threshold.",
            "The system shall perform completeness validation on all valid enumerated values of longitudinal and lateral discrete interface data bits to ensure accurate discrete calculation results under each valid value domain.",
            "The system shall check the consistency of longitudinal and lateral discrete output data and ensure correct function implementation when two or more output data have inconsistent values."
        ]
    },
    {
        "id": 31,
        "requirement": "The system shall support calculating the assigned airspeed during climb",
        "original_safety_criterions": [
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies are in different states'",
            "Examine the logical judgment conditions and logic branches of the function, analyzing the correctness of functional handling under conditions such as 'logic always false, logic always true, incorrect logical judgment conditions, missing logic branches'"
        ],
        "safety_requirements": [
            "When calculating the assigned airspeed during climb, the system shall verify the logical judgment conditions and logic branches to ensure the correctness of function handling under conditions such as 'logic always false, logic always true, incorrect conditions, or missing branches'.",
            "The system shall check the operational status of different redundancies to ensure correct output of the climb airspeed calculation function when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 32,
        "requirement": "The system shall support calculation and processing of heading deviation",
        "original_safety_criterions": [
            "When abnormal external factors occur (e.g., high sea state, severe weather conditions), does the software perform appropriate checks and processing?"
        ],
        "safety_requirements": [
            "When abnormal external factors such as high sea state or severe weather conditions occur, the system shall ensure that the heading deviation calculation and processing functions execute normally and validate the validity of the calculation results."
        ]
    },
    {
        "id": 33,
        "requirement": "Md2(k) = KvI . Md1(k)",
        "original_safety_criterions": [
            "Check the loop judgment conditions of the function and analyze the correctness of function handling under conditions such as 'loop condition always false or always true'",
            "Check interface data of different redundancies and analyze the correctness of function implementation when 'a single redundancy fails, all redundancies fail (e.g., data anomaly, timing fault, communication failure, destination device failure)'",
            "Verify the execution sequence of various tasks, analyzing the correctness of function handling when task execution order differs from the specified sequence",
            "Check the duration of each task's execution and analyze the correctness of function handling when the task duration exceeds the specified time",
            "Check input data values in the execution conditions of each task, analyzing the correctness of function handling when input data causes task execution conditions to be satisfied prematurely"
        ],
        "safety_requirements": [
            "The system shall check for abnormal input data values to ensure the correctness of Md2(k) = KvI . Md1(k) function handling when task execution conditions are satisfied prematurely.",
            "The system shall validate interface data across different redundancies to ensure correct implementation of Md2(k) = KvI . Md1(k) function when a single or all redundancies fail (e.g., data anomalies, timing faults, communication failures).",
            "The system shall verify scenarios where task duration exceeds the specified time, ensuring the correctness of Md2(k) = KvI . Md1(k) function handling in timeout situations.",
            "The system shall monitor consistency in task execution timing, maintaining the correctness of Md2(k) = KvI . Md1(k) function when the sequence differs from specifications.",
            "The system shall detect abnormal states in loop judgment conditions (always false, always true), ensuring correct handling of Md2(k) = KvI . Md1(k) function under such conditions."
        ]
    },
    {
        "id": 34,
        "requirement": "Md2(k) is limited within [-XfSita, XfSita]",
        "original_safety_criterions": [
            "Check continuous interface data values across different redundancies and analyze the correctness of function implementation when two or more redundancies' data values 'differ significantly, i.e., the difference exceeds the specified threshold'",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships among control logics of each function point correct?",
            "Check the control computation results of the function and analyze the correctness of function handling when the results are 'normal values, abnormal values, boundary values, maximum/minimum values', etc."
        ],
        "safety_requirements": [
            "The system shall perform real-time checks on the limiting result of Md2(k) to ensure the correctness of function handling when the result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "The system shall check the operating states of different redundancies to ensure correct execution of Md2(k) limiting [-XfSita, XfSita] function when 'two or more redundancies are in different states'.",
            "The system shall check continuous interface data values of different redundancies and ensure correct implementation of Md2(k) limiting [-XfSita, XfSita] function when 'the difference between values exceeds the specified threshold'.",
            "The system shall verify the timing, constraints, concurrency, and combination relationships of Md2(k) limiting logic with other function control logics to ensure overall logic correctness and absence of conflicts."
        ]
    },
    {
        "id": 35,
        "requirement": "Md3(k) = Kv . [vk(k) - vg(k)] + Md2(k)",
        "original_safety_criterions": [
            "When multiple functions execute simultaneously, check their input and output data and analyze the correctness of multi-function processing when input/output data values fall into categories such as 'normal value equivalence classes' or 'abnormal value equivalence classes'",
            "Under different states and operation phases, the control computation process varies; check the function inputs and analyze the correctness of function handling when 'operation phase or state is not considered'",
            "Multiple functions access the same data concurrently for reading/writing; analyze the correctness of multi-function processing when data read/write conflicts occur",
            "Check interface data of different redundancies and analyze the correctness of function implementation when 'single redundancy failure, all redundancies fail (e.g., data anomaly, timing fault, communication failure, destination device failure)'",
            "Check discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce 'inconsistent output values'"
        ],
        "safety_requirements": [
            "The system shall check interface data across different redundancies to ensure correct calculation of Md3(k) = Kv · [vk(k) - vg(k)] + Md2(k) function under 'single redundancy failure' or 'all redundancies failing (data anomaly, timing fault, communication failure, etc.)'.",
            "When multiple functions execute simultaneously, the system shall verify the correctness of Md3(k) = Kv · [vk(k) - vg(k)] + Md2(k) calculation results when input/output data values fall into 'normal value equivalence class combinations' or 'abnormal value equivalence class combinations'.",
            "In different operational states or phases, the system shall check the completeness of function inputs to ensure the correctness of Md3(k) = Kv · [vk(k) - vg(k)] + Md2(k) handling when 'operation phase' or 'operation state' is not considered.",
            "When multiple functions conflict while reading/writing the same data, the system shall ensure that Md3(k) = Kv · [vk(k) - vg(k)] + Md2(k) calculation remains unaffected and correct.",
            "The system shall check discrete output data of different redundancies and ensure the correctness of Md3(k) = Kv · [vk(k) - vg(k)] + Md2(k) function when redundancy data 'values are inconsistent'."
        ]
    },
    {
        "id": 36,
        "requirement": "Md3(k) is limited within [-XfSita, XfSita]",
        "original_safety_criterions": [
            "For states with transitions and functions with priority settings, check whether state and function correctness holds under 'high-priority switching to low-priority' or 'low-priority switching to high-priority' scenarios",
            "Check multiple input data of the function and analyze the correctness of function handling when input data values belong to categories such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, default value combinations'",
            "Two or more states with transition relationships have different execution requirements for the same function; some states allow execution while others do not. Analyze the correctness of state and function behavior when the function 'continues execution' or 'interrupts execution' during state transitions",
            "Check the control computation process of the function and analyze the correctness of function handling when the computation process times out (does not return a result within the specified time)",
            "Check the control computation result of the function and analyze the correctness of function handling when the result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall check for timeouts in the control computation process of Md3(k) limiting to ensure proper handling mechanisms trigger if results are not returned within the specified time.",
            "The system shall verify the Md3(k) limiting result to ensure the correctness of function logic when the result is a normal value, abnormal value, boundary value, or extreme minimum/maximum.",
            "During state transitions, the system shall check the execution requirement of Md3(k) limiting to ensure function interruption or continuation aligns with current state logic when execution is allowed or disallowed.",
            "When executing Md3(k) limiting function in different priority states, the system shall ensure correct execution during transitions between high and low priority states.",
            "The system shall perform combined input data checks for Md3(k) limiting function, including normal values, abnormal values, boundary values, initial values, safety values, and default value combinations, to ensure correct logic handling."
        ]
    },
    {
        "id": 37,
        "requirement": "Jg(k) = Md3(k)",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function handling when input data values belong to categories such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, default value combinations'",
            "Check the duration of each task and analyze the correctness of function handling when the task duration is less than the specified time",
            "Check the data processing process of the function and analyze whether division-by-zero occurs during data processing",
            "Check the duration of each task and analyze the correctness of function handling when the task duration exceeds the specified time",
            "Check input data values in task execution conditions and analyze the correctness of function handling when input data causes the task execution condition to be satisfied prematurely"
        ],
        "safety_requirements": [
            "The system shall perform equivalent class combination checks on input data (normal values, abnormal values, boundary values, initial values, safety values, default values) to ensure correct handling of Jg(k) = Md3(k) function.",
            "When task duration is greater than or less than the specified time, the system shall verify the logical correctness of Jg(k) = Md3(k) function results.",
            "When input data causes task execution conditions to be satisfied prematurely, the system shall maintain accurate computation of Jg(k) = Md3(k) function.",
            "The system shall perform dynamic checks on the data processing process of Jg(k) = Md3(k) to eliminate scenarios that may trigger division-by-zero exceptions."
        ]
    },
    {
        "id": 38,
        "requirement": "δp(k) = 115%",
        "original_safety_criterions": [
            "Check output data of different redundancies and analyze the correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Check loop judgment conditions of the function and analyze the correctness of function handling under conditions such as 'loop condition always false, loop condition always true'",
            "Under different states and operation phases, the control computation processes vary; check function inputs and analyze the correctness of function handling when 'operation phase or state is not considered'",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'",
            "Check the duration of each task and analyze the correctness of function handling when the task duration exceeds the specified time"
        ],
        "safety_requirements": [
            "The system shall check δp(k)=115% control computation inputs in different operation phases and states to ensure correct function handling when operation phase or state is not considered.",
            "The system shall check redundancy state differences (e.g., two or more redundancies in different states) to ensure correct output of δp(k)=115% function.",
            "When task duration exceeds the specified threshold, the system shall verify the logical correctness of δp(k)=115% function handling.",
            "The system shall monitor redundancy output data states to ensure correct implementation of δp(k)=115% function even when one or more redundancies fail.",
            "The system shall monitor δp(k)=115% loop judgment conditions in real time to ensure correct function handling when conditions are always false or always true."
        ]
    },
    {
        "id": 39,
        "requirement": "Md1(k) = Kg1 . Dz(k)",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, incorrect logical judgment conditions, missing logic branches'",
            "Check input data values in task execution conditions and analyze the correctness of function handling when input data causes task execution conditions to be satisfied with delay",
            "Check the execution order of various tasks and analyze the correctness of function handling when the actual task sequence differs from the specified sequence",
            "Check the duration of each task and analyze the correctness of function handling when the task duration exceeds the specified time",
            "Check input data values in task execution conditions and analyze the correctness of function handling when input data causes task execution conditions to be satisfied prematurely"
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and branches of Md1(k) = Kg1 . Dz(k) to ensure correct function handling under conditions such as 'logic always false, logic always true, incorrect conditions, or missing branches'.",
            "The system shall check input data values of Md1(k) = Kg1 . Dz(k) to ensure correct function handling when task execution conditions are satisfied prematurely.",
            "The system shall check the task durations of Md1(k) = Kg1 . Dz(k) to ensure correct function handling when durations exceed the specified time.",
            "The system shall check input data values of Md1(k) = Kg1 . Dz(k) to ensure correct function handling when task execution conditions are satisfied with delay.",
            "The system shall check the execution sequence of Md1(k) = Kg1 . Dz(k) tasks to ensure correct function handling when the sequence differs from the specified one."
        ]
    },
    {
        "id": 40,
        "requirement": "Md1(k) is limited within [-XfCs, +XfCs]",
        "original_safety_criterions": [
            "Check continuous interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancies' interface data 'values differ significantly, i.e., the difference exceeds the specified threshold'",
            "Check the logical judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, incorrect logical judgment conditions, missing logic branches'",
            "Check continuous output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies' output data 'values differ significantly, i.e., the difference exceeds the specified threshold'",
            "Check the control computation result of the function and analyze the correctness of function handling when the result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships among control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system shall check continuous interface data values of different redundancies and ensure the correctness of Md1(k) limiting [-XfCs, +XfCs] function when the difference exceeds the specified threshold.",
            "The system shall check continuous output data values of different redundancies and ensure the correctness of Md1(k) limiting [-XfCs, +XfCs] function when the difference exceeds the specified threshold.",
            "The system shall verify the control computation result of Md1(k) to ensure correct limiting logic handling when the result is a normal value, abnormal value, boundary value, or extreme minimum/maximum.",
            "The system shall check the logical judgment conditions and branches of Md1(k) limiting to ensure no cases of logic always false, logic always true, incorrect conditions, or missing branches.",
            "The system shall verify the correctness of timing relationships, constraint relationships, concurrency relationships, and combination relationships between Md1(k) limiting function and other function points."
        ]
    },
    {
        "id": 41,
        "requirement": "Md 2(k ) = D&Z  (k ) + Md1(k )  . Kg 2",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of the function processing under conditions such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'",
            "Check output data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies all failed'",
            "Check multiple input data of the function, and analyze the correctness of function processing when multiple inputs are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Check the working states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall check the output data of different redundancies to ensure correct implementation of the Md2(k) = D&Z(k) + Md1(k) . Kg2 function under conditions of 'single redundancy failure' or 'multiple redundancies all failed'.",
            "The system shall perform multiple combination checks on input data (normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safe value, default value) to ensure correctness of Md2(k) = D&Z(k) + Md1(k) . Kg2 processing.",
            "The system shall check the logical judgment conditions and branches to guarantee the correctness of Md2(k) = D&Z(k) + Md1(k) . Kg2 processing under conditions such as 'always-false logic, always-true logic, incorrect judgment condition, missing branch'.",
            "The system shall check the operating states of different redundancies to ensure correct implementation of the Md2(k) = D&Z(k) + Md1(k) . Kg2 function when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 42,
        "requirement": "Md 2(k ) limit range [-XfGama, +XfGama]",
        "original_safety_criterions": [
            "Check continuous interface data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds defined threshold'",
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of function processing under conditions such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'",
            "Check continuous output data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds defined threshold'",
            "Whether the timing relationships, constraint relationships, concurrent relationships, and combined relationships between control logics of each function point are correct"
        ],
        "safety_requirements": [
            "The system shall perform real-time checks on continuous output data from different redundancies, ensuring correct execution of the Md 2(k) limit range [-XfGama, +XfGama] function when differences among outputs exceed defined thresholds.",
            "The system shall perform real-time checks on continuous interface data from different redundancies, verifying correct implementation of the Md 2(k) limit range [-XfGama, +XfGama] function when differences exceed thresholds.",
            "The system shall check the judgment conditions and branches of the Md 2(k) limiting logic to identify abnormal situations like always-false, always-true, incorrect conditions, or missing branches, and ensure correct function processing.",
            "When different redundancies are in inconsistent operational states, the system shall ensure that the output of the Md 2(k) limit range [-XfGama, +XfGama] function meets expected results.",
            "The system shall verify the timing, constraints, concurrency, and combined relationships of the Md 2(k) limiting control logic with other function logics to ensure compliance with design requirements."
        ]
    },
    {
        "id": 43,
        "requirement": "Md3(k) = ((2 - T)Md3(k - 1) + T.Md 2(k) + T.Md 2(k - 1)) /(T + 2)",
        "original_safety_criterions": [
            "Check multiple input data of the function, and analyze the correctness of function processing when multiple input data values are combinations of 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safe value, default value'",
            "Check interface data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, all redundancies failed (e.g., data anomaly, timing fault, communication failure, destination equipment failure)'",
            "Check input data values used in execution conditions of each task, and analyze the correctness of function processing when input data causes delayed satisfaction of execution conditions",
            "Check the sequential execution order of tasks, and analyze the correctness of function processing when actual execution sequence differs from specified sequence",
            "Check input data values used in execution conditions of each task, and analyze the correctness of function processing when input data causes premature satisfaction of execution conditions"
        ],
        "safety_requirements": [
            "When execution conditions are delayed, the system shall check input data values for Md3(k) to ensure correct calculation functionality.",
            "When execution conditions are prematurely satisfied, the system shall check input data values for Md3(k) to ensure correct formula processing logic.",
            "The system shall check the redundancy status of Md3(k) input data to ensure correct calculation results during single redundancy failure or total redundancy failures (e.g., data anomalies, timing faults).",
            "When task execution sequence deviates from the specified sequence, the system shall verify the correctness of the Md3(k) = ((2-T)Md3(k-1)+T.Md2(k)+T.Md2(k-1))/(T+2) calculation.",
            "The system shall check combinations of Md3(k) input data (normal/abnormal values, boundary values, initial values, etc.) to ensure correct calculation functionality across different equivalence class combinations."
        ]
    },
    {
        "id": 44,
        "requirement": "Heading control: yg = 0°",
        "original_safety_criterions": [
            "Check output data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies all failed'",
            "Check the same input data received by different redundancies, and analyze the correctness of function implementation when two or more redundancies receive inconsistent values",
            "Check discrete output data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies produce inconsistent output values",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall check the operating states of different redundancies to ensure correct implementation of heading control (yg=0°) when 'two or more redundancies are in different states'.",
            "The system shall check discrete output data values from different redundancies to maintain correct heading control function when 'output data values differ between two or more redundancies'.",
            "The system shall check consistency of identical heading control input data (yg=0°) received by different redundancies, triggering error correction mechanisms when inconsistencies occur to ensure correct function operation.",
            "The system shall ensure proper heading control function execution through redundancy output data checks when 'single redundancy failure' or 'multiple redundancies all failed' occurs."
        ]
    },
    {
        "id": 45,
        "requirement": "δp = 100%",
        "original_safety_criterions": [
            "Check output data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies all failed'",
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of function processing under conditions such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'",
            "Check the data processing process of the function to determine whether division-by-zero errors exist",
            "Check interface data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, all redundancies failed (e.g., data anomaly, timing fault, communication failure, destination device failure)'",
            "Check the sequential execution order of tasks, and analyze the correctness of function processing when actual execution sequence differs from specified sequence"
        ],
        "safety_requirements": [
            "The system shall check output data from different redundancies to ensure correct implementation of δp=100% function under conditions of 'single redundancy failure' or 'multiple redundancies all failed'.",
            "The system shall check interface data from different redundancies to ensure correct implementation of δp=100% function under conditions of 'all redundancies failed (e.g., data anomaly, timing fault, etc.)'.",
            "The system shall check the logical judgment conditions and branches of rudder deflection δp to ensure correct function processing under conditions such as 'always-false logic, always-true logic, incorrect condition, or missing branch'."
        ]
    },
    {
        "id": 46,
        "requirement": "During this phase, adjustments can be made using throttle fine-tuning",
        "original_safety_criterions": [
            "Check different functions with set priorities under two or more states with transition relationships, and analyze the correctness of state and function behavior during 'high-priority switching to low-priority, low-priority switching to high-priority'",
            "Check state transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'condition not set, always satisfied, never satisfied'",
            "Check state entry conditions, and analyze the correctness of state execution when entry conditions are 'satisfied, not satisfied, satisfied again' during state execution",
            "Control computation processes of functions vary under different states and working phases; check function inputs, and analyze the correctness of function processing when 'working phase not considered, working state not considered'",
            "Does the timing of outputting control states meet scenario requirements?"
        ],
        "safety_requirements": [
            "The system shall ensure correct operation of throttle fine-tuning adjustment function during state priority switching (between high and low priority).",
            "The system shall verify that the actual timing of throttle fine-tuning output complies with current scenario requirements.",
            "The system shall ensure accurate and consistent throttle fine-tuning adjustments when state entry conditions are satisfied, not satisfied, or satisfied again.",
            "The system shall check state transition conditions (not set, always satisfied, never satisfied) to ensure correct state transitions during throttle fine-tuning adjustment.",
            "The system shall clearly distinguish between different working phases during control computation and verify the impact of throttle fine-tuning input on function processing correctness."
        ]
    },
    {
        "id": 47,
        "requirement": "Change limit range to [-10%, 0%]",
        "original_safety_criterions": [
            "Check output data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies all failed'",
            "If redundancy switching time is too long, does the software handle it correctly?",
            "Check the data processing process of the function to determine whether division-by-zero errors exist"
        ],
        "safety_requirements": [
            "The system shall ensure correct handling of the [-10%, 0%] limit range during prolonged redundancy switching time, and trigger timeout protection mechanisms to ensure output validity.",
            "The system shall check cases of single redundancy failure or multiple redundancies all failing to ensure correct implementation of the [-10%, 0%] limit range and maintain output within limits.",
            "When setting the limit range to [-10%, 0%], the system shall dynamically check the data processing process to prevent any data input or calculation operations that could cause division-by-zero errors.",
            "The system shall perform real-time validation of configuration parameters for the [-10%, 0%] limit range, immediately reverting to a safe default value upon detection of abnormal data or out-of-bound operations."
        ]
    },
    {
        "id": 48,
        "requirement": "Md1(k) = Kg1 * Dz(k), Md1(k) limited to [- XfCs, XfCs]",
        "original_safety_criterions": [
            "Check continuous interface data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds defined threshold'",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'",
            "Check discrete interface data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values'",
            "Check continuous output data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds defined threshold'",
            "Check discrete output data values from different redundancies, and analyze the correctness of function implementation when two or more redundancies have 'inconsistent values'"
        ],
        "safety_requirements": [
            "The system shall perform real-time checks on continuous interface data values from different redundancies, ensuring correct computation of Md1(k) = Kg1 * Dz(k) and maintaining Md1(k) within the [- XfCs, XfCs] limit range when 'values differ beyond defined threshold'",
            "The system shall validate discrete output data values from different redundancies to ensure correct execution of Md1(k) = Kg1 * Dz(k) and enforce the [- XfCs, XfCs] limit even when 'values differ'",
            "The system shall monitor continuous output data values from different redundancies, ensuring accurate Md1(k) computation and adherence to limit requirements when value differences exceed defined thresholds",
            "The system shall perform consistency checks on discrete interface data from different redundancies, triggering exception handling mechanisms for Md1(k) computation logic when 'values differ'",
            "The system shall continuously monitor the operational states of different redundancies to ensure normal execution of Md1(k) = Kg1 * Dz(k) and maintenance of limit constraints when 'redundancies are in different states'"
        ]
    },
    {
        "id": 49,
        "requirement": "Md2(k) limited to [- XfGama, XfGama]",
        "original_safety_criterions": [
            "Multiple function outputs may be mutually exclusive or cannot be output simultaneously; check execution conditions of these functions, and analyze the correctness of multi-function outputs when execution conditions of multiple functions are simultaneously met leading to concurrent execution",
            "After power loss recovery or runaway reset mechanism activation, can the system recover to normal operating state?",
            "Check interface data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, all redundancies failed (e.g., data anomaly, timing fault, communication failure, destination equipment failure)'",
            "Check the control computation results of the function, and analyze the correctness of function processing when control computation results are 'normal value, abnormal value, boundary value, extreme minimum/maximum'",
            "Check the execution conditions of the function, and analyze the correctness of function processing when execution conditions are 'not satisfied, satisfied again' during function execution"
        ],
        "safety_requirements": [
            "The system shall check Md2(k) control computation results to ensure correct implementation of the [- XfGama, XfGama] limit function under conditions such as 'normal value, abnormal value, boundary value, extreme minimum/maximum'.",
            "After power loss recovery or runaway reset, the system shall return to normal operation and ensure correct execution of the Md2(k) limit [- XfGama, XfGama] function.",
            "When multiple function execution conditions are simultaneously met causing concurrent execution, the system shall check and ensure correct output of Md2(k) limit [- XfGama, XfGama] to avoid conflicting mutual exclusion data.",
            "Under conditions of single redundancy failure or complete redundancy failure (data anomaly, timing fault, communication failure, etc.), the system shall ensure correct implementation of the Md2(k) limit [- XfGama, XfGama] function.",
            "The system shall check execution conditions of the Md2(k) limit function to ensure that function logic conforms to expectations when conditions are 'not satisfied' or 'satisfied again'."
        ]
    },
    {
        "id": 50,
        "requirement": "Yg(k) = -Md3(k)",
        "original_safety_criterions": [
            "Check output data from different redundancies, and analyze the correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies all failed'",
            "Check multiple input data of the function, and analyze the correctness of function processing when multiple input data values are combinations of 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safe value, default value'",
            "Check the sequential execution order of tasks, and analyze the correctness of function processing when actual execution sequence differs from specified sequence",
            "Check task durations, and analyze the correctness of function processing when task duration exceeds specified time",
            "Check input data values used in execution conditions of each task, and analyze the correctness of function processing when input data causes premature satisfaction of execution conditions"
        ],
        "safety_requirements": [
            "The system shall ensure correct processing of Yg(k) = -Md3(k) function when task execution sequence differs from specified sequence.",
            "The system shall perform equivalence class combination checks on input data for Yg(k) = -Md3(k) function (normal values, abnormal values, boundary values, initial values, safe values, default values) to ensure correct function processing.",
            "The system shall ensure correct processing of Yg(k) = -Md3(k) function when task duration exceeds specified time.",
            "The system shall perform redundancy checks on Yg(k) = -Md3(k) function outputs to ensure correct function realization even during single or total redundancy failure.",
            "The system shall ensure correct processing of Yg(k) = -Md3(k) function when input data values cause early satisfaction of execution conditions."
        ]
    },
    {
        "id": 51,
        "requirement": "yg(k) = 0°",
        "original_safety_criterions": [
            "Check the operating status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states.",
            "Check the continuous output data values of different redundancies and analyze the correctness of function implementation when output data values are inconsistent, i.e., the difference exceeds a specified threshold.",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when output data values are inconsistent.",
            "Examine the data processing process of the function to determine whether division by zero occurs.",
            "Check input data values in execution conditions of each task and analyze the correctness of functional processing when input data causes tasks to be executed prematurely."
        ],
        "safety_requirements": [
            "When two or more redundancies are in different operating states, the system shall verify the correctness of function implementation for the target state parameter yg(k) = 0°.",
            "The system shall avoid division by zero during data processing, particularly ensuring strict checks when calculating yg(k) = 0°.",
            "The system shall check continuous redundancy output data to ensure that the function implementing the target state parameter yg(k) = 0° operates correctly when the value difference exceeds the specified threshold.",
            "The system shall check discrete redundancy output data to ensure that the function implementing the target state parameter yg(k) = 0° operates correctly when the values are inconsistent.",
            "The system shall check the impact of input data values on task execution conditions to ensure the correctness of task logic processing when yg(k) = 0°."
        ]
    },
    {
        "id": 52,
        "requirement": "δp(k) = 100%",
        "original_safety_criterions": [
            "Check input data values in execution conditions of each task and analyze the correctness of function processing when input data never satisfies execution conditions (i.e., the task is never executed).",
            "Check loop judgment conditions of the function and analyze the correctness of function processing under scenarios such as 'loop condition always false' or 'loop condition always true'.",
            "Check interface data from different redundancies and analyze the correctness of function implementation under scenarios such as 'single redundancy failure', 'all redundancies failed' (e.g., data anomalies, timing faults, communication failures, destination device failures, etc.).",
            "Check the duration of each task and analyze the correctness of function processing when task duration is less than the specified time.",
            "Examine the data processing process of the function to determine whether division by zero occurs."
        ],
        "safety_requirements": [
            "The system shall check the duration of δp(k) = 100% tasks to ensure correct function processing when task duration is less than the specified time and record any anomalies.",
            "The system shall monitor loop judgment conditions for δp(k) = 100% in real-time and trigger error handling mechanisms with alert logs when conditions are either always false or always true.",
            "The system shall check interface data across different redundancies to ensure correct implementation of δp(k) = 100% functionality even in cases of single or complete redundancy failures (data anomalies, timing faults, etc.).",
            "The system shall dynamically monitor δp(k) data processing to detect and prevent division-by-zero operations, ensuring safe and stable computation.",
            "The system shall validate the execution conditions of rudder deflection angle δp(k) input data and handle events according to predefined safety strategies when execution conditions are not met, recording relevant event information."
        ]
    },
    {
        "id": 53,
        "requirement": "Underscored portions are limited within [- XfSita, XfSita]",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of the function and analyze the correctness of function processing under scenarios such as 'logic always false', 'logic always true', 'incorrect logical conditions', or 'missing logic branches'.",
            "Check control calculation results of the function and analyze the correctness of function processing when results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'.",
            "Verify whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of all functional points are correct.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check the operating states of different redundancies and ensure correct execution of the limit [- XfSita, XfSita] for underscored portions when two or more redundancies are in different states, using majority voting mechanisms for state synchronization.",
            "The system shall verify consistency of the application of limit [- XfSita, XfSita] across all related functional points, ensuring their temporal relationships, constraint relationships, and concurrent logic conform to design requirements.",
            "The system shall perform real-time detection of control calculation results (including normal values, abnormal values, boundary values, and extreme values) to ensure the correctness of the underscoring limit [- XfSita, XfSita] logic and record over-limit events.",
            "The system shall perform integrity testing on logical judgment conditions and branches of the limiting function to verify correctness of limit processing under abnormal scenarios such as 'logic always false', 'logic always true', 'incorrect judgment conditions', or 'missing branches', triggering error recovery mechanisms."
        ]
    },
    {
        "id": 54,
        "requirement": "hg is a given altitude obtained from the target waypoint altitude",
        "original_safety_criterions": [
            "Check the continuous output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce output data values that differ beyond the specified threshold.",
            "Check the continuous interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce interface data values differing beyond the specified threshold.",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output data values.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check continuous output data from different redundancies and ensure correct function implementation when differences in target waypoint altitude hg exceed the specified threshold, triggering alarm mechanisms.",
            "The system shall check discrete output data from different redundancies and automatically execute error correction logic when inconsistencies in target waypoint altitude hg are detected, logging abnormal statuses.",
            "The system shall perform real-time comparison of continuous interface data from different redundancies and lock anomalous data sources while activating backup redundancies when hg value differences exceed thresholds.",
            "The system shall monitor redundancy operating states and force synchronization to the majority consistent state while initiating data correction when discrepancies in redundancy states for target waypoint altitude hg are detected."
        ]
    },
    {
        "id": 55,
        "requirement": "ug is the given airspeed at constant altitude, calculated based on aircraft flight performance. The data is provided in the appendix, with boundary point limitations applied.",
        "original_safety_criterions": [
            "Check the continuous interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce interface data values differing beyond the specified threshold.",
            "Check the continuous output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce output data values differing beyond the specified threshold.",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output data values.",
            "Verify whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of all functional points are correct.",
            "Check control calculation results of the function and analyze the correctness of function processing when results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'."
        ],
        "safety_requirements": [
            "The system shall ensure the correctness of temporal relationships, constraint relationships, concurrent relationships, and combined relationships in the logic for calculating the given airspeed ug at constant altitude and in boundary point limitation processing.",
            "The system shall perform consistency checks on continuous interface data from different redundancies and ensure correct calculation and limitation processing of ug when data differences exceed the specified thresholds.",
            "The system shall perform consistency checks on continuous output data from different redundancies and ensure correct implementation of ug functions when output data inconsistencies exceed thresholds.",
            "The system shall verify the correctness of ug control calculation result processing logic under normal values, abnormal values, boundary values, and extreme values.",
            "The system shall check consistency of discrete output data across different redundancies and ensure correct execution of ug calculation and limitation functions when data values are inconsistent."
        ]
    },
    {
        "id": 56,
        "requirement": "δp Limiting: Default minimum throttle limiter values at 5000, 6000, 7000, and 8000 meters are 12.5%, 27.5%, 42.5%, and 57.5%, respectively, with linear interpolation between them; maximum throttle limiter is 100%",
        "original_safety_criterions": [
            "Check default values of interface data and analyze the correctness of outputs when default values are outside the valid range.",
            "Check multiple input data of the function and analyze the correctness of function processing when input data combinations are 'valid value equivalence classes', 'invalid value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', or 'default value combinations'.",
            "Check logical judgment conditions and logic branches of the function and analyze the correctness of function processing when there are 'logic always false', 'logic always true', 'incorrect judgment conditions', or 'missing logic branches'.",
            "Check control calculation results of the function and analyze the correctness of function processing when results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'.",
            "Check input data values in execution conditions of each task and analyze the correctness of function processing when input data causes tasks to be executed prematurely."
        ],
        "safety_requirements": [
            "When input data values in task execution conditions are satisfied prematurely, the system shall verify the correctness of δp limiting processing, ensuring accurate minimum throttle limiter values (12.5%, 27.5%, 42.5%, 57.5%) corresponding to altitudes (5000m, 6000m, 7000m, 8000m), linear interpolation logic, and maximum limit of 100%.",
            "The system shall check default values in δp limiting processing for out-of-range anomalies to ensure correct output of minimum and maximum throttle limiter values.",
            "The system shall verify logical judgment conditions and branches (e.g., always-false, always-true, incorrect conditions, missing branches) in δp limiting processing to ensure completeness and correctness of function logic.",
            "The system shall check δp limiting processing results across normal values, abnormal values, boundary values, and extreme values to ensure output conforms to expectations.",
            "The system shall verify δp limiting processing across various input data combinations (e.g., valid/invalid equivalence classes, boundary values, initial/safe/default value combinations) to ensure correct processing results."
        ]
    },
    {
        "id": 57,
        "requirement": "Amplitude can be adjusted via throttle fine-tuning; adjustment range is [0%, 40%] above 5000m; no adjustment below 5000m.",
        "original_safety_criterions": [
            "Check logical judgment conditions and logic branches of the function and analyze the correctness of function processing when there are 'logic always false', 'logic always true', 'incorrect judgment conditions', or 'missing logic branches'.",
            "Verify whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of all functional points are correct.",
            "Check durations of each task and analyze the correctness of function processing when task durations exceed specified times.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "When task durations exceed specified times, the system shall check the logic of throttle fine-tuning adjustment to ensure adjustments remain within [0%, 40%] or are disabled.",
            "The system shall perform consistency checks on redundancy operating states and disable amplitude changes via throttle fine-tuning or activate fault-tolerant mechanisms when two or more redundancies are in different states.",
            "The system shall strictly verify altitude parameters to allow throttle fine-tuning adjustments ([0%, 40%]) above 5000m and forcibly disable this function below 5000m, verifying the temporal and constraint relationships of control logic.",
            "The system shall monitor logic judgment conditions for amplitude adjustment in real time, detecting situations like logic always false, always true, or incorrect conditions, and locking throttle fine-tuning adjustments when abnormalities occur.",
            "The system shall perform comprehensive verification of altitude parameters to prevent throttle fine-tuning adjustments at unsafe altitudes due to input data errors."
        ]
    },
    {
        "id": 58,
        "requirement": "Md2(k) = KhdI · Md1(k), Md2(k) limited within [-XfSita, XfSita]",
        "original_safety_criterions": [
            "Check the continuous output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce output data values differing beyond the specified threshold.",
            "Check output data from different redundancies and analyze the correctness of function implementation when one or multiple redundancies fail.",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output data values.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check discrete output data from different redundancies and ensure correct implementation of Md2(k) = KhdI · Md1(k) when values are inconsistent, strictly limiting Md2(k) within [-XfSita, XfSita].",
            "The system shall check continuous output data from different redundancies and ensure correct implementation of Md2(k) = KhdI · Md1(k) when value differences exceed specified thresholds, enforcing Md2(k) limits within [-XfSita, XfSita].",
            "When one or multiple redundancies fail, the system shall perform redundancy validation to ensure correct calculation of Md2(k) and maintain its limits within [-XfSita, XfSita].",
            "The system shall monitor the operating states of different redundancies and verify correct implementation of Md2(k) = KhdI · Md1(k) when redundancies are in different states, ensuring effective limit constraints."
        ]
    },
    {
        "id": 59,
        "requirement": "Md3(k) = Khd · [h(k) - hg(k)] + Md2(k), Md3(k) limited within [-XfSita, XfSita]",
        "original_safety_criterions": [
            "Check interface data from different redundancies and analyze the correctness of function implementation when one or all redundancies fail (e.g., data anomalies, timing faults, communication failures, destination equipment failures, etc.).",
            "Check output data from different redundancies and analyze the correctness of function implementation when one or multiple redundancies fail.",
            "Check the same input data received by different redundancies and analyze the correctness of function implementation when data values are inconsistent.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check the consistency of the same input data received by different redundancies and ensure that Md3(k) = Khd·[h(k)-hg(k)] + Md2(k) calculations are correct and limited within [-XfSita, XfSita] when values are inconsistent.",
            "The system shall check the consistency of redundancy operating states and ensure correct implementation of Md3(k) = Khd·[h(k)-hg(k)] + Md2(k) within [-XfSita, XfSita] when two or more redundancies are in different states.",
            "The system shall monitor redundancy interface data status and ensure correct Md3(k) calculation and strict limits within [-XfSita, XfSita] when single or all redundancies fail (e.g., data anomalies, timing faults, communication failures, equipment failures).",
            "The system shall verify redundancy output data integrity and enforce compliance of Md3(k) = Khd·[h(k)-hg(k)] + Md2(k) calculations with [-XfSita, XfSita] limits when one or multiple redundancies experience output failures."
        ]
    },
    {
        "id": 60,
        "requirement": "Jg(k) = -Md3(k)",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when input data combinations are 'valid value equivalence classes', 'invalid value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', or 'default value combinations'.",
            "Check durations of each task and analyze the correctness of function processing when task durations are shorter than specified.",
            "Check execution sequence of tasks and analyze the correctness of function processing when execution sequences differ from specified sequences.",
            "Check durations of each task and analyze the correctness of function processing when task durations are longer than specified.",
            "Check input data values in execution conditions of each task and analyze the correctness of function processing when input data causes tasks to be executed prematurely."
        ],
        "safety_requirements": [
            "The system shall comprehensively check input data including valid values, invalid values, boundary values, initial values, safe values, and default value combinations to ensure correct implementation of Jg(k) = -Md3(k).",
            "When task durations exceed specified times, the system shall ensure correct implementation of Jg(k) = -Md3(k).",
            "When task durations are shorter than specified times, the system shall ensure correct implementation of Jg(k) = -Md3(k).",
            "When input data values cause task execution conditions to be satisfied prematurely, the system shall ensure correct implementation of Jg(k) = -Md3(k).",
            "When task execution sequences differ from specified sequences, the system shall ensure correct implementation of Jg(k) = -Md3(k)."
        ]
    },
    {
        "id": 61,
        "requirement": "When |DH| > 50m, the flight phase transitions from altitude hold to climb 2 or descent.",
        "original_safety_criterions": [
            "Check functions with different priorities under two or more states that have transition relationships. Analyze the correctness of state and function behavior when high priority switches to low priority and vice versa.",
            "Check transition conditions between each pair of states in the software state space. Analyze the correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "Is there wrap-around detection-based fault handling? Is the state reporting strategy reasonable during faults?",
            "For a single state that has transition relationships with multiple other states, check the conditions for transitioning from one state to many and from many states to one. Analyze the correctness of state transitions when multiple conditions are simultaneously satisfied.",
            "For two or more states without transition relationships, check their entry conditions. Analyze the correctness of state execution when entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'."
        ],
        "safety_requirements": [
            "When transitioning from altitude hold to climb 2 or descent, the system should verify the state transition conditions (e.g., not set, always satisfied, never satisfied) to ensure correct logic and compliance with the |DH| > 50m trigger rule.",
            "When multiple state transition conditions are simultaneously satisfied (e.g., triggered by |DH| > 50m), the system should prioritize among altitude hold, climb 2, and descent to ensure deterministic state transitions.",
            "During flight phase transitions triggered by |DH| > 50m, the system should validate the alignment of states and functions based on predefined priority logic (high priority overrides low or vice versa).",
            "The system should implement a wrap-around detection-based fault handling mechanism for the transition from altitude hold to climb 2 or descent, and define a state reporting strategy during faults to ensure traceability and controllability under |DH| > 50m conditions."
        ]
    },
    {
        "id": 62,
        "requirement": "Md2(k) = Kp1I · Md1(k), with Md2(k) clamped within [Xf, Xfx]",
        "original_safety_criterions": [
            "Check values of continuous interface data across different redundancies. Analyze functional correctness when two or more redundancy interfaces have 'inconsistent values, i.e., differences exceeding defined thresholds'.",
            "Check output data across different redundancies. Analyze functional correctness when 'one redundancy fails, or all redundancies fail'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'.",
            "Check values of discrete interface data across different redundancies. Analyze functional correctness when two or more redundancy interfaces have 'inconsistent values'.",
            "Check values of continuous output data across different redundancies. Analyze functional correctness when two or more redundancy outputs have 'inconsistent values, i.e., differences exceeding defined thresholds'."
        ],
        "safety_requirements": [
            "The system should check output data during single or multiple redundancy failures to ensure correct implementation of Md2(k) = Kp1I · Md1(k), and strictly clamp Md2(k) within [Xf, Xfx].",
            "The system should verify the logic of Md2(k) = Kp1I · Md1(k) when two or more redundancies are in different operating states, ensuring accurate clamping within [Xf, Xfx].",
            "The system should perform real-time checks on redundant continuous interface data. When value differences exceed thresholds, ensure the correctness of Md2(k) = Kp1I · Md1(k) and the effectiveness of clamping within [Xf, Xfx].",
            "The system should perform consistency checks on redundant discrete interface data. When values differ, ensure correct execution of Md2(k) = Kp1I · Md1(k) and accurate application of clamping within [Xf, Xfx].",
            "The system should perform threshold validation on redundant continuous output data. When output differences exceed allowable ranges, ensure correct functionality of Md2(k) = Kp1I · Md1(k) and prevent clamping beyond [Xf, Xfx]."
        ]
    },
    {
        "id": 63,
        "requirement": "In the longitudinal direction during final approach, the underscored parts are clamped within [-XfSita, XfSita]",
        "original_safety_criterions": [
            "Check transition conditions between each pair of states in the software state space. Analyze the correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "Is there wrap-around detection-based fault handling? Is the state reporting strategy reasonable during faults?",
            "Check state entry conditions. Analyze the correctness of state execution when conditions are 'satisfied, unsatisfied, or re-satisfied' during execution."
        ],
        "safety_requirements": [
            "During longitudinal state transitions in final approach, the system should check transition conditions to ensure correct logic under 'not set, always satisfied, or never satisfied' scenarios and proper application of the [-XfSita, XfSita] clamp.",
            "The system should implement a wrap-around detection-based fault handling mechanism. During faults, it should accurately report longitudinal clamp parameters like [-XfSita, XfSita], and verify the reasonableness of the reporting strategy.",
            "The system should check entry conditions for flight states during final approach, ensuring correct execution logic when conditions are 'satisfied, unsatisfied, or re-satisfied', while maintaining the validity of the [-XfSita, XfSita] clamp."
        ]
    },
    {
        "id": 64,
        "requirement": "The system shall be capable of calculating and providing the speed relationship for final approach at an altitude of 200m.",
        "original_safety_criterions": [
            "Check multiple input data for the function. Analyze functional correctness under combinations such as 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'.",
            "Functions may have different control calculation processes under different states and operational phases. Check function inputs and analyze correctness when 'operational phase or state is not considered'.",
            "Check the control calculation process of the function. Analyze functional correctness if the process times out (does not return results within the specified time).",
            "Check the execution sequence of tasks. Analyze functional correctness when the actual execution order differs from the specified sequence.",
            "Check the results of the control calculation. Analyze functional correctness when the result is 'normal, abnormal, boundary, maximum/minimum values'."
        ],
        "safety_requirements": [
            "The system should check input data for speed calculations at 200m altitude during final approach, ensuring correct logic under combinations such as normal, abnormal, boundary, initial, safe, and default values.",
            "The system should execute speed calculations at 200m altitude during final approach based on the current operational phase and state, ensuring correct results even when phase or state is not considered.",
            "The system should set time thresholds for the speed calculation process. If no result is returned within the threshold, trigger exception handling and output a safe default value.",
            "The system should validate task execution sequences in real time. If the sequence deviates from specifications, ensure the calculated speed relationship complies with safety constraints.",
            "The system should validate the results of speed calculations at 200m altitude during final approach, ensuring that processing of normal, abnormal, boundary, and extreme values conforms to fault-tolerant rules."
        ]
    },
    {
        "id": 65,
        "requirement": "The system shall implement lateral control, identical to segment 2 climb.",
        "original_safety_criterions": [
            "Check execution timing across different redundancies. Analyze functional correctness when 'two or more redundancies are not synchronized'.",
            "Functions may have different control calculation processes under different states and operational phases. Check function inputs and analyze correctness when 'operational phase or state is not considered'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check lateral control inputs under different operational phases and states, ensuring correct calculation even when 'phase' or 'state' is not considered.",
            "The system should check synchronization of lateral control execution timing across different redundancies, ensuring correct implementation when 'two or more redundancies are not synchronized'.",
            "The system should check the operating states of different redundancies, ensuring correct implementation of lateral control when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 66,
        "requirement": "The system shall implement throttle airspeed closed-loop control, where the reference airspeed ug is calculated based on aircraft performance, with data referring to Appendix's final approach speeds.",
        "original_safety_criterions": [
            "Check interface data across different redundancies. Analyze functional correctness when 'single redundancy fails, all redundancies fail (e.g., data anomaly, timing fault, communication fault, destination device failure)'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check interface data across different redundancies, ensuring correct implementation of throttle airspeed closed-loop control even when 'single redundancy fails' or 'all redundancies fail' (e.g., data anomaly, timing fault, communication fault).",
            "The system should check operating states of different redundancies. When 'two or more redundancies are in different states', use dynamic arbitration to ensure correct implementation of throttle airspeed closed-loop control.",
            "The system should perform multi-source data validation on the reference airspeed ug derived from aircraft performance calculations, ensuring consistency with Appendix's final approach speeds to prevent control failure due to abnormal inputs.",
            "The system should trigger fault-tolerant handling procedures upon redundancy failure or state conflict and record fault information to support subsequent diagnostics and recovery."
        ]
    },
    {
        "id": 67,
        "requirement": "The system shall implement discretized calculations, including Md2(k), Md3(k), and Jg(k), and apply clamping to Md2(k) and Md3(k).",
        "original_safety_criterions": [
            "Check multiple input data for the function. Analyze functional correctness under combinations such as 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'.",
            "Check discrete output data across different redundancies. Analyze functional correctness when 'two or more redundancies produce inconsistent output values'.",
            "Check discrete interface data across different redundancies. Analyze functional correctness when 'two or more redundancies produce inconsistent interface values'."
        ],
        "safety_requirements": [
            "The system should check input data for discretized calculations (including normal, abnormal, boundary, initial, safe, and default values), ensuring correct computation and clamping of Md2(k), Md3(k), and Jg(k).",
            "When multiple redundancies are in different operating states, the system should verify the accuracy of discretized calculations, including Md2(k), Md3(k), and Jg(k) computations and clamping.",
            "The system should perform consistency checks on discrete interface data across different redundancies. When 'values are inconsistent', ensure correct discretized calculations, including Md2(k), Md3(k), and Jg(k) computations and clamping.",
            "The system should perform consistency checks on discrete output data across different redundancies. When 'output values are inconsistent', ensure correct discretized calculations, including Md2(k), Md3(k), and Jg(k) computations and clamping."
        ]
    },
    {
        "id": 68,
        "requirement": "The system shall implement longitudinal control during descent, identical to segment 1 climb, where the reference airspeed ug is calculated based on aircraft performance, with boundary points clamped.",
        "original_safety_criterions": [
            "Check control calculation results. Analyze functional correctness when results are 'normal, abnormal, boundary, or extreme values'.",
            "Check interface data across different redundancies. Analyze functional correctness when 'single redundancy fails, all redundancies fail (e.g., data anomaly, timing fault, communication fault, destination device failure)'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "During longitudinal control in descent, the system should check airspeed ug calculation results (including normal, abnormal, boundary, and extreme values) and ensure correct boundary point clamping.",
            "During longitudinal control in descent, the system should check the operating states of different redundancies. When 'two or more redundancies are in different states', ensure correct and consistent control output.",
            "The system should monitor redundancy interface data related to longitudinal control in descent. In cases of 'single redundancy failure' or 'all redundancies failing' (e.g., data anomaly, timing fault, communication fault), implement fault tolerance or redundancy switching to ensure control functionality."
        ]
    },
    {
        "id": 69,
        "requirement": "The system shall implement lateral control during descent, identical to segment 2 climb.",
        "original_safety_criterions": [
            "Check output data across different redundancies. Analyze functional correctness when 'single redundancy fails, multiple redundancies fail'.",
            "Is the system's control sequence and timing coordinated with hardware? Are the control conditions complete and consistent?",
            "Check execution timing across different redundancies. Analyze functional correctness when 'two or more redundancies are not synchronized'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should perform real-time checks on redundancy output data for lateral control during descent, ensuring correct implementation even when 'single redundancy fails' or 'multiple redundancies fail'.",
            "The system should check synchronization of execution timing across different redundancies. Even when 'two or more redundancies are not synchronized', ensure correct implementation of lateral control during descent.",
            "During lateral control in descent, the system should ensure coordination of control sequence and timing with hardware, and verify completeness and consistency of control conditions.",
            "The system should monitor the operating states of different redundancies, ensuring correct output of lateral control during descent even when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 70,
        "requirement": "The system shall implement fixed-throttle control, reducing throttle according to the minimum throttle limit value, which can be adjusted via throttle fine-tuning. The default values should be provided for altitudes of 5000, 6000, 7000, and 8000 meters, with intermediate values determined through linear interpolation. Above 5000 meters, the adjustment range during descent is [-10%.",
        "original_safety_criterions": [
            "Check default values of interface data. Analyze output correctness when 'default value is an out-of-range abnormal value'.",
            "Check logical decision conditions and branches of the function. Analyze functional correctness when 'logic is always false, always true, condition is incorrect, or branch is missing'.",
            "Check default values of interface data. Analyze output correctness when 'no default value is set'.",
            "Check operating states of different redundancies. Analyze functional correctness when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check the operating states of different redundancies, ensuring that fixed-throttle control meets expected behavior even when 'two or more redundancies are in different states'.",
            "The system should perform comprehensive checks on logical decision conditions and branches for fixed-throttle control, preventing anomalies caused by 'always-true logic, always-false logic, incorrect conditions, or missing branches'.",
            "The system should validate the correctness of default minimum throttle limit values (for 5000, 6000, 7000, and 8000 m altitudes) and their linear interpolation results, triggering exception handling when defaults fall outside valid ranges.",
            "The system should ensure correct execution of fixed-throttle control logic even when default values are not set, especially ensuring compliance with safety constraints for the [-10%] adjustment range above 5000 m during descent."
        ]
    },
    {
        "id": 71,
        "requirement": "Flight Phase Determination Functional Requirement: Automatically determine the current flight phase based on aircraft position and motion parameter information.",
        "original_safety_criterions": [
            "The functional control computation process varies under different states and operating phases; check the function inputs, and analyze the correctness of functional processing in cases such as 'operating phase not considered' or 'operating state not considered'.",
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Have the system safety requirements related to software been adequately and accurately implemented in the software requirements or design documents?",
            "Check the working status of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states.",
            "Check the duration of each task and analyze the correctness of functional processing when the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "The system shall verify the output of the flight phase determination function when redundancy statuses are inconsistent, ensuring correct logical judgment that aligns with the actual current flight phase.",
            "The system shall perform completeness verification on the logical judgment conditions and branches of the flight phase determination function to prevent incorrect processing due to logic always false, always true, condition errors, or missing branches.",
            "The system must ensure that relevant safety requirements for flight phase determination (including differences in multi-phase control computation) are clearly implemented and verified in software requirements and design documentation.",
            "When performing control computations for different flight phases, the system shall perform dynamic checks on input parameters to ensure accurate association between the current flight phase and flight state parameters."
        ]
    },
    {
        "id": 72,
        "requirement": "Ground Waiting Phase: The aircraft is stationary before takeoff and after complete landing.",
        "original_safety_criterions": [
            "There is no transition relationship between two or more states; check the entry conditions of these states and analyze the correctness of state execution when the conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Check the transition conditions between each pair of states in the software state space, and analyze the correctness of state transitions when the conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Are the entry and exit conditions of each mode consistent?",
            "Check the entry conditions of states and analyze the correctness of state execution when the conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "During state transitions in the ground waiting phase, the system shall verify that transition conditions between each pair of states are correctly configured, ensuring correct state transitions even when conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "The system shall verify the entry conditions of states without transition relationships during the ground waiting phase, ensuring correct state execution when conditions are 'simultaneously satisfied' or 'satisfied during execution'.",
            "During state execution in the ground waiting phase, the system shall continuously monitor entry conditions, ensuring correct execution logic when the conditions are 'satisfied', 'not satisfied', or 'satisfied again'."
        ]
    },
    {
        "id": 73,
        "requirement": "Takeoff Ground Segment (Takeoff Roll Segment): Control the aircraft's lateral deviation and yaw angle relative to the runway centerline using differential braking and rudder deflection, and control the aircraft longitudinally according to a given pitch angle.",
        "original_safety_criterions": [
            "The functional control computation process varies under different states and operating phases; check the function inputs, and analyze the correctness of functional processing in cases such as 'operating phase not considered' or 'operating state not considered'.",
            "Check the sequential execution timing of various tasks, and analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the operational status of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "During the takeoff ground segment (takeoff roll segment), the system shall verify the task execution sequence to ensure correct handling of left-right differential braking, rudder deflection, and longitudinal pitch angle control when the sequence differs from the specified one.",
            "During the takeoff ground segment (takeoff roll segment), the system shall verify function inputs against the current phase and state to ensure accurate computation of lateral deviation, yaw angle, and pitch angle control when relevant factors are not considered.",
            "The system shall verify the operational status of different redundancies during the takeoff ground segment (takeoff roll segment); when two or more redundancies are in different states, it shall ensure correct implementation of lateral deviation, yaw angle, and pitch angle control.",
            "The system shall check the logical judgment conditions and branches during the takeoff ground segment (takeoff roll segment) to ensure that control functions meet safety requirements even when logic is always false, always true, misjudged, or branches are missing."
        ]
    },
    {
        "id": 74,
        "requirement": "Takeoff Climb Segment: From the point where altitude and airspeed reach certain values to the safe altitude, primarily controlling the aircraft to climb at a certain pitch angle.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the sequential execution timing of various tasks, and analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the results of the function's control computation, and analyze the correctness of functional processing when the results are 'normal value', 'abnormal value', 'boundary value', 'extreme value', etc.",
            "Check the operational status of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "During the takeoff climb segment, the system shall perform real-time checks on control computation results to ensure correct pitch climbing control when results are 'normal value', 'abnormal value', 'boundary value', 'extreme value', etc.",
            "The system shall validate the completeness of logical judgment conditions and branches during the takeoff climb segment to ensure correct handling of control logic when conditions such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing branch' occur.",
            "When detecting two or more redundancies in different operational states, the system shall ensure correct execution of the pitch climbing function during the takeoff climb segment and trigger a state synchronization mechanism.",
            "The system shall monitor the execution sequence of tasks during the takeoff climb segment, and immediately activate an error correction mechanism when the sequence deviates from specifications to ensure accurate pitch climbing control."
        ]
    },
    {
        "id": 75,
        "requirement": "Climb Segment 1: From the safe altitude (80m) until flap retraction, primarily controlling continued climb, transitioning longitudinal control to airspeed control, and retracting landing gear and flaps sequentially.",
        "original_safety_criterions": [
            "Check the results of the function's control computation, and analyze the correctness of functional processing when the results are 'normal value', 'abnormal value', 'boundary value', 'extreme value', etc.",
            "Check the sequential execution timing of various tasks, and analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the operational status of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "During Climb Segment 1, the system shall check the operational status of different redundancies and ensure that the aircraft continues climbing, transitions longitudinal control to airspeed control, and retracts landing gear and flaps in order, even when two or more redundancies are in different states.",
            "The system shall check the control computation results during Climb Segment 1 (including normal, abnormal, boundary, and extreme values) to ensure correct functional processing in all scenarios and maintain control stability from the safe altitude (80m) until flap retraction.",
            "The system shall verify the execution sequence of tasks during Climb Segment 1 and automatically trigger a correction mechanism when deviations from the specified sequence are detected, ensuring that landing gear and flap retraction follows safe operational procedures."
        ]
    },
    {
        "id": 76,
        "requirement": "Climb Segment 2: From flap retraction until reaching the required cruise altitude, or from one altitude to a higher altitude. Longitudinal control follows a specified airspeed, while lateral control ensures the aircraft follows a pre-programmed route.",
        "original_safety_criterions": [
            "There is no transition relationship between two or more states; check the entry conditions of these states and analyze the correctness of state execution when the conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "For multiple states with transition relationships and assigned priorities, check the functions and analyze the correctness of state and function behavior when switching between 'high priority to low priority' or 'low priority to high priority'.",
            "Check the transition conditions between each pair of states in the software state space, and analyze the correctness of state transitions when the conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Check the entry conditions of states and analyze the correctness of state execution when the conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution."
        ],
        "safety_requirements": [
            "During state transitions in Climb Segment 2, the system shall verify the transition conditions between each pair of states to ensure correct state transition logic and normal longitudinal airspeed control and lateral route tracking functions when conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "The system shall verify the entry conditions for states in Climb Segment 2 and analyze the correctness of state execution when conditions are 'satisfied', 'not satisfied', or 'satisfied again' during execution, ensuring that climbs to cruise altitude or to higher altitudes conform to preset parameters.",
            "The system shall validate the transition logic between Climb Segment 2 and other states (e.g., flap retraction to cruise altitude, low-altitude to high-altitude climb) to ensure matching of route flight control and airspeed control, and functional correctness.",
            "During Climb Segment 2, the system shall check the entry conditions of states with no transition relationships, analyzing situations such as 'simultaneously satisfied' or 'satisfied during execution', to ensure that longitudinal and lateral control commands do not conflict and remain within safety thresholds."
        ]
    },
    {
        "id": 77,
        "requirement": "Level Flight Phase: Longitudinal control of aircraft altitude and airspeed, lateral control of lateral deviation, enabling the aircraft to fly at specified altitude and airspeed.",
        "original_safety_criterions": [
            "Check the entry conditions of states and analyze the correctness of state execution when the conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution.",
            "Check the operational status of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "During the level flight phase, the system shall verify the operational status of each redundancy, ensuring correct longitudinal altitude and airspeed control and lateral deviation control functions even when two or more redundancies are in different states.",
            "During the level flight phase, the system shall verify the entry conditions, ensuring that changes caused by conditions being 'satisfied', 'not satisfied', or 'satisfied again' during execution do not affect the accuracy of flight altitude, airspeed, and lateral deviation control."
        ]
    },
    {
        "id": 78,
        "requirement": "During descent below 5000 meters, the throttle limit shall be no less than 6%, with a change range of [-6.5%, 10%].",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the results of the function's control computation, and analyze the correctness of functional processing when the results are 'normal value', 'abnormal value', 'boundary value', 'extreme value', etc."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and logic branches of the throttle limit function to ensure correct handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch', meeting the requirement that the limit is no less than 6% and the change range is [-6.5%, 10%].",
            "The system shall verify the control computation results of the throttle limit function to ensure correct computation results across 'normal value', 'abnormal value', 'boundary value', 'extreme value' scenarios, remaining within the [-6.5%, 10%] range and maintaining a minimum limit of 6%."
        ]
    },
    {
        "id": 79,
        "requirement": "When the aircraft passes through the 5000-meter altitude, linearly reduce the throttle fine-tuning amount to zero at a rate of 5%/second.",
        "original_safety_criterions": [
            "Check the transition conditions between each pair of states in the software state space, and analyze the correctness of state transitions when the conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Is there wrap-around detection-based fault handling, and is the state reporting strategy reasonable during faults?",
            "Check the entry conditions of states and analyze the correctness of state execution when the conditions are 'satisfied', 'not satisfied', or 'satisfied again' during state execution.",
            "When issuing hazardous control commands or actions, is there a reasonableness judgment based on equipment status?",
            "Check the data processing process of the function and analyze whether division-by-zero can occur."
        ],
        "safety_requirements": [
            "When the aircraft crosses the 5000-meter altitude, the system shall execute fault handling based on wrap-around detection mechanisms and ensure that the throttle fine-tuning amount decreases linearly to zero and the state reporting strategy meets safety requirements.",
            "The system shall verify the conditions for entering the throttle fine-tuning adjustment state, confirming correct execution at a rate of 5%/second when the conditions are 'satisfied', 'not satisfied', or 'satisfied again'.",
            "Before issuing throttle control commands, the system shall make reasonableness judgments based on aircraft altitude (e.g., 5000 meters) to avoid hazardous operations.",
            "The system shall verify the correctness of state transition conditions ('not set', 'always satisfied', 'never satisfied') to ensure proper throttle fine-tuning adjustment conditions and execution processes when crossing the 5000-meter altitude.",
            "The system shall dynamically check the data processing process for throttle fine-tuning adjustments to eliminate division-by-zero risks and ensure computational stability."
        ]
    },
    {
        "id": 80,
        "requirement": "Glide Slope Segment 1 longitudinal control is the same as that in the final approach level flight; reference altitude is defined in Part VI regarding glide path processing.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the control computation process of the function and analyze the correctness of functional processing in case of timeout (failure to return results within the specified time)."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions of the Glide Slope Segment 1 longitudinal control function (same as final approach level flight) to ensure correct processing logic in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "The system shall trigger an alert mechanism upon detecting abnormal logic conditions and maintain the current safe flight state until the logic conditions are restored."
        ]
    },
    {
        "id": 81,
        "requirement": "The lateral control in glide phase 1 is the same as in climb phase 2.",
        "original_safety_criterions": [
            "Check the execution sequence of tasks and analyze whether the function handles correctly when the actual execution sequence differs from the specified one.",
            "Check the operating states of different redundancies and analyze whether the function operates correctly when 'two or more redundancies are in different states'.",
            "Check the loop judgment conditions of the function and analyze whether the function handles correctly when the condition is always true or always false."
        ],
        "safety_requirements": [
            "The system shall check the redundancy status of lateral control in glide phase 1, ensuring correct control functionality when 'two or more redundancies are in different states'.",
            "The system shall verify the consistency between the actual and specified execution sequences; if a deviation occurs in the timing of lateral or climb control, an error correction mechanism shall be triggered to ensure proper function handling.",
            "The system shall monitor the loop judgment conditions of lateral control and climb functions in real time, ensuring that the control logic is handled correctly even when the condition is always true or always false."
        ]
    },
    {
        "id": 82,
        "requirement": "The throttle speed closed-loop control formula for glide phase 1 is δp = Kp (vg - vk), with δp limited to [12.5%, 100%]; the reference speed is specified in the appendix on glide speed.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the loop judgment conditions of the function and analyze its correctness when the condition is always true or always false.",
            "Different phases and states lead to different computation processes; check the function inputs and analyze correctness when 'phase or state is not considered'.",
            "Check the computational results of the function and analyze its correctness when the result is 'normal, abnormal, boundary, maximum or minimum value'.",
            "Verify whether the timing, constraints, concurrency, and combination relationships among control logics are correct."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and branches of the throttle speed closed-loop control formula δp = Kp (vg - vk) to ensure correct handling when 'logic is always false, always true, condition is wrong, or branch is missing'.",
            "The system shall validate airspeed parameters (vg, vk) under different operational phases and states to ensure the computation considers current phase and state constraints.",
            "The system shall monitor the computed throttle command δp in real-time to ensure predefined handling strategies are applied to 'normal, abnormal, boundary, maximum or minimum values', and enforce δp limits within [12.5%, 100%].",
            "The system shall verify the correctness of timing, constraint, and combined logic in the control formula to ensure δp remains strictly within [12.5%, 100%] range.",
            "The system shall dynamically detect loop judgment conditions in the control formula to prevent computational failure due to conditions that are always true or always false."
        ]
    },
    {
        "id": 83,
        "requirement": "Longitudinal control in glide phase 2 is the same as in glide phase 1.",
        "original_safety_criterions": [
            "Check the execution order of tasks and analyze whether the function handles correctly when the actual sequence differs from the specified one.",
            "Check the duration of each task and analyze whether the function handles correctly when the duration exceeds the specified time.",
            "Check the duration of each task and analyze whether the function handles correctly when the duration is less than the specified time."
        ],
        "safety_requirements": [
            "The system shall check the duration of longitudinal control tasks in glide phase 2 and ensure that the handling logic is consistent with glide phase 1 when the duration is shorter than specified, verifying the correctness of the output.",
            "The system shall check the duration of longitudinal control tasks in glide phase 2 and ensure that the handling logic is consistent with glide phase 1 when the duration is longer than specified, verifying the correctness of the output.",
            "The system shall monitor the execution sequence of longitudinal control tasks in glide phase 2 and enforce corrective measures when the sequence deviates from the specification, verifying the integrity of the functional logic."
        ]
    },
    {
        "id": 84,
        "requirement": "The roll control structure for lateral control in glide phase 2 is shown in Figure 3-6. The heading control formula is yg = - (Kyz·Δy + KyzI∫ Kys·Δydt + Kyzd·wy), where the underscored term is limited to [- XfFxd , XfFxd].",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the computed control results and analyze their correctness when they are 'normal, abnormal, boundary, maximum or minimum values'.",
            "Verify whether the timing, constraints, concurrency, and combination relationships among control logics are correct.",
            "Check the operating states of different redundancies and analyze whether the function performs correctly when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall continuously monitor the heading control formula yg = - (Kyz·Δy + KyzI∫ Kys·Δydt + Kyzd·wy) to ensure the output remains within [- XfFxd , XfFxd] and handle cases such as 'normal, abnormal, boundary, maximum or minimum values' correctly.",
            "The system shall verify the logical judgment conditions and branches in the heading control formula to ensure no logic is always false, always true, incorrectly conditioned, or missing, and ensure correct application of the limit [- XfFxd , XfFxd].",
            "The system shall check the timing, constraints, concurrency, and combination relationships among all function points in the lateral roll control structure of glide phase 2 to ensure that the execution logic of the heading control formula complies with design requirements.",
            "When multiple redundancies are in different operational states, the system shall ensure that the output of the heading control formula follows the limit [- XfFxd , XfFxd] and maintains computational integrity."
        ]
    },
    {
        "id": 85,
        "requirement": "Throttle speed closed-loop control in glide phase 2 is the same as in glide phase 1.",
        "original_safety_criterions": [
            "Is the fault detection logic reasonable? Will the detection method affect normal operation of the equipment?"
        ],
        "safety_requirements": [
            "The system shall verify the reasonableness of the fault detection logic and ensure that the detection method does not interfere with the normal operation of the throttle speed closed-loop control in glide phase 2."
        ]
    },
    {
        "id": 86,
        "requirement": "The discretization formula is Md2(k) = KxzI · Md1(k), with Md2(k) limited to [-XfGama / 0.6, +XfGama].",
        "original_safety_criterions": [
            "Check the output data of different redundancies and analyze whether the function operates correctly when 'a single redundancy fails, or multiple redundancies fail'.",
            "Check the operational states of different redundancies and analyze whether the function operates correctly when 'two or more redundancies are in different states'.",
            "Check the discrete output data values of different redundancies and analyze whether the function operates correctly when 'the outputs of two or more redundancies differ'.",
            "Check the discrete interface data values of different redundancies and analyze whether the function operates correctly when 'the interface data values of two or more redundancies differ'."
        ],
        "safety_requirements": [
            "When two or more redundancies are in different operational states, the system shall verify the correctness of the discretization formula Md2(k) = KxzI · Md1(k) and ensure that Md2(k) is limited within [-XfGama/0.6, +XfGama].",
            "The system shall check the discrete interface data values of different redundancies and ensure that the discretization formula Md2(k) = KxzI · Md1(k) computes correctly and that Md2(k) remains within [-XfGama/0.6, +XfGama] when interface data values differ.",
            "The system shall check the discrete output data values of different redundancies and ensure that the discretization formula Md2(k) = KxzI · Md1(k) computes correctly and that Md2(k) remains within [-XfGama/0.6, +XfGama] when output data values differ.",
            "In the event of a single or multiple redundancy failures, the system shall check the output limit of the discretization formula Md2(k) = KxzI · Md1(k) to ensure it remains strictly within [-XfGama/0.6, +XfGama]."
        ]
    },
    {
        "id": 87,
        "requirement": "Calculate Md3(k) = Kxz * Dz(k)",
        "original_safety_criterions": [
            "Check the output data of different redundancies and analyze whether the function operates correctly when 'a single redundancy fails, or multiple redundancies fail'.",
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes delayed satisfaction of the execution condition.",
            "Check the duration of each task and analyze whether the function handles correctly when the duration exceeds the specified time.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes early satisfaction of the execution condition."
        ],
        "safety_requirements": [
            "The system shall check the duration of the Md3(k) = Kxz * Dz(k) computation task and ensure correct results are obtained even when the duration exceeds the specified time.",
            "The system shall check whether the input data causes early satisfaction of the execution condition and ensure correct handling of the Md3(k) = Kxz * Dz(k) calculation.",
            "The system shall check the logical judgment conditions and branches to ensure correct computation of Md3(k) = Kxz * Dz(k) when logic is always false, always true, incorrectly conditioned, or branches are missing.",
            "The system shall check the output data of different redundancies and ensure correct computation of Md3(k) = Kxz * Dz(k) even when a single or multiple redundancies fail.",
            "The system shall check whether the input data causes delayed satisfaction of the execution condition and ensure correct handling of the Md3(k) = Kxz * Dz(k) calculation."
        ]
    },
    {
        "id": 88,
        "requirement": "Calculate Md4(k) = Md2(k) + Md3(k) + Kxzd * Dz(k)",
        "original_safety_criterions": [
            "Check the output data of different redundancies and analyze whether the function operates correctly when 'a single redundancy fails, or multiple redundancies fail'.",
            "Check multiple input data values of the function and analyze its correctness when inputs are combinations of 'normal values, abnormal values, boundary values, initial values, safe values, default values'.",
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes delayed satisfaction of the execution condition.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes early satisfaction of the execution condition."
        ],
        "safety_requirements": [
            "The system shall validate the input data (Md2(k), Md3(k), Kxzd, Dz(k)) of Md4(k) to ensure correct results when execution conditions are satisfied late.",
            "The system shall verify the logical conditions of Md4(k) computation to eliminate calculation errors caused by always-false, always-true, incorrect conditions, or missing branches.",
            "The system shall perform equivalence class and boundary value validation when Md4(k) input data consists of normal, abnormal, boundary, initial, safe, or default value combinations to ensure expected results.",
            "The system shall monitor the redundancy status of Md4(k) outputs and maintain computational validity and result reliability even during single or full redundancy failures.",
            "The system shall check for cases where Md4(k) input data causes early satisfaction of execution conditions and ensure correct and timely functional handling."
        ]
    },
    {
        "id": 89,
        "requirement": "Limit Md5(k) within the range [-XfGama, XfGama]",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the loop judgment conditions of the function and analyze its correctness when the condition is always true or always false.",
            "Check the computed control results and analyze their correctness when they are 'normal, abnormal, boundary, maximum or minimum values'.",
            "Check the control computation process and analyze its correctness when computation times out (does not return a result within the specified time)."
        ],
        "safety_requirements": [
            "The system shall check the loop judgment conditions of the Md5(k) limiting process and ensure correct execution even when the condition is always true or always false.",
            "The system shall ensure the Md5(k) limiting process completes within the specified time and triggers a timeout handling mechanism to return correct results if it exceeds the time limit.",
            "The system shall check the logical judgment conditions and branches of the Md5(k) limiting process to ensure correct handling when logic is always false, always true, incorrect, or branches are missing.",
            "The system shall verify the Md5(k) limiting results to ensure correct handling when values are 'normal, abnormal, boundary, or extreme'."
        ]
    },
    {
        "id": 90,
        "requirement": "Calculate yg(k) = -Md5(k)",
        "original_safety_criterions": [
            "Check the output data of different redundancies and analyze whether the function operates correctly when 'a single redundancy fails, or multiple redundancies fail'.",
            "Check multiple input data values of the function and analyze its correctness when inputs are combinations of 'normal values, abnormal values, boundary values, initial values, safe values, default values'.",
            "Check the logical judgment conditions and branches of the function and analyze its correctness when 'logic is always false, always true, incorrect condition, or branch missing'.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes delayed satisfaction of the execution condition.",
            "Check the input data values used in the execution conditions of tasks and analyze whether the function handles correctly when the input causes early satisfaction of the execution condition."
        ],
        "safety_requirements": [
            "The system shall comprehensively check the logical judgment conditions of the calculation yg(k) = -Md5(k) to ensure correct handling when logic is always false, always true, incorrectly conditioned, or branches are missing.",
            "The system shall validate the calculation yg(k) = -Md5(k) using input data combinations including normal, abnormal, boundary, initial, safe, and default values to ensure correct results.",
            "The system shall ensure correct handling of the calculation yg(k) = -Md5(k) even when input data causes delayed satisfaction of execution conditions.",
            "The system shall monitor the redundancy status of output data (single or multiple redundancy failure) and maintain correct calculation of yg(k) = -Md5(k) in all failure scenarios.",
            "The system shall ensure correct and timely handling of the calculation yg(k) = -Md5(k) even when input data causes early satisfaction of execution conditions."
        ]
    },
    {
        "id": 91,
        "requirement": "Calculate Md2(k) = KyzI * Md1(k)",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' and 'multiple redundancies failures'.",
            "Check multiple input data for the function and analyze the correctness of functional processing when input data values are in combinations such as 'normal value equivalence classes', 'abnormal value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', and 'default value combinations'.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check input data values in the execution conditions of each task, and analyze the correctness of functional processing when input data causes a delay in meeting the task execution conditions.",
            "Check input data values in the execution conditions of each task, and analyze the correctness of functional processing when input data causes premature fulfillment of the task execution conditions."
        ],
        "safety_requirements": [
            "Before calculating Md2(k) = KyzI * Md1(k), the system should check input data values to ensure correct processing when task execution conditions are delayed.",
            "The system should perform multi-scenario validation on the input data for Md2(k) = KyzI * Md1(k), including normal values, abnormal values, boundary values, initial values, safe values, and default value combinations, to ensure robustness of the calculation logic.",
            "The system should verify the logic judgment conditions for Md2(k) = KyzI * Md1(k), identify and handle anomalies such as logic always false, always true, incorrect conditions, or missing branches, to ensure branch completeness.",
            "During the calculation of Md2(k) = KyzI * Md1(k), the system should perform fault detection on outputs from different redundancies to ensure correctness and fault tolerance under single or total redundancy failure scenarios.",
            "The system should monitor the task execution conditions for Md2(k) = KyzI * Md1(k), check for cases where input data causes premature condition fulfillment, and ensure accuracy in functional processing."
        ]
    },
    {
        "id": 92,
        "requirement": "Limit Md2(k) within the range [-XfFxd, XfFxd]",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check the loop judgment conditions of the function and analyze the correctness of functional processing when the loop judgment condition is always false or always true.",
            "Check the control computation process of the function and analyze the correctness of functional processing when the computation exceeds time limits (does not return results within the specified time).",
            "Check whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of various functions are correct.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'."
        ],
        "safety_requirements": [
            "The system should check the logical judgment conditions and branches for limiting Md2(k), ensuring that the limit range strictly remains within [-XfFxd, XfFxd] even under conditions such as logic always false, always true, incorrect conditions, or missing branches.",
            "The system should validate the loop judgment conditions during the limiting of Md2(k), ensuring correct execution of the limiting logic and expected results even when the loop condition is always false or always true.",
            "The system should ensure that the temporal relationships, constraint relationships, concurrent relationships, and combined relationships between the limiting logic of Md2(k) and other function points are correct to avoid logic conflicts.",
            "The system should perform real-time checks on the results of Md2(k) limiting, ensuring correct handling of normal values, abnormal values, boundary values, and extreme values while maintaining valid output ranges.",
            "The system should monitor the execution time of Md2(k) control computations and trigger a fault-tolerant mechanism upon timeout to ensure correct functional processing and system safety."
        ]
    },
    {
        "id": 93,
        "requirement": "Calculate Md3(k) = Kyz * Δy(k) + Md2(k) + Kyzd * wy(k)",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' and 'multiple redundancies failures'.",
            "Check multiple input data for the function and analyze the correctness of functional processing when input data values are in combinations such as 'normal value equivalence classes', 'abnormal value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', and 'default value combinations'.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'.",
            "Check input data values in the execution conditions of each task, and analyze the correctness of functional processing when input data causes premature fulfillment of the task execution conditions."
        ],
        "safety_requirements": [
            "The system should conduct multi-scenario checks on the input data for calculating Md3(k) (Kyz, Δy(k), Md2(k), Kyzd, wy(k)), including normal values, abnormal values, boundary values, initial values, safe values, and default value combinations, to ensure correct results.",
            "The system should verify the accuracy of Md3(k) = Kyz * Δy(k) + Md2(k) + Kyzd * wy(k) when the control computation results are normal values, abnormal values, boundary values, or extreme values.",
            "The system should check the correctness of Md3(k) calculation logic functionality when input data causes early fulfillment of task execution conditions.",
            "The system should monitor output data from different redundancies to ensure that Md3(k) calculation results remain correct even under single or multiple redundancy failure conditions.",
            "The system should check the conditions and branches in the Md3(k) calculation logic, covering scenarios such as logic always false, always true, incorrect conditions, or missing branches, to ensure correct functionality."
        ]
    },
    {
        "id": 94,
        "requirement": "Limit Md3(k) within the range [-XfFxd, XfFxd]",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check the loop judgment conditions of the function and analyze the correctness of functional processing when the loop judgment condition is always false or always true.",
            "Check whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of various functions are correct.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'.",
            "Check the execution conditions of the function and analyze the correctness of functional processing when the execution conditions are 'not met' or 'met again' during function execution."
        ],
        "safety_requirements": [
            "The system should check the loop judgment conditions during Md3(k) limiting to ensure correct execution of the limiting logic within [-XfFxd, XfFxd] even when conditions are always false or always true.",
            "The system should verify the logical judgment conditions and branches during Md3(k) limiting, covering scenarios such as 'logic always false', 'always true', 'incorrect condition', or 'missing branch', to ensure correct processing.",
            "The system should check the temporal, constraint, concurrent, and combined relationships between Md3(k) limiting logic within [-XfFxd, XfFxd] and other function point control logics to ensure correct interactions.",
            "The system should trigger correct processing logic when the limiting condition is 'not met' or 'met again' and verify the accuracy of the limiting result.",
            "The system should validate Md3(k) limiting results across scenarios such as 'normal values', 'abnormal values', 'boundary values', and 'extreme values' to ensure output meets expectations."
        ]
    },
    {
        "id": 95,
        "requirement": "Calculate yg(k) = -Md3(k)",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' and 'multiple redundancies failures'.",
            "Check multiple input data for the function and analyze the correctness of functional processing when input data values are in combinations such as 'normal value equivalence classes', 'abnormal value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', and 'default value combinations'.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check input data values in the execution conditions of each task, and analyze the correctness of functional processing when input data causes a delay in meeting the task execution conditions.",
            "Check input data values in the execution conditions of each task, and analyze the correctness of functional processing when input data causes premature fulfillment of the task execution conditions."
        ],
        "safety_requirements": [
            "When calculating yg(k) = -Md3(k), the system should check input data values for task execution conditions to ensure correct processing when inputs cause early or delayed fulfillment of those conditions.",
            "The system should validate input data for calculating yg(k) = -Md3(k) using equivalent class combinations, covering scenarios such as normal values, abnormal values, boundary values, initial values, safe values, and default value combinations to ensure accurate calculations.",
            "The system should perform a completeness check on the logic judgment conditions for calculating yg(k) = -Md3(k), ensuring correct handling even under conditions such as logic always false, always true, incorrect conditions, or missing branches.",
            "The system should detect output data from different redundancies to maintain correct calculation results for yg(k) = -Md3(k) even under single or multiple redundancy failure conditions."
        ]
    },
    {
        "id": 96,
        "requirement": "In longitudinal control during flare phase, calculate h& as the vertical speed from the radio altimeter after inertial navigation vertical acceleration compensation.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Different states and operational phases lead to different control computation processes. Check function inputs and analyze the correctness of functional processing when factors such as 'operational phase' or 'operational state' are not considered.",
            "Check continuous output data values from different redundancies and analyze the correctness of function implementation when two or more redundancy outputs are inconsistent (i.e., their difference exceeds a specified threshold).",
            "Check the control computation process of the function and analyze the correctness of functional processing when the computation exceeds time limits (does not return results within the specified time).",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'."
        ],
        "safety_requirements": [
            "When calculating h& during longitudinal control in the flare phase, the system should check logical judgment conditions and branches to ensure correct processing under conditions such as logic always false, always true, incorrect conditions, or missing branches.",
            "The system should verify the results of longitudinal control computation during the flare phase to ensure correct processing when results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values', and validate the reasonableness of h&.",
            "The system should monitor the computation process during longitudinal control in the flare phase and trigger a predefined safety handling mechanism if the computation does not return results within the specified time.",
            "When calculating h&, the system should check function inputs based on current flight phase and state to ensure correct longitudinal control results even when 'operational phase' or 'operational state' is not considered.",
            "The system should perform real-time consistency checks on continuous output data from different redundancies and mark anomalies when redundancy data differences exceed specified thresholds, ensuring correct h& computation results."
        ]
    },
    {
        "id": 97,
        "requirement": "In longitudinal control during flare phase, calculate vyg as the commanded vertical speed, vyg = vyt + (h - ht)(vyf - vyt)",
        "original_safety_criterions": [
            "Check the same input data received by different redundancies and analyze the correctness of function implementation when two or more redundancies receive inconsistent values for the same input data.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Different states and operational phases lead to different control computation processes. Check function inputs and analyze the correctness of functional processing when factors such as 'operational phase' or 'operational state' are not considered.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'.",
            "Check whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of various functions are correct."
        ],
        "safety_requirements": [
            "The system should check the consistency of input data (vyt, h, ht, vyf) received by different redundancies to ensure correct calculation of the commanded vertical speed vyg = vyt + (h - ht)(vyf - vyt) during longitudinal control in the flare phase even when input values are inconsistent.",
            "The system should verify the logical judgment conditions (such as logic always false, always true, incorrect conditions, or missing branches) during longitudinal control in the flare phase to ensure correct logic processing and coverage of all exception scenarios.",
            "The system should dynamically validate input data based on current operational phase and state during longitudinal control in the flare phase to prevent errors in vyg calculation due to unconsidered phases or states.",
            "The system should verify the temporal, constraint, concurrent, and combined relationships between the logic for calculating vyg during longitudinal control in the flare phase and other function logics to ensure no conflicts exist.",
            "The system should perform real-time verification on the results of longitudinal control computation during the flare phase (normal values, abnormal values, boundary values, extreme values) and initiate error correction or alarm mechanisms upon detecting anomalies."
        ]
    },
    {
        "id": 98,
        "requirement": "In longitudinal control during flare phase, calculate vygSemi as the automatic adjustment quantity for the commanded vertical speed.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Different states and operational phases lead to different control computation processes. Check function inputs and analyze the correctness of functional processing when factors such as 'operational phase' or 'operational state' are not considered.",
            "Check the control computation process of the function and analyze the correctness of functional processing when the computation exceeds time limits (does not return results within the specified time).",
            "Check whether the temporal relationships, constraint relationships, concurrent relationships, and combined relationships among control logics of various functions are correct.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'."
        ],
        "safety_requirements": [
            "When calculating vygSemi during longitudinal control in the flare phase, the system should monitor computation time and trigger an exception handling mechanism if results are not returned within the specified time to ensure functional correctness.",
            "The system should verify the vygSemi results during longitudinal control in the flare phase to ensure correct control computation when results are normal values, abnormal values, boundary values, or extreme values.",
            "Before calculating vygSemi, the system should check input parameters to ensure they include current operational phase and state information to prevent calculation errors caused by ignoring relevant factors.",
            "The system should verify the logical conditions and branches used in calculating vygSemi during longitudinal control in the flare phase to avoid logic always false, always true, incorrect conditions, or missing branches, ensuring correct processing flow.",
            "The system should ensure that the temporal relationships, constraint relationships, and concurrent combinations among function points during vygSemi calculation in the flare phase meet design requirements to guarantee computational accuracy."
        ]
    },
    {
        "id": 99,
        "requirement": "In longitudinal control during flare phase, calculate duy as the commanded vertical acceleration.",
        "original_safety_criterions": [
            "Different states and operational phases lead to different control computation processes. Check function inputs and analyze the correctness of functional processing when factors such as 'operational phase' or 'operational state' are not considered.",
            "Check the control computation process of the function and analyze the correctness of functional processing when the computation exceeds time limits (does not return results within the specified time).",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check the operational states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "During longitudinal control in the flare phase, the system should check whether inputs consider operational phase and state to ensure correct calculation of the vertical acceleration duy even when 'operational phase' or 'operational state' is not considered.",
            "The system should monitor the computation process during longitudinal control in the flare phase to ensure correct processing of the vertical acceleration duy even if results are not returned within the specified time.",
            "The system should check the logical judgment conditions and branches used in calculating duy during longitudinal control in the flare phase to ensure correct processing under conditions such as logic always false, always true, incorrect conditions, or missing branches.",
            "The system should monitor the operational states of different redundancies to ensure correct implementation of the commanded vertical acceleration duy even when two or more redundancies are in different states."
        ]
    },
    {
        "id": 100,
        "requirement": "When flight altitude is below 2.1 meters, the automatic adjustment quantity for vertical speed, vygSemi, begins to be introduced and is calculated according to the aircraft's pitch angle using the following formula and then limited to [−2, 2].",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of functional processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic judgment condition', or 'missing logic branch'.",
            "Check the control computation process of the function and analyze the correctness of functional processing when the computation exceeds time limits (does not return results within the specified time).",
            "Check discrete output data values from different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output values.",
            "Check the duration of each task and analyze the correctness of functional processing when the task duration is less than the specified duration.",
            "Check the results of the control computation and analyze the correctness of functional processing when the results are 'normal values', 'abnormal values', 'boundary values', or 'extreme values'."
        ],
        "safety_requirements": [
            "When flight altitude is below 2.1 meters, the system should monitor the execution time of the control computation to ensure that the introduction and processing of the vertical speed automatic adjustment quantity vygSemi meet safety requirements even when the computation exceeds time limits.",
            "The system should monitor discrete output data from different redundancies and ensure correct implementation of the vertical speed automatic adjustment quantity vygSemi when flight altitude is below 2.1 meters and redundant data values are inconsistent.",
            "The system should classify-check the results of the vertical speed automatic adjustment quantity vygSemi (normal values, abnormal values, boundary values, extreme values) to verify the accuracy of its calculation and limitation to [−2, 2].",
            "When flight altitude is below 2.1 meters, the system should comprehensively verify the logical judgment conditions for vygSemi calculation, including logic always false, always true, incorrect conditions, or missing branches, to ensure correct calculation and limiting processing.",
            "The system should check deviations between task duration and specified duration to ensure integrity of vygSemi activation, calculation, and limiting processing when flight altitude is below 2.1 meters and task execution time is insufficient."
        ]
    },
    {
        "id": 101,
        "requirement": "If the inertial navigation acceleration is invalid at this time, the feedback of vertical acceleration shall not be included.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect the normal operation of the equipment?",
            "Are there requirements specified for handling misoperations or invalid operations?",
            "Does the operator's action include reasonableness checks so that commands inconsistent with the current scenario or status are not executed?"
        ],
        "safety_requirements": [
            "The system shall immediately stop including vertical acceleration feedback and record the invalid state when inertial navigation acceleration is detected as invalid, to ensure compliance with safety operation requirements.",
            "The system shall perform redundant verification on the detection logic for invalid inertial navigation acceleration to ensure that the detection method does not affect normal equipment operation and triggers a real-time alarm in case of anomalies.",
            "The system shall verify the reasonableness of the logic 'not including vertical acceleration feedback' in operator actions, ensuring it is executed only when inertial navigation acceleration is invalid, and provide an operation confirmation mechanism."
        ]
    },
    {
        "id": 102,
        "requirement": "δp = Kp (vg - vk) + f(J), δp is limited to [3%, 100%]",
        "original_safety_criterions": [
            "Check continuous output data values from different redundancies, and analyze correctness of function implementation when two or more redundancy outputs have 'inconsistent values, i.e., difference exceeds specified threshold'",
            "Check logical judgment conditions and branches of the function, and analyze correctness of function handling under conditions such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'",
            "Check multiple input data of the function, and analyze correctness of function handling when input data values are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Check operating states of different redundancies, and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "When multiple redundancies are in different operating states, the system shall check redundancy state differences to ensure correct calculation of δp = Kp (vg - vk) + f(J), strictly maintaining δp limits within [3%, 100%].",
            "The system shall perform equivalence class combination checks on input data (e.g., vg, vk, J) for δp calculation, covering normal, abnormal, boundary, initial, safe, and default values, to ensure calculated results meet expectations and δp limits remain effective.",
            "The system shall monitor differences between output data from different redundancies; if the difference exceeds the specified threshold, immediately validate δp calculation results and force limit δp to [3%, 100%].",
            "The system shall conduct full-branch coverage checks on logical judgment conditions, including logic always false, always true, incorrect conditions, or missing branches, to ensure δp calculation and limiting consistently meet safety requirements."
        ]
    },
    {
        "id": 103,
        "requirement": "vg = Vt + (h - ht)(Vs - Vt) / (hf - ht)",
        "original_safety_criterions": [
            "Check output data from different redundancies, and analyze correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Check multiple input data of the function, and analyze correctness of function handling when input data values are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Check logical judgment conditions and branches of the function, and analyze correctness of function handling under 'logic always false, logic always true, incorrect logical condition, missing branch' scenarios",
            "Functions have different control computation processes under different states and operational phases. Check function inputs and analyze correctness of function handling when 'operational phase or state is not considered'",
            "Check loop judgment conditions of the function, and analyze correctness of function handling when 'loop condition is always false or always true'"
        ],
        "safety_requirements": [
            "The system shall comprehensively check the logic judgment conditions of the vg calculation function to ensure correct calculation results using the formula vg = Vt + (h - ht)(Vs - Vt)/(hf - ht) even under 'logic always false, logic always true, incorrect condition, missing branch' scenarios.",
            "The system shall implement redundancy data validation mechanisms to ensure accurate calculation results using the formula vg = Vt + (h - ht)(Vs - Vt)/(hf - ht) when 'single redundancy failure' or 'multiple redundancies failure' occurs.",
            "The system shall verify loop judgment conditions during vg calculation to ensure function handling meets expected logic even under abnormal scenarios like 'loop condition always false or always true'.",
            "The system shall cover all input data combination scenarios (including normal/abnormal/boundary/initial/safe/default values) to ensure complete calculation capability using the formula vg = Vt + (h - ht)(Vs - Vt)/(hf - ht).",
            "The system shall dynamically adjust the control computation process based on different operational phases and states to prevent errors in vg calculation due to 'failure to consider operational phase' or 'failure to consider operational state'."
        ]
    },
    {
        "id": 104,
        "requirement": "If J < 3.5 occurs during the calculation of vertical speed automatic correction amount vygSemi, set throttle position δp to zero.",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Check logical judgment conditions and branches of the function, and analyze correctness of function handling under 'logic always false, logic always true, incorrect logical condition, missing branch' scenarios",
            "Check the control computation process of the function and analyze correctness of function handling when computation exceeds timeout (does not return result within specified time)",
            "Check discrete output data values from different redundancies and analyze correctness of function implementation when two or more redundancies have 'inconsistent values'",
            "Check the data processing procedure of the function and analyze whether division by zero may occur"
        ],
        "safety_requirements": [
            "The system shall verify the logical judgment condition J < 3.5 to ensure correct function handling when logic is always false, always true, has incorrect condition, or missing branch, resulting in setting δp to zero.",
            "In case of control computation timeout (no result returned within specified time), the system shall trigger a fault-tolerant mechanism to ensure accuracy of setting δp to zero when J < 3.5 occurs during vygSemi calculation.",
            "When single or multiple redundancies fail, the system shall maintain the logic for judging J < 3.5 to ensure correct execution of setting throttle position δp to zero.",
            "The system shall monitor the vygSemi calculation process in real time to avoid division by zero and terminate calculation and execute δp zeroing upon detecting anomalies."
        ]
    },
    {
        "id": 105,
        "requirement": "Lateral control is the same as segment 2 of glide path.",
        "original_safety_criterions": [
            "Check duration of each task and analyze correctness of function handling when task duration exceeds specified time",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall check redundancy operating states of lateral control and glide path segment 2 functions to ensure correct control logic when 'two or more redundancies are in different states'.",
            "The system shall monitor task durations of lateral control and glide path segment 2, executing predefined safety handling mechanisms and maintaining correct function output when task duration exceeds specified time."
        ]
    },
    {
        "id": 106,
        "requirement": "Discretize vyg",
        "original_safety_criterions": [
            "Check discrete-valued data bits in interface data and analyze correctness of output when adjacent cycle data values jump abruptly",
            "Check discrete-valued data bits in interface data and analyze correctness of output when data values are 'undefined abnormal values outside valid range'",
            "Check discrete interface data values across different redundancies and analyze correctness of function implementation when two or more redundancies have 'inconsistent values'",
            "Check discrete output data values across different redundancies and analyze correctness of function implementation when two or more redundancies have 'inconsistent values'",
            "Check discrete-valued data bits in interface data and analyze correctness of output when data values are 'each enumerated value within valid range'"
        ],
        "safety_requirements": [
            "The system shall check discrete interface data values across different redundancies to ensure correct discretization of vyg function when 'values are inconsistent'.",
            "The system shall check vyg data bit values in interface data to ensure correct output when values are 'undefined abnormal values outside valid range'.",
            "The system shall check discretized vyg output data values across different redundancies to ensure correct function implementation when 'values are inconsistent'.",
            "The system shall verify vyg data bit values in interface data to ensure each 'enumerated value within valid range' is processed as expected.",
            "The system shall detect abrupt changes in vyg data values between consecutive cycles to ensure correct output during transitions."
        ]
    },
    {
        "id": 107,
        "requirement": "calculation(k) = vyt + (h(k) - ht )(vyf  - vyt ) /(hf  - ht )",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Check multiple input data of the function and analyze correctness of function handling when input data values are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Multiple functions or states share one interface data item, with different initial value requirements. Check initial value of this interface data and analyze correctness of output when initial value is 'greater than or less than function/state requirement'",
            "Check logical judgment conditions and branches of the function, and analyze correctness of function handling under 'logic always false, logic always true, incorrect logical condition, missing branch' scenarios",
            "Check input data values used in execution conditions of various tasks and analyze correctness of function handling when input data causes premature fulfillment of execution conditions"
        ],
        "safety_requirements": [
            "The system shall comprehensively check input data for calculation(k)=vyt + (h(k)-ht)(vyf-vyt)/(hf-ht) to ensure correct function handling under combinations of normal, abnormal, boundary, initial, safe, and default values.",
            "The system shall verify output redundancy for calculation(k)=vyt + (h(k)-ht)(vyf-vyt)/(hf-ht) to ensure correct output even when single or multiple redundancies fail.",
            "The system shall check initial values of shared interface data and analyze cases where initial values exceed or fall short of functional requirements to ensure calculation(k)=vyt + (h(k)-ht)(vyf-vyt)/(hf-ht) remains accurate.",
            "The system shall detect scenarios where input data causes premature fulfillment of task execution conditions and ensure correct handling logic for calculation(k)=vyt + (h(k)-ht)(vyf-vyt)/(hf-ht).",
            "The system shall verify logical judgment conditions and branches for calculation(k)=vyt + (h(k)-ht)(vyf-vyt)/(hf-ht) to ensure correct handling even under abnormal conditions like logic always false, always true, incorrect conditions, or missing branches."
        ]
    },
    {
        "id": 108,
        "requirement": "Md 2(k ) = KLI  . Md 1(k )",
        "original_safety_criterions": [
            "Check sequence of task executions and analyze correctness of function handling when execution order differs from specified sequence",
            "Check output data from different redundancies and analyze correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Multiple functions execute serially, with output of previous function being input of subsequent function. Check output of previous function and analyze correctness of multi-function handling when data values are 'normal value equivalence class combinations, abnormal value equivalence class combinations'",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall check output data Md1(k) of the previous function to ensure correct Md2(k) = KLI . Md1(k) function handling under 'normal value equivalence class combinations' or 'abnormal value equivalence class combinations'.",
            "The system shall check output data from different redundancies to ensure correct Md2(k) = KLI . Md1(k) function implementation under 'single redundancy failure' or 'multiple redundancies failure'.",
            "The system shall check operating states of different redundancies to ensure correct Md2(k) = KLI . Md1(k) function implementation when 'two or more redundancies are in different states'.",
            "The system shall check consistency between actual and specified task execution sequences to ensure correct Md2(k) = KLI . Md1(k) function handling when sequences differ."
        ]
    },
    {
        "id": 109,
        "requirement": "Md 2(k ) limited to [- XfSitaF , XfSitaF ]",
        "original_safety_criterions": [
            "Check continuous interface data values from different redundancies and analyze correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds specified threshold'",
            "Check multiple input data of the function and analyze correctness of function handling when input data values are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Check continuous output data values from different redundancies and analyze correctness of function implementation when two or more redundancies have 'inconsistent values, i.e., difference exceeds specified threshold'",
            "Check control computation results of the function and analyze correctness of function handling when results are 'normal value, abnormal value, boundary value, maximum/minimum value'",
            "Are timing relationships, constraint relationships, concurrency relationships, and composite relationships between control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall perform combination checks on input data for the Md 2(k) limiting function to ensure correct limiting [- XfSitaF , XfSitaF ] under combinations of normal, abnormal, boundary, initial, safe, and default values.",
            "The system shall detect differences between continuous output data from different redundancies, and when the difference exceeds specified thresholds, ensure correct implementation of the Md 2(k) limiting [- XfSitaF , XfSitaF ] function.",
            "The system shall check Md 2(k) control computation results to ensure handling logic conforms to limiting requirements under normal, abnormal, boundary, and extreme values.",
            "The system shall verify timing relationships, constraint relationships, concurrency relationships, and composite relationships between Md 2(k) limiting control logic and other function point control logics.",
            "The system shall check differences between continuous interface data from different redundancies, and when the difference exceeds specified thresholds, ensure correct implementation of the Md 2(k) limiting [- XfSitaF , XfSitaF ] function."
        ]
    },
    {
        "id": 110,
        "requirement": "dvyg (k) = h&(k)(vyf   - vyt ) /(hf  - ht )",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of the function and analyze correctness of function handling under 'logic always false, logic always true, incorrect logical condition, missing branch' scenarios",
            "Check output data from different redundancies and analyze correctness of function implementation under 'single redundancy failure, multiple redundancies failure' scenarios",
            "Check multiple input data of the function and analyze correctness of function handling when input data values are combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safe values, default values'",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall perform redundancy output checks on dvyg(k) = h&(k)(vyf - vyt)/(hf - ht) calculation to ensure correct output even when single or multiple redundancies fail.",
            "The system shall verify logical judgment conditions and branches of dvyg(k) = h&(k)(vyf - vyt)/(hf - ht) to ensure correct handling under scenarios such as logic always false, always true, incorrect conditions, or missing branches.",
            "The system shall check combinations of redundancy operating states to ensure accurate calculation of dvyg(k) = h&(k)(vyf - vyt)/(hf - ht) when multiple redundancies are in different states.",
            "The system shall validate input data combinations for dvyg(k) = h&(k)(vyf - vyt)/(hf - ht) to cover normal, abnormal, boundary, initial, safe, and default value scenarios, ensuring robustness of the calculation function."
        ]
    },
    {
        "id": 111,
        "requirement": "Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)]",
        "original_safety_criterions": [
            "Check the output data of different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' or 'multiple redundancies failure'.",
            "Check the interface data of different redundancies and analyze the correctness of function implementation when 'single redundancy failure' or 'all redundancies fail' (e.g., data anomaly, timing fault, communication failure, target device failure).",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundant outputs have 'inconsistent values'.",
            "Multiple functions simultaneously output the same interface data. Check the output values of these functions and analyze the correctness of multi-function processing when multiple functions produce different values for the same interface data.",
            "Check the input data values used in the execution conditions of each task and analyze the correctness of function handling when the input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "The system shall check the interface data of different redundancies and ensure the correctness of calculation Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)] under conditions such as single redundancy failure or all redundancies failure (data anomaly, timing fault, communication failure, target device failure).",
            "The system shall check the input data values when the task execution condition is met prematurely due to input data, ensuring the correctness of Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)] function handling.",
            "The system shall check the discrete output data of different redundancies and ensure the correctness of Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)] function when two or more redundant outputs have inconsistent values.",
            "The system shall check the same interface data values output by multiple functions and ensure the correctness of the calculation result of Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)] when the values differ.",
            "The system shall check the output data of different redundancies and ensure the correctness of Md3(k) = Md2(k) + KL . [vyg(k) - h&(k)] + KLd . [dvyg(k) - &(k)] function when a single redundancy fails or multiple redundancies fail."
        ]
    },
    {
        "id": 112,
        "requirement": "Md4(k) = [(22.0 - T) . Md4(k - 1) + (T + 4) . Md3(k) + (T - 4) . Md3(k - 1)] / (22.0 + T)",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the discrete interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancy interface data values are 'inconsistent'.",
            "Check the interface data of different redundancies and analyze the correctness of function implementation when 'single redundancy failure' or 'all redundancies fail' (e.g., data anomaly, timing fault, communication failure, target device failure).",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancy output data values are 'inconsistent'.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "The system shall check the discrete interface data values of different redundancies and ensure the correct implementation of Md4(k) = [(22.0 - T) . Md4(k-1) + (T+4) . Md3(k) + (T-4) . Md3(k-1)] / (22.0 + T) when two or more redundancy interface data values are inconsistent.",
            "The system shall check the discrete output data values of different redundancies and verify the correctness of Md4(k) = [(22.0 - T) . Md4(k-1) + (T+4) . Md3(k) + (T-4) . Md3(k-1)] / (22.0 + T) function output when two or more redundancy output data values are inconsistent.",
            "The system shall check the input data values that trigger premature satisfaction of the task execution condition and ensure the accuracy of function processing logic for Md4(k).",
            "The system shall check the interface data of redundancies and ensure correct execution of Md4(k) calculation function when a single redundancy fails or all redundancies fail (e.g., data anomaly, timing fault).",
            "The system shall perform combination validation on the input data of Md4(k), including scenarios such as normal values, abnormal values, boundary values, initial values, etc., to ensure correct processing under various value combinations."
        ]
    },
    {
        "id": 113,
        "requirement": "Md4(k) clamped within [- XfSitaF, XfSitaF]",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false, logic always true, incorrect logic condition, missing branch' occur.",
            "Check continuous-type output data values of different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values, i.e., difference exceeds specified threshold'.",
            "Check the control resolution results of the function and analyze the correctness of function processing when the control resolution result is 'normal value, abnormal value, boundary value, extreme maximum/minimum value', etc.",
            "Are the temporal relationship, constraint relationship, concurrent relationship, and combination relationship among control logics of various functional points correct?"
        ],
        "safety_requirements": [
            "The system shall validate the judgment conditions and branches of the Md4(k) clamping logic to ensure correct execution of [- XfSitaF, XfSitaF] clamping even when conditions such as 'logic always false, always true, incorrect condition, missing branch' occur.",
            "The system shall check the difference between continuous-type output data of different redundancies and ensure the correctness and consistency of clamping [- XfSitaF, XfSitaF] function results when redundancy data differences exceed the specified threshold.",
            "The system shall perform anomaly detection on the clamping results of Md4(k), correctly handle situations such as 'normal value, abnormal value, boundary value, extreme maximum/minimum value', and implement a forced safety-value correction mechanism.",
            "The system shall validate multiple input combinations (normal/abnormal/boundary/initial/safety/default values) of Md4(k) clamping function to ensure compliance with [- XfSitaF, XfSitaF] constraints across all equivalence class combinations.",
            "The system shall confirm the timing, constraint, concurrency, and combination relationships between Md4(k) clamping control logic and other functional points to prevent clamping function failure due to logic conflicts."
        ]
    },
    {
        "id": 114,
        "requirement": "Jg(k) = Md4(k)",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the data processing process of the function and analyze whether division by zero occurs during data processing.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration exceeds the specified time.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "The system shall check input data values and ensure the correctness of Jg(k) = Md4(k) function processing when the task execution condition is met prematurely.",
            "The system shall implement division-by-zero checks during the Jg(k) = Md4(k) data processing process and trigger safety mechanisms upon detecting a division-by-zero operation.",
            "The system shall verify the correctness of Jg(k) = Md4(k) function processing when the task duration exceeds the specified time and record any anomalies.",
            "The system shall verify the correctness of Jg(k) = Md4(k) function processing when the task duration is less than the specified time and ensure the effectiveness of state rollback mechanisms.",
            "The system shall validate combinations of input data including normal values, abnormal values, boundary values, initial values, safety values, and default values to ensure Jg(k) = Md4(k) produces expected calculation results."
        ]
    },
    {
        "id": 115,
        "requirement": "δp(k) = Kp(vg(k) - vk(k)) + f(J(k))",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false, logic always true, incorrect logic condition, missing branch' occur.",
            "Check continuous-type output data values of different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values, i.e., difference exceeds specified threshold'.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied with delay.",
            "Check discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values'."
        ],
        "safety_requirements": [
            "The system shall check discrete output data values of different redundancies and ensure the correctness of δp(k) = Kp(vg(k) - vk(k)) + f(J(k)) function implementation when the values are inconsistent.",
            "The system shall check input data values causing delayed task execution conditions and ensure the correctness of δp(k) = Kp(vg(k) - vk(k)) + f(J(k)) function processing.",
            "The system shall check the logical judgment conditions of δp(k) = Kp(vg(k) - vk(k)) + f(J(k)) and ensure correct function processing when logic is always false, always true, conditions are incorrect, or branches are missing.",
            "The system shall check continuous-type output data values of different redundancies and ensure the correctness of δp(k) = Kp(vg(k) - vk(k)) + f(J(k)) function implementation when the values differ beyond the specified threshold.",
            "The system shall validate δp(k) = Kp(vg(k) - vk(k)) + f(J(k)) function processing when input data includes normal values, abnormal values, boundary values, initial values, safety values, and default values."
        ]
    },
    {
        "id": 116,
        "requirement": "δp(k) clamped within [3%, 100%]",
        "original_safety_criterions": [
            "Check continuous-type interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancy interface data values are 'inconsistent, i.e., difference exceeds specified threshold'.",
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false, logic always true, incorrect logic condition, missing branch' occur.",
            "Check the operational states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states.",
            "Check continuous-type output data values of different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values, i.e., difference exceeds specified threshold'."
        ],
        "safety_requirements": [
            "The system shall check continuous-type output data of different redundancies and ensure the correctness of δp(k) clamped within [3%, 100%] function results when redundancy output data differences exceed the threshold.",
            "The system shall check the operating states of different redundancies and ensure the δp(k) clamped within [3%, 100%] function meets design requirements when multiple redundancies are in different states.",
            "The system shall validate the logical judgment conditions and branches of δp(k) clamped within [3%, 100%] to ensure correct processing under conditions such as logic always false, always true, incorrect condition, or missing branch.",
            "The system shall validate δp(k) clamped within [3%, 100%] function processing under various input data combinations (normal/abnormal values, boundary values, initial values, safety values, default values) to ensure correct output.",
            "The system shall perform consistency checks on continuous-type interface data of different redundancies and ensure accurate δp(k) clamped within [3%, 100%] output results when redundancy interface data differences exceed the threshold."
        ]
    },
    {
        "id": 117,
        "requirement": "f(J(k)) = 3J(k)",
        "original_safety_criterions": [
            "Check multiple input data of the function and analyze the correctness of function processing when multiple input data values are in combinations of 'normal value equivalence classes, abnormal value equivalence classes, boundary values, initial values, safety values, default values', etc.",
            "Check the loop judgment conditions of the function and analyze the correctness of function processing when the loop judgment condition is always false or always true.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration exceeds the specified time.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "The system shall check input data values triggering premature satisfaction of the task execution condition and ensure the correct computation of f(J(k)) = 3J(k).",
            "The system shall verify the correctness of f(J(k)) = 3J(k) function processing when the task duration is less than the specified time.",
            "The system shall verify the correctness of f(J(k)) = 3J(k) function processing when the task duration exceeds the specified time.",
            "The system shall check input data for flight status parameter J(k) (including normal values, abnormal values, boundary values, initial values, safety values, default value combinations) to ensure correct function processing.",
            "The system shall check loop judgment conditions and ensure correct processing of f(J(k)) = 3J(k) when the condition is always false or always true."
        ]
    },
    {
        "id": 118,
        "requirement": "At the end of the flare phase, the system needs to calculate the ground deflection command for the aileron actuator loop based on δx0.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false, logic always true, incorrect logic condition, missing branch' occur.",
            "Check the loop judgment conditions of the function and analyze the correctness of function processing when the loop judgment condition is always false or always true.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the data processing process of the function and analyze whether division by zero occurs during data processing.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "When calculating the ground deflection command for the aileron actuator loop, the system shall check the loop judgment conditions and ensure correct function processing when the condition is always false or always true.",
            "The system shall check the task duration being less than or greater than the specified time and ensure correct calculation of the ground deflection command for the aileron actuator loop.",
            "The system shall check the logic conditions and branches of the ground deflection command calculation for the aileron actuator loop to prevent function errors caused by logic always false, always true, incorrect judgment, or missing branches.",
            "The system shall check the calculation process of the ground deflection command for the aileron actuator loop to avoid division-by-zero errors and trigger safety mechanisms upon detecting anomalies."
        ]
    },
    {
        "id": 119,
        "requirement": "The system needs to calculate the yg value using the formula: yg = - (Kyz·Δy + KyzI∫ Kys·Δydt + Kyzd·wy), and the yg value must be clamped within [- XfFxd, XfFxd].",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false, logic always true, incorrect logic condition, missing branch' occur.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied with delay.",
            "Check the input data values in the execution conditions of each task and analyze the correctness of function processing when the input data causes the task execution condition to be satisfied prematurely.",
            "Check the operational states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "When input data causes the task execution condition to be satisfied prematurely, the system shall ensure the correctness of yg value calculation and strictly clamp it within [- XfFxd, XfFxd].",
            "When input data causes the task execution condition to be satisfied with delay, the system shall verify the correctness of yg value calculation function and ensure the clamping remains effective.",
            "When multiple redundancies are in different operational states, the system shall perform redundancy consistency checks on the yg value calculation process to ensure correct results and compliance with clamping requirements.",
            "The system shall comprehensively check the logical judgment conditions and branches of yg value calculation to ensure correct processing and clamping even when logic is always false, always true, conditions are incorrect, or branches are missing."
        ]
    },
    {
        "id": 120,
        "requirement": "Throttle airspeed closed-loop control during the flare phase should be consistent with that during the flare phase.",
        "original_safety_criterions": [
            "Check the sequential execution order of tasks and analyze the correctness of function processing when the actual execution sequence differs from the specified sequence.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships among control logics of various functional points correct?",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Check the execution timing of different redundancies and analyze the correctness of function implementation when two or more redundancies are not synchronized."
        ],
        "safety_requirements": [
            "During the flare phase, the system shall ensure the throttle airspeed closed-loop control sequence and timing are coordinated with hardware, and the control conditions remain complete and consistent with the flare phase logic.",
            "When the execution sequence of throttle airspeed closed-loop control tasks deviates from the specified sequence, the system shall trigger exception handling mechanisms and maintain correct function output.",
            "The system shall check synchronization of execution timing among redundant systems and ensure correct implementation of throttle airspeed closed-loop control when two or more redundancies are not synchronized.",
            "The system shall verify the timing relationships, constraint relationships, and concurrency/combination relationships of throttle airspeed closed-loop control during the flare phase to ensure compliance with flight phase requirements."
        ]
    },
    {
        "id": 121,
        "requirement": "During the discretization process, Md2(k) = KyzI * Md1(k), and Md2(k) must be limited within the range [-XfFxd, XfFxd].",
        "original_safety_criterions": [
            "Check the operating status of different redundancies and analyze the correctness of function implementation in cases such as 'two or more redundancies are in different states'.",
            "Check the values of discrete interface data across different redundancies and analyze the correctness of function implementation when two or more redundancy interface data have 'inconsistent values'.",
            "Check the values of discrete output data across different redundancies and analyze the correctness of function implementation when two or more redundancy output data have 'inconsistent values'.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "When the system detects that multiple redundancies are in different operational states, it should verify the calculation Md2(k) = KyzI·Md1(k) during the discretization process and ensure its correct clamping within the range [-XfFxd, XfFxd].",
            "When the system detects inconsistent values among two or more redundancy interface data, it should validate the correctness of the calculation and clamping of Md2(k) during the discretization process.",
            "The system should monitor the duration of tasks in the discretization process in real-time, ensuring the correctness of Md2(k) calculation and clamping when the duration is shorter than the specified time.",
            "When the system detects inconsistent values among two or more redundancy output data, it should verify the correctness of the clamping function for Md2(k) within the range [-XfFxd, XfFxd].",
            "The system should monitor the duration of Md2(k) processing; when the task duration exceeds the specified time, it should ensure the correctness of the clamping operation within the range [-XfFxd, XfFxd]."
        ]
    },
    {
        "id": 122,
        "requirement": "During the discretization process, Md3(k) = Kyz * Δy(k) + Md2(k) + Kyzd * wy(k), and Md3(k) must be limited within the range [-XfFxd, XfFxd].",
        "original_safety_criterions": [
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Check the values of discrete output data from different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values'.",
            "Check the values of discrete interface data from different redundancies and analyze the correctness of function implementation when two or more redundancy interfaces have 'inconsistent values'."
        ],
        "safety_requirements": [
            "The system should check the function inputs under different operation phases or states to ensure the correctness of the discretization process Md3(k) = Kyz·Δy(k) + Md2(k) + Kyzd·wy(k) and enforce clamping within the range [-XfFxd, XfFxd].",
            "The system should check the discrete output data values of different redundancies. When two or more redundancy data values are inconsistent, ensure the correct computation and clamping of Md3(k).",
            "The system should validate the discrete interface data values of different redundancies. When redundancy data values are inconsistent, ensure that the computed value of Md3(k) still conforms to the formula Kyz·Δy(k) + Md2(k) + Kyzd·wy(k), with enforced clamping within [-XfFxd, XfFxd]."
        ]
    },
    {
        "id": 123,
        "requirement": "In the discretization process, yg(k) = -Md3(k).",
        "original_safety_criterions": [
            "Check the discrete-type value domain bits in the interface data and analyze the correctness of outputs when the bit values are 'each enumeration value within the valid value domain'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'.",
            "Check the values of discrete output data across different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values'.",
            "Check the values of discrete interface data across different redundancies and analyze the correctness of function implementation when two or more redundancy interfaces have 'inconsistent values'."
        ],
        "safety_requirements": [
            "The system should check the discrete interface data values of different redundancies to ensure the correct implementation of the discretization process yg(k) = -Md3(k) even when 'two or more redundancy interface data values are inconsistent'.",
            "The system should check the discrete output data values of different redundancies to ensure the correct implementation of the discretization process yg(k) = -Md3(k) even when 'two or more redundancy output data values are inconsistent'.",
            "The system should verify the valid value domain of discrete interface data bits to ensure the accuracy of the discretization process yg(k) = -Md3(k) when the data bits take valid enumerated values.",
            "The system should monitor the operating states of different redundancies to ensure the correct implementation of the discretization process yg(k) = -Md3(k) even when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 124,
        "requirement": "Longitudinal control during landing rollout is the same as during takeoff ground phase.",
        "original_safety_criterions": [
            "Check the execution timing of different redundancies and analyze the correctness of function implementation when 'execution timing of two or more redundancies is not synchronized'.",
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Check the loop judgment condition of the function and analyze the correctness of function processing under conditions such as 'loop condition always false' or 'loop condition always true'.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the control solution results of the function and analyze the correctness of function processing when the result is a 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system should check the input to longitudinal landing rollout control under different operation phases and states to ensure the correctness of control processing when 'operation phase not considered' or 'operation state not considered', maintaining consistency with the logic of the takeoff ground phase function.",
            "The system should perform synchronization checks on the execution timing of multiple redundancies of the longitudinal landing rollout control function to ensure correct control implementation even when 'execution timing of two or more redundancies is not synchronized'.",
            "The system should monitor the duration of the longitudinal landing rollout control task and execute exception handling to verify the correctness of function processing when the task duration is less than the specified time."
        ]
    },
    {
        "id": 125,
        "requirement": "In lateral directional control during landing rollout, yg decreases linearly from -δx0/Ky to 0 within 2 seconds.",
        "original_safety_criterions": [
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Check the loop judgment condition of the function and analyze the correctness of function processing under conditions such as 'loop condition always false' or 'loop condition always true'.",
            "Check the duration of each task and analyze the correctness of function processing when the task duration is less than the specified time.",
            "Check the data processing process of the function and analyze whether division by zero exists in the data processing.",
            "Check the control solution results of the function and analyze the correctness of function processing when the result is a 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system should ensure the landing rollout lateral directional control task duration meets the 2-second requirement. When the task duration is less than 2 seconds, verify the correctness of the function processing where yg decreases linearly to 0.",
            "During the lateral directional control of landing rollout, the system should adjust the control solution logic based on different operation phases and states to ensure the accuracy of the linear decrease of yg to 0 even if the phase or state is not explicitly considered.",
            "During the calculation where yg decreases linearly from -δx0/Ky to 0, the system should verify that Ky is non-zero to prevent division-by-zero errors and verify the integrity of the data processing.",
            "The system should monitor the loop judgment conditions of the lateral directional control in real time to ensure they are neither always true nor always false, preventing loop anomalies that may cause control solution failures.",
            "The system should dynamically check the control solution results (normal values, abnormal values, boundary values, maxima/minima) of the lateral directional control and trigger error correction mechanisms in case of anomalies."
        ]
    },
    {
        "id": 126,
        "requirement": "In lateral directional control during landing rollout, yg(k) = Kyg*(Kz*Dz(k) + Kz*Dz(k) - K*Δy(k) - K*wy(k)) + 0.5yg0, where yg0 is the outer loop control value of the rudder channel at the end of the roll-out phase.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false', 'logic always true', 'incorrect judgment condition', or 'missing logic branch' occur.",
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Check the values of discrete output data from different redundancies and analyze the correctness of function implementation when two or more redundancy outputs have 'inconsistent values'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in 'different states'."
        ],
        "safety_requirements": [
            "The system should check the discrete output data values of different redundancies to ensure the correct implementation of the lateral directional landing rollout control function even when the values are inconsistent.",
            "The system should check the operating states of different redundancies. In cases where 'two or more redundancies are in different states', ensure the accuracy of the calculated value of yg(k), including the correct handling of Kyg, Dz(k), Δy(k), wy(k), and yg0.",
            "The system should check the logical judgment conditions and branches of the lateral directional landing rollout control. Ensure the correctness of function processing under conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "The system should check the function inputs under different operation phases and states to ensure the correct handling of situations where 'operation phase not considered' or 'operation state not considered'."
        ]
    },
    {
        "id": 127,
        "requirement": "During engine in-flight restart, the throttle valve control follows the start-up procedure. After a successful engine in-flight restart, the aircraft exits the glide mode and transitions into the corresponding phase, with throttle valve control following the respective phase control logic. If the in-flight restart fails, the throttle valve position is set to 0%.",
        "original_safety_criterions": [
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Verify whether the timing relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of various function points are correct.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false', 'logic always true', 'incorrect judgment condition', or 'missing branch' occur.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in 'different states'."
        ],
        "safety_requirements": [
            "During engine in-flight restart, the system should comprehensively check the logical judgment conditions and branches to ensure correct logic processing even under conditions such as 'logic always false', 'logic always true', incorrect conditions, or missing branches.",
            "The system should validate input parameters according to different engine operation phases and states to ensure correct start-up control calculations and prevent errors caused by 'not considering operation phase' or 'not considering operation state'.",
            "The system should check the operating states of multiple redundancies and ensure accurate and consistent throttle valve control logic when 'two or more redundancies are in different states'.",
            "The system should verify the timing, constraint, concurrency, and combination relationships of throttle valve control during engine in-flight restart to ensure correct logic transitions upon successful or failed restart (including exiting glide mode or setting throttle to 0%)."
        ]
    },
    {
        "id": 128,
        "requirement": "When autonomous control cannot achieve satisfactory control performance, manual correction can be used to make fine adjustments to the autonomous control. The correction amount enters the flight control computer through three remote control channels (elevator command, aileron command, rudder command) and airspeed correction combined commands, undergoes proportional conversion, and is then fed into the control law to achieve the purpose of correcting the control effect. The meaning of the correction terms varies in different flight phases.",
        "original_safety_criterions": [
            "Under different states and operation phases, the control solution process of the function varies. Check the function input and analyze the correctness of function processing under conditions such as 'operation phase not considered' or 'operation state not considered'.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false', 'logic always true', 'incorrect judgment condition', or 'missing branch' occur.",
            "Check the control solution process of the function and analyze the correctness of function processing when the solution does not return a result within the specified time (timeout).",
            "Verify whether the timing relationship, constraint relationship, concurrency relationship, and combination relationships between control logics of various function points are correct.",
            "Check the execution conditions of the function and analyze the correctness of function processing when the execution conditions are 'not met' or 'met again'."
        ],
        "safety_requirements": [
            "The system should comprehensively check the logical judgment conditions of the autonomous control correction logic to ensure that the control correction amounts (elevator, aileron, rudder commands and airspeed correction commands) are processed correctly even under conditions such as 'logic always false', 'logic always true', incorrect conditions, or missing branches.",
            "The system should validate the execution conditions of manual correction control to ensure the correct proportional conversion and input into the control law of the flight control computer when conditions are 'not met' or 'met again'.",
            "The system should clarify the timing, constraint, and concurrency relationships between autonomous control and manual correction control to ensure that the meaning of correction terms in different flight phases aligns with actual control effects.",
            "The system should check the input data of the control solution process to ensure that the processing logic for elevator, aileron, rudder commands, and airspeed correction commands adapts to different operational states and flight phases.",
            "The system should implement a timeout monitoring mechanism for the control solution process. If no result is returned within the specified time, ensure that the correction amount from the manual control stick channels and airspeed correction command correctly enters the control law with effective proportional conversion."
        ]
    },
    {
        "id": 129,
        "requirement": "Each flight phase requires a different manual correction amount, and the relationship between manual correction amount and control input is linear.",
        "original_safety_criterions": [
            "Check the sequence of task execution and analyze the correctness of function processing when the execution sequence differs from the specified sequence.",
            "Check the software state corresponding to system state, operation phase, or system task, and analyze the correctness of state execution when 'no corresponding software state exists' or 'software is inconsistent with the system'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in 'different states'."
        ],
        "safety_requirements": [
            "The system should check the operating states of different redundancies. When two or more redundancies are in different states, verify the correctness of the linear relationship between manual correction amount and control input.",
            "The system should check the execution sequence of control tasks for each flight phase. When the execution sequence differs from the specified sequence, ensure the correct processing of the relationship between manual correction amount and control input."
        ]
    },
    {
        "id": 130,
        "requirement": "Manual correction control uses the same control laws as automatic control (Equation 2-1, Equation 2-2, Equation 2-3), with only the addition of correction terms to the respective control variables.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function processing when conditions such as 'logic always false', 'logic always true', 'incorrect judgment condition', or 'missing branch' occur.",
            "Check the control solution process of the function and analyze the correctness of function processing when the solution does not return a result within the specified time (timeout).",
            "Check the control solution results of the function and analyze the correctness of function processing when the result is a 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system should check the solution process of manual correction control for timeouts, ensuring that a predefined error-handling procedure is executed and a safe default value is output if no result is returned within the specified time.",
            "The system should perform a completeness verification of the logical judgment conditions (Equation 2-1, Equation 2-2, Equation 2-3) for manual correction control, identifying logical always-false or always-true conditions and missing branches, to ensure control quantity corrections meet safety expectations under abnormal conditions.",
            "The system should verify whether the solution results of manual correction control fall within the normal value range, implement a safety filtering mechanism for abnormal values, boundary values, and extreme values, and trigger alarm logging."
        ]
    },
    {
        "id": 131,
        "requirement": "Command control mode is a control method in which the aircraft changes its flight status or position according to actual conditions during cruise via command control.",
        "original_safety_criterions": [
            "Check functions with different priorities under two or more states that have transition relationships, and analyze correctness of state and function transitions under scenarios such as 'high priority switching to low priority' and 'low priority switching to high priority'.",
            "Check the transition conditions between any two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Check the state entry conditions, and analyze the correctness of state execution when the entry condition is 'satisfied, not satisfied, satisfied again' during state execution."
        ],
        "safety_requirements": [
            "Before entering command control mode, the system shall check the entry conditions to ensure the correctness of state execution under conditions such as 'satisfied, not satisfied, satisfied again'.",
            "The system shall perform switching checks for command control modes with different priorities to ensure the correctness of state and function under 'high priority switching to low priority' or 'low priority switching to high priority'.",
            "The system shall verify the state transition conditions under command control mode to ensure the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "The system shall monitor the activation process of command control mode to ensure flight status or position changes are executed only after all transition conditions and priority rules have been validated."
        ]
    },
    {
        "id": 132,
        "requirement": "Command control mode does not change the control law structure under autonomous control mode.",
        "original_safety_criterions": [
            "Functions may have different control computation processes under different states or operation phases. Check function inputs and analyze the correctness of function handling when situations such as 'operation phase not considered' or 'operation state not considered' occur.",
            "There is no transition relationship between two or more states. Check the entry conditions of these states and analyze the correctness of state execution when the entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?"
        ],
        "safety_requirements": [
            "The system shall ensure that the sequence and timing of switching between command control mode and autonomous control mode are coordinated with hardware, and that the control condition integrity and consistency verification mechanism is comprehensive to maintain the control law structure unchanged.",
            "When entering command control mode, the system shall check whether the state entry conditions meet mutual exclusivity, and analyze scenarios such as 'conditions simultaneously satisfied' or 'satisfied during execution' to ensure the control law structure under autonomous control mode remains unchanged.",
            "The system shall continuously monitor the state transition process of control mode and immediately freeze control law structure parameters and initiate exception handling mechanisms when unexpected conditions are detected."
        ]
    },
    {
        "id": 133,
        "requirement": "Lateral commands are configured within the command control category.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of function handling when situations such as 'logic always false', 'logic always true', 'logical condition error', or 'missing logic branch' occur."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and branches of command control functions (e.g., lateral commands) to ensure correct handling when situations such as 'logic always false', 'logic always true', 'logical condition error', or 'missing logic branch' occur."
        ]
    },
    {
        "id": 134,
        "requirement": "Support command control modes including 'left turn', 'right turn', 'figure-8 flight', 'temporary waypoint', longitudinal 'maintain altitude', 'altitude setting', and speed control 'maintain speed', 'speed setting'.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of function handling when situations such as 'logic always false', 'logic always true', 'logical condition error', or 'missing logic branch' occur.",
            "Check the results of the function's control computations, and analyze the correctness of function handling when the computation result is 'normal value', 'abnormal value', 'boundary value', or 'extreme value'.",
            "If multiple functions can be executed simultaneously, analyze whether these functions might operate on the same actuator;",
            "Are the timing relationships, constraint relationships, concurrent relationships, and combination relationships among function control logics correct?"
        ],
        "safety_requirements": [
            "The system shall comprehensively check the logical judgment conditions and branches of command control modes to ensure correct execution of commands such as 'left turn', 'right turn', 'figure-8 flight', 'temporary waypoint', longitudinal 'maintain altitude'/'altitude setting', and speed 'maintain speed'/'speed setting' under conditions such as 'logic always false', 'logic always true', 'judgment condition error', or 'branch missing'.",
            "The system shall detect and handle operational conflicts of multiple command control modes executing concurrently, especially when they affect the same actuator, such as 'left turn', 'right turn', 'figure-8 flight', 'temporary waypoint', longitudinal 'maintain altitude'/'altitude setting', and speed 'maintain speed'/'speed setting'.",
            "The system shall verify the correctness of timing relationships, constraint relationships, concurrent relationships, and combination relationships among command control modes, ensuring consistency with the sequence, timing, and conditions of hardware control.",
            "The system shall validate the computation results of command control modes to ensure correct handling logic under conditions such as 'normal value', 'abnormal value', 'boundary value', or 'extreme value' to prevent erroneous outputs.",
            "During command control mode execution, the system shall continuously monitor the actuator status to ensure completeness and consistency of control conditions, preventing safety risks caused by conflicting conditions."
        ]
    },
    {
        "id": 135,
        "requirement": "Under autonomous control or command control mode, from climb phase 2 to before joining the final approach leg (exclusive), sending any one of the above commands will switch to command control mode.",
        "original_safety_criterions": [
            "Two or more states do not have a transition relationship. Check the entry conditions of these states and analyze the correctness of state execution when the entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Functions may have different control computation processes under different states or operation phases. Check function inputs and analyze the correctness of function handling when situations such as 'operation phase not considered' or 'operation state not considered' occur.",
            "Check the transition conditions between any two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Check the working states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "Under autonomous control or command control mode, when two or more redundancies are in different working states, the system shall verify the correctness of transitioning to command control mode from climb phase 2 to before joining the final approach leg (exclusive).",
            "The system shall check the transition conditions under autonomous control or command control mode to ensure the correctness of state transition logic for command control mode transition under abnormal conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "When transitioning to command control mode, the system shall perform multi-phase and multi-state checks on function inputs to ensure correct control computation processes when operation phases and states are not ignored.",
            "The system shall check the entry conditions of states without transition relationships and analyze the correctness of command control mode transitions under abnormal scenarios such as 'conditions simultaneously satisfied' or 'satisfied during execution'."
        ]
    },
    {
        "id": 136,
        "requirement": "In climb phase 1, only 'maintain speed' and 'airspeed setting' commands are valid; all other commands are invalid.",
        "original_safety_criterions": [
            "Check the transition conditions between any two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Two or more states with transition relationships require different executions of the same function. Some states allow function execution while others do not. Analyze the correctness of state and function when functions 'continue execution' or 'interrupt execution' during state transitions.",
            "Are there validity checks for user-set parameters? Are abnormal parameters prompted or ignored?",
            "Are response handling requirements specified for incorrect operations or invalid operations?",
            "Is there a reasonableness check for user operations? Should commands inconsistent with the current scenario or state not be responded to?"
        ],
        "safety_requirements": [
            "In climb phase 1, the system shall respond only to 'maintain speed' and 'airspeed setting' commands, ignore all other commands, and prompt or ignore invalid commands.",
            "The system shall check the transition conditions between climb phase 1 and other states to ensure the correctness of state transition logic under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "The system shall validate input parameters in climb phase 1, allowing only 'maintain speed' and 'airspeed setting' related parameters to take effect, treating all other parameters as invalid.",
            "The system shall verify the validity of 'maintain speed' and 'airspeed setting' commands and the invalidity of other commands before and after state transitions to ensure synchronization and consistency between functions and states.",
            "The system shall continuously monitor user commands in climb phase 1, executing only 'maintain speed' and 'airspeed setting' functions, automatically ignoring all other commands without response."
        ]
    },
    {
        "id": 137,
        "requirement": "Under command control mode, the same type of command can be re-sent, and the new command will replace the old one.",
        "original_safety_criterions": [
            "Two or more states with transition relationships have the same function. Check function execution before and after state transitions and analyze the correctness of function handling when functions 'start execution', 'continue execution', or 'interrupt execution' after state transitions.",
            "Check the software states corresponding to system states, operation phases, or system missions, and analyze the correctness of state execution when 'no corresponding software state exists' or 'software is inconsistent with the system'.",
            "Check the transition conditions between any two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'."
        ],
        "safety_requirements": [
            "Under command control mode, the system shall check the consistency between software state and system state to ensure there is no inconsistency or missing software state when a new command replaces an old one.",
            "During state transitions, the system shall check the execution status of the same type of commands to ensure the old command is completely interrupted and cleared when the new command starts execution.",
            "The system shall validate the effectiveness of state transition conditions under command control mode to ensure transition conditions are not incorrectly set to 'not set', 'always satisfied', or 'never satisfied'.",
            "During command replacement, the system shall maintain functional continuity and ensure the completeness of command processing logic and the reliability of interruption mechanisms before and after state transitions."
        ]
    },
    {
        "id": 138,
        "requirement": "During 'maintain altitude' command control, the set altitude in the flight control law is taken as the aircraft's current altitude at the time the 'maintain altitude' command was received.",
        "original_safety_criterions": [
            "Functions may have different control computation processes under different states or operation phases. Check function inputs and analyze the correctness of function handling when situations such as 'operation phase not considered' or 'operation state not considered' occur.",
            "Check the function's control computation process for timeout (failure to return a result within the specified time) and analyze the correctness of function handling.",
            "Is there a reasonableness check for user operations? Should commands inconsistent with the current scenario or state not be responded to?"
        ],
        "safety_requirements": [
            "During 'maintain altitude' command control, the system shall check the timeout of the set altitude computation process in the flight control law to ensure correct function handling if the result is not returned within the specified time.",
            "During 'maintain altitude' command control, the system shall validate the reasonableness of user commands and reject execution of commands inconsistent with the current flight altitude or state.",
            "When executing 'maintain altitude' commands in different operation phases or states, the system shall perform completeness checks on function inputs to ensure the set altitude strictly comes from the actual flight altitude at the time the command was received.",
            "The system shall continuously verify the alignment between the control computation process and the current operation phase/state to prevent set altitude deviations caused by unconsidered operation phases or states."
        ]
    },
    {
        "id": 139,
        "requirement": "During 'altitude setting' command control, the set altitude in the flight control law is taken as the set altitude value.",
        "original_safety_criterions": [
            "Check the values of continuous interface data across different redundancies and analyze the correctness of function implementation when 'values differ beyond the specified threshold' occurs between two or more redundancies.",
            "When the operation state changes, check the values of function interface data and analyze the correctness of output when 'values change or value ranges change'.",
            "Check the values of continuous output data across different redundancies and analyze the correctness of function implementation when 'values differ beyond the specified threshold' occurs between two or more redundancies.",
            "Check the function's control computation results and analyze the correctness of function handling when the computation result is 'normal value', 'abnormal value', 'boundary value', or 'extreme value'.",
            "Check the input data values used in execution conditions for each task and analyze the correctness of function handling when input data causes the task execution condition to be met prematurely."
        ],
        "safety_requirements": [
            "When continuous interface data values across different redundancies are inconsistent (difference exceeds the specified threshold), the system shall ensure the correct setting of the flight control law's set altitude as the set altitude value during altitude setting command control.",
            "The system shall perform real-time comparison of output data values for altitude setting commands across different redundancies and trigger fault-tolerance mechanisms when inconsistencies (differences exceed the specified threshold) occur, maintaining the correctness of set altitude values.",
            "The system shall check the control computation results of altitude setting commands and apply differentiated handling for scenarios such as 'normal value', 'abnormal value', 'boundary value', or 'extreme value' to ensure the logic correctness of set altitude values in the flight control law.",
            "When input data causes the task execution condition to be met prematurely, the system shall validate the input data for altitude setting commands to ensure the set altitude in the flight control law strictly matches the commanded altitude.",
            "When the operation state changes, the system shall check the values of interface data. If the input data values or value ranges for altitude setting commands change, the system must ensure the correctness of set altitude updates in the flight control law."
        ]
    },
    {
        "id": 140,
        "requirement": "The set altitude under autonomous control mode is the altitude of the target waypoint.",
        "original_safety_criterions": [
            "Check the state entry conditions and analyze the correctness of state execution when the entry condition is 'satisfied, not satisfied, satisfied again' during state execution.",
            "Does the timing of outputting control states meet the scenario requirements?",
            "When abnormal external factors (e.g., high sea state, severe weather) occur, has the software performed appropriate judgment and handling?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "Two or more states do not have transition relationships. Check the entry conditions of these states and analyze the correctness of state execution when the entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'."
        ],
        "safety_requirements": [
            "When abnormal external factors (high sea state, severe weather, etc.) occur, the system shall make judgments and handle autonomous control mode to ensure the set altitude meets the target waypoint altitude requirement.",
            "Under autonomous control mode, the system shall check the state entry conditions and analyze the correctness of state execution when the conditions are 'satisfied, not satisfied, satisfied again' to ensure the set altitude is the target waypoint altitude.",
            "The system shall ensure that the timing of outputting control states under autonomous control mode is strictly synchronized with the target waypoint altitude requirement.",
            "When multiple non-transition-related states have entry conditions that are 'simultaneously satisfied' or 'satisfied during execution', the system shall verify the correctness of the set altitude being the target waypoint altitude under autonomous control mode.",
            "Before issuing control commands, the system shall perform a reasonableness check based on the current equipment status (e.g., set altitude under autonomous control mode) to prevent dangerous commands from being executed."
        ]
    },
    {
        "id": 141,
        "requirement": "In command control mode, the navigation algorithm or waypoint switching method can be changed according to commands, but the control laws remain the same as those in autonomous control.",
        "original_safety_criterions": [
            "Check functions with different priorities under two or more states that have transition relationships, and analyze the correctness of state transitions and function behavior in situations such as 'high priority switching to low priority' or 'low priority switching to high priority'.",
            "When a working state changes, check the values of functional interface data and analyze the correctness of outputs when values change or their value ranges change.",
            "Check state entry conditions and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, or satisfied again' during state execution.",
            "Since the control computation processes of functions vary under different states and operational phases, check the function inputs and analyze the correctness of function handling when 'operational phase not considered' or 'working state not considered'.",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "The system shall perform real-time checks on state entry conditions in command control mode to ensure that the navigation algorithm or waypoint switching method complies with control law requirements and behaves consistently with autonomous control mode when conditions are 'satisfied, not satisfied, or satisfied again'.",
            "The system shall verify whether function inputs consider the current operational phase and state in command control mode. If inputs are detected where 'operational phase not considered' or 'working state not considered', processing must be terminated and a fault-tolerant mechanism triggered.",
            "When switching between command control modes of different priorities, the system shall ensure correct transition logic for both 'high priority switching to low priority' and 'low priority switching to high priority', and that the control computation process strictly matches the target state.",
            "When the system transitions between working states in command control mode, it shall dynamically validate the values and range changes of functional interface data to ensure that the parameters output by the navigation algorithm or waypoint switching method meet preset constraints."
        ]
    },
    {
        "id": 142,
        "requirement": "During 'constant speed' command control, the specified airspeed in the flight control law is taken as the airspeed value at the moment the 'constant speed' command is received.",
        "original_safety_criterions": [
            "Check the timing of input data values and analyze output correctness when the input timing is 'stopped too early' or 'stopped too late'.",
            "Check the timing of input data values and analyze output correctness when the input timing corresponds to 'maximum' or 'minimum' values.",
            "Check continuous output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check discrete output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values'.",
            "Are the temporal, constraint, concurrency, and combination relationships among control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall check discrete output data from different redundancies and ensure that when two or more redundancy data values are inconsistent, the airspeed value used for the 'constant speed' command in the flight control law correctly uses the value at the command time and triggers a fault-tolerant handling mechanism.",
            "The system shall check continuous output data from different redundancies and, when the difference between redundancy data exceeds the specified threshold, immediately execute an error correction algorithm and issue an alarm to ensure that the airspeed value for the 'constant speed' command strictly matches the value at the command time.",
            "The system shall verify the timestamp of the airspeed value at the command time and automatically shield illegal data and use redundant backup timestamps to obtain the airspeed value when abnormal time parameters such as 'maximum' or 'minimum' values are detected.",
            "The system shall perform boundary checks on the stop time of the 'constant speed' command input and, if 'stopped too early' or 'stopped too late' anomalies are detected, activate preset threshold limits and retain the last valid airspeed value.",
            "The system shall ensure that the temporal and concurrency constraints of the 'constant speed' command control logic comply with specifications, and when temporal conflicts or incorrect combination relationships are detected, enforce priority arbitration and prohibit airspeed value operations under abnormal states."
        ]
    },
    {
        "id": 143,
        "requirement": "During 'speed setting', the specified airspeed in the flight control law is taken as the set airspeed value.",
        "original_safety_criterions": [
            "Check multiple input data for the function and analyze function correctness when the input data combinations are 'normal value equivalence classes, abnormal value equivalence classes, boundary value combinations, initial value combinations, safe value combinations, default value combinations', etc.",
            "Check the values of the same input data received by different redundancies and analyze function correctness when two or more redundancies receive inconsistent values of the same input data.",
            "Check continuous output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check discrete output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values'.",
            "Are the temporal, constraint, concurrency, and combination relationships among control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall validate the temporal, constraint, concurrency, and combination relationships of the specified airspeed in 'speed setting' mode to ensure the value is the set airspeed.",
            "The system shall perform consistency checks on discrete output data from different redundancies to ensure the correctness of the specified airspeed value in the flight control law when inconsistencies occur.",
            "The system shall perform threshold checks on continuous output data from different redundancies to ensure the correctness of the specified airspeed value in the flight control law when differences exceed specified thresholds.",
            "The system shall check normal, abnormal, boundary, initial, safe, and default value combinations of the specified airspeed input data in the flight control law to ensure correct function handling and implement data integrity verification."
        ]
    },
    {
        "id": 144,
        "requirement": "During autonomous control, the specified airspeed in the flight control law is the value stored in the flight control computer calculated based on flight performance.",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze function correctness when 'a single redundancy fails' or 'multiple redundancies fail'.",
            "Check the operational states of different redundancies and analyze function correctness when 'two or more redundancies are in different states'.",
            "Check continuous output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check discrete output data values from different redundancies and analyze function correctness when two or more redundant outputs have 'inconsistent values'.",
            "Check the control computation results of the function and analyze function correctness when the computation results are 'normal values, abnormal values, boundary values, extreme values', etc."
        ],
        "safety_requirements": [
            "The system shall check discrete output data from different redundancies and ensure the correctness of calculation and storage of the specified airspeed in the flight control law when two or more redundancy output data values are inconsistent.",
            "The system shall check continuous output data from different redundancies and ensure the correct execution of calculation and storage functions of the specified airspeed in the flight control law when differences between redundancy values exceed specified thresholds.",
            "The system shall check whether the specified airspeed in the flight control law is a normal value, abnormal value, boundary value, or extreme value, and ensure correct flight control handling in these cases.",
            "The system shall ensure the accuracy of calculation and storage of the specified airspeed in the flight control law through redundancy mechanisms when one or more redundancies fail.",
            "The system shall check the operational states of different redundancies and ensure the correctness of calculation and storage of the specified airspeed when two or more redundancies are in different states."
        ]
    },
    {
        "id": 145,
        "requirement": "The airspeed setting limit value is (25 m/s, 65 m/s).",
        "original_safety_criterions": [
            "Check the duration of each task and analyze function correctness when the task duration exceeds the specified time.",
            "Check the logical judgment conditions and branches of the function and analyze function correctness when 'logic always false, logic always true, incorrect logical condition, missing logic branch', etc.",
            "Check the duration of each task and analyze function correctness when the task duration is less than the specified time.",
            "Check the execution sequence of tasks and analyze function correctness when the execution sequence differs from the specified order.",
            "Are the temporal, constraint, concurrency, and combination relationships among control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall check the execution sequence of the airspeed setting limit value task and ensure function correctness meets the (25 m/s, 65 m/s) limit requirement when the sequence does not match the specification.",
            "The system shall verify the duration of the airspeed setting limit value task (25 m/s, 65 m/s) and ensure function correctness when the duration is longer or shorter than specified.",
            "The system shall check the logical judgment conditions and branches of the airspeed setting limit value and identify cases such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch' to ensure function correctness.",
            "The system shall verify the correctness of temporal, constraint, concurrency, and combination relationships of control logic across function points when applying the airspeed setting limit value (25 m/s, 65 m/s)."
        ]
    },
    {
        "id": 146,
        "requirement": "When sending a 'cancel altitude hold' command, exit from 'altitude hold' or 'altitude setting' command control, and set the target altitude to the height of the target waypoint.",
        "original_safety_criterions": [
            "When a working state changes, check the values of functional interface data and analyze output correctness when the values change or their value ranges change.",
            "Check transition conditions between every pair of software states and analyze the correctness of state transitions when the transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Since the control computation process varies under different states and operational phases, check function inputs and analyze function handling when 'operational phase not considered' or 'working state not considered'.",
            "Are the entry and exit conditions of each mode consistent?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "When transitioning to 'cancel altitude hold' mode, the system shall check the value changes or value range changes of functional interface data to ensure the target altitude accurately switches to the height of the target waypoint.",
            "When issuing a 'cancel altitude hold' command, the system shall verify the consistency of exiting conditions from 'altitude hold' or 'altitude setting' mode and force an update to the target waypoint height.",
            "The system shall fully test the transition conditions between 'altitude hold' and 'altitude setting' modes, including scenarios where conditions are 'not set', 'always satisfied', or 'never satisfied', to ensure correct state transition logic and synchronized height parameter updates.",
            "When switching between different operational phases, the system shall check whether the control computation process matches the current state and, especially under the 'cancel altitude hold' command, forcibly exit control and lock the target waypoint height.",
            "Before issuing a 'cancel altitude hold' command, the system shall perform a reasonableness check based on the current aircraft equipment status to prevent invalid commands from triggering unintended state transitions."
        ]
    },
    {
        "id": 147,
        "requirement": "When sending a 'cancel speed hold' command, exit from 'speed hold' or 'speed setting' command control, and the specified speed value shall be the same as in autonomous control.",
        "original_safety_criterions": [
            "When a working state changes, check the values of functional interface data and analyze output correctness when the values change or their value ranges change.",
            "Check the input data values of task execution conditions and analyze function correctness when input values cause delayed fulfillment of the task execution condition.",
            "Check the timing of input data values and analyze output correctness when input timing is 'stopped too early' or 'stopped too late'.",
            "Check the input data values of task execution conditions and analyze function correctness when input values cause premature fulfillment of the task execution condition."
        ],
        "safety_requirements": [
            "When issuing a 'cancel speed hold' command, the system shall check input data values to ensure correct exit from 'speed hold' or 'speed setting' control when the execution condition is prematurely fulfilled, and that the specified speed value matches that of autonomous control.",
            "When issuing a 'cancel speed hold' command, the system shall verify function correctness under delayed fulfillment of input data values, ensuring timely exit from the control state and synchronization of speed values.",
            "When changing working states, the system shall check the values or value ranges of functional interface data to ensure timely exit from the control state after issuing a 'cancel speed hold' command and that the speed value strictly matches that of autonomous control.",
            "The system shall verify the timing of input values for the 'cancel speed hold' command and analyze output correctness in cases of 'too early stop' or 'too late stop' to ensure timely state transitions and accurate speed value retrieval."
        ]
    },
    {
        "id": 148,
        "requirement": "When sending a 'resume route' command, exit from lateral command control and resume the original route from the current position to the waypoint.",
        "original_safety_criterions": [
            "Can redundancy switching conditions lead to abnormal output values for currently running functions?",
            "Check the logical judgment conditions and branches of the function and analyze function correctness when 'logic always false', 'logic always true', 'incorrect logical condition', or 'missing branch' occurs.",
            "Since the control computation process varies under different states and operational phases, check function inputs and analyze function handling when 'operational phase not considered' or 'working state not considered'.",
            "Check the duration of each task and analyze function correctness when the task duration is less than the specified time.",
            "Check the duration of each task and analyze function correctness when the task duration is greater than the specified time."
        ],
        "safety_requirements": [
            "The system shall check the duration of the 'resume route' command task and ensure correct exit from lateral command control and resumption of the original route to the waypoint when the duration exceeds the specified time.",
            "When redundancy switching conditions are met, the system shall ensure that the function output values for issuing the 'resume route' command remain normal and do not produce anomalies.",
            "The system shall check the duration of the 'resume route' command and ensure function correctness when the duration is shorter than specified.",
            "When processing the 'resume route' command, the system shall check current state and phase inputs to prevent route resumption errors caused by 'phase not considered' or 'state not considered'.",
            "The system shall check the logical judgment conditions and branches for issuing the 'resume route' command to avoid conditions like 'always false', 'always true', incorrect conditions, or missing branches, ensuring correct function handling."
        ]
    },
    {
        "id": 149,
        "requirement": "The 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands are only effective when in command control mode and after the corresponding command control entry command has been issued.",
        "original_safety_criterions": [
            "Check state entry conditions and analyze the correctness of state execution when entry conditions are 'met, not met, or met again' during state execution.",
            "Is the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Since the control computation process varies under different states and operational phases, check function inputs and analyze function handling when 'operational phase not considered' or 'working state not considered'.",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "The system shall ensure that before executing 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands, it verifies that it is currently in command control mode and that the corresponding command control entry command has already been issued.",
            "In command control mode, the system shall check dynamic changes in state entry conditions ('met, not met, or met again') to ensure correct execution of 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands.",
            "When issuing 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands, the system shall make a reasonableness judgment based on the current equipment status to prevent invalid or conflicting operations.",
            "The system shall verify whether the timing of issuing 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands meets predefined scenario requirements.",
            "The system shall ensure that the sequence and timing of control commands are coordinated with hardware and that command execution conditions (e.g., mode, previous commands) are consistent to avoid state conflicts."
        ]
    },
    {
        "id": 150,
        "requirement": "After effective processing of the 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands, the control mode shall revert to autonomous control only when command control is exited in all three aspects: longitudinal, lateral, and speed. Otherwise, the command control mode shall be maintained.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Are the entry and exit conditions of each mode consistent?",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "For critical controls or actions, is there a timeout detection mechanism to handle situations where hardware status remains unable to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "After executing 'cancel altitude hold', 'cancel speed hold', or 'resume route' commands, the system shall strictly check the exit status of command control in the longitudinal, lateral, and speed dimensions. Autonomous control mode shall be restored only when all exit conditions are met; otherwise, command control mode shall be maintained.",
            "During control mode transitions, the system shall perform reasonableness checks on hardware status to ensure that the execution logic of 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands is consistent with hardware coordination.",
            "The system shall ensure that the entry/exit condition definitions for 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands are consistent and perform real-time validation during state transitions.",
            "When processing 'cancel altitude hold', 'cancel speed hold', and 'resume route' commands, the system shall implement a timeout detection mechanism. If the hardware status does not meet control requirements for an extended period, an exception handling procedure shall be triggered.",
            "The system shall verify that the timing of reverting to autonomous control aligns with scenario requirements, ensuring that the switch occurs only when command control is exited in all three dimensions—longitudinal, lateral, and speed—and meets scenario conditions."
        ]
    },
    {
        "id": 151,
        "requirement": "Remote control mode is divided into two types: inner-loop remote control and non-inner-loop remote control.",
        "original_safety_criterions": [
            "Is there a detection mechanism in the output loop to monitor the loop status without affecting normal output?"
        ],
        "safety_requirements": [
            "The system shall have real-time loop status detection mechanisms for both inner-loop and non-inner-loop remote control modes, and the detection process must not interfere with the normal output of the remote control mode."
        ]
    },
    {
        "id": 152,
        "requirement": "Non-inner-loop remote control directly controls the control surfaces (elevator, aileron, and rudder) by applying an appropriate proportional conversion to the remote control input.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional handling under conditions such as 'logic always false, logic always true, incorrect judgment condition, missing branch'",
            "Verify whether the timing relationship, constraint relationship, concurrency relationship, and combination relationship among control logics of different functions are correct",
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Check the operating states of different redundancies and analyze the correctness of functional implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall verify the operating states of different redundancies to ensure the correctness of direct control surface control (elevator, aileron, rudder) when 'two or more redundancies are in different states'.",
            "The system shall validate the logic timing, constraints, and proportional conversion relationships of direct surface control to ensure the correctness of remote control input conversion logic without an inner loop.",
            "The system shall check the judgment conditions and branches of surface control logic to cover scenarios such as 'logic always false, always true, condition error, missing branch' and ensure functional correctness under abnormal conditions.",
            "The system shall dynamically check remote control inputs under different operational phases and states to ensure that the control computation aligns with the current state and avoids erroneous handling due to unconsidered phases or states."
        ]
    },
    {
        "id": 153,
        "requirement": "Inner-loop remote control converts the remote control input into corresponding target attitude angles, then computes the corresponding control surface commands via autonomous control laws (Equation (2-1), Equation (2-2), and Equation (2-3)) to control the surfaces.",
        "original_safety_criterions": [
            "Functional control computations vary under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Check the logical judgment conditions and branches of the function, and analyze correctness of functional handling under conditions such as 'logic always false, logic always true, incorrect judgment condition, missing branch'",
            "Check the operating states of different redundancies and analyze correctness of functional implementation when 'two or more redundancies are in different states'",
            "Verify whether the timing relationship, constraint relationship, concurrency relationship, and combination relationships among control logics of different functions are correct",
            "Check the results of functional control computation and analyze correctness under conditions such as 'normal value, abnormal value, boundary value, maximum/minimum value'"
        ],
        "safety_requirements": [
            "The system shall verify the redundancy operating states of inner-loop remote control to ensure accuracy in converting remote control inputs into target attitude angles and computing control surface commands using autonomous control laws (Equation (2-1), Equation (2-2), and Equation (2-3)) when 'two or more redundancies are in different states'.",
            "The system shall verify the judgment conditions and branches of inner-loop remote control logic to ensure functional correctness under conditions such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "The system shall check remote control inputs and target attitude angles under different operational states and phases to ensure correct functional handling when 'operation phase or state is not considered'.",
            "The system shall verify the timing, constraint, concurrency, and combination relationships between inner-loop remote control logic and autonomous control laws (Equation (2-1), Equation (2-2), and Equation (2-3)).",
            "The system shall check control computation results (normal values, abnormal values, boundary values, maximum/minimum values) to ensure they meet expectations and trigger safety response mechanisms in abnormal or boundary cases."
        ]
    },
    {
        "id": 154,
        "requirement": "In both remote control modes, throttle control via remote control remains the same.",
        "original_safety_criterions": [
            "Two or more states with transfer relationships share the same function; check execution before and after state transfer and analyze correctness when the function 'starts execution, continues execution, or stops execution' after state transition",
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Two or more states do not have a transfer relationship; check entry conditions of these states and analyze correctness when 'conditions are simultaneously satisfied or satisfied during state execution'"
        ],
        "safety_requirements": [
            "Under both remote control modes, the system shall verify the execution conditions of throttle remote control to ensure correct operations when 'conditions are simultaneously satisfied or satisfied during execution'.",
            "During remote control mode switching, the system shall validate throttle function handling to ensure correct logic for operations such as 'starting execution, continuing execution, or stopping execution' after switching.",
            "The system shall ensure consistency of throttle remote control commands in both remote control modes and provide state retention mechanisms during mode switching to prevent unexpected changes.",
            "The system shall perform real-time consistency monitoring of throttle remote control operations and trigger alarms while maintaining a safe state upon detecting cross-mode execution deviations."
        ]
    },
    {
        "id": 155,
        "requirement": "Remote control has the highest control authority and can switch to remote control mode at any time and under any circumstances.",
        "original_safety_criterions": [
            "Check functions with priority settings under two or more states with transfer relationships and analyze correctness of state and function behavior when 'high-priority switches low-priority' or 'low-priority switches high-priority'",
            "If redundancy switching takes too long, does the software handle it correctly?",
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "For critical controls or actions, is there a timeout mechanism to handle situations where hardware status fails to meet control requirements for a prolonged period?"
        ],
        "safety_requirements": [
            "When switching to remote control mode under different operational phases and states, the system shall check function inputs to ensure correct switching logic even when 'operation phase or state is not considered'.",
            "If redundancy switching exceeds the threshold time, the system shall forcibly activate remote control mode to ensure timely mode switching under all circumstances.",
            "The system shall verify transitions between remote control mode and other states to ensure consistency of functions and states when switching from other states to remote control mode and vice versa.",
            "The system shall verify the effectiveness of remote control's highest authority during state transitions to prevent unauthorized interference from causing loss of authority."
        ]
    },
    {
        "id": 156,
        "requirement": "When the aircraft is on the ground, the rudder deflection command calculation formula for inner-loop remote control is: δy = KyY . Y + [Kyg (K . (-yg) + Ky . wy)] + Kywy . wy.",
        "original_safety_criterions": [
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Check output data from different redundancies and analyze correctness of function implementation when 'a single redundancy fails' or 'multiple redundancies fail'",
            "Check discrete output data values from different redundancies and analyze correctness of function implementation when 'output values are inconsistent' across multiple redundancies",
            "Check the operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "When calculating the rudder deflection command δy in ground state, the system shall verify input parameters (Y, yg, wy, etc.) to ensure no logic errors occur due to missing state or phase conditions in the formula.",
            "The system shall verify the operating states of different redundancies and ensure the logic correctness of the δy calculation formula when multiple redundancies are in different states, isolating abnormal redundancy outputs.",
            "The system shall perform real-time consistency checks on δy calculation results from different redundancies and trigger error correction or alarms when inconsistencies are detected.",
            "When detecting failure of one or more redundancies, the system shall dynamically adjust the δy calculation logic to ensure redundancy failures do not affect overall function correctness."
        ]
    },
    {
        "id": 157,
        "requirement": "There is a linear correspondence between target attitude angles, throttle deflection δp, and remote control inputs.",
        "original_safety_criterions": [
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Check the operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'",
            "Check the logical judgment conditions and branches of the function and analyze correctness of functional handling under conditions such as 'logic always false, logic always true, incorrect judgment condition, missing branch'"
        ],
        "safety_requirements": [
            "The system shall verify the logic conditions and branches of the linear correspondence between attitude angles, throttle deflection δp, and remote control inputs to ensure functional correctness under conditions such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "When multiple redundancies are in different operating states, the system shall ensure accurate calculation of the linear correspondence between attitude angles, throttle deflection δp, and remote control inputs and perform multi-state verification.",
            "The system shall check the input of attitude angles and throttle deflection δp under different operating states and phases to verify control computation correctness when 'operation phase or state is not considered'."
        ]
    },
    {
        "id": 158,
        "requirement": "The system shall be capable of flying along pre-programmed routes.",
        "original_safety_criterions": [
            "Check the loop judgment conditions of the function and analyze correctness under conditions such as 'loop condition always false, always true'",
            "Verify the sequential execution timing of various tasks and analyze correctness when actual execution timing differs from specified timing",
            "Check execution timing of different redundancies and analyze correctness when 'execution timing of two or more redundancies is not synchronized'"
        ],
        "safety_requirements": [
            "The system shall verify synchronization of execution timing among different redundancies to ensure correct route-following capability even when 'execution timing of two or more redundancies is not synchronized'.",
            "The system shall validate consistency between actual task execution timing and specified timing to maintain correct route-following functionality when timing mismatches occur.",
            "The system shall continuously monitor loop judgment conditions for route flight and ensure correct handling under abnormal conditions such as 'condition always false or always true', triggering appropriate fault-tolerant mechanisms."
        ]
    },
    {
        "id": 159,
        "requirement": "The system shall maintain constant altitude flight during the final approach segment. When navigation mode is set to final approach, the flight phase shall report as final approach, and control methods shall remain consistent with the constant altitude segment.",
        "original_safety_criterions": [
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Two or more states do not have a transfer relationship; check their entry conditions and analyze correctness when 'conditions are simultaneously satisfied or satisfied during execution'",
            "Is the sequence and timing of system control coordinated with hardware? Are control conditions complete and consistent?",
            "Check the operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'"
        ],
        "safety_requirements": [
            "The system shall ensure coordination between control sequence/timing and hardware during the final approach segment, with complete and consistent control conditions.",
            "The system shall verify the entry conditions for constant altitude flight during the final approach segment to ensure correct state execution when conditions are simultaneously met or met during execution.",
            "The system shall perform control computations based on the operational phase and state during the final approach segment, ensuring input checks cover scenarios where phase or state is not considered.",
            "The system shall verify the operating states of different redundancies to ensure correct execution of constant altitude control during the final approach segment when multiple redundancies are in different states.",
            "Under final approach navigation mode, the system shall verify that the flight phase is reported as final approach and that the control method strictly matches that of the constant altitude segment."
        ]
    },
    {
        "id": 160,
        "requirement": "During glide slope segment 1, the system shall control the aircraft to descend along the predefined glide path from final approach altitude to 100m, tracking glide height longitudinally, eliminating lateral offset from the runway axis laterally, and maintaining zero sideslip angle in crosswind conditions.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware? Are control conditions complete and consistent?",
            "Check the logical judgment conditions and branches of the function and analyze correctness of functional handling under conditions such as 'logic always false, logic always true, incorrect judgment condition, missing branch'",
            "Functional control computation varies under different states and operation phases; check function inputs and analyze correctness of functional handling when 'operation phase or state is not considered'",
            "Check the operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'",
            "Verify whether the timing relationship, constraint relationship, concurrency relationship, and combination relationships among control logics of different functions are correct"
        ],
        "safety_requirements": [
            "The system shall verify the logic judgment conditions and branches of glide slope segment 1 to ensure correct aircraft descent along the predefined glide path, airspeed, and altitude, including longitudinal tracking and lateral offset elimination, while maintaining zero sideslip in crosswind conditions, even under 'logic always false, always true, incorrect condition, missing branch'.",
            "The system shall validate the timing relationships, constraint relationships, and concurrency combinations of glide slope segment 1 control logic to ensure longitudinal height tracking and lateral offset elimination functions are coordinated with hardware, with complete and consistent control conditions.",
            "During glide slope segment 1 control, the system shall ensure strict synchronization between longitudinal and lateral control timing and hardware actions, with consistent and comprehensive coverage of control conditions (e.g., airspeed, altitude, crosswind compensation).",
            "The system shall monitor differences in redundancy operating states and ensure correct execution of glide slope segment 1 control functions (height tracking, lateral offset elimination, crosswind compensation) even when 'two or more redundancies are in different states'.",
            "The system shall dynamically check function inputs based on current operational phases and states to ensure correctness and completeness of glide slope segment 1 control functions (airspeed, altitude, lateral offset, crosswind handling) even when phase or state factors are not considered."
        ]
    },
    {
        "id": 161,
        "requirement": "The system should control the aircraft in the second glide segment from the end height of the first glide segment (100m) to the flare height (17m), allowing the aircraft to descend in a straight sideslip manner.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, or not satisfiable'.",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Inspect external devices (e.g., sensors, NVM, databases, other systems) and analyze the correctness of their outputs when source devices are in modes such as 'degraded' or 'maintenance'.",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing hazardous control commands or actions, is there a reasonableness check based on device status?"
        ],
        "safety_requirements": [
            "When controlling the aircraft from 100m to 17m in the second glide segment, the system must verify that the timing of control state outputs meets scenario timing requirements, ensuring the integrity of the straight sideslip method.",
            "During the second glide segment, the system must perform state checks on external devices (e.g., sensors, NVM, databases). When these devices are in degraded or maintenance mode, the system must still ensure correct control output.",
            "Before issuing control commands, the system must perform real-time reasonableness validation of the aircraft's current glide state (between 100m and 17m), preventing execution of commands conflicting with the current state.",
            "When transitioning between states in the second glide segment, the system must verify that transition conditions meet the requirement of being 'set and satisfiable,' ensuring that the stability of the straight sideslip method remains unaffected by abnormal conditions.",
            "The control sequence and timing in the second glide segment must be strictly synchronized with hardware actions. The completeness and consistency of control conditions must be verified to prevent loss of flight attitude control due to timing deviations."
        ]
    },
    {
        "id": 162,
        "requirement": "In the flare phase, the system should level the aircraft's flight path angle, enabling landing with a small descent speed, while maintaining the same lateral control method as in the final glide segment.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, or not satisfiable'.",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Under different states and operational phases, the function's control computation process varies. Inspect function inputs and analyze the correctness of function processing when factors like 'operational phase not considered' or 'state not considered' apply.",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing hazardous control commands or actions, is there a reasonableness check based on device status?"
        ],
        "safety_requirements": [
            "During the flare phase, the system must ensure that the timing of outputting control states meets scenario requirements, correctly leveling the aircraft's flight path angle for landing with a small descent speed, while maintaining lateral control consistent with the final glide segment.",
            "When issuing control commands during the flare phase, the system must perform real-time reasonableness checks based on the aircraft's current state (e.g., altitude, speed) to prevent execution of hazardous commands.",
            "The system must perform completeness checks on transition conditions between the flare phase and other states, ensuring correct state transition logic even when conditions are 'not set, always satisfied, or not satisfiable', without affecting flight path angle control.",
            "The control sequence and timing during the flare phase must be strictly coordinated with hardware actions. Control conditions must be complete and consistent to ensure synchronization between flight path angle leveling and lateral control.",
            "During the function computation process in the flare phase, the system must inspect input data for operational phase and state markers to prevent anomalies in flight path angle or lateral control caused by unrecognized phases or states."
        ]
    },
    {
        "id": 163,
        "requirement": "The system should transition from the roll correction phase at 1.5m height to meeting the conditions for switching to the landing rollout segment.",
        "original_safety_criterions": [
            "There may be no transition relationship between two or more states. Check the entry conditions of these states and analyze the correctness of state execution when conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, or not satisfiable'.",
            "Check the state entry conditions and analyze the correctness of state execution when the conditions are 'satisfied, unsatisfied, or re-satisfied' during state execution."
        ],
        "safety_requirements": [
            "When transitioning between the roll correction phase and the landing rollout segment, the system must check state entry conditions to ensure correct state transitions when conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "The system must validate the effectiveness of transition conditions from the roll correction phase to the landing rollout segment, ensuring correct and explicit state transition logic even when conditions are 'not set, always satisfied, or not satisfiable'.",
            "During execution of the roll correction phase, the system must continuously monitor entry conditions to ensure correct state execution and transition decisions when conditions are 'satisfied, unsatisfied, or re-satisfied'.",
            "When the roll correction phase reaches an altitude of 1.5m, the system must verify the completeness of necessary conditions for transitioning to the landing rollout segment, preventing illegal state transitions."
        ]
    },
    {
        "id": 164,
        "requirement": "During the landing rollout phase, the system should enter the landing rollout segment upon receiving a remote ground contact signal, full gear compression signal, or link anomaly lasting 75 frames, using rudder and brakes to correct the aircraft's lateral offset and yaw angle relative to the runway centerline.",
        "original_safety_criterions": [
            "Inspect the logical judgment conditions and branches of functions, analyzing the correctness of function processing under conditions such as 'logical always false, logical always true, incorrect condition judgment, missing branch'.",
            "Under different states and operational phases, the function's control computation process varies. Inspect function inputs and analyze the correctness of function processing when factors like 'operational phase not considered' or 'state not considered' apply.",
            "Inspect the duration of various tasks and analyze the correctness of function processing when durations are shorter than specified.",
            "Inspect the execution sequence of various tasks and analyze the correctness of function processing when sequences differ from specifications.",
            "Inspect the duration of various tasks and analyze the correctness of function processing when durations exceed specified limits."
        ],
        "safety_requirements": [
            "During the landing rollout phase, the system must validate logical judgment conditions for remote ground contact signals, full gear compression signals, and link anomaly after 75 frames, ensuring accurate entry into the rollout segment and execution of rudder and brake controls even under conditions like 'logical always false, logical always true, incorrect condition judgment, or missing branch'.",
            "The system must inspect the duration of landing rollout control tasks, ensuring the effectiveness of rudder and brake corrections for lateral offset and yaw angle when durations exceed thresholds, and triggering an anomaly alert mechanism.",
            "The system must validate the execution sequence of landing rollout control tasks, ensuring real-time consistency and fault tolerance of rudder and brake controls when sequences deviate from specifications.",
            "The system must perform input validation for control computations based on current flight phase and operating state to prevent rudder and brake command deviations caused by unrecognized operational phases or states.",
            "The system must perform lower limit detection on the duration of landing rollout control tasks, maintaining control logic integrity and outputting diagnostic information when durations fall below threshold values."
        ]
    },
    {
        "id": 165,
        "requirement": "During the floating descent phase, the system should control the aircraft to enter the floating descent segment after engine shutdown in mid-air.",
        "original_safety_criterions": [
            "After executing hardware control, is there monitoring and verification of the match between hardware status and control requirements?",
            "After system recovery, does the recorded key state still meet real-time requirements?",
            "After power failure recovery or runaway reset mechanisms activate, can the system return to normal operation?"
        ],
        "safety_requirements": [
            "After recovery, the system must ensure that the recorded key states during the floating descent phase meet real-time requirements.",
            "When the power failure recovery or runaway reset mechanism activates, the system must return to normal operation, particularly maintaining the ability to control the aircraft to enter the floating descent segment after mid-air engine shutdown.",
            "After executing hardware control, the system must monitor and verify that the hardware status matches control requirements after the aircraft enters the floating descent segment following mid-air engine shutdown."
        ]
    },
    {
        "id": 166,
        "requirement": "Remote control inputs correspond to surface deflection commands and throttle position commands. The linear relationship between surface deflections and remote control inputs is: δz (-28º~+28º), δx (-20º~+20º), δy (-25º~+25º), δp (0～115%). Limiting range is [-30°,+20 °].",
        "original_safety_criterions": [
            "Check output data from different redundancies and analyze the correctness of function implementation when one redundancy fails or multiple redundancies fail simultaneously.",
            "Is the sensor acquisition range clearly defined (with upper and lower limits)? Does it report sensor faults when exceeding the acquisition range?",
            "Check the control computation process of the function and analyze the correctness of function handling when computation times out (does not return results within the specified time).",
            "Multiple functions execute serially, with the output of earlier functions serving as input for subsequent ones. Check the output data of preceding functions and analyze the correctness of multi-function handling when data values are combinations of boundary values, initial values, safe values, or default values.",
            "Check the results of the control computation process and analyze the correctness of function handling when results are normal values, abnormal values, boundary values, maximum or minimum values."
        ],
        "safety_requirements": [
            "The system must check the boundary, initial, safe, and default value combinations of surface deflection commands and throttle commands from preceding functions to ensure the accuracy of the linear relationship between remote control inputs and δz(-28º~+28º), δx(-20º~+20º), δy(-25º~+25º), δp(0～115%) and limiting range [-30°,+20 °].",
            "When one or multiple redundancies fail, the system must verify the command outputs of surface deflections δz, δx, δy, and δp to ensure their linear ranges and limiting range [-30°,+20 °] comply with design requirements.",
            "The system must perform real-time validation of control computation results (normal, abnormal, boundary, maximum/minimum values) to ensure compliance of the linear relationship (δz/δx/δy/δp ranges) and limiting range [-30°,+20 °].",
            "If the control computation times out, the system must trigger a predefined fault-tolerant mechanism to ensure the output of surface deflection and throttle commands remains in a safe state.",
            "The system must monitor sensor acquisition ranges (δz/δx/δy/δp) in real-time, report faults immediately upon exceeding limits, and substitute outputs with safe values."
        ]
    },
    {
        "id": 167,
        "requirement": "Elevator control input (0–255), aileron control input (0–255), rudder control input (0–255), throttle control input (0–255).",
        "original_safety_criterions": [
            "Are the temporal relationships, constraints, concurrency, and combination relationships between control logics of each function point correct?",
            "Check the logical judgment conditions and branches of functions, analyzing the correctness of function handling under conditions such as 'logical always false, logical always true, incorrect condition judgment, missing branch'.",
            "Check the results of the control computation process and analyze the correctness of function handling when results are normal values, abnormal values, boundary values, or extreme values.",
            "Check the working states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system must perform comprehensive checks on the logical judgment conditions and branches of elevator, aileron, rudder, and throttle control inputs to ensure correct function handling under conditions such as logical always false, always true, incorrect condition judgment, or missing branch.",
            "The system must validate the elevator, aileron, rudder, and throttle control inputs (0–255) to ensure correct handling of normal values, abnormal values, boundary values, and extreme values.",
            "The system must check the temporal relationships, constraints, concurrency, and combination relationships between elevator, aileron, rudder, and throttle control inputs to ensure logical consistency.",
            "When multiple redundancies are in different working states, the system must ensure correct implementation and redundant fault tolerance of elevator, aileron, rudder, and throttle control inputs (0–255)."
        ]
    },
    {
        "id": 168,
        "requirement": "By remote switch command, reduce the aileron and elevator deflection to 2/3 of the original values, changing the relationship to: δz (-20º~+20º), δx (-13º~+13º), δy (-25º~+25º), δp (0～115%).",
        "original_safety_criterions": [
            "Check continuous output data values across different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output values (i.e., differences exceed a specified threshold).",
            "Check the same input data received by different redundancies and analyze the correctness of function implementation when two or more redundancies receive inconsistent values.",
            "Are the temporal relationships, constraints, concurrency, and combination relationships between control logics of each function point correct?",
            "Check the working states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "When executing remote switch commands to adjust aileron and elevator deflection reduction, the system must verify the correctness of the relationship δz (-20º~+20º), δx (-13º~+13º), δy (-25º~+25º), δp (0～115%), ensuring that the control logic’s timing, constraints, and combination relationships meet requirements.",
            "The system must perform real-time consistency checks on continuous output data (aileron and elevator deflection reductions) across different redundancies. If the difference exceeds the threshold, the system must ensure correct execution logic.",
            "When detecting inconsistent input data (e.g., remote commands) across different redundancies, the system must trigger a data validation mechanism and ensure correct execution of aileron and elevator deflection reduction functions.",
            "The system must monitor the working states of all redundancies and, when two or more redundancies are in different states, ensure that the aileron and elevator deflection reduction function still executes correctly according to the set parameters (δz, δx, δy, δp)."
        ]
    },
    {
        "id": 169,
        "requirement": "Control range and precision requirements for elevator control input (0–255), aileron control input (0–255), rudder control input (0–255), and throttle control input (0–255).",
        "original_safety_criterions": [
            "Check the results of the control computation process and analyze the correctness of function handling when results are normal values, abnormal values, boundary values, or extreme values."
        ],
        "safety_requirements": [
            "The system must check the control computation results for elevator, aileron, rudder, and throttle control inputs (0–255) to ensure correct handling under normal, abnormal, boundary, and extreme values, complying with control range and precision requirements.",
            "When detecting abnormal or out-of-range computation results, the system must immediately trigger an alarm mechanism and restrict control inputs beyond predefined ranges.",
            "The system must implement integrity protection on control computation data for elevator, aileron, rudder, and throttle control inputs to prevent tampering or erroneous data from affecting control precision."
        ]
    },
    {
        "id": 170,
        "requirement": "Implementation of five flight control modes: autonomous control, manual correction control, command control, attitude remote control, and surface remote control.",
        "original_safety_criterions": [
            "What hazards could be triggered by control functions during transitions between various operational scenarios?",
            "Are the entry conditions, exit conditions, and constraint conditions for each mode sufficient and accurate?",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Are the temporal relationships, constraints, concurrency, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system must validate the temporal, constraint, concurrency, and combination relationships among the five flight control modes—autonomous control, manual correction control, command control, attitude remote control, and surface remote control—to ensure correct and non-conflicting system behavior during mode transitions.",
            "During transitions between the five flight control modes, the system must perform risk assessments and implement real-time safety checks to avoid triggering hazardous operations.",
            "The system must strictly define entry, exit, and constraint conditions for the five flight control modes, ensuring sufficiency and accuracy, and completing state synchronization checks before transitions.",
            "The system must ensure that the control sequence and timing of the five flight control modes are coordinated with hardware actions, with logically complete control conditions that remain strictly consistent before and after transitions.",
            "During mode transitions, the system must monitor control signal states in real time, intercept abnormal transition requests, and trigger emergency handling mechanisms.",
            "The system must conduct comprehensive audits of mode transition operations for the five flight control modes, including transition timestamps, sources, and contextual environment parameters, ensuring traceability."
        ]
    },
    {
        "id": 171,
        "requirement": "Special Handling During Control Mode Switching",
        "original_safety_criterions": [
            "Two or more states with transition relationships have the same function. Check the execution of the function before and after state transitions, and analyze the correctness of functional handling under conditions such as 'starting execution, maintaining execution, interrupting execution' after state transitions.",
            "When operational states transfer, check the values of functional interface data and analyze the correctness of outputs when the values 'change or their range changes'.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when the transition conditions are 'not set, always satisfied, or never satisfied'."
        ],
        "safety_requirements": [
            "The system should verify the execution status (start execution, maintain execution, interrupt execution) of different modes with the same function during control mode switching to ensure the correctness of functional handling.",
            "The system should validate the configuration of state transition conditions (not set, always satisfied, never satisfied) during control mode switching to ensure the correctness of state transitions.",
            "The system should check for changes in functional interface data values or value ranges during control mode switching and ensure the correctness of output results."
        ]
    },
    {
        "id": 172,
        "requirement": "During autonomous control mode, from climb phase 2 (inclusive) to the phase before intercepting the final approach leg (exclusive), any command described in section 3.2.4 can be used to switch to command control mode.",
        "original_safety_criterions": [
            "Check the sending and receiving cycles of interface data and analyze whether the sending and receiving cycles match."
        ],
        "safety_requirements": [
            "The system should check the sending and receiving cycles of interface data during command transmission from climb phase 2 to the final approach interception phase in autonomous control mode to ensure cycle compatibility.",
            "Before entering command control mode upon receiving a command specified in section 3.2.4, the system should verify the consistency between sending and receiving cycles to avoid abnormal mode transitions caused by cycle deviations.",
            "The system should monitor interface data in real-time during the transition between autonomous control mode and command control mode and trigger an alarm mechanism if the cycles do not match."
        ]
    },
    {
        "id": 173,
        "requirement": "In command control mode, issuing the 'autonomous control' command allows switching back to autonomous control mode.",
        "original_safety_criterions": [
            "Functional control calculations vary under different states and operational phases. Check the function inputs and analyze the correctness of functional handling when 'operational phase is not considered' or 'operational state is not considered'.",
            "During state execution, in case of power failure and restart, check the restarted state and analyze the correctness of state execution in cases such as 'state not recovered' or 'incorrect recovery'."
        ],
        "safety_requirements": [
            "When switching from command control mode to autonomous control mode, the system should perform state checks on function inputs to ensure that the current operational phase is correctly identified and that it has entered command control mode, preventing abnormal transitions due to unconsidered operational phases or command control modes.",
            "When processing the 'autonomous control' command, the system should verify the compatibility between the current state and target mode and detect invalid inputs or unauthorized operations during functional computation to ensure completeness and controllability of the mode transition."
        ]
    },
    {
        "id": 174,
        "requirement": "Switching between autonomous control and command control does not change the control law and requires no softening treatment.",
        "original_safety_criterions": [
            "Does the timing of outputting control states meet scenario requirements?",
            "Functional control calculations vary under different states and operational phases. Check function inputs and analyze the correctness of functional handling when 'operational phase is not considered' or 'operational state is not considered'.",
            "For critical controls or actions, is there a timeout judgment to handle situations where hardware states remain unable to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "The system should verify that the timing of switching between autonomous control and command control meets scenario requirements, ensuring that the control law remains unchanged and no softening treatment is required.",
            "The system should check input conditions of autonomous control and command control across different operational phases and states, analyzing the impact of 'unconsidered operational phases' or 'unconsidered operational states' on switching logic to ensure correct transitions."
        ]
    },
    {
        "id": 175,
        "requirement": "In autonomous control mode, issuing the 'manual correction' command allows switching to manual correction mode.",
        "original_safety_criterions": [
            "What hazards might be triggered by various control functions during system operation scenario transitions?",
            "Functional control calculations vary under different states and operational phases. Check function inputs and analyze the correctness of functional handling when 'operational phase is not considered' or 'operational state is not considered'.",
            "For multiple states with transition relationships and prioritized functions, check and analyze the correctness of state and function behavior when transitioning from high priority to low priority and vice versa."
        ],
        "safety_requirements": [
            "When switching from autonomous control mode to manual correction mode, the system should verify that function inputs are based on the current operational phase and state, ensuring that the 'manual correction' command can only trigger mode switching under valid conditions.",
            "The system should perform risk assessment during the transition between autonomous control mode and manual correction mode, identifying and eliminating potential hazards caused by control functions during the transition.",
            "The system should validate the priority logic during mode transitions, ensuring that higher-priority modes (e.g., manual correction) can immediately override lower-priority modes (e.g., autonomous control), while reverting requires authorization confirmation.",
            "After mode transitions, the system should enforce recalibration of control calculation parameters to prevent functional anomalies caused by residual data."
        ]
    },
    {
        "id": 176,
        "requirement": "When switching from manual correction to autonomous control, remove the manual correction component from the control law without requiring softening treatment.",
        "original_safety_criterions": [
            "Does the timing of outputting control states meet scenario requirements?",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when the conditions are 'not set, always satisfied, or never satisfied'.",
            "Is false alarm prevention implemented in fault detection, and will this prevention satisfy the real-time requirements of alarm handling?"
        ],
        "safety_requirements": [
            "When switching from manual correction to autonomous control, the system should check the timing of outputting control states to ensure compliance with scenario requirements and proper removal of manual correction components.",
            "When switching from manual correction to autonomous control, the system should verify the transition conditions to ensure correct state transitions even when conditions are 'not set, always satisfied, or never satisfied'."
        ]
    },
    {
        "id": 177,
        "requirement": "When switching from autonomous control to attitude remote control, the control law structure changes, and softening must be applied to the given attitude angle with a softening time of 2 seconds. Additionally, softening must be applied to throttle commands with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Functional control calculations vary under different states and operational phases. Check function inputs and analyze the correctness of functional handling when 'operational phase is not considered' or 'operational state is not considered'.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when the conditions are 'not set, always satisfied, or never satisfied'.",
            "For critical controls or actions, is there a timeout judgment to handle situations where hardware states remain unable to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "When switching from autonomous control to attitude remote control, the system should verify the transition condition settings to ensure correct execution of state transition logic even when conditions are 'not set, always satisfied, or never satisfied'.",
            "When switching between different operational states (e.g., autonomous control and attitude remote control), the system should check inputs related to changes in control law structure and softening of attitude angles and throttle commands to ensure correct association with operational phases and states.",
            "If hardware states fail to meet control requirements within the set time (e.g., 2 seconds) during the transition from autonomous control to attitude remote control, the system should trigger a timeout mechanism and execute a safety response.",
            "The system should perform real-time verification of the attitude angle softening (2 seconds) and throttle command softening (2 seconds) processes to ensure computational accuracy and execution stability across different states."
        ]
    },
    {
        "id": 178,
        "requirement": "When switching from attitude remote control to autonomous control, the control law structure changes, and softening must be applied to the given attitude angle with a softening time of 2 seconds. If the aircraft is cruising (climbing phase 2, altitude hold, or descending), the destination point's latitude and longitude should be changed to the aircraft's current position to guide it back to its original flight path. Softening must also be applied to throttle commands with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "For multiple states with transition relationships and prioritized functions, check and analyze the correctness of state and function behavior when transitioning from high priority to low priority and vice versa.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when the conditions are 'not set, always satisfied, or never satisfied'.",
            "What hazards might be triggered by various control functions during system operation scenario transitions?",
            "If redundancy switching takes too long, is it properly handled by the software?",
            "For critical controls or actions, is there a timeout judgment to handle situations where hardware states remain unable to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "When switching from attitude remote control to autonomous control, the system should ensure that the processing time for changes in control law structure does not exceed 2 seconds and verify the correctness of attitude angle softening, throttle command softening, and latitude/longitude switching.",
            "During the transition from attitude remote control to autonomous control, the system should perform real-time risk assessment of control law structure changes to ensure safe execution of attitude angle softening (2 seconds) and throttle command softening (2 seconds), preventing path deviations caused by latitude/longitude switching during cruise phases.",
            "During state transitions, the system should monitor hardware states for timeouts (with configurable thresholds) and trigger a safe fallback mechanism if control requirements are not met for extended periods.",
            "The system should perform functional integrity checks during bidirectional transitions between attitude remote control and autonomous control to ensure that softening logic for attitude angles and throttle commands (2 seconds) strictly complies with predefined conditions during changes in control law structure.",
            "The system should detect the state transition conditions (not set / always satisfied / never satisfied) when switching from attitude remote control to autonomous control and ensure synchronization and consistency of softening processing (2 seconds) and latitude/longitude switching actions."
        ]
    },
    {
        "id": 179,
        "requirement": "When switching from autonomous control to surface remote control, direct surface control is activated, and softening must be applied to the surface deflection command with a softening time of 2 seconds. Additionally, softening must be applied to throttle commands with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect normal equipment operation?",
            "Check the software state corresponding to system states, operational phases, or system tasks, and analyze the correctness of state execution when 'no corresponding software state exists' or 'software and system are inconsistent'.",
            "During software power failure and restart, check the communication of interface data during restart and analyze the correctness of outputs in cases such as 'interruption, reconnection, or inability to recover' of interface data communication."
        ],
        "safety_requirements": [
            "During software power failure and restart, the system should check the communication status of interface data to ensure correct execution of 2-second softening of surface deflection and throttle commands when switching from autonomous control to surface remote control, even in cases of 'interruption, reconnection, or inability to recover' of communication.",
            "When switching from autonomous control to surface remote control, the system should verify the consistency between software state and system state, ensuring correct execution of direct surface control and 2-second command softening even when 'no corresponding software state exists' or 'software and system are inconsistent'.",
            "When switching from autonomous control to surface remote control, the system should ensure reasonable detection logic that does not affect normal equipment operation, especially maintaining control stability during the 2-second softening process of surface deflection and throttle commands.",
            "The system should monitor the softening process of surface deflection and throttle commands in real-time during state transitions, strictly adhering to the 2-second softening duration and triggering safety recovery mechanisms in case of anomalies."
        ]
    },
    {
        "id": 180,
        "requirement": "When switching from surface remote control to autonomous control, specific operations are required, but the document does not describe them in detail. It is recommended to further clarify the changes in control laws and softening treatments.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when the conditions are 'not set, always satisfied, or never satisfied'.",
            "If redundancy switching conditions are met but the redundancy switch fails, is it properly handled by the software?",
            "If redundancy switching takes too long, is it properly handled by the software?",
            "When issuing dangerous control commands or actions, is there a reasonableness judgment based on equipment status?",
            "Are there reasonable upper and lower bounds for parameter rate of change (slope), and is the strategy for handling over-slope data clearly defined?"
        ],
        "safety_requirements": [
            "When switching from surface remote control to autonomous control, the system should ensure that redundancy switching time meets threshold requirements, and trigger fault-tolerant handling mechanisms in case of timeout.",
            "When switching from surface remote control to autonomous control, the system should verify that parameter rate of change falls within the preset slope range and clearly define filtering or correction strategies for over-slope data.",
            "In case of redundancy switching failure during transition from surface remote control to autonomous control, the system should immediately revert to a safe mode and issue an alert.",
            "The system should perform real-time validation of state transition conditions during the switch from surface remote control to autonomous control to ensure correct execution of state transition logic even when conditions are 'not set, always satisfied, or never satisfied'."
        ]
    },
    {
        "id": 181,
        "requirement": "Issuing the 'Autonomous Control' command enables this transition, exiting direct surface control and softening the surface deflection command with a softening time of 2 seconds. If the aircraft is in cruise (climb 2, altitude hold, or descent) at this time, the target point's latitude and longitude will be updated to the current position of the aircraft to guide it back toward its original destination. Throttle command softening is also required, with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Are the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "If redundancy switching takes too long, is there correct handling by the software?",
            "Check the control calculation process of the function and analyze the correctness of functional handling when the control calculation process times out (does not return results within the specified time).",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "When transitioning via the 'Autonomous Control' command, the system must ensure that both surface deflection and throttle commands are softened exactly for 2 seconds, and during cruise (climb 2, altitude hold, descent), the target latitude and longitude must be correctly updated to the aircraft's current position to maintain guidance along the original flight path.",
            "The system must verify that the triggering conditions, control sequence, and timing of the 'Autonomous Control' command are synchronized with the hardware, ensuring completeness and consistency of the 2-second softening of surface deflection/throttle commands and the latitude/longitude update logic.",
            "The system must perform full branch coverage checks on the 'Autonomous Control' transition logic to identify and handle abnormal scenarios such as 'logic always false, logic always true, incorrect condition, missing branch', ensuring correct transition from direct surface control and command softening.",
            "The system must monitor timeout situations in the control calculation process, ensuring that surface deflection and throttle command softening are completed within 2 seconds, and triggering a predefined fault-tolerant mechanism upon timeout.",
            "The system must verify the temporal, constraint, and concurrency relationships between function points to ensure that the 2-second command softening time, latitude/longitude update logic, and flight state strictly match during the transition."
        ]
    },
    {
        "id": 182,
        "requirement": "Issuing the 'Surface Remote Control' command enables this transition into direct surface control, softens the surface deflection command, and sets the softening time to 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration is less than the specified time.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Different states and operating phases involve different control calculation processes; check function inputs and analyze the correctness of functional handling when 'operating phase or state is not considered'."
        ],
        "safety_requirements": [
            "The system must check the duration of the Surface Remote Control command to ensure that when the command duration is less than 2 seconds, the logic for softening the surface deflection command is correct and meets expectations.",
            "When processing the Surface Remote Control command, the system must check the current operating phase and state to ensure correct computation logic for surface deflection commands under different states or phases.",
            "When issuing the 'Surface Remote Control' command to switch to direct surface control, the system must verify the temporal relationship of the control logic and the constraint on softening time, ensuring strict compliance with a 2-second softening period.",
            "The system must conduct a completeness check on the logical judgment conditions and branches of the Surface Remote Control command, covering correct handling of situations like 'logic always false, logic always true, incorrect condition, missing branch'."
        ]
    },
    {
        "id": 183,
        "requirement": "Issuing the 'Attitude Remote Control' command enables this transition, exiting direct surface control and softening the surface deflection command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the entry and exit conditions for each mode consistent?",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "Upon receiving the 'Attitude Remote Control' command, the system must check the logical judgment conditions and branches to ensure correct handling of command transitions and surface deflection softening in cases such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "The system must validate the duration of the 'Attitude Remote Control' command softening process; if execution exceeds 2 seconds, ensure correct handling and trigger a timeout feedback mechanism.",
            "The system must ensure the correctness of the temporal, constraint, concurrency, and combination relationships between the 'Attitude Remote Control' command and direct surface control, ensuring no conflicts or abnormal states occur under the command transition and 2-second softening time constraints."
        ]
    },
    {
        "id": 184,
        "requirement": "Issuing the 'Attitude Remote Control' command enables this transition, softens the given attitude angle with a softening time of 2 seconds, and softens the throttle command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the operational states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When switching using the Attitude Remote Control command, the system must check the logical judgment conditions to ensure correct handling of attitude angle softening (2 seconds) and throttle command softening (2 seconds) in cases such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "When two or more redundancies are in different operational states, the system must ensure the correctness of the Attitude Remote Control command and throttle command softening functions (2 seconds).",
            "The system must validate the correctness of the control logic, timing, constraints, concurrency, and combination relationships of the Attitude Remote Control command to ensure that the softening of attitude angles and throttle commands (2 seconds) conforms to design specifications."
        ]
    },
    {
        "id": 185,
        "requirement": "Issuing the 'Surface Remote Control' command enables this transition, softens the surface deflection command with a softening time of 2 seconds, and softens the throttle command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration exceeds the specified time.",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration is less than the specified time."
        ],
        "safety_requirements": [
            "When issuing the 'Surface Remote Control' command, the system must check the logical judgment conditions of the surface deflection and throttle commands to ensure correct handling in cases such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "The system must verify the timing and constraint relationships of surface deflection and throttle command softening to ensure a strict 2-second softening time during concurrent transitions.",
            "The system must monitor the softening times of the Surface Remote Control and throttle commands in real-time, triggering an exception handling mechanism if the softening time is less than 2 seconds.",
            "The system must monitor the execution duration of the Surface Remote Control and throttle commands; if the softening time exceeds 2 seconds, ensure the correctness of functional handling."
        ]
    },
    {
        "id": 186,
        "requirement": "Issuing the 'Attitude Remote Control' command enables this transition, softens the given attitude angle with a softening time of 2 seconds, and softens the throttle command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the operational states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "Upon receiving the Attitude Remote Control command, the system must validate the completeness of logical judgment conditions and branches to ensure correct softening logic of attitude angle and throttle commands with a strict 2-second softening time in cases such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "The system must ensure that the timing relationships, constraint conditions, concurrent execution, and combined operations of the Attitude Remote Control and throttle commands meet design requirements, maintaining timing synchronization and parameter consistency (2 seconds) during softening.",
            "When detecting that different redundancies are in different states, the system must maintain the correctness of the Attitude Remote Control and throttle command softening functions, ensuring a 2-second softening time and output parameters strictly matching the current redundancy state."
        ]
    },
    {
        "id": 187,
        "requirement": "Issuing the 'Surface Remote Control' command enables this transition, softens the surface deflection command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration exceeds the specified time.",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration is less than the specified time."
        ],
        "safety_requirements": [
            "When executing the 'Surface Remote Control' command, the system must strictly validate the timing relationships, constraint relationships, and softening time parameter (2 seconds) of the control logic to ensure correct command transition and softening logic.",
            "The system must check the duration of the Surface Remote Control command: if the command duration is less than 2 seconds, softening must be terminated and an exception alarm triggered to prevent incomplete command execution.",
            "The system must check the duration of the Surface Remote Control command: if the command duration exceeds 2 seconds, the command status must be automatically reset after softening completion to avoid residual commands causing interference.",
            "The system must perform redundant validation of the logical judgment conditions of the Surface Remote Control command, identifying anomalies such as 'logic always false, logic always true, incorrect condition, missing branch', and refusing to execute surface deflection commands upon error detection."
        ]
    },
    {
        "id": 188,
        "requirement": "Issuing the 'Surface Remote Control' command enables this transition, softens the surface deflection command with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration exceeds the specified time.",
            "Check the duration of each task and analyze the correctness of functional handling when the task duration is less than the specified time."
        ],
        "safety_requirements": [
            "The system must ensure the correctness of the timing, constraint, concurrency, and combination relationships between the Surface Remote Control command and surface deflection command softening, and trigger a fault tolerance mechanism in case of anomalies.",
            "When the Surface Remote Control command duration is less than 2 seconds, the system must ensure the correctness of the softening logic and generate an alert indicating incomplete softening.",
            "When the Surface Remote Control command duration exceeds 2 seconds, the system must ensure the final output state is maintained after softening completes, preventing repeated triggering of the softening process.",
            "The system must check the logical judgment conditions and branches of the Surface Remote Control command; if logic always false, logic always true, incorrect condition, or missing branch is detected, softening must be stopped and an error status reported."
        ]
    },
    {
        "id": 189,
        "requirement": "Throttle command softening is required, with a softening time of 2 seconds.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling under scenarios such as 'logic always false, logic always true, incorrect logical condition, missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system must verify the timing, constraint, concurrency, and combination relationships between throttle command softening logic and other function control logics to ensure their correctness.",
            "The system must check the judgment conditions and logic branches of the throttle command softening logic to ensure correct handling under scenarios such as 'logic always false, logic always true, incorrect condition, missing branch'."
        ]
    },
    {
        "id": 190,
        "requirement": "The softening priority during control mode switching is higher than phase transition; therefore, if a phase transition occurs during mode switching, only mode switching softening should be performed.",
        "original_safety_criterions": [
            "Different states and operating phases involve different control calculation processes; check function inputs and analyze the correctness of functional handling when 'operating phase or state is not considered'.",
            "Check the transition conditions between all pairs of software states and analyze the correctness of state transitions under conditions such as 'transition condition not set, always satisfied, never satisfied'.",
            "For functions with different priorities in related states, check the correctness of state and function handling under scenarios such as 'high-priority switches low-priority, low-priority switches high-priority'."
        ],
        "safety_requirements": [
            "When control mode switching coincides with phase transition, the system must ensure only mode switching softening is executed and verify the correctness of high-priority switching over low-priority logic.",
            "The system must check the state transition conditions between control modes and phases to ensure the correctness of state transitions under exceptional conditions such as 'condition not set, always satisfied, never satisfied'.",
            "When switching control modes across different operating states and phases, the system must check input parameters to ensure that the calculation process fully incorporates the constraint conditions of the current operating phase and state.",
            "During state transitions, the system must continuously validate the priority consistency of control mode switching computation results, triggering a forced state lock mechanism upon detecting logic conflicts."
        ]
    },
    {
        "id": 191,
        "requirement": "When switching from command control to autonomous control, if the aircraft is in altitude hold mode, it should exit altitude hold; if in speed hold mode, it should exit speed hold; if in left turn, right turn, figure-8 flight, or flying towards a temporary waypoint, it should resume the route and perform general navigation.",
        "original_safety_criterions": [
            "Check functions with different priorities among two or more states that have transition relationships. Analyze correctness of state and function behavior under situations such as 'high priority switching low priority' or 'low priority switching high priority'.",
            "Verify state entry conditions and analyze correctness of state execution under scenarios such as 'condition met', 'condition not met', and 'condition met again' during state execution."
        ],
        "safety_requirements": [
            "When switching from command control to autonomous control, the system shall verify state entry conditions to ensure correct execution of exiting altitude hold, speed hold, left turn, right turn, figure-8 flight, and temporary waypoint states, including resuming routes or performing general navigation under scenarios such as 'condition met', 'condition not met', and 'condition met again'.",
            "When switching from command control to autonomous control, the system shall validate priority switching logic (high-to-low priority or low-to-high priority) to ensure correct functionality across all flight states and that route resumption complies with specifications.",
            "The system shall validate the validity of flight status parameters in real time to ensure legal parameter transitions during altitude hold and speed hold mode changes, preventing navigation errors due to invalid states.",
            "During autonomous control switching, the system shall log state changes and provide an alert mechanism for abnormal switching, ensuring traceability and timely intervention when switching fails."
        ]
    },
    {
        "id": 192,
        "requirement": "When switching from autonomous or command control to remote control, if the navigation solution flag indicates no navigation solution (0), update the start and end points to runway points 6 and 7; when switching from command control to remote control, set lateral control to general navigation, longitudinal control to normal, and speed hold to normal. If lateral control is toward a temporary waypoint, keep the original end point.",
        "original_safety_criterions": [
            "Verify transition conditions between any two states in the software state space and analyze correctness of state transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Check the control calculation process of functions and analyze correctness of handling when timeout occurs (i.e., result not returned within specified time).",
            "Check the results of control calculations and analyze correctness of handling when the result is a 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "When switching from autonomous or command control to remote control, the system shall check control calculation results (e.g., normal, abnormal, boundary, max/min values) to ensure that when the navigation solution flag is 0, the start and end points are updated to runway points 6 and 7, and lateral, longitudinal, and speed hold controls are correctly set; if lateral control is toward a temporary waypoint, retain the original endpoint.",
            "When switching from autonomous or command control to remote control, the system shall handle timeout situations in control calculation to ensure correct updating of start/end points and control states even when no result is returned, complying with the setting of navigation solution flag 0.",
            "When switching from autonomous or command control to remote control, the system shall verify state transition conditions (e.g., not set, always satisfied, never satisfied) to ensure correct updating of start/end points and compliance with specification requirements for lateral, longitudinal, and speed hold control transitions when the navigation solution flag is 0."
        ]
    },
    {
        "id": 193,
        "requirement": "To smooth data and prevent sudden jumps, softening (fade-in/fade-out) processing must be applied to the data.",
        "original_safety_criterions": [
            "Check multiple input data values for a function and analyze correctness under combinations such as 'normal value equivalence classes', 'abnormal value equivalence classes', 'boundary value combinations', 'initial value combinations', 'safe value combinations', and 'default value combinations'.",
            "Check logical judgment conditions and branches of a function and analyze correctness under conditions such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check input data values in task execution conditions and analyze correctness when input causes delayed satisfaction of execution conditions.",
            "Check the control computation process of a function and analyze correctness when timeout occurs (result not returned within specified time).",
            "Check input data values in task execution conditions and analyze correctness when input causes premature satisfaction of execution conditions."
        ],
        "safety_requirements": [
            "During data softening, the system shall verify logical judgment conditions to ensure correct data processing under conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "The system shall verify input data values affecting task execution conditions to ensure fade-in/fade-out processing logic and results meet expectations when execution conditions are delayed.",
            "When control computation times out (no result returned within specified time), the system shall trigger predefined fault-tolerance mechanisms to ensure completeness and continuity of data softening.",
            "The system shall verify input data values affecting task execution conditions to ensure fade-in/fade-out processing logic and results meet expectations when execution conditions are satisfied prematurely.",
            "The system shall verify input data using equivalence class combinations (including normal, abnormal, boundary, initial, safe, and default values) to ensure correct and stable data softening."
        ]
    },
    {
        "id": 194,
        "requirement": "Within the softening period, the softened value is calculated by weighting the old and new values: Softened Value = Old Value × (1 - t / Softening Duration) + New Value × t / Softening Duration",
        "original_safety_criterions": [
            "Check input data values in task execution conditions and analyze correctness when input causes delayed satisfaction of execution conditions.",
            "Check discrete output data values across different redundancies and analyze correctness when two or more redundancies produce inconsistent outputs.",
            "Check task durations and analyze correctness when task duration is less than specified.",
            "Check task durations and analyze correctness when task duration exceeds specified.",
            "Check input data values in task execution conditions and analyze correctness when input causes premature satisfaction of execution conditions."
        ],
        "safety_requirements": [
            "When task execution is delayed due to input data, the system shall verify input values to ensure accurate calculation of Softened Value = Old Value × (1 - t / Softening Duration) + New Value × t / Softening Duration.",
            "When task duration is shorter than the softening duration, the system shall verify softening logic to ensure calculation follows the weighted rule.",
            "When two or more redundant discrete output data values differ, the system shall validate the correctness of the softened value calculation and output the valid value according to rules.",
            "When task execution is satisfied prematurely due to input data, the system shall verify input values to ensure correct calculation of Softened Value = Old Value × (1 - t / Softening Duration) + New Value × t / Softening Duration.",
            "When task duration exceeds specified limits, the system shall ensure the calculation of Softened Value = Old Value × (1 - t / Softening Duration) + New Value × t / Softening Duration meets expected results."
        ]
    },
    {
        "id": 195,
        "requirement": "Using integrator initial value softening specifically for attitude commands (Jg, Yg, yg) and throttle command smoothing during transitions involving control laws containing integrators.",
        "original_safety_criterions": [
            "Check continuous interface data values across different redundancies and analyze correctness when differences exceed threshold.",
            "Check logical judgment conditions and branches of a function and analyze correctness under conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "Functions vary across states and operational phases; check inputs and analyze correctness when phase/state is ignored.",
            "Check control computation process and analyze correctness when timeout occurs (no result returned within specified time).",
            "Check discrete output data values across different redundancies and analyze correctness when two or more redundancies produce inconsistent outputs."
        ],
        "safety_requirements": [
            "The system shall check discrete output data across redundancies and ensure correct handling via integrator initial value softening when inconsistencies occur, and generate alert logs.",
            "The system shall verify logic conditions and branches in integrator-based control laws to ensure fault tolerance for attitude commands (Jg, Yg, yg) and throttle command smoothing under 'logic always false', 'logic always true', incorrect conditions, or missing branches.",
            "The system shall verify input parameters during state and phase transitions to ensure no phase/state factor is missed, and validate completeness of attitude and throttle command smoothing.",
            "The system shall monitor differences in continuous interface data across redundancies, trigger synchronization when thresholds are exceeded, and re-execute integrator initial value softening.",
            "The system shall limit control computation time and initiate a safety recovery process upon timeout to ensure stability during phase transitions."
        ]
    },
    {
        "id": 196,
        "requirement": "When transitioning to a control law with an integrator, to smoothly transition the commanded attitude angles Jg, Yg, or yg, instead of simply initializing the integrator of the next phase control law to zero, compute the integrator's initial value by setting the next phase’s commanded attitude equal to that of the previous phase.",
        "original_safety_criterions": [
            "Functions vary across states and operational phases; check inputs and analyze correctness when phase/state is ignored.",
            "Check control computation results and analyze correctness when results are 'normal, abnormal, boundary, maximum/minimum values'.",
            "Check logical judgment conditions and branches of a function and analyze correctness under conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "Check operating states across different redundancies and analyze correctness when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "When different redundancies are in different states, the system shall verify smooth transition of attitude commands Jg, Yg, or yg during control law switching and ensure correct integrator initialization.",
            "During control law switching, the system shall verify input regarding operational phase and state to ensure correct logic in computing integrator initial values based on previous phase attitude commands, avoiding switching errors caused by ignoring state or phase.",
            "The system shall verify control law switching computation results (normal, abnormal, boundary values, etc.) in real time to ensure smooth attitude transition and stable integrator initialization.",
            "The system shall verify logic conditions and branch completeness during control law switching to prevent logic always true/false or missing branches, ensuring reliable execution of smooth integrator initialization based on continuous attitude commands."
        ]
    },
    {
        "id": 197,
        "requirement": "During transition from takeoff segment to climb segment 1, let Jg be the computed pitch angle at the moment before entering climb segment 1, and x be the initial value of the airspeed integrator. Then x is computed as: x = Jg - Kv [nk(k) - ng(k)] / K vI",
        "original_safety_criterions": [
            "Verify state transition conditions between any two states in the software state space under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Verify correctness of state and function transitions when switching between high-priority and low-priority functions among related states.",
            "For unrelated states, verify their entry conditions under scenarios such as 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Check interface data equivalence classes and analyze output correctness when switching between different output equivalence classes."
        ],
        "safety_requirements": [
            "During transition from takeoff segment to climb segment 1, the system shall verify interface data equivalence classes to ensure correct computation of Jg and x = Jg - Kv [nk(k) - ng(k)] / K vI when switching between output equivalence classes.",
            "When transitioning from takeoff to climb segment 1, the system shall validate state/function correctness under priority switching scenarios (high-to-low and low-to-high priority) and ensure accurate calculation of x = Jg - Kv [nk(k) - ng(k)] / K vI.",
            "During transition from takeoff to climb segment 1, the system shall verify state transition conditions (not set, always satisfied, never satisfied) to ensure correct logic.",
            "During transition from takeoff to climb segment 1, the system shall verify state entry conditions (simultaneously satisfied, satisfied during execution) to ensure complete and correct state execution."
        ]
    },
    {
        "id": 198,
        "requirement": "Softening of two types of altitude data during altitude type switching.",
        "original_safety_criterions": [
            "Verify correctness of state and function transitions when switching between high-priority and low-priority functions among related states.",
            "Check operating states across different redundancies and analyze correctness when two or more redundancies are in different states.",
            "Check interface data equivalence classes and analyze output correctness when switching between different output equivalence classes."
        ],
        "safety_requirements": [
            "During altitude type switching, the system shall verify interface data equivalence classes to ensure correct output when switching between different output equivalence classes.",
            "During altitude type switching, the system shall verify redundancy operating states to ensure correct softening of two altitude types when two or more redundancies are in different states.",
            "The system shall validate both high-to-low and low-to-high priority switching to ensure correct state and function behavior during altitude type switching."
        ]
    },
    {
        "id": 199,
        "requirement": "Softening of rudder deflection command and throttle position command during transition to rudder surface remote control.",
        "original_safety_criterions": [
            "Check interface data equivalence classes and analyze output correctness when switching between different equivalence classes.",
            "Verify timing, constraints, concurrency, and composition relationships among control logics of functional points.",
            "Check logical judgment conditions and branches of a function and analyze correctness under conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "Check interface data equivalence classes and analyze output correctness when switching between different output equivalence classes."
        ],
        "safety_requirements": [
            "During transition to rudder surface remote control, the system shall verify rudder deflection and throttle position command interface data equivalence classes to ensure correct command output when switching between output equivalence classes.",
            "During transition to rudder surface remote control, the system shall validate timing, constraints, concurrency, and composition relationships of rudder deflection and throttle position command softening logic.",
            "During transition to rudder surface remote control, the system shall verify logic conditions of rudder deflection and throttle position commands to avoid handling errors caused by logic always true/false, incorrect conditions, or missing branches.",
            "The system shall ensure that rudder deflection and throttle position command softening during equivalence class switching complies with safety constraints to prevent anomalies due to command spikes."
        ]
    },
    {
        "id": 200,
        "requirement": "Softening of commanded attitude angles (Jg, Yg, yg) during transition between autonomous and attitude remote control modes, and vice versa.",
        "original_safety_criterions": [
            "A single function exists across two or more related states; check function execution before and after state transitions to analyze correctness under scenarios such as 'starting execution', 'continuing execution', or 'interrupting execution'.",
            "Verify state transition conditions between any two states in the software state space under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "Functions vary across states and operational phases; check inputs and analyze correctness when phase/state is ignored.",
            "When a single state has transitions to multiple other states or multiple states transition to the same state, check transition conditions and analyze correctness when multiple conditions are simultaneously satisfied."
        ],
        "safety_requirements": [
            "During transitions between autonomous and attitude remote control modes, the system shall verify softening of commanded attitude angles (Jg, Yg, yg) to ensure correct function handling under scenarios such as 'starting execution', 'continuing execution', or 'interrupting execution'.",
            "In different operational states or phases, the system shall verify inputs for commanded attitude angles (Jg, Yg, yg) to ensure correct function handling when phase or state is not considered.",
            "The system shall validate transition conditions between autonomous and attitude remote control to ensure correct transitions under conditions such as 'not set', 'always satisfied', or 'never satisfied'.",
            "When autonomous and attitude remote control coexist, the system shall verify correctness of attitude angle softening logic when multiple transition conditions are simultaneously satisfied."
        ]
    },
    {
        "id": 201,
        "requirement": "Softening of the specified attitude angles (Jg, Yg, yg) during the landing rollout phase, and softening of the specified attitude angles (Yg, yg) and throttle deflection command in other phases during transitions.",
        "original_safety_criterions": [
            "Check different functions with assigned priorities under two or more states that have transition relationships. Analyze correctness of state and function behavior when switching between 'high priority to low priority' or 'low priority to high priority'.",
            "Check transition conditions between every pair of states in the software state space. Analyze correctness of state transitions under conditions such as 'condition not set, always satisfied, or never satisfied'.",
            "Check entry conditions for each state. Analyze correctness of state execution when the entry condition is 'satisfied, not satisfied, or satisfied again' during state execution.",
            "When two or more states with transition relationships share the same function, check the function execution before and after the state transition. Analyze correctness of function handling when the function 'starts execution, continues execution, or stops execution' after state transition.",
            "Function control calculations differ across different states and operating phases. Check function inputs and analyze correctness of function handling when 'operating phase or operating state is not considered'."
        ],
        "safety_requirements": [
            "The system shall verify entry conditions during state transitions to ensure correctness of softening of specified attitude angles (Jg, Yg, yg) during landing rollout and softening of specified attitude angles (Yg, yg) and throttle deflection commands in other phases under conditions such as 'condition satisfied, not satisfied, or satisfied again'.",
            "During state priority switching (high ↔ low), the system shall ensure that the logic for softening attitude angles (Jg, Yg, yg) during landing rollout and softening of attitude angles (Yg, yg) and throttle deflection commands aligns with the priority rules.",
            "The system shall perform validity checks on state transition conditions. When conditions are 'not set, always satisfied, or never satisfied', illegal state transitions must be prevented, and softening of attitude angles (Jg, Yg, yg) and throttle deflection commands must conform to the current flight phase.",
            "After a state transition, the system shall monitor the execution status of shared functions to ensure that softening of attitude angles (Jg, Yg, yg) and throttle deflection commands matches the current flight phase strictly under scenarios such as 'starting execution, continuing execution, or interrupting execution'.",
            "The system shall dynamically adjust the control calculation process based on the current operating phase and state to ensure that inputs that do not consider the 'operating phase' or 'operating state' do not affect the accuracy of softening of attitude angles (Jg, Yg, yg) and throttle deflection commands."
        ]
    },
    {
        "id": 202,
        "requirement": "Softening of the given pitch angle during phase transitions involving longitudinal control laws with integrators.",
        "original_safety_criterions": [
            "Can meeting redundancy switching conditions cause abnormal output values from currently running functions?",
            "Function control calculations differ across different states and operating phases. Check function inputs and analyze correctness of function handling when 'operating phase or operating state is not considered'.",
            "Check equivalence classes of interface data and analyze output correctness when data values switch between different output equivalence classes.",
            "Check equivalence classes of interface data and analyze output correctness when interface data values switch between different equivalence classes.",
            "Is there a reasonable range for parameter rate of change (upper and lower slope limits)? Is the strategy for handling out-of-range slope data clearly defined?"
        ],
        "safety_requirements": [
            "During phase transitions involving longitudinal control laws with integrators, the system shall check equivalence class transitions of function interface data to ensure correct output during pitch angle softening.",
            "The system shall ensure that the rate of change of parameters during pitch angle softening remains within the preset slope limits and clearly define strategies for handling out-of-limit data.",
            "During transitions between different operating phases or states, the system shall perform validity checks on function inputs to ensure that pitch angle softening aligns with the current phase.",
            "When redundancy switching conditions are triggered, the system shall monitor the softened output of integrator-based longitudinal control law phase transitions and prevent anomalies by activating fault-tolerant mechanisms.",
            "The system shall perform real-time validation of output equivalence classes during pitch angle softening to ensure continuity and stability during transitions between equivalence classes."
        ]
    },
    {
        "id": 203,
        "requirement": "Softening of throttle deflection commands when transitioning from climb to altitude hold and descent to altitude hold. The integrator initial value for throttle control is directly set to 100.0 during climb-to-altitude-hold transitions and 50.0 during descent-to-altitude-hold transitions.",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of the function. Analyze correctness of function handling under conditions such as 'logical always false, logical always true, incorrect logical condition, missing logical branch'.",
            "Function control calculations differ across different states and operating phases. Check function inputs and analyze correctness of function handling when 'operating phase or operating state is not considered'.",
            "Check input data values in execution conditions of tasks. Analyze correctness of function handling when input data causes task execution conditions to be satisfied prematurely.",
            "Check the operating states of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "During transitions from climb to altitude hold or descent to altitude hold, the system shall check logical judgment conditions and branches of throttle deflection command softening to ensure correctness under conditions such as 'logical always false, logical always true, incorrect logical condition, or missing logical branch'.",
            "The system shall verify input data values during climb-to-altitude-hold and descent-to-altitude-hold transitions to ensure correctness of function handling when task execution conditions are satisfied prematurely.",
            "The system shall check the operating states of different redundancies to ensure that during climb-to-altitude-hold transitions, the integrator initial value is set to 100.0, and during descent-to-altitude-hold transitions, it is set to 50.0 even if multiple redundancies are in different states.",
            "The system shall check function inputs under different operating phases and states to ensure correctness of throttle deflection command softening even if the phase or state is not considered."
        ]
    },
    {
        "id": 204,
        "requirement": "Zeroing the longitudinal control integrator when switching from attitude remote control to autonomous mode. If in altitude hold phase, the throttle control integrator initial value is directly set to 50.0.",
        "original_safety_criterions": [
            "Is the sequence and timing of control actions coordinated with hardware? Are control conditions complete and consistent?",
            "Function control calculations differ across different states and operating phases. Check function inputs and analyze correctness of function handling when 'operating phase or operating state is not considered'.",
            "Does the timing of outputting control states meet scenario requirements?",
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "For critical controls or actions, is there a timeout mechanism to handle situations where hardware states remain outside control requirements for extended periods?"
        ],
        "safety_requirements": [
            "When switching from attitude remote control to autonomous mode, the system shall ensure the timing of zeroing the longitudinal control integrator and setting the throttle control integrator initial value meets scenario requirements and check synchronization of output control states.",
            "The system shall validate the reasonableness of detection logic for zeroing the longitudinal control integrator and setting the throttle control integrator initial value during attitude remote control to autonomous mode transitions, avoiding interference with device operation.",
            "When executing zeroing of the longitudinal control integrator and setting the throttle control integrator initial value, the system shall ensure control sequence and timing are coordinated with hardware, and control conditions are logically complete and consistent.",
            "When switching between operating phases or states, the system shall check input conditions to ensure correctness of zeroing the longitudinal control integrator and setting the throttle control integrator initial value without being affected by phase or state factors.",
            "The system shall implement a timeout mechanism for zeroing the longitudinal control integrator and setting the throttle control integrator initial value to handle abnormal situations where hardware states remain outside control requirements for extended periods."
        ]
    },
    {
        "id": 205,
        "requirement": "Throttle deflection command softening during climb-to-altitude-hold transitions involves two softening methods simultaneously, while during descent-to-altitude-hold transitions, only the integrator initial value softening method is used.",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of the function. Analyze correctness of function handling under conditions such as 'logical always false, logical always true, incorrect logical condition, missing logical branch'.",
            "Check sequential execution timing of tasks. Analyze correctness of function handling when actual execution timing differs from expected timing.",
            "Check execution timing of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are not synchronized'.",
            "Check operating states of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When task execution timing differs from expected timing, the system shall ensure the correctness of throttle deflection command softening methods during climb-to-altitude-hold and descent-to-altitude-hold transitions.",
            "The system shall perform logical checks on throttle deflection command softening methods during climb-to-altitude-hold and descent-to-altitude-hold transitions to ensure correctness under conditions such as 'logical always false, logical always true, incorrect logical condition, or missing logical branch'.",
            "When different redundancies are not synchronized in execution timing, the system shall verify the correctness of throttle deflection command softening functions during climb-to-altitude-hold and descent-to-altitude-hold transitions.",
            "When different redundancies are in different operating states, the system shall ensure correct execution of throttle deflection command softening functions: dual softening methods during climb-to-altitude-hold and integrator initial value softening during descent-to-altitude-hold."
        ]
    },
    {
        "id": 206,
        "requirement": "To suppress sensor noise and external interference on sensor output data, some input sensor data needs to be filtered.",
        "original_safety_criterions": [
            "Check input data values in task execution conditions. Analyze correctness of function handling when input data causes task execution conditions to be delayed.",
            "Was filtering and debouncing applied during data acquisition to eliminate interference data?",
            "Check input data values in task execution conditions. Analyze correctness of function handling when input data causes task execution conditions to be satisfied prematurely.",
            "Were specific sensor faults (based on sensor working principles) detected and handled?"
        ],
        "safety_requirements": [
            "When task execution conditions are met prematurely due to input data values, the system shall verify the correctness of sensor data filtering to ensure effective suppression of noise and external interference.",
            "The system shall detect and handle specific sensor faults, including anomaly judgments based on working principles, and suppress noise and interference through filtering.",
            "When task execution conditions are delayed due to input data values, the system shall verify the correctness of sensor data filtering to ensure accurate output data.",
            "The system shall apply real-time filtering to input sensor data during data acquisition to effectively suppress noise and external interference.",
            "The system shall validate the effectiveness of filtered sensor data (e.g., data range verification) to prevent abnormal data from entering subsequent control processes."
        ]
    },
    {
        "id": 207,
        "requirement": "A pre-filter is used to filter input data. The cutoff frequency wc of the filter is converted via the Tustin bilinear transformation to obtain the filter formula y(k) = a0y(k-1) + a1[x(k)+x(k-1)], where a0 and a1 take different values depending on wc.",
        "original_safety_criterions": [
            "Check continuous interface data values of different redundancies. Analyze correctness of function implementation when two or more redundancy interface data values 'differ significantly, i.e., difference exceeds threshold'.",
            "Check the same input data received by different redundancies. Analyze correctness of function implementation when input data values differ between redundancies.",
            "Check multiple input data of the function. Analyze correctness of function handling under combinations such as 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safety value, default value'.",
            "Check continuous output data values of different redundancies. Analyze correctness of function implementation when two or more redundancy output data values 'differ significantly, i.e., difference exceeds threshold'.",
            "Check discrete output data values of different redundancies. Analyze correctness of function implementation when output data values 'differ'."
        ],
        "safety_requirements": [
            "The system shall check input data of the pre-filter to ensure correct processing of the filter formula y(k) = a0y(k-1) + a1[x(k)+x(k-1)] under combinations such as 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safety value, default value'.",
            "When redundant continuous interface data values (e.g., a0 and a1) differ significantly beyond the threshold, the system shall ensure correct filter function implementation and trigger exception handling.",
            "The system shall check redundant filter output data values. When output values differ, provide error correction or redundancy arbitration to ensure result reliability.",
            "When the same input data received by different redundancies differs, the system shall validate data validity and apply predefined safety strategies (e.g., majority voting or safe default values) for filtering."
        ]
    },
    {
        "id": 208,
        "requirement": "Different sensors use different wc values, and corresponding a0 and a1 values also vary. Specific parameters are listed in Table 3-21.",
        "original_safety_criterions": [
            "Check output data of different redundancies. Analyze correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies failure'.",
            "Check discrete output data values of different redundancies. Analyze correctness of function implementation when output data values 'differ'.",
            "Check operating states of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When multiple redundancies are in different operating states, the system shall check sensor data and ensure accuracy in selecting corresponding wc, a0, and a1 parameters.",
            "When single or multiple redundancies fail, the system shall verify the correctness of selected wc, a0, and a1 parameters for sensor data.",
            "The system shall perform consistency checks on discrete sensor output data and ensure correctness of parameter selection logic when data values differ."
        ]
    },
    {
        "id": 209,
        "requirement": "Use inertial navigation vertical acceleration to compensate for radio altimeter climb/descent speed and airspeed climb/descent speed to improve accuracy.",
        "original_safety_criterions": [
            "Check continuous output data values of different redundancies. Analyze correctness of function implementation when two or more redundancy outputs 'differ significantly, i.e., difference exceeds threshold'.",
            "Check logical judgment conditions and branches of the function. Analyze correctness of function handling under conditions such as 'logical always false, logical always true, incorrect logical condition, missing logical branch'.",
            "Check execution timing of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are not synchronized'.",
            "Check operating states of different redundancies. Analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall check the operating states of different redundancies to ensure correct implementation of compensation using inertial navigation vertical acceleration for radio altimeter and airspeed climb/descent speeds when 'two or more redundancies are in different states'.",
            "The system shall check logical conditions and branches of inertial navigation vertical acceleration compensation. Ensure function correctness under conditions such as 'logical always false, logical always true, incorrect logical condition, or missing logical branch'.",
            "The system shall check continuous output data values of different redundancies. When values 'differ significantly beyond threshold', ensure correct execution of compensation for radio altimeter and airspeed climb/descent speeds.",
            "The system shall check execution timing of different redundancies. Ensure compensation function correctness when 'two or more redundancies are not synchronized'."
        ]
    },
    {
        "id": 210,
        "requirement": "Implement a combined filtering method, including reading inertial navigation vertical acceleration data and applying it to compensation calculations for radio altimeter and airspeed climb/descent speeds.",
        "original_safety_criterions": [
            "Check output data of different redundancies. Analyze correctness of function implementation under conditions such as 'single redundancy failure, multiple redundancies failure'.",
            "Check multiple input data of the function. Analyze correctness of function handling under combinations such as 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safety value, default value'.",
            "Check discrete interface data values of different redundancies. Analyze correctness of function implementation when interface data values 'differ'.",
            "Check continuous output data values of different redundancies. Analyze correctness of function implementation when two or more redundancy outputs 'differ significantly, i.e., difference exceeds threshold'.",
            "Check discrete output data values of different redundancies. Analyze correctness of function implementation when output data values 'differ'."
        ],
        "safety_requirements": [
            "The system shall check input data combinations such as normal, abnormal, boundary, initial, safety, and default values during combined filtering to ensure correct compensation calculations for radio altimeter and airspeed climb/descent speeds.",
            "The system shall perform consistency checks on inertial navigation vertical acceleration data from different redundancies. When differences exceed thresholds, activate fault-tolerant logic and ensure correct compensation.",
            "The system shall maintain continuity of compensation functions for radio altimeter and airspeed climb/descent speeds using predefined safety values or default redundancy data when one or more inertial navigation data redundancies fail.",
            "The system shall perform threshold validation on continuous redundancy output data. When differences exceed allowable ranges, isolate abnormal sources and activate redundant compensation mechanisms.",
            "The system shall perform consistency analysis on discrete redundancy output data. When values differ, use majority voting or historical safe state values to ensure reliable combined filter output."
        ]
    },
    {
        "id": 211,
        "requirement": "The system needs to compensate for the vertical acceleration of the atmospheric engine's rising and falling speed.",
        "original_safety_criterions": [
            "Check the execution sequence of each task, analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the duration of each task, analyze the correctness of functional processing when the task duration exceeds the specified time.",
            "Check the execution sequences of different redundancies, analyze the correctness of function implementation in cases such as 'two or more redundancies have unsynchronized execution sequences'.",
            "Check the operating states of different redundancies, analyze the correctness of function implementation in cases such as 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check the operating states of different redundancies to ensure the correct implementation of compensation for vertical acceleration on the atmospheric engine's rising and falling speed when two or more redundancies are in different states.",
            "The system should monitor the duration of the atmospheric engine's rising and falling speed compensation task to ensure the correctness of functional processing when the task execution time exceeds the specified limit.",
            "The system should check the execution sequences of different redundancies to ensure the correctness of compensation for vertical acceleration on the atmospheric engine's rising and falling speed when two or more redundancies have unsynchronized execution sequences.",
            "The system should verify the consistency between the task execution sequence and the specified sequence to ensure the correctness of compensation for vertical acceleration on the atmospheric engine's rising and falling speed when the sequences are inconsistent."
        ]
    },
    {
        "id": 212,
        "requirement": "The system needs to compensate for the vertical acceleration of the radio altimeter's rising and falling speed.",
        "original_safety_criterions": [
            "Check the execution sequence of each task, analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the duration of each task, analyze the correctness of functional processing when the task duration exceeds the specified time.",
            "Check the operating states of different redundancies, analyze the correctness of function implementation in cases such as 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should ensure the correct compensation of the radio altimeter's rising and falling speed due to vertical acceleration when the compensation task duration exceeds the specified time.",
            "The system should ensure the correctness of vertical acceleration compensation on the radio altimeter's rising and falling speed when multiple redundancies are in different operating states.",
            "The system should check the consistency between task execution sequence and the specified sequence, and maintain the correctness of vertical acceleration compensation on the radio altimeter's rising and falling speed when inconsistencies occur."
        ]
    },
    {
        "id": 213,
        "requirement": "The system needs to use Tustin's bilinear transformation to obtain a unified filtering formula.",
        "original_safety_criterions": [
            "Check multiple input data of the function, analyze the correctness of functional processing when input values fall into categories such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, default value combinations', etc.",
            "Check the logical judgment conditions and branches of the function, analyze the correctness of functional processing in cases such as 'logical always-false, logical always-true, incorrect logic condition, missing logic branch', etc.",
            "Check the loop judgment conditions of the function, analyze the correctness of functional processing in cases such as 'loop condition is always false or true'.",
            "Check the control calculation results of the function, analyze the correctness of functional processing when the results are 'normal value, abnormal value, boundary value, extreme maximum/minimum value', etc.",
            "Check whether the temporal relationships, constraints, concurrency, and combination relationships among control logics of various functions are correct."
        ],
        "safety_requirements": [
            "The system should check the loop judgment conditions of the filter formula using Tustin's bilinear transformation to ensure the correctness of processing in cases such as 'loop condition is always false or always true'.",
            "The system should verify the temporal relationships, constraints, concurrency, and combination relationships of control logic during Tustin's bilinear transformation to ensure the logical correctness of generating the unified filter formula.",
            "The system should check the logical judgment conditions and branches of Tustin's bilinear transformation to ensure the correctness of the filter formula in cases such as 'logic always false, logic always true, incorrect condition, missing branch', etc.",
            "The system should validate the input data (combinations of normal values, abnormal values, boundary values, initial values, safety values, default values, etc.) for the filter formula to ensure the correctness of functional processing.",
            "The system should check the control calculation results of Tustin's bilinear transformation (normal value, abnormal value, boundary value, extreme maximum/minimum value) to ensure the correctness of processing logic."
        ]
    },
    {
        "id": 214,
        "requirement": "The system needs to calculate the values of H1(k) and Hbc(k).",
        "original_safety_criterions": [
            "Check output data from different redundancies, analyze the correctness of function implementation in cases such as 'single redundancy failure' or 'multiple redundancies all failed'.",
            "Check multiple input data of the function, analyze the correctness of functional processing when input values fall into categories such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, default value combinations', etc.",
            "Check the control calculation results of the function, analyze the correctness of functional processing when the results are 'normal value, abnormal value, boundary value, extreme maximum/minimum value', etc.",
            "Check the operating states of different redundancies, analyze the correctness of function implementation in cases such as 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check the control calculation results of H1(k) and Hbc(k) to ensure correct functional processing under normal values, abnormal values, boundary values, extreme maximum/minimum values, etc.",
            "The system should validate the output data of different redundancies to ensure the correct calculation of H1(k) and Hbc(k) in cases of single redundancy failure or multiple redundancies failure.",
            "The system should check the operating states of different redundancies to ensure accurate calculation of H1(k) and Hbc(k) when two or more redundancies are in different states.",
            "The system should perform combined checks on the input data of H1(k) and Hbc(k), including processing correctness under normal value equivalence class, abnormal value equivalence class, boundary values, initial values, safety values, and default value combinations."
        ]
    },
    {
        "id": 215,
        "requirement": "When H is set to Hb and Hr respectively, the system needs to calculate the compensated rising and falling speed Hbc, corresponding to uy and h respectively.",
        "original_safety_criterions": [
            "Check continuous interface data values of different redundancies, analyze the correctness of function implementation when two or more redundancy interface data values are inconsistent (i.e., their difference exceeds the specified threshold).",
            "Check the same input data received by different redundancies, analyze the correctness of function implementation when the values of the same input data received by two or more redundancies are inconsistent.",
            "Check the logical judgment conditions and branches of the function, analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logic condition, missing logic branch', etc.",
            "Check the continuous output data values of different redundancies, analyze the correctness of function implementation when two or more redundancy output data values are inconsistent (i.e., their difference exceeds the specified threshold).",
            "Check the discrete output data values of different redundancies, analyze the correctness of function implementation when two or more redundancy output data values are inconsistent."
        ],
        "safety_requirements": [
            "The system should check the logical judgment conditions and branches to ensure the correct calculation of Hbc (corresponding to uy and h) when H is set to Hb and Hr under conditions such as 'logic always false, logic always true, incorrect logic condition, missing logic branch'.",
            "The system should perform consistency checks on continuous interface data of different redundancies to ensure correct calculation of Hbc (corresponding to uy and h) when the value differences exceed the specified threshold.",
            "The system should trigger an error correction mechanism and recalculate Hbc (corresponding to uy and h) when it detects that the same input data received by different redundancies are inconsistent.",
            "The system should validate the discrete output data of different redundancies to ensure that the calculated results of Hbc are only output when all redundancies have consistent values.",
            "The system should monitor the threshold of continuous output data from different redundancies and initiate a fault-tolerant processing procedure when the differences in Hbc calculation results from different redundancies exceed the specified range."
        ]
    },
    {
        "id": 216,
        "requirement": "The system needs to calculate the values of H1(k) and H2(k) at each sampling period T=20ms according to the formula.",
        "original_safety_criterions": [
            "Check the sending and receiving cycles of interface data to analyze whether the sending and receiving cycles match.",
            "The software reads data from external devices (e.g., sensors, NVM, databases, other systems) through interfaces. Check the external devices to analyze the correctness of outputs when communication with the external device is interrupted.",
            "Check the cycle of interface data to analyze the correctness of outputs when the input value cycle is 'maximum' or 'minimum'."
        ],
        "safety_requirements": [
            "The system should check the cycle of interface data to ensure the correct calculation of H1(k) and H2(k) when the input cycle is at its maximum or minimum, meeting the requirement of sampling period T=20ms.",
            "The system should verify the matching of transmission and reception cycles of H1(k) and H2(k) to ensure synchronization and correctness of computation results at each sampling period T=20ms.",
            "The system should ensure that the calculation output of H1(k) and H2(k) has a default value or fault tolerance mechanism when communication with external devices (e.g., sensors, NVM, databases) is interrupted, maintaining correct functional logic.",
            "The system should perform real-time validation of the calculation process of H1(k) and H2(k); if cycle anomalies or communication interruptions are detected, immediately trigger error handling or alarm mechanisms."
        ]
    },
    {
        "id": 217,
        "requirement": "Determine the flight phase under autonomous control, manual correction, and command control modes.",
        "original_safety_criterions": [
            "Check the operating states of different redundancies, analyze the correctness of function implementation in cases such as 'two or more redundancies are in different states'.",
            "Does the timing of outputting control status meet scenario requirements?",
            "Check the execution sequence of each task, analyze the correctness of functional processing when the execution sequence differs from the specified sequence.",
            "Check the control calculation results of the function, analyze the correctness of functional processing when the results are 'normal value, abnormal value, boundary value, extreme maximum/minimum value', etc.",
            "Check the execution conditions of the function, analyze the correctness of functional processing when execution conditions are 'not met' or 'met again' during function execution."
        ],
        "safety_requirements": [
            "The system should check the operating states of different redundancies to ensure the correct implementation of flight phase determination under autonomous control, manual correction, and command control modes when two or more redundancies are in different states.",
            "The system should check the execution conditions of flight phase determination to ensure the correctness of functional processing under autonomous control, manual correction, and command control modes when execution conditions are 'not met' or 'met again'.",
            "The system should verify the timing of outputting control status under autonomous control, manual correction, and command control modes to strictly meet the scenario requirements of the current flight phase.",
            "The system should monitor the execution sequence of flight phase determination tasks; under autonomous control, manual correction, and command control modes, if the task sequence differs from the specified sequence, trigger an error correction mechanism and ensure the correctness of functional processing.",
            "The system should check the control calculation results of flight phase determination to ensure the correctness of functional processing and isolate any abnormal impacts when the results are 'normal value, abnormal value, boundary value, extreme maximum/minimum value', etc."
        ]
    },
    {
        "id": 218,
        "requirement": "Flight phase determination varies under remote control mode (with inner-loop remote control and without inner-loop remote control).",
        "original_safety_criterions": [
            "Is there a reasonableness check based on the equipment status before issuing dangerous control commands or actions?"
        ],
        "safety_requirements": [
            "Before issuing dangerous control commands or actions, the system should perform a reasonableness check based on the current flight phase (with inner-loop remote control / without inner-loop remote control) and equipment status to ensure the consistency between the command and the flight phase mode."
        ]
    },
    {
        "id": 219,
        "requirement": "Perform corresponding processing and phase determination when switching between control modes.",
        "original_safety_criterions": [
            "Check the state transition conditions between every two states in the software state space, analyze the correctness of state transitions when the transition conditions are 'not set, always satisfied, never satisfied', etc.",
            "Two or more states with transfer relationships share the same function; check the execution of the function before and after state transitions, analyze the correctness of functional processing when the function 'starts execution, continues execution, stops execution' after state transition.",
            "Different states and working phases involve different control calculation processes for the function; check the function inputs, analyze the correctness of functional processing when 'working phase not considered' or 'working state not considered'.",
            "Check the equivalence classes of interface data, analyze the correctness of outputs when data values switch between different output equivalence classes.",
            "Check the equivalence classes of interface data, analyze the correctness of outputs when data values switch between different equivalence classes."
        ],
        "safety_requirements": [
            "During control mode switching, the system should check the validity of transition condition settings and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "The system should check the control mode switching logic according to different working phases and states to ensure correct handling of situations such as 'working phase not considered' or 'working state not considered'.",
            "After control mode switching, the system should verify the execution status of shared functions to ensure they are handled correctly according to strategies like 'start execution, continue execution, stop execution'.",
            "The system should check the input equivalence classes of interface data during control mode switching to ensure correct outputs when switching between different value ranges.",
            "The system should check the output equivalence classes of interface data during control mode switching to ensure accurate responses when switching between different output classes."
        ]
    },
    {
        "id": 220,
        "requirement": "Smooth given attitude angles, rudder surface control commands, or throttle during flight phase transitions and control mode switches.",
        "original_safety_criterions": [
            "What dangers might be caused by various control functions during system scene transitions?",
            "Different states and working phases involve different control calculation processes for the function; check the function inputs, analyze the correctness of functional processing when 'working phase not considered' or 'working state not considered'.",
            "Is there a reasonableness check based on equipment status before issuing dangerous control commands or actions?"
        ],
        "safety_requirements": [
            "During flight phase transitions or control mode switches, the system should smooth given attitude angles, rudder surface control commands, and throttle to prevent dangerous command spikes.",
            "The system should check whether function inputs consider the current flight phase and control mode to ensure the correctness of the control calculation process under different phases or modes.",
            "During flight phase transitions or control mode switches, the system should perform a reasonableness check on equipment status before issuing control commands to prevent dangerous actions."
        ]
    },
    {
        "id": 221,
        "requirement": "Select two softening methods: one for softening during transitions between control modes containing inner loops or flight phase conversions, and another for softening during transitions to remote control modes without inner loops.",
        "original_safety_criterions": [
            "Check two or more states with transition relationships and functions with assigned priorities. Analyze the correctness of states and functions in situations such as 'high-priority switching to low-priority' or 'low-priority switching to high-priority'.",
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions when the transition conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Two or more states with transition relationships share the same function. Check the execution of the function before and after state transitions, and analyze the correctness of function handling in cases such as 'starting execution, maintaining execution, interrupting execution' after a state transition.",
            "The control computation process for functions differs under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase' or 'operational state' is not considered.",
            "Check equivalence classes of interface data and analyze the correctness of outputs when interface data values switch between different equivalence classes."
        ],
        "safety_requirements": [
            "The system should check the softening method used during state transitions involving mode switches with inner loops or flight phase changes, ensuring correct handling of softening transitions even when transition conditions are not set, always satisfied, or never satisfied.",
            "The system should check the execution status of the softening method (start, maintain, interrupt) before and after state transitions, ensuring logical continuity and correctness of the two softening modes with/without inner loops during mode switching.",
            "When selecting a softening method, the system should check whether the control computation process considers the current operational phase and state, preventing switching errors caused by neglecting the operational phase or state.",
            "When interface data equivalence classes change (e.g., transitioning between inner-loop mode and remote control mode), the system should verify the correctness of the softening method switching logic, ensuring output conforms to the corresponding equivalence class requirements.",
            "The system should check switching between softening methods of different priorities (high-to-low and vice versa), ensuring the correctness of states and functions when switching modes that include inner loops."
        ]
    },
    {
        "id": 222,
        "requirement": "The flight control system must have a notch filter function to attenuate structural vibration mode signals of the aircraft body and ensure system stability.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When multiple redundancies are in different operating states, the system should ensure the notch filter function correctly attenuates the structural vibration mode signal of the aircraft body to maintain system stability.",
            "The system should check the logical judgment conditions and branches of the notch filter function to ensure there are no cases of 'always false', 'always true', incorrect conditions, or missing branches, and verify the correctness of function handling.",
            "The system should validate the validity of input signals to the notch filter function in real time to prevent filter failure or system instability due to invalid data."
        ]
    },
    {
        "id": 223,
        "requirement": "The elevator channel in the flight control system should contain two notch filters: one located between the control law output and the actuator loop, and the other after the elevator acceleration pre-filter.",
        "original_safety_criterions": [
            "The control computation process for functions differs under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase' or 'operational state' is not considered.",
            "Whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship among control logics of each functional point are correct.",
            "Check discrete output data values from different redundancies and analyze the correctness of function implementation when 'output data values differ' across two or more redundancies.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "Under different operational phases and states, the system should check the inputs to the notch filter between the control law output and actuator loop, and the notch filter after the elevator acceleration pre-filter, ensuring correct determination of operational phase and state to avoid function handling errors due to unconsidered phase or state.",
            "The system should check the redundancy operating states of the two notch filters in the elevator channel, ensuring the logical correctness of filter function implementation when 'two or more redundancies are in different states'.",
            "The system should verify the temporal relationship, constraint relationship, and combination rules of elevator channel control logic, ensuring the configuration and location of the two notch filters are reasonable and meet functional logic requirements.",
            "The system should check the consistency of discrete output data values across different redundancies, ensuring that the notch filter function meets expectations when 'output data values differ' across two or more redundancies."
        ]
    },
    {
        "id": 224,
        "requirement": "The parameters of the notch filter between the control law output and the actuator loop should be set to x1z = 0.1, x2z = 0.6, wn1z = 24.3, wn2z = 24.3.",
        "original_safety_criterions": [
            "The control computation process for functions differs under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase' or 'operational state' is not considered.",
            "Check output data from different redundancies and analyze the correctness of function implementation when 'a single redundancy fails' or 'multiple redundancies fail simultaneously'.",
            "Check the results of the function's control computation and analyze the correctness of function handling when the results are 'normal value', 'abnormal value', 'boundary value', or 'extreme maximum/minimum value'."
        ],
        "safety_requirements": [
            "Under different states or operational phases, the system should check the parameter computation process of the notch filter to ensure correct settings of x1z=0.1, x2z=0.6, wn1z=24.3, wn2z=24.3 even if 'operational phase' or 'state' is not considered.",
            "The system should perform real-time checks on the results of the notch filter parameter computation, distinguishing between normal values, abnormal values, boundary values, and extreme values, and ensure the parameter settings between the control law output and the actuator loop conform to x1z=0.1, x2z=0.6, wn1z=24.3, wn2z=24.3.",
            "When detecting a single redundancy failure or simultaneous failures of multiple redundancies, the system should verify the completeness of the notch filter parameter settings (x1z=0.1, x2z=0.6, wn1z=24.3, wn2z=24.3) and trigger a redundancy switching mechanism."
        ]
    },
    {
        "id": 225,
        "requirement": "The specific parameters of the notch filter after the elevator acceleration pre-filter should be configurable within the system.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship among control logics of each functional point are correct.",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When configuring the parameters of the notch filter after the elevator acceleration pre-filter, the system should verify coordination between control sequence/timing and hardware, ensuring configuration conditions are complete and consistent.",
            "When different redundancies are in different states (e.g., two or more redundancies have inconsistent states), the system should check and ensure the correctness of notch filter parameter configuration.",
            "The system should conduct integrity verification of the logical judgment conditions and branches of the notch filter to ensure correct function handling under abnormal conditions such as 'logic always false', 'logic always true', 'incorrect condition', or 'missing branch'.",
            "The system should verify the temporal relationship, constraint conditions, concurrency mechanisms, and combination rules between notch filter parameter configuration and control logic to ensure compliance with design requirements."
        ]
    },
    {
        "id": 226,
        "requirement": "The elevator acceleration in the longitudinal control law during the flare phase must be processed through Notch Filter 2.",
        "original_safety_criterions": [
            "Check the sequential execution order of various tasks and analyze the correctness of function handling when task execution sequence differs from the specified sequence.",
            "Check the control computation process of the function and analyze the correctness of function handling when the computation exceeds the time limit (does not return a result within the specified time).",
            "Check the duration of various tasks and analyze the correctness of function handling when the task duration exceeds the specified time.",
            "Check the duration of various tasks and analyze the correctness of function handling when the task duration is less than the specified time."
        ],
        "safety_requirements": [
            "The system should check the processing duration of Notch Filter 2. When the processing time exceeds the specified time, ensure the correctness of elevator acceleration calculation and trigger a fault-tolerant mechanism.",
            "The system should verify the execution sequence of longitudinal control tasks during the flare phase, ensuring the correctness of Notch Filter 2 processing even when the sequence differs from the specified one.",
            "The system should monitor the elevator acceleration control computation process and terminate abnormal processes while initiating a safety handling mechanism when the computation exceeds the time limit (fails to return a result within the specified time).",
            "The system should check the task duration of Notch Filter 2. When the duration is less than the specified time, verify the correctness of the processing result and mark potential anomalies."
        ]
    },
    {
        "id": 227,
        "requirement": "The parameters of the notch filter in the aileron channel are x1x = 0.1, x2x = 0.6, wn1x = 24.3, wn2x = 24.3.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check output data from different redundancies and analyze the correctness of function implementation when 'a single redundancy fails' or 'multiple redundancies fail simultaneously'.",
            "Check the results of the function's control computation and analyze the correctness of function handling when the results are 'normal value', 'abnormal value', 'boundary value', or 'extreme maximum/minimum value'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check the correctness of the notch filter parameters (x1x=0.1, x2x=0.6, wn1x=24.3, wn2x=24.3) in the aileron channel when the control computation results are 'normal value', 'abnormal value', 'boundary value', or 'extreme maximum/minimum value'.",
            "When a single redundancy fails or multiple redundancies fail simultaneously, the system should verify the correctness of the aileron channel notch filter output data and ensure the parameters (x1x=0.1, x2x=0.6, wn1x=24.3, wn2x=24.3) conform to functional logic.",
            "When two or more redundancies are in different states, the system should perform consistency checks on the aileron channel notch filter parameters (x1x=0.1, x2x=0.6, wn1x=24.3, wn2x=24.3) to ensure correct function implementation.",
            "The system should check the logical judgment conditions and branches of the aileron channel notch filter to ensure correct function handling of the parameters (x1x=0.1, x2x=0.6, wn1x=24.3, wn2x=24.3) in cases of 'logic always false', 'logic always true', incorrect judgment conditions, or missing branches."
        ]
    },
    {
        "id": 228,
        "requirement": "The parameters of the notch filter in the rudder channel are x1y = 0.1, x2y = 0.5999922, wn1y = 40.81997, wn2y = 25.11991.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check output data from different redundancies and analyze the correctness of function implementation when 'a single redundancy fails' or 'multiple redundancies fail simultaneously'.",
            "Check the results of the function's control computation and analyze the correctness of function handling when the results are 'normal value', 'abnormal value', 'boundary value', or 'extreme maximum/minimum value'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "When two or more redundancies are in different operating states, the system should verify the correctness of the rudder channel notch filter parameters (x1y=0.1, x2y=0.5999922, wn1y=40.81997, wn2y=25.11991) in function implementation.",
            "The system should check the control computation results of the rudder channel notch filter parameters (x1y, x2y, wn1y, wn2y) to ensure correct function handling in cases such as 'normal value', 'abnormal value', 'boundary value', or 'extreme maximum/minimum value'.",
            "The system should check the logical judgment conditions and branches of the rudder channel notch filter parameters to ensure correct function handling in cases of 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing branch'.",
            "In cases of 'single redundancy failure' or 'multiple redundancies failing simultaneously', the system should check the output data of the rudder channel notch filter parameters to ensure correct function implementation."
        ]
    },
    {
        "id": 229,
        "requirement": "The discrete notch filter formula obtained using the Tustin bilinear transformation is δd(k) = [- Kd12δd(k-1) - Kd22δd(k-2) + Kd01δ(k) + Kd11δ(k-1) + Kd].",
        "original_safety_criterions": [
            "Check the input data values received by different redundancies for the same input and analyze the correctness of function implementation when two or more redundancies receive inconsistent input data values.",
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check the discrete interface data values of different redundancies and analyze the correctness of function implementation when two or more redundancies have 'inconsistent data values'.",
            "Check the continuous output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies have 'inconsistent data values, i.e., differences exceeding the specified threshold'.",
            "Check the discrete output data values of different redundancies and analyze the correctness of function implementation when two or more redundancies have 'inconsistent data values'."
        ],
        "safety_requirements": [
            "The system should check the discrete notch filter output data values across different redundancies and ensure the formula δd(k) = - Kd12δd(k-1) - Kd22δd(k-2) + Kd01δ(k) + Kd11δ(k-1) + Kd functions correctly even when values are inconsistent or exceed the threshold.",
            "The system should perform consistency checks on the same input data received by different redundancies to ensure correct notch filter output when input data values differ.",
            "The system should verify the logical judgment conditions and branches of the discrete notch filter formula to ensure correct function handling in cases of 'logic always false', 'logic always true', incorrect conditions, or missing branches.",
            "The system should perform real-time validation of discrete interface data values across different redundancies to ensure accurate notch filter computation and redundancy/fault tolerance capability when values are inconsistent."
        ]
    },
    {
        "id": 230,
        "requirement": "The software system needs to implement the functionality of the elevator acceleration notch filter 2, including parameter setting and filtering processing.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false', 'logic always true', 'incorrect logic condition', or 'missing logic branch'.",
            "Check output data from different redundancies and analyze the correctness of function implementation when 'a single redundancy fails' or 'multiple redundancies fail simultaneously'.",
            "Whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship among control logics of each functional point are correct.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system should check the logical judgment conditions and branches of the elevator acceleration notch filter 2 to ensure correct filtering processing even in cases of 'logic always false', 'logic always true', incorrect conditions, or missing branches.",
            "The system should verify output data from different redundancies to ensure correct implementation of the elevator acceleration notch filter 2 function even in cases of 'single redundancy failure' or 'multiple redundancies failing simultaneously'.",
            "The system should ensure that the control logic of the elevator acceleration notch filter 2 maintains correct temporal, constraint, concurrency, and combination relationships with other functions to avoid conflicts or anomalies.",
            "The system should check the operating states of different redundancies and ensure the correctness and consistency of the elevator acceleration notch filter 2 function execution even when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 231,
        "requirement": "The software system needs to implement the notch filter function for the aileron channel, including parameter setting and filtering processing.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logical branch'.",
            "When abnormal external factors occur (e.g., high sea state, severe weather conditions), does the software perform appropriate judgment and processing?",
            "Check the operating states of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall perform corresponding judgments and processing when abnormal external factors such as high sea state or severe weather occur, ensuring the correctness of parameter setting and filtering processing of the aileron channel notch filter.",
            "The system shall check the working states of different redundancies, ensuring correct implementation of the aileron channel notch filter function when two or more redundancies are in different states.",
            "The system shall inspect the logical judgment conditions and branches of the aileron channel notch filter function, handling situations such as 'logic always false, logic always true, incorrect condition, missing branch' to ensure correct functional processing."
        ]
    },
    {
        "id": 232,
        "requirement": "The software system needs to implement the notch filter function for the rudder channel, including parameter setting and filtering processing.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logical branch'.",
            "Check the loop judgment conditions of the function, and analyze the correctness of functional processing when the loop judgment condition is always false or always true.",
            "Are the timing relationships, constraint relationships, concurrent relationships, and combination relationships between control logics of each function point correct?",
            "Check the operating states of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall verify the correctness of timing relationships, constraint relationships, concurrent relationships, and combination relationships of the rudder channel notch filter function's control logic, ensuring that parameter settings and filtering processing meet design requirements.",
            "The system shall perform completeness checks on the logical judgment conditions and branches of the rudder channel notch filter function, ensuring correct functional processing when 'logic always false, always true, incorrect condition, or missing branch' occurs.",
            "The system shall ensure the correct implementation of the rudder channel notch filter function when detecting that two or more redundancies are in different operating states and shall trigger a status synchronization mechanism.",
            "The system shall inspect the loop judgment conditions of the rudder channel notch filter function, ensuring correct logic processing when the loop condition is always false or always true, avoiding abnormal termination or infinite loops."
        ]
    },
    {
        "id": 233,
        "requirement": "The software system needs to implement Tustin bilinear transformation discretization processing and generate the discrete notch filter formula.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logical branch'.",
            "Check the operating states of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states.",
            "Check the discrete output data values of different redundancies, and analyze the correctness of functional implementation when the outputs of two or more redundancies have 'inconsistent values'.",
            "Check the discrete interface data values of different redundancies, and analyze the correctness of functional implementation when the interface data of two or more redundancies have 'inconsistent values'."
        ],
        "safety_requirements": [
            "The system shall perform consistency checks on discrete output data from different redundancies, ensuring the correctness of notch filter formula generation when values are inconsistent.",
            "The system shall validate the logical judgment conditions and branches of the discretization processing, ensuring the correctness of the Tustin bilinear transformation when logic is always false, always true, or erroneous.",
            "The system shall check the operating states of different redundancies, ensuring correct execution of discretization processing and notch filter generation even when states are inconsistent.",
            "The system shall perform consistency checks on discrete interface data from different redundancies, and ensure the correctness of Tustin bilinear transformation processing when inconsistencies occur."
        ]
    },
    {
        "id": 234,
        "requirement": "Deploy and retract flaps according to the needs of different flight phases or remote control commands. The flap has three deflection positions: 0°, 15°, and 40°.",
        "original_safety_criterions": [
            "The control computation process of the function differs under different states and operation phases. Check the function inputs and analyze the correctness of functional processing when factors such as 'operation phase not considered, operation state not considered' are present.",
            "There is no transition relationship between two or more states. Check the entry conditions of these states and analyze the correctness of state execution when entry conditions are 'simultaneously satisfied' or 'satisfied during state execution'.",
            "Check the operating states of different redundancies and analyze the correctness of functional implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check the current flight phase and state before executing the flap deployment/retraction function, ensuring that flap deflection switching (0°, 15°, 40°) strictly matches the preset phase and state conditions, preventing erroneous actions due to unconsidered factors.",
            "The system shall perform mutual exclusion checks on the entry conditions of flap deployment/retraction states, ensuring there is no conflicting transition between different deflection positions and maintaining the current state or handling it according to safety protocols if triggering conditions change during state execution.",
            "The system shall immediately trigger a fault-tolerant mechanism and force all channels to synchronize to a predefined safe deflection position (e.g., 0°) with alarm records generated when inconsistency in flap deployment/retraction states among redundant channels is detected.",
            "The system shall perform multiple verifications on flap control commands, including flight phase state, redundancy channel consistency, and physical sensor feedback, ensuring deflection switching only occurs when all conditions are compliant."
        ]
    },
    {
        "id": 235,
        "requirement": "The system shall be able to automatically adjust the flap deflection position based on information provided by the flight phase identification module.",
        "original_safety_criterions": [
            "The control computation process of the function differs under different states and operation phases. Check the function inputs and analyze the correctness of functional processing when factors such as 'operation phase not considered, operation state not considered' are present.",
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logical branch'.",
            "Check the operating states of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states.",
            "Check the sequence of task execution timings, and analyze the correctness of functional processing when execution timing deviates from specified timing.",
            "Are the timing relationships, constraint relationships, concurrent relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system shall ensure correct execution of flap deflection position adjustment functions and trigger a state synchronization mechanism when detecting that two or more redundancies are in different operating states.",
            "The system shall verify the control logic timing, constraint relationships, and concurrent combination relationships of flap deflection position adjustment functions, ensuring strict matching with information from the flight phase identification module.",
            "The system shall perform completeness checks on the logical judgment conditions of the flight phase identification module to prevent flap deflection position adjustment errors caused by logic always false, always true, or missing branches.",
            "The system shall monitor the execution timing of flight phase identification information and flap adjustment tasks, forcibly correcting deviations and recording anomalies when timing deviates from specifications.",
            "During flap deflection control calculations, the system must clearly distinguish between flight phase and operational state parameters, terminating calculations and issuing alarms when relevant parameters are not considered."
        ]
    },
    {
        "id": 236,
        "requirement": "The system shall support manual adjustment of flap deflection position via remote control.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and branches of the function, and analyze the correctness of functional processing in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logical branch'.",
            "Is the detection logic for failure items reasonable? Will the detection method affect normal equipment operation?",
            "Is the system’s control sequence and timing coordinated with the hardware? Are the control conditions complete and consistent?"
        ],
        "safety_requirements": [
            "The system shall ensure that failure detection logic does not interfere with normal operation during remote manual adjustment of flap deflection position and maintain functional stability when failures are detected.",
            "The system shall comprehensively check the logical judgment conditions for flap deflection position adjustment, eliminating logic always false, always true, incorrect conditions, or missing branches to ensure correct functional processing.",
            "When manually adjusting flap deflection position, the system shall verify coordination between control sequence/timing and hardware, ensuring completeness and internal consistency of control conditions."
        ]
    },
    {
        "id": 237,
        "requirement": "The system shall be capable of receiving and processing data provided by the flight phase identification module to determine the current flight phase.",
        "original_safety_criterions": [
            "Check the sending and receiving cycles of interface data, analyzing whether they match.",
            "When operational states transition, check the values of function interface data, analyzing output correctness when values change or value ranges change.",
            "Check the duration of each task, analyzing functional processing correctness when task durations are shorter than specified.",
            "Check the sequence of task execution timings, analyzing functional processing correctness when execution timing deviates from specifications.",
            "Check the duration of each task, analyzing functional processing correctness when task durations exceed specifications."
        ],
        "safety_requirements": [
            "The system shall check the send and receive cycles of data from the flight phase identification module, ensuring cycle matching to guarantee correct identification of the current flight phase.",
            "The system shall check the data values of the flight phase identification module during state transitions, ensuring output correctness when values change or value ranges change.",
            "The system shall verify data processing logic correctness and implement fault tolerance mechanisms when flight phase identification task durations are less than specified.",
            "The system shall check the execution timing of flight phase identification tasks, ensuring correct data processing and triggering alarms when timing deviates from specifications."
        ]
    },
    {
        "id": 238,
        "requirement": "The system shall be able to select an appropriate flap deflection position based on the current flight phase.",
        "original_safety_criterions": [
            "For states with transition relationships and functions with set priorities, check the correctness of states and functions when switching between high and low priority.",
            "Is there wrap-around detection-based fault handling? Is the fault state reporting strategy reasonable?",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a rationality judgment based on equipment status?",
            "Are there reasonable rate-of-change limits (upper and lower slope bounds) for parameters? Is the handling strategy for out-of-bound data clear?"
        ],
        "safety_requirements": [
            "The system shall monitor the rate of change of flap deflection positions, ensuring it remains within set upper and lower slope bounds, and clearly define handling strategies for out-of-bound data.",
            "Before issuing dangerous control commands, the system must perform a rationality judgment based on the current flight phase, verifying command compatibility with the flight phase.",
            "The timing of selecting flap deflection positions must strictly comply with current flight phase timing requirements, ensuring compliance of state transitions.",
            "The system shall implement a wrap-around detection-based fault handling mechanism; during faults, it must report the flight phase and flap deflection position state and trigger emergency strategies.",
            "When switching flight phase priorities (mutual conversion between high and low priority), the system must check flap deflection position states and function correctness to ensure compliance with safety logic."
        ]
    },
    {
        "id": 239,
        "requirement": "The system shall be capable of recording and displaying the current flap deflection position.",
        "original_safety_criterions": [
            "Is the detection logic for failure items reasonable? Will the detection method affect normal equipment operation?",
            "When operational states transition, check the values of function interface data, analyzing output correctness when values do not change.",
            "Check the operating states of different redundancies, and analyze the correctness of functional implementation when two or more redundancies are in different states.",
            "After system recovery, do recorded key states still meet real-time requirements?"
        ],
        "safety_requirements": [
            "The system shall check the current flap deflection position value during state transitions, ensuring correct display results when values have not changed.",
            "After system recovery, the system shall verify that the recorded current flap deflection position data meets real-time requirements, ensuring consistency with actual conditions.",
            "Failure detection logic design shall avoid affecting normal flap operation, with detection methods independent of flap control execution processes.",
            "When two or more redundancies are in different operating states, the system shall accurately record and display the current flap deflection position, indicating any anomaly of inconsistent redundancy states."
        ]
    },
    {
        "id": 240,
        "requirement": "During the aircraft ground waiting phase, the flaps shall be set to 0°.",
        "original_safety_criterions": [
            "Check the state transition conditions between every two states in the software state space, analyzing the correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "Is there wrap-around detection-based fault handling? Is the fault state reporting strategy reasonable?",
            "Are the entry and exit conditions of each mode consistent?",
            "Is there a rationality check for operator input? Are commands that do not match the current scenario or state rejected?"
        ],
        "safety_requirements": [
            "The system shall ensure that when setting flaps to 0° during the aircraft ground waiting phase, the entry and exit conditions of each mode are consistent, and verify the continuity of the operational logic.",
            "The system shall check the state transition conditions within the ground waiting phase state space, ensuring accurate and legal state transitions when conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "The system shall perform real-time validation of operator commands during the ground waiting phase, immediately rejecting execution of any commands that attempt to set flaps to non-zero angles which do not match the current scenario."
        ]
    },
    {
        "id": 241,
        "requirement": "When the aircraft takes off and starts the ground roll phase, the flaps are deflected to 15°.",
        "original_safety_criterions": [
            "The control calculation process of the function varies under different states and operating phases. Check the function inputs and analyze the correctness of function processing when factors such as 'operating phase not considered' or 'operating state not considered' exist.",
            "Check the execution sequence of tasks for each mission and analyze the correctness of function processing when the actual task execution sequence is inconsistent with the specified sequence.",
            "Check the execution sequence timing across different redundancies and analyze the correctness of function implementation in cases such as 'execution timing of two or more redundancies not synchronized'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation in cases such as 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "During flap deflection to 15°, the system shall check the operating status of different redundancies to ensure the correct adjustment of flap angle even in situations where 'two or more redundancies are in different states'.",
            "The system shall validate inputs based on current operating phase and state to ensure the logic of flap deflection to 15° remains correct when 'operating phase not considered' or 'operating state not considered'.",
            "The system shall monitor the task timing during takeoff to ensure that flap deflection to 15° follows the specified timing after the ground roll begins, and initiate a correction mechanism if timing inconsistency occurs.",
            "The system shall check synchronization status of execution timing across different redundancies to prevent conflicts or errors during flap deflection to 15° when 'redundancy execution timing is unsynchronized'."
        ]
    },
    {
        "id": 242,
        "requirement": "Start timing when reaching climb segment 1; if the landing gear retracts within 1 minute, delay 5 seconds from the moment of retraction before retracting flaps to 0°.",
        "original_safety_criterions": [
            "Check execution timing across different redundancies and analyze correctness of function implementation when 'execution timing of two or more redundancies not synchronized'.",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "The system shall verify redundancy execution timing synchronization to ensure correct execution of timing start at climb segment 1, flap retraction after 5-second delay upon landing gear retraction within 1 minute, even when 'execution timing of two or more redundancies not synchronized'.",
            "The system shall verify consistency of redundancy operating states to ensure accuracy of timing logic, landing gear status judgment, and flap retraction timing even when 'two or more redundancies in different states'."
        ]
    },
    {
        "id": 243,
        "requirement": "If the landing gear has not been retracted after one minute, directly retract flaps to 0°.",
        "original_safety_criterions": [
            "Check execution order of various tasks and analyze correctness of function handling when execution timing differs from the specified timing.",
            "Check duration of various tasks and analyze correctness of function handling when task durations exceed specified limits.",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "The system shall verify execution timing of landing gear retraction and flap retraction tasks to ensure correctness of function handling when timing deviates from specifications.",
            "The system shall monitor the duration of landing gear retraction tasks and immediately retract flaps to 0° when the duration exceeds 1 minute, verifying correctness of this action."
        ]
    },
    {
        "id": 244,
        "requirement": "When the aircraft reaches the fourth leg of the traffic pattern, extend flaps to 15° if distance to destination is less than 1500m.",
        "original_safety_criterions": [
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'.",
            "Check discrete output data values across different redundancies and analyze correctness of function implementation when 'output data values inconsistent between redundancies'.",
            "Check discrete interface data values across different redundancies and analyze correctness of function implementation when 'interface data values inconsistent between redundancies'."
        ],
        "safety_requirements": [
            "The system shall validate discrete interface data values across different redundancies and still ensure accurate extension of flaps to 15° when aircraft is on the fourth leg of the traffic pattern and distance to destination is less than 1500m, even if 'interface data values inconsistent between redundancies'.",
            "The system shall verify redundancy operating states and ensure accurate triggering of flap extension to 15° when aircraft is on the fourth leg of the traffic pattern and distance to destination is less than 1500m, even if 'two or more redundancies in different states'.",
            "The system shall validate discrete output data values across different redundancies and still ensure reliable extension of flaps to 15° when aircraft is on the fourth leg of the traffic pattern and distance to destination is less than 1500m, even if 'output data values inconsistent between redundancies'."
        ]
    },
    {
        "id": 245,
        "requirement": "When reaching the fifth leg, extend flaps to 40° if distance to touchdown point is less than Hw / tgλ + 1020 m but greater than Hw / tgλ + 20 m.",
        "original_safety_criterions": [
            "Check output data across different redundancies and analyze correctness of function implementation under conditions such as 'single redundancy failure', 'multiple redundancies failure'.",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "When reaching the fifth leg, the system shall check redundancy operating states to ensure correct condition evaluation and execution of flap extension to 40° within the defined distance range (Hw / tgλ + 20 m to Hw / tgλ + 1020 m), even if 'two or more redundancies in different states'.",
            "The system shall verify output data across different redundancies and ensure flap extension to 40° triggers correctly or enters safe failure mode even in case of 'single redundancy failure' or 'multiple redundancies failure'.",
            "The system shall perform redundancy validation on real-time distance data to touchdown point to ensure data validity and trigger exception handling mechanisms when inconsistencies are detected.",
            "In the event of redundancy data faults or inconsistent states, the system shall record fault information and restrict flap operations outside of safe conditions."
        ]
    },
    {
        "id": 246,
        "requirement": "If the aircraft does not enter the glide window, retract flaps to 15° (with corresponding change in Vg) once the aircraft levels again.",
        "original_safety_criterions": [
            "Check loop judgment conditions of the function and analyze correctness of function handling when conditions are 'permanently false' or 'permanently true'.",
            "Check execution sequence of various tasks and analyze correctness of function handling when actual execution timing differs from specified timing.",
            "Check the control calculation process of the function and analyze correctness of function handling when calculation times out (no result returned within specified time).",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "When the aircraft does not enter the glide window, the system shall check redundancy operating states to ensure correct execution of flap retraction to 15° (with corresponding Vg change) even if 'two or more redundancies in different states'.",
            "The system shall monitor loop judgment conditions and ensure correct logic for flap retraction to 15° (with corresponding Vg change) when conditions are 'permanently false' or 'permanently true'.",
            "The system shall verify consistency between actual and specified task execution timing to ensure correct handling of flap retraction to 15° (with corresponding Vg change) after aircraft levels again without entering glide window.",
            "The system shall monitor timeout situations in the control calculation process and ensure flap retraction to 15° (with corresponding Vg change) meets safety requirements even if timeouts occur."
        ]
    },
    {
        "id": 247,
        "requirement": "If the aircraft enters the glide window, keep flaps at 40° until full touchdown.",
        "original_safety_criterions": [
            "Check transition conditions between all pairs of software states and analyze correctness of state transitions when conditions are 'not set', 'always satisfied', or 'never satisfied'.",
            "Check entry conditions for states and analyze correctness of state execution when entry conditions are 'satisfied', 'unsatisfied', or 'resatisfied'."
        ],
        "safety_requirements": [
            "During state transitions, the system shall verify flap control transition conditions to ensure flaps remain at 40° after entering the glide window until touchdown, even under abnormal conditions such as 'conditions not set', 'always satisfied', or 'never satisfied'.",
            "After entering the glide window, the system shall continuously validate state entry conditions to ensure proper response to changes such as 'entry condition satisfied', 'unsatisfied', or 'resatisfied' while flaps remain at 40°.",
            "The system shall monitor glide window activation status in real time and initiate a safety recovery mechanism immediately upon detecting unexpected state transitions (e.g., flap angle changes before full touchdown)."
        ]
    },
    {
        "id": 248,
        "requirement": "During normal landing, the system extends flaps to 15° at point A and to 40° at point B; during reverse landing, the system extends flaps to 15° at point C and to 40° at point D.",
        "original_safety_criterions": [
            "Check whether the temporal relationship, constraint relationship, concurrent relationship, and combination relationships among functional points are correct.",
            "Check logical judgment conditions and branches of functions and analyze correctness of function handling when conditions such as 'logic permanently false', 'logic permanently true', 'incorrect judgment conditions', or 'missing logic branches' exist.",
            "Control calculation processes vary by state and operating phase; check function inputs and analyze correctness of function handling when 'operating phase not considered' or 'operating state not considered'.",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "The system shall verify redundancy operating states to ensure correct flap deployment at both normal and reverse landing points even when 'two or more redundancies in different states'.",
            "The system shall validate the temporal, constraint, and concurrent relationships between flap deployment control logic for normal landing (points A and B) and reverse landing (points C and D) to ensure compliance with design specifications.",
            "The system shall thoroughly inspect flap deployment logic judgment conditions to prevent functional anomalies caused by 'logic permanently false', 'permanently true', 'incorrect conditions', or 'missing branches'.",
            "When deploying flaps under different operating phases and states, the system shall verify input parameter completeness to ensure no impact from unconsidered phases or states on control calculations."
        ]
    },
    {
        "id": 249,
        "requirement": "Under remote control mode, when the system receives a 'flap position 0' command from the remote controller, it issues a flap 0° control signal; when receiving a 'flap position 1' command, it issues a flap 15° signal; when receiving a 'flap position 2' command, it issues a flap 40° signal.",
        "original_safety_criterions": [
            "Is the timing of output control states appropriate for the scenario?",
            "Control calculation processes vary by state and operating phase; check function inputs and analyze correctness of function handling when 'operating phase not considered' or 'operating state not considered'.",
            "Is the sequence and timing of system control coordinated with hardware, and are control conditions complete and consistent?",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "Under remote control mode, the system shall ensure strict correspondence between 'flap positions 0/1/2' commands and respective control signals (0°/15°/40°), verifying completeness of control conditions and coordination of execution timing with hardware.",
            "Upon receiving flap position commands, the system shall issue control signals within the time thresholds required by the scenario to avoid delayed or premature responses.",
            "When multiple redundancies are in different states, the system shall use redundancy arbitration mechanisms to ensure correct flap position signal outputs under remote control mode.",
            "The system shall dynamically adjust control calculation logic according to current operating phase and state, performing exception handling and rejecting invalid commands when input does not match the current phase/state.",
            "The system shall validate the effectiveness of flap control commands to ensure extreme or illegal inputs do not generate invalid control signals."
        ]
    },
    {
        "id": 250,
        "requirement": "Landing gear retraction is controlled via a retraction signal and verified via a lock confirmation signal. Landing gear deployment is controlled via a deployment signal and verified via a lock confirmation signal. Emergency deployment signal activates an emergency pump if deployment fails.",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of functions and analyze correctness of function handling when conditions such as 'logic permanently false', 'logic permanently true', 'incorrect judgment conditions', or 'missing logic branches' exist.",
            "Control calculation processes vary by state and operating phase; check function inputs and analyze correctness of function handling when 'operating phase not considered' or 'operating state not considered'.",
            "Check execution conditions of functions and analyze correctness of function handling when conditions are 'not met' or 'met again' during execution.",
            "Check operating states of different redundancies and analyze correctness of function implementation when 'two or more redundancies in different states'."
        ],
        "safety_requirements": [
            "The system shall check landing gear control inputs across different operating phases and states to ensure correct identification of phase/state and prevent control errors due to 'phase not considered' or 'state not considered'.",
            "The system shall verify redundancy operating states to ensure correct logic of landing gear retraction/deployment control even when 'two or more redundancies in different states'.",
            "The system shall validate logic judgment conditions (e.g., emergency deployment signal trigger conditions) and branches of landing gear control to prevent control failures caused by 'logic permanently false', 'permanently true', 'incorrect conditions', or 'missing branches'.",
            "The system shall continuously monitor landing gear retraction/deployment execution conditions to ensure reasonable control flow when conditions are 'not met' or 'met again', including emergency pump activation logic."
        ]
    },
    {
        "id": 251,
        "requirement": "Landing gear retraction and extension control must be achievable during autonomous control, manual correction, and remote control modes. During autonomous control or manual correction, the flight control system automatically retracts or extends the landing gear based on aircraft position and motion information. During remote control, the ground control station can issue commands to retract or extend the landing gear at any time.",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Check state entry conditions and analyze the correctness of state execution under scenarios such as 'condition satisfied', 'condition not satisfied', and 'condition satisfied again' during state execution.",
            "After hardware control is executed, is there monitoring to determine whether the actual hardware status matches the control requirements?",
            "Check the operating states of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states.",
            "Does the timing of outputting control states meet scenario requirements?"
        ],
        "safety_requirements": [
            "The system shall monitor the actual status of landing gear retraction and extension in real-time after control actions, verify consistency with control requirements, and trigger an alarm mechanism if inconsistencies occur.",
            "The system shall check the operational status of different redundancies and ensure correct execution of landing gear retraction and extension functions even when two or more redundancies are in different states.",
            "The system shall ensure that the sequence and timing of landing gear retraction and extension control during autonomous control, manual correction, and remote control modes are coordinated with hardware, and that the control conditions are complete and logically consistent.",
            "The system shall perform dynamic checks on the entry conditions for landing gear retraction and extension control to ensure correctness and continuity of state execution when conditions change between 'satisfied', 'not satisfied', and 'satisfied again'.",
            "When executing landing gear retraction and extension in autonomous, manual, or remote control mode, the system shall validate the timeliness of control actions according to aircraft position, motion data, and scenario requirements."
        ]
    },
    {
        "id": 252,
        "requirement": "When the aircraft takes off and reaches climb phase 1 with the landing gear in the extended position, the system shall set the landing gear retraction signal to high level and send left and right brake signals (brake pressure at 50% FS).",
        "original_safety_criterions": [
            "Is the sequence and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Check state entry conditions and analyze the correctness of state execution under scenarios such as 'condition satisfied', 'condition not satisfied', and 'condition satisfied again' during state execution.",
            "Inspect external devices (e.g., sensors, NVM, databases, other systems) and analyze the correctness of outputs when source devices are in 'degraded' or 'maintenance' status.",
            "Does the timing of outputting control states meet scenario requirements?",
            "Have differentiated alarm and handling measures been implemented for all fault conditions within the system?"
        ],
        "safety_requirements": [
            "The system shall check the landing gear status and entry conditions when the aircraft reaches climb phase 1 to ensure correct setting of the landing gear retraction signal to high level and output of left and right brake signals (50% FS pressure) under varying condition statuses ('satisfied', 'not satisfied', 'satisfied again').",
            "The sequence and timing of system control shall be coordinated with hardware to ensure completeness and logical consistency of triggering conditions for landing gear retraction and brake signals when the landing gear is in the extended position.",
            "The system shall implement differentiated alarm and handling measures for faults detected during landing gear retraction and braking to ensure safe control under abnormal conditions.",
            "The system shall monitor the status of external devices (e.g., landing gear sensors) and still correctly trigger landing gear retraction and brake signals when devices are in degraded or maintenance states.",
            "The system shall verify the real-time performance of control signal outputs during climb phase 1 to ensure that the timing of landing gear retraction and brake signals meets flight scenario requirements."
        ]
    },
    {
        "id": 253,
        "requirement": "One second later, the system shall check the landing gear retraction lock signal; if the signal is low, it shall continue checking the landing gear retraction/extension status.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of function processing under conditions such as 'logic always false', 'logic always true', 'incorrect logic condition', and 'missing logic branch'.",
            "When a working state transitions, check the values of functional interface data and analyze the correctness of output under conditions where the value remains unchanged.",
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Check the operational status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall check the operational status of different redundancies to ensure correct execution of landing gear retraction lock signal and landing gear status checks when two or more redundancies are in different states.",
            "The system shall verify the reasonableness of the detection logic for the landing gear retraction lock signal to ensure that the detection method does not interfere with normal system operation.",
            "The system shall perform a completeness check on the logical judgment conditions of the landing gear retraction lock signal, covering abnormal cases such as 'logic always false', 'logic always true', 'incorrect condition', and 'missing branch', to ensure correct function processing.",
            "When transitioning between working states, the system shall check the value of the landing gear retraction lock signal to ensure correct output results when the value remains unchanged."
        ]
    },
    {
        "id": 254,
        "requirement": "If the landing gear is in the extended position, the system shall set the landing gear retraction signal to low level, set the left and right brake signals to zero, and set the landing gear retraction failure flag.",
        "original_safety_criterions": [
            "Is there wrap-around detection-based fault handling? Is the strategy for reporting status during faults reasonable?",
            "Inspect external devices (e.g., sensors, NVM, databases, other systems) and analyze the correctness of outputs when source devices are in 'degraded' or 'maintenance' states.",
            "Have differentiated alarm and handling measures been implemented for all fault conditions within the system?",
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Are all fault detection items sufficiently covered?"
        ],
        "safety_requirements": [
            "The system shall verify the detection logic of the landing gear retraction failure flag to ensure its reasonableness without affecting normal device operation.",
            "When external devices (e.g., sensors, NVM, databases) are in degraded or maintenance states, the system shall maintain the correctness of landing gear retraction failure flag setting.",
            "The system shall implement differentiated alarm and handling measures based on the type of landing gear retraction failure.",
            "When detecting a landing gear retraction failure, the system shall execute status reporting according to predefined strategies and ensure that the fault handling logic complies with safety requirements.",
            "The system shall comprehensively cover landing gear retraction failure detection items, including trigger conditions for failure flag setting, signal level states, and correctness of brake signal reset."
        ]
    },
    {
        "id": 255,
        "requirement": "If the landing gear is in the retracted position, the system shall set the landing gear retraction signal to low level and set the left and right brake signals to zero.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Is the sequence and timing of system control coordinated with hardware? Are the control conditions complete and consistent?",
            "Have differentiated alarm and handling measures been implemented for all fault conditions within the system?",
            "Check the operational status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall ensure that the detection logic for landing gear retracted status is reasonable and that the detection method does not interfere with normal device operation, accurately setting the landing gear retraction signal to low and the left/right brake signals to zero upon detection of retracted status.",
            "When the landing gear is in the retracted position, the system shall verify coordination between control sequence/timing and hardware, ensuring completeness and logical consistency of control conditions so that landing gear retraction and brake signals are properly set.",
            "The system shall implement differentiated alarms and handling measures for faults detected during landing gear retracted status, including triggering appropriate-level alarms and recovery mechanisms when signal anomalies occur.",
            "When two or more redundancies are in different working states, the system shall analyze and ensure correct output of landing gear retraction and brake signals."
        ]
    },
    {
        "id": 256,
        "requirement": "If the landing gear retraction lock signal is high, the system shall periodically check the signal.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Is there a detection mechanism in the output loop that allows loop status detection without affecting normal output?",
            "Check the operational status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall ensure the reasonableness of the detection logic for the landing gear retraction lock signal using non-intrusive detection methods to avoid interfering with normal system operation.",
            "During periodic checks of the landing gear retraction lock signal, the output loop shall have independent detection mechanisms to ensure that the checking process does not affect normal output functionality.",
            "When two or more redundancies are in different working states, the system shall still correctly execute periodic checks of the landing gear retraction lock signal when it is high."
        ]
    },
    {
        "id": 257,
        "requirement": "If the landing gear retraction lock signal becomes low within one minute, the system shall set the landing gear retraction signal to low, set the left and right brake signals to zero, and set the landing gear status to retracted.",
        "original_safety_criterions": [
            "Check interface data across different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' and 'all redundancies failed' (e.g., data anomaly, timing fault, communication failure, destination device failure).",
            "Check the control calculation process of the function and analyze the correctness of function handling when the control calculation process times out (does not return a result within the specified time).",
            "Check multiple interrelated states or prioritized functions and analyze the correctness of state and function execution when switching from 'high priority to low priority' and 'low priority to high priority'.",
            "Have differentiated alarm and handling measures been implemented for all fault conditions within the system?"
        ],
        "safety_requirements": [
            "Upon detecting a low landing gear retraction lock signal fault, the system shall execute landing gear retraction signal set low, left/right brake signals set to zero, and landing gear status set to retracted, along with differentiated alarm and handling measures.",
            "When switching between state priorities (high/low), the system shall ensure correct execution of operations triggered by the landing gear retraction lock signal within one minute and that state transitions follow predefined priority logic.",
            "Under single or all redundancy interface data faults (e.g., data anomaly, communication failure), the system shall maintain the correctness of landing gear retraction signal, brake signal, and status settings.",
            "In case of timeout during landing gear control calculations, the system shall activate predefined handling mechanisms to ensure correct function output and trigger corresponding alarms."
        ]
    },
    {
        "id": 258,
        "requirement": "If the landing gear retraction lock signal remains high after one minute, the system shall set the landing gear retraction signal to low, set the left and right brake signals to zero, and set the landing gear retraction failure flag.",
        "original_safety_criterions": [
            "Is there false alarm prevention in fault detection? Does false alarm prevention meet real-time alarm response requirements?",
            "For the same interface data with multiple fault handling strategies, check the safety values required by different fault handling strategies and analyze the correctness of output when different strategies yield different safety values.",
            "Check interface data across different redundancies and analyze the correctness of function implementation under conditions such as 'single redundancy failure' and 'all redundancies failed' (e.g., data anomaly, timing fault, communication failure, destination device failure).",
            "Check the operational status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states.",
            "Check the control calculation results of the function and analyze the correctness of function handling when results are 'normal value', 'abnormal value', 'boundary value', 'maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "When two or more redundancies are in different working states, the system shall ensure correct execution of landing gear retraction signal set low, left/right brake signals set to zero, and accurate setting of landing gear retraction failure flag.",
            "When single or all redundancies experience data anomaly, timing fault, communication failure, or destination device failure, the system shall correctly execute landing gear retraction signal set low, left/right brake signals set to zero, and failure flag setting.",
            "The system shall perform safety value checks on different fault handling strategies for the same interface data and execute signal processing and failure flag setting according to the highest priority safety value when strategy conflicts occur.",
            "The system's false alarm prevention mechanism shall meet real-time requirements, ensuring timely triggering of signal setting and failure flag update when the landing gear retraction lock signal remains high for one minute.",
            "The system shall validate landing gear control calculation results (normal value, abnormal value, boundary value, maximum/minimum value) to ensure logical correctness of signal processing and failure flag setting."
        ]
    },
    {
        "id": 259,
        "requirement": "When the aircraft returns and flies to the third leg of the five-leg approach pattern, and the distance to the touchdown point is less than 5000m, the system shall set the left and right brakes to 100% and set the landing gear extension signal to high.",
        "original_safety_criterions": [
            "Check the control calculation process of the function and analyze the correctness of function handling when the calculation process times out (does not return a result within the specified time).",
            "Check the control calculation results of the function and analyze the correctness of function handling when results are 'normal value', 'abnormal value', 'boundary value', 'maximum/minimum value', etc.",
            "Check the operational status of different redundancies and analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "When the aircraft returns and flies to the third leg of the five-leg approach pattern with a distance to touchdown less than 5000m, the system shall check the operational status of different redundancies and ensure correct execution of left/right brakes set to 100% and landing gear extension signal set to high even when two or more redundancies are in different states.",
            "During triggering of control calculations, the system shall monitor for timeouts and initiate predefined safety response mechanisms if no result is returned within the specified time to ensure correct output of brake and landing gear signals.",
            "The system shall perform real-time validation of control calculation results to ensure that the logic for setting left/right brakes to 100% and landing gear signal to high is compliant with safety standards under various conditions (normal, abnormal, boundary, extreme values), and trigger alarms for abnormal results."
        ]
    },
    {
        "id": 260,
        "requirement": "One second later, the system shall check the landing gear extension lock signal.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Check the data processing process of the function and analyze whether division-by-zero may occur.",
            "Check the control calculation process of the function and analyze the correctness of function handling when the calculation process times out (does not return a result within the specified time)."
        ],
        "safety_requirements": [
            "When checking the landing gear extension lock signal, the system shall ensure that the detection logic is reasonable and that the detection method does not affect normal system operation.",
            "The system shall perform integrity checks on the data processing process for the landing gear extension lock signal to prevent division-by-zero and other anomalies.",
            "If the control calculation process times out and no result is returned, the system shall trigger predefined fault-tolerance mechanisms and ensure correct function handling."
        ]
    },
    {
        "id": 261,
        "requirement": "If the landing gear down lock signal is low, it indicates a failure in the landing gear deployment circuit. The emergency landing gear deployment signal shall then be set to high. After one minute, both the landing gear deployment and emergency deployment signals shall be set to low (in this case, the down lock signal cannot be checked), and the left and right brakes shall be set to their respective preset values. The landing gear deployment failure flag shall be activated.",
        "original_safety_criterions": [
            "Check the execution sequence of tasks to analyze the correctness of functional handling when the actual task execution sequence differs from the specified sequence.",
            "Examine the logical judgment conditions and branches of the function to analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "Check output data from different redundancy channels to analyze the correctness of function implementation under scenarios such as 'single redundancy failure' or 'multiple redundancies failure'.",
            "Check the operational status of different redundancy channels to analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall verify the logic judgment conditions and branches for landing gear deployment circuits to ensure that the functional handling aligns with correct setting of the emergency deployment signal, brake presets, and fault flags in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "The system shall ensure correct signal setting logic for landing gear deployment and emergency deployment when detecting different redundancy states, resetting them to low after one minute, while accurately setting left/right brake presets and activating the landing gear deployment failure flag.",
            "The system shall check output data across different redundancy channels to ensure correct activation of emergency deployment signals, brake preset settings, and fault flag management in cases of single or multiple redundancy failures.",
            "The system shall validate the consistency between task execution timing and the defined timing sequence, ensuring strict adherence to required operations including emergency signal activation, signal reset after one minute, brake preset configuration, and fault flag setting when the down lock signal is low."
        ]
    },
    {
        "id": 262,
        "requirement": "If the landing gear down lock signal is high, periodically check the down lock signal. If within one minute the down lock signal becomes low, indicating that the landing gear has been deployed, the landing gear deployment signal shall be set to low, the landing gear state shall be updated to deployed, the left and right brakes shall be set to their respective preset values, and the landing gear deployment failure flag shall be deactivated.",
        "original_safety_criterions": [
            "Is there fault handling based on wrap-around detection? Is the strategy for reporting faults reasonable?",
            "Check the entry conditions of the state to analyze the correctness of state execution under situations such as 'condition met, not met, or met again'.",
            "Are response handling requirements defined for invalid or erroneous operations?",
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Are all potential fault items adequately covered by fault detection?"
        ],
        "safety_requirements": [
            "When the down lock signal is detected as high, the system shall perform periodic checks and define fault handling strategies, including setting fault flags and reporting system status if the signal remains high beyond one minute.",
            "The system shall specify response mechanisms for erroneous or invalid operations, ensuring that landing gear deployment signals, brake presets, and state updates comply with safety constraints during abnormal down lock signal conditions.",
            "The system's detection logic for the down lock signal must operate independently from the normal landing gear workflow to prevent interference with the physical actuator's normal function.",
            "The system shall continuously monitor the satisfaction of entry conditions during state execution to ensure accurate state transitions and brake preset updates even when conditions fluctuate (met → not met → met again).",
            "The system shall cover all potential fault items related to the down lock signal, including signal loss, timeout in periodic detection, and logic conflicts, with corresponding fault flags and recovery mechanisms."
        ]
    },
    {
        "id": 263,
        "requirement": "If the landing gear down lock signal is high, periodically check the down lock signal. If after one minute the down lock signal remains high, indicating a landing gear deployment failure, the emergency landing gear deployment signal shall be set to high. One second later, the down lock signal shall be checked periodically again.",
        "original_safety_criterions": [
            "Examine the logical judgment conditions and branches of the function to analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "Check output data from different redundancy channels to analyze the correctness of function implementation under scenarios such as 'single redundancy failure' or 'multiple redundancies failure'.",
            "Check interface data from different redundancy channels to analyze the correctness of function implementation in cases such as 'single redundancy failure, all redundancies failure (e.g., data anomaly, timing fault, communication fault)'.",
            "Check the operational status of different redundancy channels to analyze the correctness of function implementation when two or more redundancies are in different states."
        ],
        "safety_requirements": [
            "The system shall verify the down lock signal across redundant channels to ensure correct functionality of landing gear deployment and emergency deployment signal triggering in cases of single or multiple redundancy failures.",
            "The system shall check the operational status of different redundancy channels, ensuring correct execution of periodic down lock signal checks and emergency deployment signal activation when two or more channels are in different states.",
            "The system shall conduct a completeness check on the logic conditions and branches of the down lock signal, ensuring correct fault handling and alarm mechanisms in cases of always-false, always-true, incorrect conditions, or missing branches.",
            "The system shall monitor interface data states across redundant channels (including data anomalies, timing faults, communication issues), maintaining reliability of the down lock signal and emergency deployment signal functions during single or total channel failures."
        ]
    },
    {
        "id": 264,
        "requirement": "If after one minute the down lock signal remains high, it indicates emergency landing gear deployment failure. Both the landing gear deployment and emergency deployment signals shall be set to low, the left and right brakes shall be set to their respective preset values, and the landing gear deployment failure flag shall be activated.",
        "original_safety_criterions": [
            "Check output data from different redundancy channels to analyze the correctness of function implementation under scenarios such as 'single redundancy failure' or 'multiple redundancies failure'.",
            "Examine the logical judgment conditions and branches of the function to analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "Has specific sensor fault (based on sensor operating principle) detection and handling been implemented?",
            "Check the control computation process of the function to analyze the correctness of functional handling in cases such as timeout (no result returned within the specified time).",
            "Check the execution sequence of tasks to analyze the correctness of functional handling when the actual task execution sequence differs from the specified sequence."
        ],
        "safety_requirements": [
            "The system shall validate the logic judgment conditions for emergency landing gear deployment to ensure correct handling of landing gear deployment signal deactivation, brake presets, and fault flag activation in cases such as 'always-false logic, always-true logic, incorrect condition, or missing branch'.",
            "The system shall check the execution timing of emergency landing gear deployment tasks, strictly following the correct order to deactivate signals, configure brake presets, and activate the fault flag when the down lock signal remains high after one minute.",
            "The system shall ensure correct triggering of landing gear deployment signal deactivation, brake presets, and fault flag activation when single or multiple redundancies fail.",
            "The system shall detect specific faults based on the working principles of landing gear systems, forcing signal deactivation, brake preset configuration, and fault flag activation upon detecting emergency deployment failure.",
            "The system shall monitor the control computation process for emergency landing gear deployment, automatically executing signal deactivation, brake presets, and fault flag activation upon timeout to ensure alignment with the one-minute high-level determination."
        ]
    },
    {
        "id": 265,
        "requirement": "If within one minute the down lock signal transitions to low, indicating successful emergency landing gear deployment, the landing gear deployment and emergency deployment signals shall be set to low after a 2-second delay, the landing gear state shall be updated to deployed, the left and right brakes shall be set to their respective preset values, and the landing gear deployment failure flag shall be deactivated.",
        "original_safety_criterions": [
            "Is there fault handling based on wrap-around detection? Is the strategy for reporting faults reasonable?",
            "Are response handling requirements defined for invalid or erroneous operations?",
            "Is the detection logic for fault items reasonable? Will the detection method affect normal device operation?",
            "Are all potential fault items adequately covered by fault detection?",
            "For critical control or actions, is there a timeout detection mechanism to handle hardware states that remain outside control requirements for extended periods?"
        ],
        "safety_requirements": [
            "The system shall monitor the down lock signal state for one minute after initiating emergency landing gear deployment. If the signal does not transition to low, a fault handling mechanism shall be triggered and the system status reported.",
            "The system shall implement fault detection during emergency deployment to ensure the detection logic does not interfere with normal device operation and can identify critical fault items.",
            "After successful emergency deployment (down lock signal transitions to low), the system shall delay for 2 seconds before deactivating landing gear deployment and emergency deployment signals, accurately updating the landing gear state, brake presets, and fault flag status.",
            "The system shall detect erroneous or invalid operations during emergency deployment in real-time and execute predefined response handling strategies.",
            "The system shall ensure comprehensive coverage of fault detection scenarios during emergency landing gear deployment, including signal anomalies, timing overruns, and actuator failures, with fault flag states recorded accordingly."
        ]
    },
    {
        "id": 266,
        "requirement": "Upon power-up on ground, the system shall initialize all signals and states to ensure the initial state of the landing gear and braking systems is correct.",
        "original_safety_criterions": [
            "Check external devices (e.g., sensors, NVM, databases, other systems) to analyze the correctness of outputs when these devices are in states such as 'powered off' or 'initializing'.",
            "Multiple functions or states may share the same interface data, but have differing initial value requirements. Check the initial values of this interface data and analyze output correctness when the initial value is either greater than or less than what each function/state requires.",
            "Check the entry conditions of states to analyze the correctness of state execution when the condition is 'met, not met, or met again' during execution.",
            "Check the operational states of different redundancy channels to analyze the correctness of function implementation when two or more channels are in different states."
        ],
        "safety_requirements": [
            "During ground power-up, the system shall check the operational states of different redundancy channels to ensure correct initialization of all signals and states when two or more channels are in different states, maintaining the correct initial state of the landing gear and braking systems.",
            "During ground power-up, the system shall validate the entry conditions of states to ensure that the output results during state execution align with the initial state requirements of the landing gear and braking systems when the condition is 'met, not met, or met again'.",
            "During ground power-up, the system shall check the operational status of external devices (e.g., sensors, NVM, databases) to ensure correct outputs when the devices are in 'powered off' or 'initializing' states, supporting correct initialization of the landing gear and braking systems.",
            "During ground power-up, the system shall validate the initial state of the landing gear and braking systems, analyzing output correctness when the initial state is either greater than or less than the functional requirements, ensuring compliance with design specifications."
        ]
    },
    {
        "id": 267,
        "requirement": "Remote control commands for landing gear retraction and deployment can be issued at any time regardless of the current control mode.",
        "original_safety_criterions": [
            "Functions may have different control computation processes under different states and operational phases. Check function inputs to analyze correctness when factors such as 'operational phase' and 'operational state' are not considered.",
            "Examine the logical judgment conditions and branches of the function to analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "When issuing dangerous control commands or performing actions, is there a reasonableness check based on the device state?",
            "Check the execution sequence of tasks to analyze the correctness of functional handling when the actual task execution sequence differs from the specified sequence.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships among control logics of various function points correct?"
        ],
        "safety_requirements": [
            "When issuing remote control commands for landing gear retraction and deployment in different operational phases and states, the system shall verify whether the function inputs match the current phase and state, ensuring correct command processing.",
            "Before issuing remote control commands for landing gear retraction and deployment, the system shall monitor the device state (e.g., locked, faulty) in real time and perform a reasonableness check, prohibiting command execution in invalid states.",
            "The system shall verify whether the execution sequence of remote control commands for landing gear retraction and deployment complies with predefined sequence rules, terminating operations and reporting anomalies if sequence inconsistencies are detected.",
            "The system shall comprehensively inspect the logic conditions for remote control commands in different control modes to avoid misoperations caused by always-false logic, always-true logic, incorrect conditions, or missing branches.",
            "The system shall ensure that the temporal relationships, constraint conditions, concurrency, and combination relationships of remote control commands across all control modes comply with safety standards, preventing conflicts or concurrency risks."
        ]
    },
    {
        "id": 268,
        "requirement": "Upon receiving a 'retract landing gear' remote command, if the flight phase is not ground waiting and the flight altitude is no less than 80 meters, the processing described in section 3.2.11.3 point 1) shall be executed (excluding its conditions).",
        "original_safety_criterions": [
            "Is there a reasonableness check for operator actions? Should inappropriate commands for the current scenario or state not be responded to?",
            "When issuing dangerous control commands or performing actions, is there a reasonableness check based on the device state?",
            "Check the duration of each task to analyze the correctness of functional handling when the task duration is shorter than the specified time.",
            "Check the duration of each task to analyze the correctness of functional handling when the task duration is longer than the specified time.",
            "Check the execution conditions of the function to analyze the correctness of functional handling when the execution condition is 'not met, met again' during execution."
        ],
        "safety_requirements": [
            "Before executing the 'retract landing gear' command, the system shall verify whether the flight phase and altitude meet the criteria (non-ground waiting and altitude ≥ 80m) and continuously monitor condition changes during execution to ensure correct function handling.",
            "Upon receiving a 'retract landing gear' command, the system shall perform a reasonableness check based on the current flight phase and altitude, rejecting the command if conditions are not met (e.g., ground waiting or altitude < 80m).",
            "The system shall monitor the execution duration of the 'retract landing gear' task and trigger an exception handling mechanism if the duration exceeds the allowed time, ensuring the function terminates or returns to a safe state.",
            "If a 'retract landing gear' command is received when flight phase or altitude conditions are not satisfied, the system shall record the invalid command, generate an alert, and prohibit execution of the operation."
        ]
    },
    {
        "id": 269,
        "requirement": "Upon receiving a 'deploy landing gear' remote command, the processing described in section 3.2.11.3 point 2) shall be executed (excluding its conditions).",
        "original_safety_criterions": [
            "Check the control computation process of the function to analyze the correctness of functional handling when the computation process times out (does not return a result within the specified time).",
            "When issuing dangerous control commands or performing actions, is there a reasonableness check based on the device state?",
            "Check the control computation results of the function to analyze the correctness of functional handling when the result is a 'normal value, abnormal value, boundary value, maximum/minimum value', etc.",
            "Check the execution sequence of tasks to analyze the correctness of functional handling when the actual task execution sequence differs from the specified sequence.",
            "Check the duration of each task to analyze the correctness of functional handling when the task duration exceeds the specified time."
        ],
        "safety_requirements": [
            "During execution of the 'deploy landing gear' task, the system shall check the task duration and trigger an exception handling mechanism if the duration exceeds the specified limit, ensuring safe function handling.",
            "The system shall validate the control computation results of the 'deploy landing gear' command to ensure correct handling logic when results are 'normal, abnormal, boundary, or extreme values'.",
            "If the control computation process for 'deploy landing gear' times out (does not return a result within the specified time), the system shall terminate the operation and execute safety protection measures.",
            "The system shall monitor the execution sequence of the 'deploy landing gear' task and immediately terminate the task and return to a safe state if the sequence deviates from the specified order.",
            "Before issuing a 'deploy landing gear' command, the system shall perform a reasonableness check based on the current device state, rejecting command execution if it does not meet safety conditions."
        ]
    },
    {
        "id": 270,
        "requirement": "Each of the two rear wheels of the aircraft has an independent braking system. Braking is controlled using a PWM scheme. The flight control computer sends a 2kHz pulse width modulation signal to the braking system, where the braking torque is proportional to the duty cycle of the PWM signal. The braking duration corresponds to the duration of the PWM signal.",
        "original_safety_criterions": [
            "Examine the logical judgment conditions and branches of the function to analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logic condition, or missing logic branch'.",
            "Are the temporal relationships, constraint relationships, concurrency relationships, and combination relationships among control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall comprehensively inspect the logic conditions and branches of the braking system to ensure correct execution of the PWM control scheme even in cases of 'always-false logic, always-true logic, incorrect conditions, or missing branches'.",
            "The system shall verify the timing, constraints, concurrency, and combination relationships of all function points when the flight control computer sends a 2kHz PWM signal, ensuring strict proportionality between braking torque and duty cycle and precise matching of duration with signal duration.",
            "The system shall continuously monitor the relationship between the duty cycle of the PWM signal and the braking torque, triggering correction mechanisms and isolating abnormal brake channels upon detecting nonlinear deviations.",
            "The system shall cross-validate PWM control commands for the dual independent braking systems to ensure consistent duty cycle calculations and automatically switch to redundant control in case of failure in any one system."
        ]
    },
    {
        "id": 271,
        "requirement": "If the landing gear full compression signal is valid and the airspeed is less than a certain speed threshold vk_may_brake, differential braking shall be used for course correction.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logic branch'.",
            "Check the values of continuous output data from different redundancies, and analyze the correctness of function implementation when two or more redundant outputs have 'inconsistent values, i.e., difference exceeding specified threshold'.",
            "Check the duration of each task, and analyze the correctness of function handling when the task duration is less than the specified time.",
            "Check the execution timing sequence of each task, and analyze the correctness of function handling when the execution sequence differs from the specified sequence.",
            "Check the control calculation results of the function, and analyze the correctness of function handling when the calculation result is 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions of valid landing gear full compression signal and airspeed less than vk_may_brake, ensuring the correctness of differential braking function handling under scenarios such as 'logic always false, logic always true, incorrect judgment condition, missing branch'.",
            "The system shall verify continuous output data from different redundancies, ensuring correct implementation of the differential braking function when redundancy output differences exceed specified thresholds.",
            "The system shall verify the execution timing sequence of the differential braking correction task, ensuring correct function handling when the timing sequence differs from the specification.",
            "The system shall check the validity of the differential braking control calculation results, including correct handling in scenarios involving normal values, abnormal values, boundary values, and extreme maximum/minimum values.",
            "The system shall monitor the duration of the valid landing gear full compression signal and airspeed less than vk_may_brake, ensuring the correction function executes correctly when the task duration is less than the specified threshold."
        ]
    },
    {
        "id": 272,
        "requirement": "In autonomous control mode, the differential brake control law is: δb = -(Kz * Dz + Kz * Dz - K * Δy - Ky * wy)",
        "original_safety_criterions": [
            "For the control calculation process of the function under different states and operating phases, check the function inputs and analyze the correctness of function handling when 'operating phase or operating state is not considered'.",
            "Check the software status corresponding to the system status, operating phase, or system mission, and analyze the correctness of state execution when 'no corresponding software status exists' or 'software status differs from system status'.",
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'met, not met, met again'."
        ],
        "safety_requirements": [
            "The system shall check the state entry conditions in autonomous control mode, ensuring that the differential brake control law (δb = -(Kz*Dz + Kz*Dz - K*Δy - Ky*wy)) executes correctly when the entry conditions are 'met, not met, met again'.",
            "When switching between different operating phases or states, the system shall check the function inputs, ensuring correct calculation of the differential brake control law (δb = -(Kz*Dz + Kz*Dz - K*Δy - Ky*wy)) without missing any operating phase or state.",
            "The system shall check the consistency between software status and system status or operating phase in autonomous control mode, preventing errors caused by 'no corresponding software status' or 'software-hardware inconsistency'."
        ]
    },
    {
        "id": 273,
        "requirement": "In manual correction mode, the differential brake control law is: δb = -[Kz * (Dz - DzgSemi - DzsemiOld) + Kz * Dz - K * Δy - Ky * wy], where DzsemiOld is the lateral offset correction value during flare.",
        "original_safety_criterions": [
            "Check states with transfer relationships and functions with set priorities, analyzing the correctness of state and function behavior when switching from 'high priority to low priority' and 'low priority to high priority'.",
            "Check the transfer conditions between every pair of states in the software state space, analyzing the correctness of state transitions when the transfer condition is 'not set, always satisfied, never satisfied'.",
            "Check the state entry conditions, analyzing the correctness of state execution when the entry conditions are 'met, not met, met again'.",
            "For the control calculation process of the function under different states and operating phases, check the function inputs and analyze the correctness of function handling when 'operating phase or operating state is not considered'.",
            "Check the software status corresponding to the system status, operating phase, or system mission, and analyze the correctness of state execution when 'no corresponding software status exists' or 'software status differs from system status'."
        ],
        "safety_requirements": [
            "When entering manual correction mode, the system shall check the state entry conditions, ensuring correct calculation of the differential brake control law δb and accurate use of the DzsemiOld parameter under conditions of 'met, not met, met again'.",
            "When calculating the differential brake control law δb under different operating phases and states, the system shall validate input parameters to ensure no calculation discrepancy due to ignored phases or states.",
            "During state priority switching in manual correction mode, the system shall verify the correctness of control law δb execution in both 'high priority to low priority' and 'low priority to high priority' scenarios.",
            "The system shall ensure complete setup of state transition conditions in manual correction mode, prohibiting abnormal transitions when conditions are 'not set, always satisfied, never satisfied', and maintaining the validity of control law δb."
        ]
    },
    {
        "id": 274,
        "requirement": "In inner-loop remote control (attitude control) mode, the differential brake control law is: δb = K * (-yg) + Ky * wy",
        "original_safety_criterions": [
            "Is the system's control sequence and timing coordinated with hardware? Are the control conditions complete and consistent?",
            "Is there wrap-around detection-based fault handling? Is the state reporting strategy reasonable during faults?",
            "Is there a detection mechanism in the output loop to allow loop status checking without affecting normal output?",
            "Check the state entry conditions, analyzing the correctness of state execution when the entry conditions are 'met, not met, met again'."
        ],
        "safety_requirements": [
            "Before entering inner-loop remote control (attitude control) mode, the system shall check the entry conditions, ensuring correct execution of the differential brake control law δb = K * (-yg) + Ky * wy when the conditions are 'met, not met, met again'.",
            "In inner-loop remote control (attitude control) mode, the system shall include wrap-around detection-based fault handling mechanisms, executing reasonable state reporting strategies during faults while ensuring accuracy of δb calculations.",
            "While in inner-loop remote control (attitude control) mode, the system shall continuously monitor the control loop status, ensuring that the computation of δb = K * (-yg) + Ky * wy does not affect normal output.",
            "The system shall ensure that the control sequence and timing in inner-loop remote control (attitude control) mode are coordinated with hardware, with complete and consistent control conditions, and that δb execution strictly follows the defined formula."
        ]
    },
    {
        "id": 275,
        "requirement": "In outer-loop remote control (control surface control) mode, the specific formula for the differential brake control law is not provided, but the corresponding control logic must be implemented.",
        "original_safety_criterions": [
            "Check the values of continuous output data from different redundancies, analyzing the correctness of function implementation when two or more redundant outputs have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check the values of discrete output data from different redundancies, analyzing the correctness of function implementation when two or more redundant outputs have 'inconsistent values'.",
            "Check the execution timing of different redundancies, analyzing the correctness of function implementation when 'two or more redundancies are not synchronized'.",
            "Check the operating states of different redundancies, analyzing the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall check the operating states of different redundancies, ensuring correct implementation of the differential brake control logic when 'two or more redundancies are in different states'.",
            "The system shall monitor the continuous output data of different redundancies, ensuring accurate and consistent differential brake control logic when value differences exceed specified thresholds.",
            "The system shall check the discrete output data of different redundancies, maintaining reliable execution of the differential brake control logic when 'values are inconsistent'.",
            "The system shall synchronize the execution timing of different redundancies, triggering error correction mechanisms when 'two or more redundancies are not synchronized' to ensure correctness of the control logic."
        ]
    },
    {
        "id": 276,
        "requirement": "During ground waiting phase, the differential brake control laws in autonomous and manual correction modes are: δb = 0.",
        "original_safety_criterions": [
            "Check the transfer conditions between every pair of states in the software state space, analyzing the correctness of state transitions when the transfer condition is 'not set, always satisfied, never satisfied'.",
            "For the control calculation process of the function under different states and operating phases, check the function inputs and analyze the correctness of function handling when 'operating phase or operating state is not considered'.",
            "Does the timing of outputting control status meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "For critical controls or actions, is there a timeout detection mechanism to handle situations where hardware status remains unable to meet control requirements?"
        ],
        "safety_requirements": [
            "During the ground waiting phase in autonomous and manual correction modes, the system shall ensure that the output timing of δb=0 meets scenario requirements and checks the trigger conditions for control status transitions.",
            "Before issuing differential brake control commands during the ground waiting phase, the system shall perform a reasonableness check based on equipment status to prevent dangerous actions.",
            "The system shall check the phase and state information of function inputs, ensuring correct processing of δb=0 even if operating phase or state is not considered.",
            "The system shall check the state transition conditions between autonomous and manual correction modes during the ground waiting phase, ensuring they are not incorrectly set to 'not set, always satisfied, or never satisfied'.",
            "The system shall implement a timeout detection mechanism for δb=0 during the ground waiting phase to handle situations where control requirements remain unmet for extended periods."
        ]
    },
    {
        "id": 277,
        "requirement": "In remote control mode, it is the same as during takeoff roll phase, where vk_may_brake = 80 km/h.",
        "original_safety_criterions": [
            "For the control calculation process of the function under different states and operating phases, check the function inputs and analyze the correctness of function handling when 'operating phase or operating state is not considered'.",
            "Check the transfer conditions between every pair of states in the software state space, analyzing the correctness of state transitions when the transfer condition is 'not set, always satisfied, never satisfied'.",
            "Check the state entry conditions, analyzing the correctness of state execution when the entry conditions are 'met, not met, met again'."
        ],
        "safety_requirements": [
            "During the takeoff roll phase in remote control mode, the system shall check the state entry conditions, ensuring correct execution logic of vk_may_brake = 80 km/h when the conditions are 'met, not met, met again'.",
            "The system shall validate the function input for control calculation during the takeoff roll phase in remote control mode, ensuring the processing logic clearly distinguishes between operating phases and modes, avoiding errors like 'ignoring operating phase' or 'ignoring remote control mode'.",
            "The system shall perform an integrity check on the software state transition conditions during the takeoff roll phase in remote control mode, ensuring that the transition conditions are not 'not set, always satisfied, never satisfied', and that corresponding exception handling mechanisms are triggered.",
            "During state transitions, the system shall monitor and record changes in the vk_may_brake parameter in real time, ensuring its value complies with safety constraints for the takeoff roll phase."
        ]
    },
    {
        "id": 278,
        "requirement": "If the landing gear full compression signal is valid and the airspeed is not less than vk_may_brake, then δb = 0.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logic branch'.",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'.",
            "Check the control calculation results of the function, and analyze the correctness of function handling when the calculation result is 'normal value, abnormal value, boundary value, maximum/minimum value'.",
            "Are the temporal, constraint, concurrent, and combinational relationships between control logics of various function points correct?"
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions of valid landing gear full compression signal and airspeed not less than vk_may_brake, ensuring correct function handling under scenarios such as 'logic always false, logic always true, incorrect judgment condition, missing branch', and ensuring δb = 0.",
            "When the landing gear full compression signal is valid and the airspeed is not less than vk_may_brake, the system shall verify the control calculation results (normal value, abnormal value, boundary value, maximum/minimum value), ensuring correct output of δb = 0.",
            "The system shall check the operating states of different redundancies; if 'two or more redundancies are in different states', it shall ensure correct implementation of δb = 0 when the landing gear full compression signal is valid and airspeed is not less than vk_may_brake.",
            "The system shall verify the temporal, constraint, concurrent, and combinational relationships of δb = 0 control logic with other function logics, ensuring compliance with safety constraints."
        ]
    },
    {
        "id": 279,
        "requirement": "δb is limited within [-XfB, XfB]. XfB is the maximum proportional brake quantity, which can be remotely set with a default value of 40%.",
        "original_safety_criterions": [
            "Check the default values of interface data, analyzing the correctness of output when 'default value is an abnormal value outside the value range'.",
            "Check multiple input data of the function, analyzing the correctness of function handling when multiple input values are combinations of 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safe value, default value'.",
            "Check the default values of interface data, analyzing the correctness of output when 'default value is not set'.",
            "Are the temporal, constraint, concurrent, and combinational relationships between control logics of various function points correct?",
            "Check the control calculation results of the function, and analyze the correctness of function handling when the calculation result is 'normal value, abnormal value, boundary value, maximum/minimum value'."
        ],
        "safety_requirements": [
            "The system shall check the control calculation results of δb, ensuring correct logic handling when the result is a normal value, abnormal value, boundary value, or extreme maximum/minimum value.",
            "The system shall verify the combination of input values (including normal value equivalence class, abnormal value equivalence class, boundary value combinations, etc.), ensuring correct logic handling of the δb limit range [-XfB, XfB].",
            "When XfB default value is not set, the system shall enforce the default value of 40%, ensuring it is valid within the [-XfB, XfB] range.",
            "The system shall verify the temporal relationship and constraint conditions between the remotely set XfB value and δb limiting logic, ensuring the limit range [-XfB, XfB] is always effective.",
            "The system shall check the range of the XfB default value, triggering an exception handling mechanism and rejecting application when the default value of 40% exceeds the [-XfB, XfB] range."
        ]
    },
    {
        "id": 280,
        "requirement": "If δb < 0, then δbL = -δb + YzBL + YjB, δbR = YzBL + YjB; otherwise δbL = YzBL + YjB, δbR = δb + YzBR + YjB.",
        "original_safety_criterions": [
            "Check the values of continuous interface data from different redundancies, analyzing the correctness of function implementation when two or more redundant interface data have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logical judgment condition, missing logic branch'.",
            "Check the values of continuous output data from different redundancies, analyzing the correctness of function implementation when two or more redundant outputs have 'inconsistent values, i.e., differences exceeding specified thresholds'.",
            "Check the values of discrete output data from different redundancies, analyzing the correctness of function implementation when two or more redundant outputs have 'inconsistent values'.",
            "Check the data processing process of the function, analyzing whether division-by-zero occurs during data processing."
        ],
        "safety_requirements": [
            "The system shall check the data processing steps during rudder deflection angle calculation to ensure no division-by-zero occurs.",
            "The system shall validate continuous output data (e.g., δb) from different redundancies, ensuring correct calculation of δbL and δbR when value differences exceed specified thresholds.",
            "The system shall validate discrete output data from different redundancies, ensuring correct calculation of δbL and δbR when values are inconsistent.",
            "The system shall validate continuous interface data (e.g., YzBL, YjB) from different redundancies, ensuring accurate rudder deflection angle calculation when value differences exceed thresholds.",
            "The system shall verify the logic condition (δb < 0), avoiding always-true or always-false conditions or judgment errors, and ensuring all logic branches are handled correctly."
        ]
    },
    {
        "id": 281,
        "requirement": "YzBL and YzBR are the preset values for left and right brakes respectively, which can be set remotely, with a default value of 10%.",
        "original_safety_criterions": [
            "Whether the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each functional point are correct",
            "Check multiple input data of the function and analyze the correctness of the function's processing under scenarios such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, and default value combinations'",
            "Check the logical judgment conditions and logical branches of the function, and analyze the correctness of the function's processing in cases such as 'logic always false, logic always true, incorrect logical condition, missing logical branch'"
        ],
        "safety_requirements": [
            "The system shall check the logical judgment conditions and branches of brake preset values (YzBL and YzBR) to ensure correct function handling in cases such as 'logic always false, logic always true, incorrect condition, or missing branch'.",
            "The system shall perform combined validation of input data for brake preset values (YzBL and YzBR), including normal values, abnormal values, boundary values, initial values, safety values, and default values (10%), to ensure correct function handling.",
            "The system shall verify the timing, constraints, and concurrency relationships between the setting logic and default value (10%) of left and right brake preset values (YzBL and YzBR) to ensure correct control logic.",
            "When receiving remotely set brake preset values (YzBL and YzBR), the system shall implement abnormal input filtering and default value recovery mechanisms to prevent injection of illegal data."
        ]
    },
    {
        "id": 282,
        "requirement": "YjB is the emergency brake bias value, which is 0 under normal conditions and 30% when the link is interrupted.",
        "original_safety_criterions": [
            "Is there fault handling based on wrap-around detection? Is the fault status reporting strategy reasonable?",
            "Check the timing of interface data values and analyze output correctness under scenarios such as 'too early stop' and 'too late stop'",
            "Does the output loop have a detection mechanism that allows loop status detection without affecting normal output?",
            "Is the fault detection logic reasonable? Will the detection method affect normal equipment operation?",
            "Are all potential fault items sufficiently covered by fault detection?"
        ],
        "safety_requirements": [
            "The system shall trigger a wrap-around detection-based fault handling mechanism when the link is interrupted, ensuring the status reporting strategy for emergency brake bias YjB is reasonable and correctly switches to 30%.",
            "The system shall ensure the detection logic for emergency brake bias YjB changing from 0 to 30% during link interruption is reasonable and does not affect normal equipment operation.",
            "The system shall have an output loop detection mechanism to perform real-time status monitoring of emergency brake bias YjB output during link interruption without affecting normal output functionality.",
            "The system’s fault detection mechanism shall cover all potential change scenarios of emergency brake bias YjB, including status switching and abnormal data determination during link interruption.",
            "The system shall check the timing of interface data values to ensure the correctness of emergency brake bias YjB values under scenarios such as 'too early stop' or 'too late stop'."
        ]
    },
    {
        "id": 283,
        "requirement": "After calculation according to item a), max(δbL ,δbR ) ≤1.",
        "original_safety_criterions": [
            "The control calculation process of functions differs under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase or state is not considered'.",
            "Check continuous output data values across different redundancies and analyze the correctness of function implementation when two or more redundant outputs have 'inconsistent values, i.e., difference exceeding specified threshold'.",
            "Check the control calculation process of the function and analyze the correctness of function handling when the calculation process times out (does not return results within specified time).",
            "Check discrete output data values across different redundancies and analyze the correctness of function implementation when two or more redundant outputs have 'inconsistent values'.",
            "Check the control calculation results of the function and analyze the correctness of function handling when the results are 'normal value, abnormal value, boundary value, maximum/minimum value', etc."
        ],
        "safety_requirements": [
            "The system shall check discrete output data across different redundancies to ensure the correct implementation of max(δbL, δbR) ≤1 in case of 'value inconsistency'.",
            "The system shall validate the logic correctness of max(δbL, δbR) ≤1 when calculation results are normal, abnormal, boundary, or extreme values.",
            "The system shall monitor timeout during calculation and ensure the calculated value of max(δbL, δbR) meets the ≤1 constraint even in case of timeout.",
            "The system shall validate input data based on current operating state and phase to avoid failure of max(δbL, δbR) calculation to meet ≤1 due to unconsidered state or phase.",
            "The system shall check the threshold difference of continuous output data across different redundancies and ensure the correct implementation of max(δbL, δbR) ≤1 when differences exceed specified limits."
        ]
    },
    {
        "id": 284,
        "requirement": "The specific softening time should be determined based on control requirements, actual needs, and previous control experience.",
        "original_safety_criterions": [
            "The control calculation process of functions differs under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase or state is not considered'.",
            "Does the timing of output control status match scenario requirements?",
            "Check the duration of each task and analyze the correctness of function handling when task duration is less than the specified time.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each functional point correct?",
            "For critical controls or actions, is there a timeout check to handle situations where hardware status fails to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "The system shall check function inputs under different states or operational phases and analyze situations such as 'unconsidered operational phase' or 'unconsidered operational state' to ensure correct determination of softening time.",
            "The system shall implement a timeout check mechanism for critical controls or actions, setting timeout durations based on control requirements, actual needs, and historical experience to handle situations where hardware status does not meet requirements.",
            "The system shall verify whether the timing of output control status aligns with control requirements, actual needs, and historical experience to ensure timing rationality.",
            "The system shall check whether task duration is less than the specified time, analyze the correctness of softening time handling, and ensure compliance with specified constraints.",
            "When determining softening time, the system shall ensure the correctness of timing relationships, constraint relationships, and combination relationships of control logic and strictly follow control requirements, actual needs, and historical experience."
        ]
    },
    {
        "id": 285,
        "requirement": "Switching into and out of the ground waiting phase through a triple modular redundancy (TMR) switch command improves reliability.",
        "original_safety_criterions": [
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?"
        ],
        "safety_requirements": [
            "Before issuing ground waiting phase entry/exit commands, the system shall validate equipment status reasonableness based on TMR switch logic to ensure control commands match the current status.",
            "When executing dangerous control commands, the system shall perform real-time verification of the ground waiting phase entry/exit status and terminate command execution and trigger alarms if status anomalies occur."
        ]
    },
    {
        "id": 286,
        "requirement": "Transition conditions for other phases shall be judged multiple times, and phase transition will only occur when five consecutive judgments yield consistent results, to reduce the probability of misjudgment.",
        "original_safety_criterions": [
            "Check the entry conditions for states and analyze the correctness of state execution when entry conditions are 'met, not met, met again' during state execution.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions when transition conditions are 'not set, always met, never met'."
        ],
        "safety_requirements": [
            "During state transitions, the system shall check transition conditions between states in the software state space to ensure correct transition logic when conditions are 'not set, always met, never met', and phase transition shall only occur after five consecutive consistent judgments.",
            "During state execution, the system shall check entry conditions and analyze execution correctness under scenarios such as 'met, not met, met again', allowing phase transition only after five consecutive consistent judgments."
        ]
    },
    {
        "id": 287,
        "requirement": "After power-up of the flight control computer on the ground or after the aircraft has fully landed and the pre-shutdown command is issued, the system enters the ground waiting phase.",
        "original_safety_criterions": [
            "Can the system recover to normal operating status after power loss recovery or runaway reset mechanisms are triggered?",
            "The control computation processes of functions vary under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase or state is not considered'.",
            "Does the timing of output control status meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "For critical control or action, is there a timeout check to handle situations where hardware status remains unresponsive to control requirements for extended periods?"
        ],
        "safety_requirements": [
            "After the flight control computer powers up or receives a pre-shutdown command, the system shall perform a timeout check on hardware status and trigger a safety handling mechanism if control requirements are not met within the specified time.",
            "After power loss recovery or unexpected reset, the system shall ensure it can resume normal operation in the ground waiting phase and verify the integrity of the control computation logic.",
            "When entering the ground waiting phase, the system shall check function inputs for operational phase and state to avoid functional errors caused by improper state transitions.",
            "When entering the ground waiting phase, the system shall verify whether the execution timing of output control status complies with predefined time constraints for the target scenario.",
            "Before issuing control commands, the system shall perform a reasonableness check based on the powered-on or landing status of the flight control computer to prohibit execution of dangerous operations under unsafe conditions."
        ]
    },
    {
        "id": 288,
        "requirement": "During the ground roll phase (including takeoff and landing roll), upon receiving a ground waiting command from remote control, the system transitions into the ground waiting phase.",
        "original_safety_criterions": [
            "Check the sending and receiving cycles of interface data and analyze whether they match."
        ],
        "safety_requirements": [
            "Upon receiving a ground waiting command during the ground roll phase, the system shall verify the legitimacy and completeness of the command to ensure execution only of commands sent by authorized remote devices.",
            "Before transitioning into the ground waiting phase, the system shall verify the validity of the current roll phase and confirm that transition conditions are met before executing the state change.",
            "The system shall record the reception time, source, and state transition logs of ground waiting commands to support post-event auditing and anomaly tracing.",
            "If command conflicts or abnormal parameters are detected during the transition to the ground waiting phase, the system shall maintain the original state and trigger an alarm mechanism immediately."
        ]
    },
    {
        "id": 289,
        "requirement": "When max(δbL, δbR) > 100%, if δbL ≥ δbR, then set δbR = δbR - (δbL - 100), δbL = 100%; if δbR > δbL, then set δbL = δbL - (δbR - 100), δbR = 100%. This ensures that the differential braking requirement between left and right brakes is satisfied.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logical branches of the function, and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logical condition, missing logical branch'.",
            "Check output data across different redundancies and analyze the correctness of function implementation in cases such as 'single redundancy failure, multiple redundancies failure'.",
            "Check multiple input data of the function and analyze the correctness of function handling under scenarios such as 'normal value equivalence class combinations, abnormal value equivalence class combinations, boundary value combinations, initial value combinations, safety value combinations, default value combinations'.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation in cases such as 'two or more redundancies operating in different states'."
        ],
        "safety_requirements": [
            "The system shall check the brake logic judgment conditions and branches to ensure the correctness of differential adjustment (δbL ≥ δbR or δbR > δbL) in cases such as 'logic always false, logic always true, incorrect condition, missing branch'.",
            "The system shall analyze the operating states of different redundancies (e.g., two or more redundancies in different states) to ensure the correct calculation of differential braking requirements between left and right brakes.",
            "The system shall check brake input data (normal/abnormal value combinations, boundary values, initial values, safety values, default values) to ensure correct differential adjustment handling when max(δbL, δbR) > 100%.",
            "The system shall check redundancy output data to ensure the calculated differential braking values between left and right brakes meet safety requirements in cases such as 'single redundancy failure or multiple redundancies failure'."
        ]
    },
    {
        "id": 290,
        "requirement": "Brake commands received via remote control have the highest priority. Regardless of the current control mode, when a 'brake' command is received, the full brake value will be added to both left and right brake control values, followed by over-limit processing. The full brake value can be set remotely, with a default value of 80%.",
        "original_safety_criterions": [
            "Check the default value of interface data and analyze the correctness of output in cases where the default value is an abnormal value outside the valid range.",
            "Check the logical judgment conditions and logical branches of the function and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logical condition, missing logical branch'.",
            "The control computation processes of functions vary under different states and operational phases. Check function inputs and analyze the correctness of function handling when 'operational phase or state is not considered'.",
            "Check the control computation process of the function and analyze the correctness of function handling when the computation process times out (does not return results within specified time).",
            "Check the execution sequence of tasks and analyze the correctness of function handling when the actual execution sequence differs from the specified sequence."
        ],
        "safety_requirements": [
            "The system shall check brake command inputs under different operational phases and states to ensure the correctness of full brake value addition and over-limit processing, and verify whether the handling logic is as expected when operational phase or state is not considered.",
            "The system shall comprehensively check the logical judgment conditions and branches of brake commands to ensure no logic always false, logic always true, incorrect conditions, or missing branches exist, and ensure correct command priority handling.",
            "The system shall verify that the default value (80%) of the full brake value set remotely is within the valid range and trigger error correction mechanisms when the default value is abnormal.",
            "The system shall check the brake command addition and processing process when the task execution sequence differs from the specified sequence to ensure timing deviations do not affect the correctness of final control output."
        ]
    },
    {
        "id": 291,
        "requirement": "When the 'release brake' command is received, perform braking according to the calculated left and right brake amounts (without superimposing the full brake amount). At this time, if the calculated brake amount δb is 0, both left and right brakes shall adopt the corresponding preset brake values.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'",
            "The control calculation process of the function differs under different states and operational phases. Check the function inputs and analyze the correctness of functional handling when 'operational phase or operational state is not considered'.",
            "Check the discrete interface data values of different redundancies, and analyze the correctness of function implementation when two or more redundant interface data have 'inconsistent values'.",
            "Check the control calculation process of the function, and analyze the correctness of function handling when the control calculation process times out (does not return a result within the specified time).",
            "Check the execution sequence of tasks, and analyze the correctness of function handling when the task execution sequence is inconsistent with the specified sequence."
        ],
        "safety_requirements": [
            "The system shall ensure the correctness of the calculated left and right brake amounts δb and the processing of brake presets when the task execution timing is inconsistent with the specified timing.",
            "The system shall check input conditions for different states and operational phases, ensuring that the calculated brake amount δb is correct even when the operational phase or state is not considered, and execute according to the calculated result upon receiving the 'release brake' command, using the preset value when δb is 0.",
            "The system shall check the brake logic judgment conditions and branches, ensuring the correctness of brake handling when 'logic is always false, always true, condition is incorrect, or branches are missing'.",
            "The system shall trigger a predefined safety mechanism when brake control computation times out (fails to return a result within the specified time), ensuring functional correctness.",
            "The system shall ensure that when redundant discrete interface data values are inconsistent and the calculated brake amount δb is 0, both left and right brakes use the corresponding preset values."
        ]
    },
    {
        "id": 292,
        "requirement": "When a vehicle command or release brake command is received, the left and right brake control amounts shall be taken as the left and right ground inspection brake amounts respectively.",
        "original_safety_criterions": [
            "When the operating state changes, check the values of the function interface data, and analyze the correctness of output under conditions such as 'value changes or value range changes'.",
            "When multiple functions are executed simultaneously, check the input and output data of these functions, and analyze the correctness of multi-function handling under conditions such as 'boundary value combinations, initial value combinations, safe value combinations, default value combinations'.",
            "When multiple functions are executed simultaneously, check the input and output data of these functions, and analyze the correctness of multi-function handling under conditions such as 'normal value equivalence class combinations, abnormal value equivalence class combinations'.",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'.",
            "Check the input data values in the execution conditions of each task, and analyze the correctness of function handling when input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "The system shall verify the correctness of the function taking the left and right brake control amounts from the left and right ground inspection brake amounts when detecting that multiple redundancies are in different operating states.",
            "When multiple functions are executed simultaneously, the system shall check input/output data boundary values, initial values, safe values, and default value combinations to ensure the correctness of left and right brake control amounts when receiving vehicle commands or release brake commands.",
            "The system shall check whether input data values for vehicle commands or release brake commands cause premature satisfaction of task execution conditions, and verify the correctness of the left and right brake control amounts being taken from ground inspection brake amounts at that time.",
            "When the operating state changes, the system shall check for changes in the value or value range of the left and right ground inspection brake amounts to ensure the correctness of the output brake control amounts."
        ]
    },
    {
        "id": 293,
        "requirement": "After receiving the flight control pre-shutdown command, set the left and right brake control amounts to 0, i.e., clear the left and right brake presets.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'.",
            "The control calculation process of the function differs under different states and operational phases. Check the function inputs and analyze the correctness of functional handling when 'operational phase or operational state is not considered'.",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'.",
            "Check the data processing process of the function, and analyze whether there is a division-by-zero error during data processing.",
            "Check whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of various functional points are correct."
        ],
        "safety_requirements": [
            "When the flight control pre-shutdown command is received in different operational phases and states, the system shall check the function inputs to ensure correct execution of setting the left and right brake control amounts to 0 and clearing the presets, even if the operational phase or state is not considered.",
            "The system shall verify the temporal, constraint, concurrency, and combination relationships between the flight control pre-shutdown command and the left and right brake control logic, ensuring immediate clearing of brake presets after command triggering without logic conflicts.",
            "During data processing for the flight control pre-shutdown command, the system shall check all data processing steps that could potentially cause division-by-zero errors, ensuring the stability of the zeroing operation.",
            "The system must conduct a comprehensive check on the logical judgment conditions and branches for the flight control pre-shutdown command, including scenarios such as always-false logic, always-true logic, incorrect conditions, and missing branches, to ensure robustness in clearing brake presets.",
            "When multiple redundancies are in different operating states, the system shall detect redundancy state differences to ensure correct execution of clearing left and right brake presets across redundancy environments."
        ]
    },
    {
        "id": 294,
        "requirement": "Brake command processing shall only occur during ground waiting, takeoff roll, and landing roll phases.",
        "original_safety_criterions": [
            "Is there wrap-around detection-based fault handling? Is the fault state reporting strategy reasonable?",
            "Does the timing of outputting control states meet scenario requirements?",
            "When abnormal external factors occur (e.g., high sea state, severe weather conditions), does the software make appropriate judgments and handle them accordingly?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "Are human operations subject to reasonableness checks, and are commands that do not conform to the current scenario or state not responded to?"
        ],
        "safety_requirements": [
            "The system shall implement wrap-around detection-based fault handling mechanisms and execute reasonable state reporting strategies during ground waiting, takeoff roll, and landing roll phases when processing brake commands in case of faults.",
            "When high sea states, severe weather, or other abnormal external factors are detected, the system shall perform additional judgment and handling of brake commands during ground waiting, takeoff roll, and landing roll phases.",
            "Before issuing brake commands, the system shall make a reasonableness check based on the current equipment status (ground waiting, takeoff roll, landing roll phases) to ensure the command conforms to the phase requirements.",
            "The system shall evaluate brake commands issued by human operators and ignore those that do not conform to the current flight state (ground waiting, takeoff roll, landing roll phases).",
            "The system shall strictly limit brake command processing to the ground waiting, takeoff roll, and landing roll phases and verify scenario compliance."
        ]
    },
    {
        "id": 295,
        "requirement": "When retracting the landing gear, set both left and right brake amounts to 50%. When extending the landing gear, set both left and right brake amounts to 100%. After retraction is completed, set both left and right brake amounts to 0%. After extension is completed, set both left and right brake amounts to the preset values.",
        "original_safety_criterions": [
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'.",
            "Check the output data of different redundancies, and analyze the correctness of function implementation in cases such as 'single redundancy failure, multiple redundancies failure'.",
            "Check whether the temporal relationship, constraint relationship, concurrency relationship, and combination relationship between control logics of various functional points are correct.",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall verify the temporal relationship, constraint relationship, and combination relationship of control logic for landing gear retraction and extension functions to ensure strict adherence to the 50%, 100%, 0%, and preset rules for left and right brake amounts during state transitions.",
            "In cases of single or multiple redundancy failures, the system shall ensure correct setting of left and right brake amounts for landing gear retraction and extension, including fault detection and fault-tolerant handling mechanisms.",
            "The system shall check the operating states of different redundancies, and when two or more redundancies are in inconsistent states, force synchronization and ensure brake amount settings comply with the current landing gear operation phase requirements.",
            "The system shall conduct comprehensive coverage testing on the logical judgment conditions for landing gear operations to ensure no cases of always-false logic, always-true logic, condition errors, or missing branches lead to abnormal brake amount settings."
        ]
    },
    {
        "id": 296,
        "requirement": "When an aircraft returns for landing and continues landing despite not meeting the conditions for safe landing, it may affect landing safety. To improve landing safety, a go-around function is provided so that the aircraft can adjust its flight status and land again.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "Check the execution conditions of the function, and analyze the correctness of function handling when the execution conditions are 'not satisfied, satisfied again' during function execution.",
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
            "Check the operating states of different redundancies, and analyze the correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "The system shall check redundancy operating states to ensure that the go-around function's execution logic is correct and meets safe landing conditions when two or more redundancies are in different states.",
            "The system shall dynamically evaluate the execution conditions of the go-around function to ensure that the function handling logic complies with the preset safety policy when conditions are 'not satisfied' or 'satisfied again'.",
            "The system shall monitor the entry conditions of the returning-to-land state in real-time, accurately triggering and executing the go-around function when the conditions are 'satisfied, not satisfied, satisfied again'.",
            "The system shall verify the validity of the returning-to-land state transition conditions to ensure correct state transition logic when conditions are 'not set, always satisfied, never satisfied', thereby ensuring the safety of the go-around function."
        ]
    },
    {
        "id": 297,
        "requirement": "After the aircraft enters the glide slope in autonomous or manually corrected mode, if it switches to remote control, then if it switches back to autonomous control mode when flying higher than the decision height (40m), the aircraft will automatically go around and adopt a soft transition method from remote control to autonomous control.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
            "Does the timing of outputting control states meet scenario requirements?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "For critical controls or actions, is there a timeout check to handle situations where hardware status fails to meet control requirements for an extended period?"
        ],
        "safety_requirements": [
            "When the aircraft switches from remote control mode back to autonomous control mode, the system shall verify whether the timing of outputting control states meets the scenario requirement of flying above 40m.",
            "When flying above 40m in remote control mode, the system shall perform a timeout check on the automatic go-around command execution to ensure timely initiation of the go-around action.",
            "The system shall check the state transition conditions from remote control mode to autonomous control mode to ensure correct state transition logic when conditions are 'not set, always satisfied, never satisfied', and that the automatic go-around and soft transition methods are effectively executed.",
            "Before issuing a go-around command, the system shall perform a reasonableness check based on the current flight altitude and control mode to prevent erroneous triggering of dangerous commands.",
            "When entering autonomous control mode, the system shall check the state entry conditions to ensure correct execution of go-around and soft transition methods when conditions are 'satisfied, not satisfied, satisfied again'.",
            "The system shall ensure continuity and smoothness of control commands during the soft transition process from remote control to autonomous control to avoid abnormal fluctuations caused by state switching."
        ]
    },
    {
        "id": 298,
        "requirement": "Execute the go-around command when both of the following conditions are met:\n1) Flight altitude is higher than decision height (40m). If the control mode is not remote control, it must also have entered the glide slope.\n2) Receive the flight switch command: 'Go-Around'.",
        "original_safety_criterions": [
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
            "Check the logical judgment conditions and logic branches of the function, and analyze the correctness of functional handling in cases such as 'always-false logic, always-true logic, incorrect logical judgment condition, missing logic branch'.",
            "Two or more states do not have transfer relationships; check their entry conditions and analyze the correctness of state execution when entry conditions are 'simultaneously satisfied, satisfied during state execution'.",
            "Check the execution conditions of the function, and analyze the correctness of function handling when execution conditions are 'not satisfied, satisfied again' during function execution.",
            "Check the input data values in the execution conditions of each task, and analyze the correctness of function handling when input data causes the task execution condition to be satisfied prematurely."
        ],
        "safety_requirements": [
            "During the execution of the go-around command, the system shall continuously check the entry conditions (flight altitude higher than 40m, glide slope status when control mode is not remote, and go-around switch command) to ensure correct state execution when conditions are 'satisfied, not satisfied, satisfied again'.",
            "The system shall verify the logical judgment conditions for the go-around command to prevent always-false logic, always-true logic, judgment condition errors, or missing branches, ensuring correct function handling.",
            "During the execution of the go-around command, the system shall monitor execution conditions (flight altitude higher than 40m, glide slope status when control mode is not remote, and go-around switch command) to handle abnormal situations when conditions are 'not satisfied or satisfied again'.",
            "The system shall perform real-time checks on input data for the go-around task (flight altitude, control mode, glide slope status, and go-around switch command) to prevent erroneous execution due to abnormal input values causing premature condition satisfaction.",
            "The system shall ensure that when flight altitude is higher than 40m, the control mode is not remote, has entered the glide slope, and the go-around command is received, the state transition conditions are strictly evaluated to avoid execution conflicts."
        ]
    },
    {
        "id": 299,
        "requirement": "If the aircraft is in autonomous control mode, directly control the aircraft to perform a go-around. If the aircraft is not in autonomous control mode, automatically switch to autonomous control mode first, then control the aircraft to perform a go-around, using the same soft transition method as mode conversion.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "Is the order and timing of system control coordinated with hardware, and are the control conditions complete and consistent?",
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
            "Two or more states with transfer relationships have the same function; check the execution of the function before and after state transition, and analyze the correctness of function handling when the function 'starts execution, continues execution, interrupts execution' after state transition.",
            "Does the timing of outputting control states meet scenario requirements?"
        ],
        "safety_requirements": [
            "When transitioning between autonomous control mode and non-autonomous control mode, the system shall check function execution to ensure correct function handling (start, continue, interrupt) after state transition, especially maintaining consistency of control logic during mode transitions.",
            "The system shall verify the correctness of autonomous control mode entry conditions, handling situations where conditions are 'satisfied, not satisfied, satisfied again' to ensure accurate state transitions.",
            "The system shall check the control timing of autonomous control mode transitions against hardware coordination to ensure completeness and consistency of transition conditions with current control requirements.",
            "The system shall verify the state transition conditions for autonomous control mode (not set, always satisfied, never satisfied) to prevent abnormal transitions and ensure compliance of output timing.",
            "During mode transitions, the system shall ensure that the timing of control command outputs meets the requirements of autonomous control mode to avoid timing conflicts."
        ]
    },
    {
        "id": 300,
        "requirement": "Push the throttle to the 100% position, change the flight phase to climb phase 2, vertically control the aircraft to climb to the final approach altitude, and laterally control the aircraft to intercept the final approach path from the current point. Once the aircraft reaches the final approach altitude and stabilizes at that height, it exits the go-around state and sets the flaps to 15°. It then re-enters the final approach path for another landing attempt.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space, and analyze the correctness of state transitions under conditions such as 'not set, always satisfied, never satisfied'.",
            "Check the priority-based functions for two or more states with transfer relationships, and analyze the correctness of state and function behavior when switching between 'high priority to low priority' and 'low priority to high priority'.",
            "Two or more states do not have transfer relationships; check their entry conditions and analyze the correctness of state execution when entry conditions are 'simultaneously satisfied, satisfied during state execution'.",
            "Check the entry conditions of the state, and analyze the correctness of state execution when the entry conditions are 'satisfied, not satisfied, satisfied again' during state execution."
        ],
        "safety_requirements": [
            "When transitioning from go-around state to climb phase 2, the system shall verify the correctness of switching between high-priority and low-priority states to ensure accurate execution of vertical control for climbing to the final approach altitude and lateral control for intercepting the final approach path.",
            "The system shall check the transition conditions for flight phase changes (throttle pushed to 100%, reaching final approach stabilized altitude), ensuring correct execution of state transitions and flap setting to 15° when conditions are 'satisfied, not satisfied, satisfied again'.",
            "The system shall check the entry conditions of states without direct transfer relationships (such as intercepting the final approach path, exiting go-around state, setting flaps to 15°) to ensure correct operation when conditions are simultaneously satisfied or become satisfied during state execution.",
            "The system shall conduct a comprehensive check on the transition conditions from go-around state to climb phase 2 and exiting go-around state upon reaching final approach stabilized altitude, ensuring correct state transition logic when conditions are 'not set, always satisfied, never satisfied'."
        ]
    },
    {
        "id": 301,
        "requirement": "Setting a starting point is not allowed during go-around, but changing the landing direction is permitted.",
        "original_safety_criterions": [
            "Check the initial values of interface data and analyze the correctness of outputs under conditions such as 'initial value not set.'"
        ],
        "safety_requirements": [
            "The system shall check the initial values of interface data to ensure that the functions prohibiting setting a starting point and allowing changing of the landing direction during go-around are executed correctly when the initial value is not set."
        ]
    },
    {
        "id": 302,
        "requirement": "In autonomous or manual correction control mode, if the aircraft is flying at a fixed altitude or in glide phase 1 and airspeed is judged to be continuously below a certain value for three consecutive times (specific value refers to appendix) or pitch angle is judged to be greater than 10 degrees for three consecutive times, the aircraft is considered to have entered a stall condition.",
        "original_safety_criterions": [
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies in different states.'",
            "Check the state entry conditions and analyze the correctness of state execution under conditions such as 'condition met, not met, or met again' during state execution.",
            "When issuing dangerous control commands or actions, is there a reasonableness judgment based on equipment status?",
            "For critical controls or actions, is there a timeout judgment to handle situations where hardware status fails to meet control requirements for an extended period?"
        ],
        "safety_requirements": [
            "In autonomous or manual correction control mode, the system shall check the conditions of airspeed being continuously below the set value or pitch angle being continuously above 10 degrees for three times to ensure the accuracy of stall condition determination, and verify the correctness of state transitions when conditions are 'met, not met, or met again.'",
            "When triggering stall determination in autonomous or manual correction control mode, the system shall implement a timeout judgment mechanism for critical control actions to prevent control failure due to prolonged hardware status not meeting requirements.",
            "When multiple redundancies are in different operating states, the system shall ensure correct execution of stall condition determination based on continuous judgment of airspeed and pitch angle in autonomous or manual correction control mode.",
            "Before issuing control commands, the system must perform reasonableness verification based on current airspeed and pitch angle status to avoid executing dangerous commands due to incorrect stall condition determination."
        ]
    },
    {
        "id": 303,
        "requirement": "Transition into climb phase 2 with elevator airspeed control, throttle pushed to 100%. If the aircraft has entered glide phase 1 and stalled, enter go-around control.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, logic judgment condition error, missed logic branch.'",
            "Different states and operational phases result in different control computation processes. Check the function inputs and analyze the correctness of function handling when 'operational phase or state is not considered.'",
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies in different states.'",
            "Check the execution sequence of various tasks and analyze the correctness of function handling when the task execution sequence differs from the specified sequence.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "When redundancy operating states are inconsistent, the system shall ensure correct execution of transitioning into climb phase 2, elevator airspeed control, throttle pushed to 100%, and entering go-around control when the aircraft has entered glide phase 1 and stalled.",
            "The system shall monitor the execution sequence of tasks and ensure that the logic for handling climb control, airspeed adjustment, throttle operation, and go-around control complies with safety requirements when the sequence deviates from the specified one.",
            "The system shall check the completeness of logic judgment conditions and branches to prevent failure of climb control, airspeed adjustment, throttle operation, and go-around control caused by logic always false, logic always true, condition errors, or missed branches.",
            "The system shall verify the timing, constraint, concurrency, and combination relationships among control logics of each function point to ensure compliance with preset rules in scenarios involving climb control, airspeed adjustment, throttle operation, and go-around control.",
            "The system shall validate function inputs in different operational phases and states to ensure no omission of phase or state factors affecting the correctness of climb control, airspeed adjustment, throttle operation, and go-around control."
        ]
    },
    {
        "id": 304,
        "requirement": "When airspeed is judged to have increased above the given speed for five consecutive times, the aircraft exits the stall condition. Based on the current altitude deviation, determine which phase to transition into (climb phase 2 or fixed-altitude phase) and continue flying.",
        "original_safety_criterions": [
            "Check the transition conditions between any two states in the software state space and analyze the correctness of state transitions under conditions such as 'transition condition not set, always satisfied, or never satisfied.'",
            "Check the state entry conditions and analyze the correctness of state execution under conditions such as 'condition met, not met, or met again' during state execution.",
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies in different states.'",
            "There is no transition relationship between two or more states. Check the entry conditions of these states and analyze the correctness of state execution when conditions are 'simultaneously met or met during state execution.'",
            "For critical controls or actions, is there a timeout judgment to handle situations where hardware status fails to meet control requirements for an extended period?"
        ],
        "safety_requirements": [
            "When five consecutive airspeed judgments satisfy the condition for exiting stall, the system shall strictly verify the satisfaction, non-satisfaction, and re-satisfaction of state entry conditions to ensure correct transition to climb phase 2 or fixed-altitude phase.",
            "The system shall implement a timeout judgment mechanism for critical control logic when exiting stall to ensure the timeliness of five consecutive airspeed judgments meets safety requirements.",
            "The system shall check for conflicts in transition conditions between climb phase 2 and fixed-altitude phase and execute state transition based on priority rules when entry conditions are simultaneously met.",
            "The system shall conduct boundary testing on state transition conditions ('not set,' 'always satisfied,' 'never satisfied') to ensure the fault tolerance of state transition logic after exiting stall.",
            "When multiple redundancies are in different states, the system shall ensure reliability of decision-making for exiting stall and phase transition through majority voting mechanisms."
        ]
    },
    {
        "id": 305,
        "requirement": "Before the control law-computed actuator deflection command is output to the actuator, the aileron deflection command also needs to undergo actuator command allocation.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, logic judgment condition error, missed logic branch.'",
            "Check the loop judgment conditions of the function and analyze the correctness of function handling under conditions such as 'loop judgment condition always false or always true.'",
            "Different states and operational phases result in different control computation processes. Check the function inputs and analyze the correctness of function handling when 'operational phase or state is not considered.'",
            "Check the execution sequence of various tasks and analyze the correctness of function handling when the task execution sequence differs from the specified sequence.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system shall check control law inputs in different operational phases and states to ensure correct allocation of actuator deflection commands, avoiding situations where operational phase or state is not considered.",
            "The system shall check the execution sequence of tasks to ensure correct processing of actuator command allocation and output when the sequence matches the specified one.",
            "The system shall verify the timing, constraint, concurrency, and combination relationships of aileron deflection command allocation to ensure compliance with design requirements.",
            "The system shall check the loop judgment conditions for actuator command allocation to handle cases where conditions are always false or always true, ensuring correct functionality.",
            "The system shall check the logic judgment conditions and branches before outputting control law results to the actuator to handle situations such as logic always false, logic always true, condition errors, or missed branches."
        ]
    },
    {
        "id": 306,
        "requirement": "The efficiency of upward and downward aileron surface deflections differs; upward deflection has lower efficiency while downward deflection has higher efficiency. Through different allocation coefficients in actuator command distribution, the same control effect is achieved.",
        "original_safety_criterions": [
            "Different states and operational phases result in different control computation processes. Check the function inputs and analyze the correctness of function handling when 'operational phase or state is not considered.'",
            "For two or more states with transition relationships and functions with set priorities, check the correctness of state and function behavior under conditions such as 'high priority switching to low priority' and 'low priority switching to high priority.'"
        ],
        "safety_requirements": [
            "During state transitions, the system shall check the correctness of aileron upward and downward deflection efficiency allocation under high-priority and low-priority switching scenarios to ensure that different allocation coefficients achieve the same control effect.",
            "When performing actuator command allocation in different operational phases and states, the system shall verify whether function inputs consider the operational phase and state to prevent control calculation errors caused by unconsidered phases or states."
        ]
    },
    {
        "id": 307,
        "requirement": "If the aileron deflection command δx > 0, then left aileron deflection command δxL = k1 δx, right aileron deflection command δxR = k2.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, logic judgment condition error, missed logic branch.'",
            "Check the values of the same input data received by different redundancies and analyze the correctness of function implementation when two or more redundancies receive inconsistent input data values.",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?",
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies in different states.'"
        ],
        "safety_requirements": [
            "When multiple redundancies are in different operating states, the system shall check the calculation logic of left aileron deflection command δxL = k1 δx and right aileron deflection command δxR = k2 to ensure the correctness of results.",
            "When detecting inconsistencies in the aileron deflection command δx values received by multiple redundancies, the system shall initiate an error correction mechanism and ensure that δxL and δxR outputs comply with functional logic requirements.",
            "The system shall perform a completeness check on the δx > 0 logic judgment condition, covering situations such as logic always false, logic always true, condition errors, and missed branches to ensure fault-tolerant processing of aileron command calculations.",
            "The system shall verify the timing, constraint, concurrency, and combination relationships between δx > 0 δxL = k1 δx and δxR = k2 to ensure synchronization of command execution and logical consistency among parameters."
        ]
    },
    {
        "id": 308,
        "requirement": "If the aileron deflection command δx < 0, then left aileron deflection command δxL = k2 δx, right aileron deflection command δxR = k1 δx, where k1 is the upward deflection allocation coefficient and k2 is the downward deflection allocation coefficient.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, logic judgment condition error, missed logic branch.'",
            "Check the values of the same input data received by different redundancies and analyze the correctness of function implementation when two or more redundancies receive inconsistent input data values.",
            "Different states and operational phases result in different control computation processes. Check the function inputs and analyze the correctness of function handling when 'operational phase or state is not considered.'",
            "Check the operating states of different redundancies and analyze the correctness of function implementation under conditions such as 'two or more redundancies in different states.'"
        ],
        "safety_requirements": [
            "When receiving aileron deflection command δx, the system shall check the consistency of δx values across different redundancies. If inconsistencies exist among two or more redundancies, it shall ensure correct execution of left aileron δxL = k2 δx and right aileron δxR = k1 δx allocation logic.",
            "The system shall verify the δx < 0 logic judgment condition, analyzing situations such as logic always false, logic always true, condition errors, or missed branches to ensure accurate allocation of left/right aileron deflection commands.",
            "During aileron deflection command calculation, the system shall check the impact of current operating states and phases. If states or phases are not properly considered, it shall trigger an error handling mechanism to ensure correct control calculation.",
            "The system shall monitor the operating states of different redundancies. If multiple redundancies are in different states, it shall ensure that the application of allocation coefficients for left aileron δxL = k2 δx and right aileron δxR = k1 δx complies with logical rules."
        ]
    },
    {
        "id": 309,
        "requirement": "Flight control and management software shall calculate stall speed based on given flight weight, altitude, and true airspeed.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and logic branches of the function and analyze the correctness of function handling under conditions such as 'logic always false, logic always true, logic judgment condition error, missed logic branch.'",
            "Check the control calculation results of the function and analyze the correctness of function handling when the results are 'normal values, abnormal values, boundary values, maximum or minimum values.'",
            "Check discrete output data values from different redundancies and analyze the correctness of function implementation when two or more redundancies produce inconsistent output values."
        ],
        "safety_requirements": [
            "When calculating stall speed, the system shall perform a completeness check on logic judgment conditions and branches to ensure no errors such as logic always false, logic always true, judgment errors, or missed branches lead to incorrect calculation results.",
            "The system shall verify stall speed calculation results from different redundancies. When two or more redundancies produce inconsistent output values, a fault-tolerant handling mechanism shall be triggered to ensure correct function implementation.",
            "The system shall perform validity verification on stall speed control calculation results to ensure that handling logic in scenarios involving normal values, abnormal values, boundary values, and extreme values complies with safety operation standards."
        ]
    },
    {
        "id": 310,
        "requirement": "Flight control and management software shall support stall speed calculation under different flap angles, especially when the flap angle is 40°.",
        "original_safety_criterions": [
            "When abnormal external factors occur (e.g., high sea state, adverse weather), does the software make appropriate judgments and handling?",
            "Are the timing relationships, constraint relationships, concurrency relationships, and combination relationships between control logics of each function point correct?"
        ],
        "safety_requirements": [
            "The system shall ensure correctness of timing relationships, constraint relationships, and concurrent logic in stall speed calculations under different flap angles (especially at 40° flap angle) to avoid logic conflicts caused by state transitions.",
            "When detecting high sea state or adverse weather, the system shall trigger an exception handling mechanism, dynamically adjust stall speed calculation strategies under different flap angles, and ensure calculation results at 40° flap angle meet safety thresholds.",
            "The system shall perform real-time validity checks on flap angle input parameters (e.g., 40°) to prevent data deviations caused by abnormal external factors from affecting the integrity of stall speed calculation results."
        ]
    },
    {
        "id": 311,
        "requirement": "During the ground waiting phase, after the final approach leg and airport pressure altitude are pre-set and a takeoff command is received, transition to the ground takeoff segment (takeoff roll segment).",
        "original_safety_criterions": [
            "Two or more states with a transition relationship share the same function. Check the execution of the function before and after state transition and analyze the correctness of function handling in cases such as 'starting execution, maintaining execution, interrupting execution' during state transitions.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions under scenarios such as 'condition not set, always satisfied, never satisfied'.",
            "For two or more states with priority-assigned functions, check the correctness of state and function behavior under situations like 'switching from high priority to low priority, switching from low priority to high priority'.",
            "Check the entry conditions for states and analyze the correctness of state execution under conditions such as 'satisfied, not satisfied, satisfied again' during state execution."
        ],
        "safety_requirements": [
            "When transitioning from the ground waiting phase to the ground takeoff segment (takeoff roll segment), the system shall verify the function execution before and after the state transition to ensure correctness in handling scenarios such as 'starting execution, maintaining execution, interrupting execution'.",
            "The system shall validate the state transition conditions between the ground waiting phase and the ground takeoff segment to ensure the correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "The system shall monitor the entry conditions for the ground waiting phase in real time to ensure the correctness of state execution when entry conditions are 'satisfied, not satisfied, satisfied again' during state execution.",
            "The system shall check the function switching between the ground waiting phase and the ground takeoff segment (takeoff roll segment) involving priority settings to ensure the correctness of state and function behavior when switching between 'high priority to low priority' and 'low priority to high priority'."
        ]
    },
    {
        "id": 312,
        "requirement": "During the takeoff roll segment, when airspeed exceeds 30m/s and height exceeds 15m, transition to the takeoff climb segment, with a softening time limit set to 2 seconds.",
        "original_safety_criterions": [
            "Does the timing of outputting control states meet scenario requirements?",
            "Are the entry and exit conditions for each mode consistent?",
            "Are the entry conditions, exit conditions, and constraint conditions for each mode sufficient and accurate?",
            "Does the duration of the output state meet the constraint requirements?"
        ],
        "safety_requirements": [
            "During the takeoff roll segment, the system shall ensure consistency of entry and exit conditions. The condition for transitioning to the takeoff climb segment when airspeed exceeds 30m/s and height exceeds 15m must be rigorously verified, with the softening time limit set to 2 seconds.",
            "During the takeoff roll segment, the system shall comprehensively verify whether the conditions of airspeed exceeding 30m/s and height exceeding 15m are sufficient and accurate, ensuring reliability of state transitions when parameters exceed thresholds.",
            "When transitioning to the takeoff climb segment, the system shall continuously monitor the softening time limit of the output state to strictly ensure the required duration of 2 seconds.",
            "During state transitions in the takeoff roll segment, the system shall perform real-time checks on the timing of control state switches to ensure compliance with scenario timing requirements and precise execution of the softening time limit."
        ]
    },
    {
        "id": 313,
        "requirement": "In the takeoff climb segment, when flight altitude exceeds the safety threshold of 80m, transition to Climb Segment 1. The elevator channel shall use an integrator initial value softening method, while other channels do not require softening.",
        "original_safety_criterions": [
            "Check the logic judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logic judgment condition, missing logic branch'.",
            "Check the control calculation process of the function and analyze the correctness of function handling in cases where the control calculation process times out (i.e., does not return results within the specified time).",
            "Check whether the temporal relationships, constraint relationships, concurrent relationships, and combination relationships among control logics of various functional points are correct."
        ],
        "safety_requirements": [
            "When transitioning from the takeoff climb segment to Climb Segment 1, the system shall verify the correctness of the temporal, constraint, concurrency, and combination relationships between the elevator channel integrator initial value softening method and non-softening strategies in other channels.",
            "The system shall perform a completeness check on the logic conditions for transitioning from the takeoff climb segment to Climb Segment 1 to prevent erroneous state transitions caused by logic always false, logic always true, incorrect judgments, or missing branches.",
            "The system shall monitor the control calculation process time in the takeoff climb segment to ensure that a predefined fault-tolerant mechanism is triggered in case of timeout, maintaining flight safety.",
            "When the flight altitude exceeds the safety threshold of 80m, the system shall perform real-time validation of compatibility between the elevator channel softening method and non-softening strategies in other channels and record the validation results."
        ]
    },
    {
        "id": 314,
        "requirement": "In Climb Segment 1, start retracting the landing gear. If the landing gear retracts successfully, delay for 5 seconds before starting to retract the flaps. If the landing gear has not retracted after one minute, directly retract the flaps to 0 degrees. If the flaps are retracted to 0 degrees, delay for 5 seconds before transitioning to Climb Segment 2. If 75 seconds have passed since entering Climb Segment 1 and the flaps have still not been retracted to 0 degrees, transition directly to Climb Segment 2. The softening time limit for transitioning to Climb Segment 2 is 2 seconds.",
        "original_safety_criterions": [
            "For two or more states with a transition relationship and assigned priorities, check the correctness of state and function behavior under situations like 'switching from high priority to low priority' and 'switching from low priority to high priority'.",
            "Check the operating states of different redundancies and analyze the correctness of function realization when 'two or more redundancies are in different states'.",
            "Check the entry conditions for states and analyze the correctness of state execution under conditions such as 'satisfied, not satisfied, satisfied again' during state execution.",
            "For critical controls or actions, is there a timeout detection mechanism to handle cases where hardware status fails to meet control requirements for extended periods?"
        ],
        "safety_requirements": [
            "When transitioning from Climb Segment 1 to Climb Segment 2, the system shall check state transition priorities to ensure the correctness of high-priority-to-low-priority logic and verify the sequence and delay handling accuracy of landing gear and flap retraction.",
            "During the execution of Climb Segment 1, the system shall continuously monitor entry conditions (e.g., landing gear and flap status) to ensure correct state transitions when conditions are satisfied, not satisfied, or satisfied again, strictly adhering to the 75-second time constraint.",
            "The system shall implement a timeout detection mechanism during Climb Segment 1: if the landing gear has not retracted within one minute, force the flaps to 0 degrees; if the flaps have not reached 0 degrees within 75 seconds, force a transition to Climb Segment 2, ensuring reliable execution of the 2-second softening time limit.",
            "The system shall perform consistency checks on the operating states of different redundancies. If redundancy state discrepancies exist between Climb Segment 1 and Climb Segment 2, ensure the fault tolerance and state synchronization correctness of landing gear and flap control logic."
        ]
    },
    {
        "id": 315,
        "requirement": "In Climb Segment 2, if the aircraft is not stalled, handle accordingly based on the difference DH between current altitude and desired altitude: 1) When DH > 10m, transition to the descent segment with a softening time limit of 2 seconds, using the integrator initial value softening method for the elevator channel. 2) When -10m ≤ DH ≤ 10m, transition to the altitude hold segment with a softening time limit of 2 seconds.",
        "original_safety_criterions": [
            "Check multiple input data for the function and analyze the correctness of function handling under combinations such as 'normal value equivalence class, abnormal value equivalence class, boundary value, initial value, safe value, default value'.",
            "Check the logic judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logic judgment condition, missing logic branch'.",
            "Check the control calculation process of the function and analyze the correctness of function handling when the control calculation process times out (i.e., does not return results within the specified time).",
            "Check the control calculation results of the function and analyze the correctness of function handling when the results are 'normal value, abnormal value, boundary value, extreme value'.",
            "Check the execution conditions of the function and analyze the correctness of function handling when execution conditions are 'not satisfied, satisfied again' during function execution."
        ],
        "safety_requirements": [
            "In Climb Segment 2, the system shall check whether control calculation results are normal values, abnormal values, boundary values, or extreme values to ensure the correctness of function handling when DH > 10m (transition to descent segment) or -10m ≤ DH ≤ 10m (transition to altitude hold segment).",
            "In Climb Segment 2, the system shall verify the logic judgment conditions (e.g., DH > 10m or -10m ≤ DH ≤ 10m) to ensure no logic always false, logic always true, condition errors, or missing branches, thus ensuring the correctness of state transition and softening processing.",
            "In Climb Segment 2, the system shall monitor the control calculation process for timeouts. If no result is returned within the specified time, it should still correctly handle different DH values and transition to the descent segment or altitude hold segment accordingly, with a 2-second softening time limit set.",
            "In Climb Segment 2, the system shall check function execution conditions (e.g., DH value changes causing conditions to not be met or to be met again), ensuring correct triggering of state transitions, softening time limits, and integrator initial value softening methods.",
            "In Climb Segment 2, the system shall validate input data combinations (normal/abnormal/boundary/initial/safe/default values) to ensure accurate state transitions and softening processing under different DH values."
        ]
    },
    {
        "id": 316,
        "requirement": "Set the initial values of the altitude hold control integrator, altitude tracking integrator, and throttle control integrator (calculate the initial value of the throttle control integrator assuming the throttle position is 100%) for softening purposes, preparing for altitude hold control and altitude tracking control.",
        "original_safety_criterions": [
            "For two or more states with a transition relationship and assigned priorities, check the correctness of state and function behavior under situations like 'switching from high priority to low priority' and 'switching from low priority to high priority'.",
            "Check the logic judgment conditions and branches of the function and analyze the correctness of function handling in cases such as 'logic always false, logic always true, incorrect logic judgment condition, missing logic branch'.",
            "Different states and operational phases involve different control calculation processes for the function. Check function inputs and analyze the correctness of function handling when 'operational phase not considered' or 'operational state not considered'.",
            "Check the operating states of different redundancies and analyze the correctness of function realization when 'two or more redundancies are in different states'.",
            "Check the control calculation results of the function and analyze the correctness of function handling when the results are 'normal value, abnormal value, boundary value, extreme value'."
        ],
        "safety_requirements": [
            "When switching states, the system shall check the initial value settings of the altitude hold control integrator, altitude tracking integrator, and throttle control integrator to ensure their correctness under scenarios such as 'high priority switching to low priority' and 'low priority switching to high priority'.",
            "In different operational phases and states, the system shall verify the logic for setting the initial values of the altitude hold control integrator, altitude tracking integrator, and throttle control integrator, ensuring coverage of abnormal scenarios such as 'operational phase not considered' and 'operational state not considered'.",
            "The system shall perform real-time checks on the calculation results of the altitude hold control integrator, altitude tracking integrator, and throttle control integrator to ensure correct handling under scenarios such as 'normal value, abnormal value, boundary value, extreme value'.",
            "The system shall verify the logic judgment conditions and branches of the integrators to ensure no issues such as 'logic always false, logic always true, incorrect logic judgment condition, missing logic branch', thereby guaranteeing correct initial value settings.",
            "When multiple redundancies are in different states, the system shall check and ensure that the initial value settings of the altitude hold control integrator, altitude tracking integrator, and throttle control integrator comply with redundancy state requirements."
        ]
    },
    {
        "id": 317,
        "requirement": "If in the fifth leg of the traffic pattern flight and the glide window is entered, transition to Glide Segment 1; otherwise, handle according to the difference DH between current altitude and desired altitude.",
        "original_safety_criterions": [
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions under scenarios such as 'condition not set, always satisfied, never satisfied'.",
            "Check the entry conditions for states and analyze the correctness of state execution under conditions such as 'satisfied, not satisfied, satisfied again' during state execution.",
            "When abnormal external factors occur (e.g., high sea state, adverse weather conditions), does the software perform corresponding judgment and handling?",
            "Check the control calculation results of the function and analyze the correctness of function handling when the results are 'normal value, abnormal value, boundary value, extreme value'.",
            "Do parameters have reasonable rate-of-change ranges (upper and lower limits of slope), and is the handling strategy for exceeding slope data clearly defined?"
        ],
        "safety_requirements": [
            "During traffic pattern flight, the system shall check the entry conditions for the fifth leg state to ensure the correctness of state transition logic under conditions such as 'satisfied, not satisfied, satisfied again'.",
            "Under abnormal external factors (e.g., high sea state, adverse weather), the system shall verify whether correct state transitions and handling are performed based on the fifth leg glide window condition or the altitude difference DH value.",
            "The system shall define reasonable rate-of-change ranges for flight parameters in the traffic pattern (e.g., altitude difference DH) and clearly specify handling strategies for exceeding these ranges, especially when triggering processing via the fifth leg glide window or DH value.",
            "The system shall check the validity of transition conditions between all states in the traffic pattern flight to ensure correct state transition logic under scenarios such as 'condition not set, always satisfied, never satisfied', particularly when entering the glide window in the fifth leg or based on DH value processing.",
            "The system shall validate the control calculation results (normal value, abnormal value, boundary value, etc.) during traffic pattern flight to ensure correct responses in state transition and processing logic."
        ]
    },
    {
        "id": 318,
        "requirement": "When DH > 50m, transition to the descent segment with a softening time limit of 2 seconds, using the integrator initial value softening method for the elevator channel.",
        "original_safety_criterions": [
            "Does the timing of outputting control states meet scenario requirements?"
        ],
        "safety_requirements": [
            "When DH > 50m, the system shall verify that the timing of transitioning to the descent segment meets scenario requirements and ensures accurate execution of the 2-second softening time limit.",
            "When transitioning to the descent segment, the system shall perform real-time validation of the integrator initial value softening method to ensure the safety and correctness of elevator channel control."
        ]
    },
    {
        "id": 319,
        "requirement": "When DH < -50m, transition to Climb Segment 2 with a softening time limit of 2 seconds, using the integrator initial value softening method for the elevator channel.",
        "original_safety_criterions": [
            "For two or more states with a transition relationship and assigned priorities, check the correctness of state and function behavior under situations like 'switching from high priority to low priority' and 'switching from low priority to high priority'.",
            "Check the transition conditions between every two states in the software state space and analyze the correctness of state transitions under scenarios such as 'condition not set, always satisfied, never satisfied'.",
            "Check the entry conditions for states and analyze the correctness of state execution under conditions such as 'satisfied, not satisfied, satisfied again' during state execution."
        ],
        "safety_requirements": [
            "When DH < -50m triggers a transition to Climb Segment 2, the system shall check the satisfaction, dissatisfaction, and re-satisfaction of entry conditions to ensure correct execution of the 2-second softening time limit and the integrator initial value softening method for the elevator channel.",
            "The system shall verify the transition conditions for Climb Segment 2 and analyze the state transition logic under scenarios such as 'condition not set, always satisfied, never satisfied' to ensure correct conversion when DH < -50m.",
            "During state transitions, the system shall verify priority settings to ensure the correctness of switching between high-priority and low-priority functions and strictly enforce the 2-second softening time limit and integrator initial value softening method."
        ]
    },
    {
        "id": 320,
        "requirement": "When the general flag lateral control flag is changed from another mode to five-side flight, set the initial value of the altitude tracking integrator for softening. When the general flag lateral control flag is changed from five-side flight to another mode, set the initial value of the altitude hold control integrator for softening.",
        "original_safety_criterions": [
            "Check the initial values of interface data and analyze the correctness of outputs when initial values are not set."
        ],
        "safety_requirements": [
            "When switching the general flag lateral control flag (between five-side flight and other modes), the system shall perform integrity checks on the initial values of the altitude tracking integrator and altitude hold control integrator to ensure correct initial value settings during softening operations.",
            "The system shall verify the validity of the initial values of the altitude tracking integrator and altitude hold control integrator to ensure they are within predefined safe ranges, preventing control anomalies due to invalid initial values.",
            "The system shall protect the data integrity of the integrator initial value setting process to prevent unauthorized or erroneous modifications affecting the softening logic.",
            "When detecting that integrator initial values are not set or set incorrectly, the system shall immediately trigger a safety fault-tolerance mechanism, use default safe values, and issue warning signals."
        ]
    },
    {
        "id": 321,
        "requirement": "Process based on the value of current altitude difference DH from the desired altitude: If -10m ≤ DH ≤ 10m, transition to the constant-altitude phase, set the softening time limit to 2 seconds, and initialize the integrators for constant-altitude control, altitude tracking, and throttle control to prepare for constant-altitude control and altitude tracking.",
        "original_safety_criterions": [
            "Check conditions for state entry and analyze correctness of state execution under scenarios such as 'condition satisfied, condition not satisfied, condition satisfied again'.",
            "Different states and operation phases involve different functional computation processes. Check function inputs and analyze correctness of function handling when 'operation phase or state is not considered'.",
            "Does the timing of outputting control states meet scenario requirements?",
            "Are there reasonable upper and lower bounds for parameter rate of change (slope)? Is the strategy for handling data exceeding these slope limits clearly defined?",
            "For critical controls or actions, is there a timeout check to handle situations where hardware status fails to meet control requirements over an extended period?"
        ],
        "safety_requirements": [
            "Before transitioning to the constant-altitude phase, the system must perform real-time checks on the altitude difference DH, ensuring that the state transition is accurately triggered when -10m ≤ DH ≤ 10m and that the softening time limit (2s), initial values of integrators for constant-altitude control, altitude tracking, and throttle control are correctly set.",
            "The system must verify consistency between the timing of transitioning to the constant-altitude phase and scenario requirements, ensuring that state switching occurs only when DH is within -10m ≤ DH ≤ 10m and the softening time limit is strictly set to 2 seconds.",
            "When processing function inputs in different operation phases, the system must check whether the current operation phase and DH status are considered to avoid errors due to unrecognized phases or ignored DH values.",
            "The system must monitor the softening time limit (2s) during the constant-altitude phase; if DH does not fall within -10m ≤ DH ≤ 10m after this time limit, a timeout handling mechanism must be activated and control parameters reset.",
            "The system must check the rate of change (slope) of altitude difference DH against upper and lower bounds, executing predefined strategies for handling data anomalies when the values exceed acceptable ranges."
        ]
    },
    {
        "id": 322,
        "requirement": "If DH < -10m, transition to the descent phase.",
        "original_safety_criterions": [
            "Between two or more states with no transfer relationship, check their entry conditions and analyze correctness of state execution when conditions 'are simultaneously satisfied' or 'become satisfied during state execution'.",
            "When a work state transitions, check the values of function interface data and analyze correctness of outputs when 'values have not changed'.",
            "Check transition conditions between each pair of states in the software state space and analyze correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "Check conditions for state entry and analyze correctness of state execution during execution when conditions 'are satisfied, not satisfied, satisfied again'."
        ],
        "safety_requirements": [
            "During state transitions, the system must perform real-time checks on the altitude difference (DH), ensuring correct state maintenance or transition even when 'the value has not changed', particularly triggering the descent phase logic accurately when DH < -10m.",
            "The system must validate the integrity of the state transition condition (DH < -10m), ensuring it is not set to 'always satisfied, never satisfied, or undefined' and that the descent phase transition is strictly triggered when the condition is met.",
            "The system must monitor dynamic changes in the state entry condition (DH < -10m), ensuring reliability and consistency of descent phase execution logic in scenarios such as 'condition satisfied then not satisfied, satisfied again'.",
            "The system must detect conflicts in state entry conditions for states without direct transfer relationships. When multiple conditions (e.g., DH < -10m and others) are simultaneously satisfied, a priority determination or locking mechanism must be executed to prevent logic conflicts."
        ]
    },
    {
        "id": 323,
        "requirement": "Enter climb phase 2, set the softening time limit to 2s, and use integrator initialization softening method for elevator channel softening.",
        "original_safety_criterions": [
            "Check duration of each task and analyze correctness of function handling when task duration exceeds specified time.",
            "Check logical judgment conditions and branches of functions and analyze correctness of function handling when 'logic is always false, logic is always true, logical condition error, missing branch'.",
            "Check duration of each task and analyze correctness of function handling when task duration is less than specified time.",
            "Check sequence of task execution and analyze correctness of function handling when execution sequence differs from specified sequence.",
            "Are the temporal, constraint, concurrency, and combination relationships between control logics of various functional points correct?"
        ],
        "safety_requirements": [
            "When entering climb phase 2, the system must check task execution sequence to ensure correctness of elevator channel integrator initialization softening under inconsistent execution sequences.",
            "The system must validate temporal, constraint, and concurrency relationships of elevator channel control logic when entering climb phase 2, ensuring logic correctness when softening time limit is set to 2s.",
            "The system must perform completeness checks on logical judgment conditions and branches when entering climb phase 2, identifying abnormal situations such as 'logic always false, always true, incorrect judgment, or missing branch' and ensuring correctness of function handling.",
            "When the task duration of entering climb phase 2 exceeds 2s, the system must check correctness of elevator channel integrator initialization softening method.",
            "When the task duration of entering climb phase 2 is less than 2s, the system must check correctness of elevator channel integrator initialization softening handling."
        ]
    },
    {
        "id": 324,
        "requirement": "In glide phase 1, when flight altitude drops below 100m, transition to glide phase 2, zero out the straight-side-slip control integrator and heading hold control integrator to prepare for glide phase 2 flight control, and set the softening time limit to 2s.",
        "original_safety_criterions": [
            "Different states and operation phases involve different functional computation processes. Check function inputs and analyze correctness of function handling when 'operation phase or state is not considered'.",
            "Check transition conditions between each pair of states in the software state space and analyze correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "For states with transfer relationships and prioritized functions, check and analyze correctness of state and function behavior when 'high priority switches to low priority' or 'low priority switches to high priority'.",
            "Check conditions for state entry and analyze correctness of state execution during execution when conditions 'are satisfied, not satisfied, satisfied again'."
        ],
        "safety_requirements": [
            "When transitioning from glide phase 1 to glide phase 2, the system must verify that flight altitude is below 100m, ensuring correctness of straight-side-slip control integrator zeroing, heading hold control integrator zeroing, and 2s softening time limit setting.",
            "During state transitions in glide phases, the system must check high/low priority switching mechanisms to ensure irreversibility of state transition and integrator zeroing when the altitude trigger condition is met.",
            "The system must check the transition condition settings from glide phase 1 to phase 2, analyzing and preventing erroneous state transitions caused by abnormal conditions such as 'always satisfied' or 'never satisfied'.",
            "During state execution, the system must continuously monitor flight altitude parameters. When entry conditions change between 'satisfied-not satisfied-satisfied again', ensure state transition occurs only upon first satisfaction of altitude < 100m.",
            "After state transition, the system must perform integrity verification on the control calculation module, ensuring effectiveness of glide phase 2 initialization parameters and integrator zeroing operations."
        ]
    },
    {
        "id": 325,
        "requirement": "In glide phase 2, when flight altitude drops below 17m, transition to the flare phase. Use integrator initialization softening method for elevator channel, other channels do not require softening.",
        "original_safety_criterions": [
            "Check logical judgment conditions and branches of functions and analyze correctness of function handling when 'logic is always false, logic is always true, logical condition error, missing branch'.",
            "Check working states of different redundancies and analyze correctness of function implementation when 'two or more redundancies are in different states'."
        ],
        "safety_requirements": [
            "In glide phase 2, the system must check logical judgment conditions and branches, ensuring correct transition to flare phase and application of elevator channel integrator initialization softening method when flight altitude drops below 17m, while other channels remain unsoftened, even in cases of logic always false, always true, condition error, or missing branch.",
            "The system must check working states of different redundancies, ensuring correct execution of elevator channel integrator initialization softening method and maintaining unsoftened status for other channels when 'two or more redundancies are in different states'."
        ]
    },
    {
        "id": 326,
        "requirement": "In the flare phase, when flight altitude drops below 1.5m, transition to the roll-leveling phase, and no softening is applied to any channel.",
        "original_safety_criterions": [
            "Between two or more states with no transfer relationship, check their entry conditions and analyze correctness of state execution when conditions 'are simultaneously satisfied' or 'become satisfied during state execution'.",
            "Check transition conditions between each pair of states in the software state space and analyze correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "Check conditions for state entry and analyze correctness of state execution during execution when conditions 'are satisfied, not satisfied, satisfied again'."
        ],
        "safety_requirements": [
            "In the flare phase, the system must check flight altitude conditions, ensuring correct state transition to roll-leveling phase when altitude drops below 1.5m and verifying handling logic when conditions 'are satisfied, not satisfied, satisfied again'.",
            "The system must ensure that when states with no transfer relationship between flare phase and roll-leveling phase have entry conditions that 'are simultaneously satisfied' or 'become satisfied during state execution', all channels remain unsoftened and state transition meets expectations.",
            "The system must check the transition condition from flare phase to roll-leveling phase, ensuring correct state transition in abnormal conditions such as 'not set, always satisfied, never satisfied' and avoiding erroneous switching.",
            "When transitioning to roll-leveling phase, the system must enforce no softening operations on any channel, and this behavior must not be affected by parameters outside the transition condition."
        ]
    },
    {
        "id": 327,
        "requirement": "In the roll-leveling phase, transition to landing rollout phase when any of the following conditions is satisfied, and set the softening time limit to 2s.\n1) Gear fully compressed signal remains true for 12 consecutive frames;\n2) Remote landing signal is true;\n3) Cumulative 75 frames of remote signal status is abnormal. Note: This condition needs to be checked only once.",
        "original_safety_criterions": [
            "Check transition conditions between each pair of states in the software state space and analyze correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "Check conditions for state entry and analyze correctness of state execution during execution when conditions 'are satisfied, not satisfied, satisfied again'.",
            "Check loop judgment conditions of functions and analyze correctness of function handling when 'loop condition is always false or always true'.",
            "Between two or more states with no transfer relationship, check their entry conditions and analyze correctness of state execution when conditions 'are simultaneously satisfied' or 'become satisfied during state execution'.",
            "For critical controls or actions, is there a timeout check to handle situations where hardware status fails to meet control requirements over an extended period?"
        ],
        "safety_requirements": [
            "In the roll-leveling phase, the system must implement a timeout check mechanism. If the transition to landing rollout phase conditions are not triggered within 2 seconds, execute predefined safety actions and issue alarms.",
            "The system must verify the transition conditions from roll-leveling phase to landing rollout phase, ensuring correct state transition logic when conditions are 'not set, always satisfied, never satisfied'.",
            "The system must check the transition conditions from roll-leveling phase to landing rollout phase (including gear fully compressed signal remaining true for 12 frames, remote landing signal true, cumulative 75 frames of abnormal remote signal), ensuring correct transition logic when multiple conditions are simultaneously satisfied.",
            "During roll-leveling phase execution, if transition conditions 'are satisfied, not satisfied, satisfied again', the system must ensure state transition follows design specifications, with the cumulative 75-frame abnormal remote signal condition checked only once.",
            "The system must monitor loop judgment conditions during transition from roll-leveling phase to landing rollout phase. If conditions are 'always false or always true', the current state must be maintained and an exception handling mechanism triggered."
        ]
    },
    {
        "id": 328,
        "requirement": "In landing rollout phase, transition to ground waiting phase when flight control pre-shutdown command becomes valid.",
        "original_safety_criterions": [
            "Is there wrap-around detection-based fault handling? Is the state reporting strategy reasonable during faults?",
            "When issuing dangerous control commands or actions, is there reasonableness judgment based on equipment status?",
            "After power-down recovery or runaway reset mechanisms are triggered, can the system return to normal operating status?"
        ],
        "safety_requirements": [
            "When the flight control pre-shutdown command becomes valid and transition to ground waiting phase occurs in landing rollout phase, the system must perform reasonableness judgment based on equipment status to ensure proper state transition.",
            "During transition from landing rollout phase to ground waiting phase, the system must implement wrap-around detection-based fault handling mechanisms and execute predefined state reporting strategies during faults.",
            "If power-down recovery or runaway reset mechanisms are triggered during transition from landing rollout phase to ground waiting phase, the system must ensure accurate reconstruction of state parameters and maintain normal operation mode after recovery."
        ]
    },
    {
        "id": 329,
        "requirement": "If engine stalls mid-air, the aircraft enters飘落phase.",
        "original_safety_criterions": [
            "Is the detection logic for fault items reasonable? Will the detection method affect normal equipment operation?",
            "When issuing dangerous control commands or actions, is there reasonableness judgment based on equipment status?"
        ],
        "safety_requirements": [
            "When issuing control commands to enter飘落phase, the system must perform reasonableness judgment based on validation results of mid-air engine stall status.",
            "The detection logic for mid-air engine stall must be independent of normal operation processes, ensuring it does not affect other aircraft systems and prevents false triggering or missed detection."
        ]
    },
    {
        "id": 330,
        "requirement": "When DH < -10m, transition to climb phase 2 and initialize the airspeed control integrator for softening.",
        "original_safety_criterions": [
            "For states with transfer relationships and prioritized functions, check and analyze correctness of state and function behavior when 'high priority switches to low priority' or 'low priority switches to high priority'.",
            "Check transition conditions between each pair of states in the software state space and analyze correctness of state transitions when conditions are 'not set, always satisfied, never satisfied'.",
            "For critical controls or actions, is there a timeout check to handle situations where hardware status fails to meet control requirements over an extended period?"
        ],
        "safety_requirements": [
            "When transitioning to climb phase 2 at DH < -10m, the system must implement a timeout check mechanism to handle situations where hardware status fails to meet control requirements for an extended period.",
            "When DH < -10m triggers transition to climb phase 2, the system must validate transition conditions to ensure correct state transition logic under abnormal conditions such as 'not set, always satisfied, never satisfied'.",
            "When transitioning to climb phase 2 and initializing the airspeed control integrator, the system must verify correctness of switching between high and low priority functions, ensuring synchronization between state transitions and softening operations.",
            "The system must protect the initialization process of the airspeed control integrator in climb phase 2 to prevent configuration errors caused by priority switching conflicts."
        ]
    },
    {
        "id": 331,
        "requirement": "When -10m < DH < 10m, switch to the altitude-hold phase, initialize the altitude control integrator and height tracking integrator with softening",
        "original_safety_criterions": [
            "Check functions with different priorities under state transitions; analyze correctness of state and function behavior in situations such as 'high priority switching to low priority' or 'low priority switching to high priority'.",
            "Check transition conditions between every two states in the software state space; analyze correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "Is the system's control sequence and timing coordinated with hardware? Are the control conditions complete and consistent?",
            "Check initial values of interface data; analyze output correctness when initial values are not set."
        ],
        "safety_requirements": [
            "When the system enters the altitude-hold phase at -10m < DH < 10m, it must ensure that the control conditions are complete and the timing is coordinated with hardware, and that the initialization logic for the altitude control integrator and height tracking integrator aligns with the softening process.",
            "Upon entering the altitude-hold phase, the system must enforce checks on the initial values of the integrators’ interface data, ensuring outputs meet safety tolerance requirements even if initial values are not set.",
            "The system must validate state transition conditions (including scenarios like 'not set', 'always satisfied', 'never satisfied'), ensuring correct execution of transition logic and integrator initialization when -10m < DH < 10m.",
            "When handling transitions between high/low priority states (e.g., altitude-hold and other flight phases), the system must strictly enforce priority rules, ensuring integrator initialization and softening operations are not disrupted by abnormal transitions."
        ]
    },
    {
        "id": 332,
        "requirement": "The softening time limit for the above phase transitions is set to 2 seconds",
        "original_safety_criterions": [
            "Does the timing of output control states meet scenario requirements?",
            "Check transition conditions between every two states in the software state space; analyze correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "For critical control actions, is there a timeout mechanism to handle cases where hardware states fail to meet control requirements for an extended period?"
        ],
        "safety_requirements": [
            "The system must implement a timeout mechanism for critical controls; if hardware states do not meet control requirements within 2 seconds, trigger exception handling and ensure the phase transition softening limit is precisely 2 seconds.",
            "The system must verify consistency between the timing of output control states and scenario requirements, ensuring the timing of state transitions complies with design specifications when the softening limit is set to 2 seconds.",
            "The system must perform comprehensive checks on state transition conditions in the software state space; when conditions are 'not set, always satisfied, or never satisfied', illegal transitions must be prohibited and a safe fallback strategy executed, while ensuring precision of the 2-second softening limit.",
            "The system must implement real-time monitoring during state transitions; if a valid state transition cannot be completed within the 2-second softening limit, the system must forcibly enter a predefined safe state."
        ]
    },
    {
        "id": 333,
        "requirement": "Execute takeoff command and switch to the takeoff roll phase",
        "original_safety_criterions": [
            "Check state entry conditions; analyze correctness of state execution when conditions are 'met, unmet, or met again' during execution.",
            "Check software states corresponding to system states, operating phases, or system tasks; analyze correctness of state execution when 'no corresponding software state exists' or 'software does not match system'."
        ],
        "safety_requirements": [
            "When executing the takeoff command, the system must check the consistency between current software and system states, ensuring correct transition to the takeoff roll phase even if 'no corresponding software state exists' or 'software does not match system'.",
            "Before entering the takeoff roll phase, the system must perform real-time checks on entry conditions, ensuring correct execution when conditions are 'met, unmet, or met again', and generate appropriate exception handling mechanisms."
        ]
    },
    {
        "id": 334,
        "requirement": "During the takeoff roll phase, when airspeed > 30 m/s and altitude > 15 m, switch to the takeoff climb phase without softening",
        "original_safety_criterions": [
            "Does fault detection include false alarm prevention, and does this prevention affect the real-time requirement of alarm handling?",
            "Does the timing of outputting control states meet scenario requirements?",
            "When abnormal external factors occur (e.g., high sea state, severe weather), has the software made appropriate judgments and responses?",
            "Check the duration of each task; analyze correctness of function processing when task durations exceed specified times.",
            "For critical control actions, is there a timeout mechanism to handle cases where hardware states remain unmet for extended periods?"
        ],
        "safety_requirements": [
            "During the takeoff roll phase, the system must have anti-false-alarm mechanisms to ensure that when airspeed > 30 m/s and altitude > 15 m, the alarm handling meets real-time requirements during state transitions.",
            "Under abnormal external conditions (e.g., high sea state, severe weather), the system must verify the judgment logic for transitioning from takeoff roll to takeoff climb when airspeed > 30 m/s and altitude > 15 m, maintaining integrity of the no-softening execution.",
            "The system must implement a timeout mechanism for hardware state requirements when transitioning from takeoff roll to takeoff climb, preventing control failure due to unmet hardware criteria when airspeed > 30 m/s and altitude > 15 m.",
            "When airspeed > 30 m/s and altitude > 15 m during the takeoff roll phase, the system must ensure that the timing of output control states strictly meets scenario timing requirements."
        ]
    },
    {
        "id": 335,
        "requirement": "When flight altitude exceeds the safety height of 80 m, switch to climb phase 1 without softening",
        "original_safety_criterions": [
            "When working states change, check the value of functional interface data; analyze output correctness when values 'change or their range changes'.",
            "Check state entry conditions; analyze correctness of state execution when conditions are 'met, unmet, or met again'.",
            "When abnormal external factors occur (e.g., high sea state, severe weather), has the software made appropriate judgments and responses?",
            "When issuing dangerous control commands or actions, is there a reasonableness check based on equipment status?",
            "For critical control actions, is there a timeout mechanism to handle cases where hardware states remain unmet for extended periods?"
        ],
        "safety_requirements": [
            "When flight state entry conditions change (met, unmet, met again), the system must ensure correct execution when switching to climb phase 1 and validate the logic determining whether flight altitude exceeds 80 m.",
            "The system must implement a timeout mechanism for critical control actions; when flight altitude consistently fails to reach 80 m, trigger exception handling.",
            "During state transitions, the system must perform real-time value checks on flight altitude data, ensuring accurate decision-making when switching to climb phase 1 upon 'value changes' or 'range changes'.",
            "Before switching to climb phase 1, the system must perform reasonableness checks based on equipment status, eliminating risks of erroneous operations caused by equipment anomalies.",
            "Under abnormal external conditions (e.g., high sea state, severe weather), the system must correctly execute the logic for switching to climb phase 1 when flight altitude exceeds 80 m, and implement appropriate exception protection measures."
        ]
    },
    {
        "id": 336,
        "requirement": "When the landing gear full compression signal or remote ground signal is true, switch to the landing roll phase without softening",
        "original_safety_criterions": [
            "Check state entry conditions; analyze correctness of state execution when conditions are 'met, unmet, or met again'.",
            "Does fault detection include false alarm prevention, and does this prevention affect the real-time requirement of alarm handling?",
            "Does the timing of outputting control states meet scenario requirements?",
            "Is the fault detection logic reasonable, and will the detection method interfere with normal device operation?",
            "For critical control actions, is there a timeout mechanism to handle cases where hardware states remain unmet for extended periods?"
        ],
        "safety_requirements": [
            "The system must perform real-time checks on the landing gear full compression signal and remote ground signal entry conditions, ensuring correct execution when conditions are 'met, unmet, or met again', strictly limiting no softening processing.",
            "When processing landing gear full compression signals or remote ground signals, the system must implement a timeout mechanism to prevent control failure due to prolonged unmet hardware conditions.",
            "During the logic detection for switching to landing roll phase, the system must verify the reasonableness of detection methods, ensuring they do not interfere with normal equipment operations.",
            "Fault detection must include false alarm prevention, while ensuring this mechanism does not affect the real-time performance of switching to the landing roll phase when landing gear full compression or remote ground signals are true.",
            "The system must verify the timing of control state transitions against scenario requirements, ensuring transition timing aligns with preset conditions."
        ]
    },
    {
        "id": 337,
        "requirement": "Item d needs only one evaluation, whereas all other items require five consecutive successful evaluations before phase transition occurs",
        "original_safety_criterions": [
            "Check transition conditions between every two states in the software state space; analyze correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "Check state entry conditions; analyze correctness of state execution when conditions are 'met, unmet, or met again'.",
            "For a single state transitioning to or from multiple other states, check the conditions for these transitions; analyze correctness when multiple transition conditions are simultaneously met.",
            "Check function execution conditions; analyze function handling when conditions are 'unmet or met again'.",
            "For critical control actions, is there a timeout mechanism to handle cases where hardware states remain unmet for extended periods?"
        ],
        "safety_requirements": [
            "The system must check function execution conditions, ensuring proper handling when conditions are 'unmet or met again'; item d requires only one evaluation, whereas other items require five consecutive evaluations before phase transition.",
            "The system must check state entry conditions; when conditions are 'met, unmet, or met again', ensure correct state transitions, clearly distinguishing d-item single evaluation from other items requiring five consecutive evaluations.",
            "For phase transitions requiring five consecutive condition satisfactions, the system must implement a timeout mechanism, triggering safe handling processes when hardware states remain unmet for extended periods.",
            "When multiple state transition conditions are simultaneously met, the system must prioritize conflict resolution and ensure correct transitions, particularly clarifying execution order between d-item single evaluation and other items requiring five consecutive evaluations.",
            "The system must check all state transition conditions (including 'not set', 'always satisfied', 'never satisfied'), ensuring correct transition logic, with particular focus on fault tolerance for d-item single evaluation and other items requiring five consecutive evaluations."
        ]
    },
    {
        "id": 338,
        "requirement": "If the phase flag is 'hovering', no phase transition shall occur",
        "original_safety_criterions": [
            "If redundancy switching conditions are met but switching fails, does the software handle it correctly?",
            "Are operator inputs checked for reasonableness, ignoring commands inconsistent with the current scenario or state?"
        ],
        "safety_requirements": [
            "When the phase flag is 'hovering', the system must perform reasonableness checks on operator commands, responding only to commands consistent with the current scenario or state, and rejecting phase transition attempts.",
            "When redundancy switching conditions are met but switching fails, the system must ensure correct software logic handling while in 'hovering' state, preventing abnormal behavior due to switching failures."
        ]
    },
    {
        "id": 339,
        "requirement": "If the go-around flag 2-out-of-3 result is true, switch aircraft phase to climb phase 2 and reset the airspeed control integrator",
        "original_safety_criterions": [
            "Check transition conditions between every two states in the software state space; analyze correctness of state transitions when conditions are 'not set, always satisfied, or never satisfied'.",
            "Is there wraparound-based fault handling, and is the state reporting strategy reasonable during faults?",
            "Between two or more states without direct transitions, check entry conditions; analyze correctness of state execution when conditions are 'simultaneously met' or 'met during execution'.",
            "After power loss recovery or runaway reset mechanisms are triggered, can the system return to normal operation?"
        ],
        "safety_requirements": [
            "During state transitions, the system must validate the transition condition when the go-around flag 2-out-of-3 result is true, ensuring correct transition to climb phase 2 and resetting the airspeed control integrator, even if conditions are 'not set, always satisfied, or never satisfied'.",
            "The system must check entry conditions for states without direct transitions; ensure correct execution of state transitions and integrator reset when conditions are 'simultaneously met' or 'met during execution' and the go-around flag 2-out-of-3 result is true.",
            "After power loss recovery or reset, the system must return to normal operation and, when the go-around flag 2-out-of-3 result is true, accurately transition to climb phase 2 and reset the airspeed control integrator.",
            "The system must implement wraparound-based fault handling mechanisms; when the go-around flag 2-out-of-3 result triggers a state transition, the fault state reporting strategy must ensure traceability and adherence to safety logic."
        ]
    }
]