[
    {
        "safety_criterion": "对接口数据中具有连续型值域的数据位进行检查，分析数据位取值为“正常值等价类、异常值等价类”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的连续型飞行数据（如高度、速度、温度等）进行实时监测和验证，确保其在正常值范围内，并在异常值出现时触发警报。"
    },
    {
        "safety_criterion": "对接口数据的数据位取值精度进行检查，分析数据位取值精度为大于精度要求等情况下输出的正确性",
        "requirement": "系统应确保导航数据的精度满足飞行控制要求，特别是在数据位取值精度超过规定阈值时，仍能保证输出的正确性和可靠性。"
    },
    {
        "safety_criterion": "采集时序是否满足实时性要求？",
        "requirement": "系统应确保飞行数据采集的实时性，以满足飞行控制和监控的需求。"
    },
    {
        "safety_criterion": "消息队列接收故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理飞行控制指令消息队列的接收故障，确保指令的可靠传输和执行。"
    },
    {
        "safety_criterion": "消息队列溢出故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制指令消息队列溢出的能力，确保指令的可靠传输和执行。"
    },
    {
        "safety_criterion": "环形缓冲创建故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理环形缓冲区创建故障的能力，确保飞行数据记录的完整性和可靠性。"
    },
    {
        "safety_criterion": "环形缓冲读空故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理环形缓冲区读空故障的功能，确保数据传输的连续性和可靠性。"
    },
    {
        "safety_criterion": "环形缓冲写满故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理环形缓冲区写满故障的能力，确保数据不丢失且系统稳定运行。"
    },
    {
        "safety_criterion": "组合功能设置与需求文档要一致。",
        "requirement": "系统应确保导航与控制模块的组合功能设置与飞行任务需求文档完全一致。"
    },
    {
        "safety_criterion": "组合功能设置与用户实际要求要一致",
        "requirement": "飞行控制系统的组合功能设置应与飞行员的实际操作需求保持一致。"
    },
    {
        "safety_criterion": "不同功能之间存在互斥应正确处理。",
        "requirement": "系统应确保在导航与控制功能之间存在互斥时，优先处理导航功能，确保飞行安全。"
    },
    {
        "safety_criterion": "任务创建故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理任务创建过程中的故障，确保任务的可靠性和安全性。"
    },
    {
        "safety_criterion": "任务激活故障应有检测和异常处理",
        "requirement": "系统应具备实时监测和处理任务激活故障的能力，确保在任务激活过程中出现故障时能够及时检测并采取相应的异常处理措施。"
    },
    {
        "safety_criterion": "采集时是否进行了滤波防抖动处理，屏蔽干扰数据？",
        "requirement": "系统应具备滤波防抖动功能，确保传感器数据的稳定性和准确性。"
    },
    {
        "safety_criterion": "任务删除故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理任务删除故障的功能，确保任务删除操作的可靠性和安全性。"
    },
    {
        "safety_criterion": "任务强制删除故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理任务强制删除故障的功能，确保任务的可靠性和安全性。"
    },
    {
        "safety_criterion": "任务重启故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理任务重启故障的能力，确保任务重启后能够恢复正常运行状态。"
    },
    {
        "safety_criterion": "任务优先级设置故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理任务优先级设置故障，确保关键任务的优先执行。"
    },
    {
        "safety_criterion": "任务优先级获取故障应有检测和异常处理",
        "requirement": "系统应能够实时检测并处理任务优先级获取故障，确保关键任务的正常执行。"
    },
    {
        "safety_criterion": "任务锁定故障应有检测和异常处理",
        "requirement": "系统应具备实时检测和处理任务锁定故障的能力，确保任务的连续性和安全性。"
    },
    {
        "safety_criterion": "任务解锁故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理任务解锁故障的功能，确保在任务解锁过程中出现异常时能够及时响应并采取措施。"
    },
    {
        "safety_criterion": "时间片重设故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理时间片重设故障的功能，确保任务调度的正确性和实时性。"
    },
    {
        "safety_criterion": "信号量获取故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制信号量获取故障的能力，确保在信号量获取失败时能够及时切换到备用信号源或进入安全模式。"
    },
    {
        "safety_criterion": "信号量删除故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理飞行控制信号量的删除故障，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "滤波处理后是否会对实时性产生影响，影响是否可接受？",
        "requirement": "系统应确保滤波处理后的数据在实时性要求范围内，不影响飞行控制的及时性和准确性。"
    },
    {
        "safety_criterion": "信号量释放故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理信号量释放故障的能力，确保在多任务调度中不会出现资源死锁或竞争条件。"
    },
    {
        "safety_criterion": "看门狗创建故障应有检测和异常处理",
        "requirement": "系统应具备实时监测和处理飞行控制软件看门狗故障的能力，确保在检测到故障时能够及时恢复或切换到备用系统。"
    },
    {
        "safety_criterion": "看门狗删除故障应有检测和异常处理",
        "requirement": "系统应具备实时监控和检测飞行控制软件的看门狗功能，确保在检测到故障时能够及时进行异常处理并恢复系统正常运行。"
    },
    {
        "safety_criterion": "看门狗启动故障应有检测和异常处理",
        "requirement": "系统应具备实时监测和处理飞行控制计算机看门狗启动故障的功能，确保故障发生时能够及时报警并切换到备用系统。"
    },
    {
        "safety_criterion": "看门狗取消计时故障应有检测和异常处理",
        "requirement": "系统应具备实时检测和处理看门狗计时故障的功能，确保飞行控制系统的稳定运行。"
    },
    {
        "safety_criterion": "设备驱动数据读取故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制设备驱动数据读取故障的功能，确保在故障发生时能够及时报警并切换到备用系统。"
    },
    {
        "safety_criterion": "设备驱动数据写入故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理驱动数据写入故障的能力，确保在故障发生时能够及时采取安全措施。"
    },
    {
        "safety_criterion": "设备驱动通用控制故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理驱动器故障的能力，确保在故障发生时能够及时切换到备用驱动器并记录故障信息。"
    },
    {
        "safety_criterion": "设备驱动创建故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备实时检测和处理传感器故障的能力，确保在传感器故障时能够及时切换到备用传感器或采取安全措施。"
    },
    {
        "safety_criterion": "设备驱动打开故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理驱动器故障的能力，确保在驱动器故障时能够安全切换到备用系统。"
    },
    {
        "safety_criterion": "是否有防误按操作的屏蔽检测？",
        "requirement": "系统应具备防误按操作的检测机制，确保在关键操作（如发射、着陆等）过程中不会因误按而导致错误指令的执行。"
    },
    {
        "safety_criterion": "设备驱动关闭故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制设备驱动关闭故障的功能，确保在故障发生时能够及时采取安全措施。"
    },
    {
        "safety_criterion": "设备控制通道选择故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理控制通道选择故障的功能，确保在故障发生时能够自动切换到备用通道并发出警报。"
    },
    {
        "safety_criterion": "设备控制模式选择故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理控制模式选择故障的功能，确保在模式切换过程中系统的稳定性和安全性。"
    },
    {
        "safety_criterion": "设备配置信息写入故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理配置信息写入故障的能力，确保配置信息的完整性和一致性。"
    },
    {
        "safety_criterion": "设备配置信息读取故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理配置信息读取故障的能力，确保在配置信息读取失败时能够安全切换到备用配置或进入安全模式。"
    },
    {
        "safety_criterion": "CPU故障应有检测和异常处理",
        "requirement": "系统应具备实时监测CPU状态的功能，并在检测到故障时自动切换至备用CPU，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "双口RAM读空故障应有检测和异常处理",
        "requirement": "飞行控制计算机应具备双口RAM读空故障检测和处理机制，确保数据完整性和系统稳定性。"
    },
    {
        "safety_criterion": "双口RAM写满故障应有检测和异常处理",
        "requirement": "系统应具备双口RAM写满故障检测机制，并在检测到故障时自动切换至备用存储单元，同时触发警报通知地面控制中心。"
    },
    {
        "safety_criterion": "双口RAM检测故障应有检测和异常处理",
        "requirement": "飞行控制系统应具备双口RAM故障检测和异常处理机制，确保在检测到故障时能够及时切换至备用通道并记录故障信息。"
    },
    {
        "safety_criterion": "EEPROM检验故障应有检测和异常处理",
        "requirement": "系统应具备实时检测和处理EEPROM故障的功能，确保飞行控制参数的完整性和可靠性。"
    },
    {
        "safety_criterion": "是否有基于回绕检测的故障处理，故障时状态上报策略是否合理？",
        "requirement": "系统应具备回绕检测功能，能够在检测到故障时及时上报并采取合理的故障处理措施。"
    },
    {
        "safety_criterion": "AD转换器初始化故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理AD转换器初始化故障的功能，确保飞行数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "FPGA状态故障应有检测和异常处理",
        "requirement": "系统应具备实时监测FPGA状态的功能，并在检测到故障时自动切换至备用FPGA，确保飞行控制系统的连续性和可靠性。"
    },
    {
        "safety_criterion": "读取故障应有检测和异常处理",
        "requirement": "系统应能够实时检测并处理飞行器传感器的故障，确保数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "写入故障应有检测和异常处理",
        "requirement": "系统应具备实时检测和处理飞行控制系统的故障，确保在故障发生时能够及时采取措施，保障飞行安全。"
    },
    {
        "safety_criterion": "定时器故障应有检测和异常处理",
        "requirement": "系统应具备定时器故障检测机制，并在检测到故障时自动切换至备用定时器，确保任务关键操作的连续性。"
    },
    {
        "safety_criterion": "应清晰的区别关键输入。",
        "requirement": "系统应能够明确区分关键飞行控制输入和非关键输入，确保关键输入的优先处理和准确执行。"
    },
    {
        "safety_criterion": "检查输入范围和合法性的设计。",
        "requirement": "系统应能够验证所有输入的飞行控制指令，确保其在预定义的合法范围内。"
    },
    {
        "safety_criterion": "允许行动撤销和错误恢复的设计。",
        "requirement": "系统应支持在飞行任务中撤销上一步操作，并恢复到之前的飞行状态。"
    },
    {
        "safety_criterion": "参数设置改变后，相关联的设置或状态应随之改变",
        "requirement": "系统应能够自动调整飞行控制参数，以适应不同的飞行模式和环境条件。"
    },
    {
        "safety_criterion": "误操作防护机制。",
        "requirement": "系统应具备防止误操作的机制，确保在飞行控制指令输入错误时，自动校正或提示操作人员进行确认。"
    },
    {
        "safety_criterion": "数据长时间未更新时，是否能检测并上报？",
        "requirement": "系统应能够检测并上报飞行控制参数（如姿态、速度、高度）在设定时间内未更新的情况。"
    },
    {
        "safety_criterion": "合理有效的报警机制。",
        "requirement": "系统应具备实时监测飞行参数并及时发出异常报警的功能。"
    },
    {
        "safety_criterion": "防止频繁按下按钮",
        "requirement": "系统应具备防止频繁触发紧急降落按钮的功能，确保在非紧急情况下不会误操作。"
    },
    {
        "safety_criterion": "按下时机超前应有检测和异常处理",
        "requirement": "系统应具备检测和处理提前按下起飞按钮的功能，确保飞行器在安全状态下启动。"
    },
    {
        "safety_criterion": "按下持续时间错误应有检测和异常处理",
        "requirement": "系统应能够检测并处理长时间按压紧急按钮的情况，确保不会导致系统误操作或失效。"
    },
    {
        "safety_criterion": "按下时机滞后应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制指令延迟的功能，确保在指令延迟情况下仍能维持飞行安全。"
    },
    {
        "safety_criterion": "按下多个按钮时序错误应有检测和异常处理",
        "requirement": "飞行控制系统应具备检测和处理多按钮时序错误的功能，确保操作指令的正确性和安全性。"
    },
    {
        "safety_criterion": "执行过程中按压停机按钮应有检测和异常处理",
        "requirement": "系统应具备在飞行过程中检测到紧急停机按钮被按压时，立即执行安全停机程序并记录异常日志的功能。"
    },
    {
        "safety_criterion": "安全关键操作启动。启动安全关键操作时，应由两个或多个人员在“与”方式下操作，并有完善的误触发保护措施，以避免造成无意激活。",
        "requirement": "在执行关键飞行任务（如发动机点火、姿态调整等）时，必须由两名或以上操作员在双重确认模式下进行，并具备防误触发机制。"
    },
    {
        "safety_criterion": "安全状态恢复。人机交互软件要便于操作员用单动作处理当前事务，使系统退出潜在不安全状态，并恢复到某安全状态。",
        "requirement": "飞行控制系统应提供一键复位功能，使操作员能够迅速将系统从异常状态恢复到安全状态。"
    },
    {
        "safety_criterion": "误操作防护。软件应能检测不正确的操作员录入或操作，并防比由于该差错的结果而执行安全关键功能。",
        "requirement": "飞行控制系统应能够检测并阻止不正确的操作员指令，防止误操作导致的飞行路径偏离或发动机异常。"
    },
    {
        "safety_criterion": "是否有数据包错误校验方式，如包头、包尾、校验和、数据类型、包长度、帧计数等？",
        "requirement": "系统应具备对飞行数据包进行错误校验的功能，包括包头、包尾、校验和、数据类型、包长度和帧计数等。"
    },
    {
        "safety_criterion": "报警设计。报警设计应该能够使得例行报警区别于安全关键的报警，并且应该能够同时保证在没有执行要求的后续行为或者是没有采取纠正行为以能够保证完成该操作的前提下，相关操作人员无法清除该安全关键性报警。",
        "requirement": "系统应能够区分常规报警和安全关键报警，并确保在未执行必要的后续操作或未采取纠正措施之前，操作人员无法清除安全关键报警。"
    },
    {
        "safety_criterion": "必须提供适当且及时的状态反馈。",
        "requirement": "系统应能够实时提供飞行器的当前状态反馈，包括位置、速度、姿态和系统健康状态。"
    },
    {
        "safety_criterion": "避免在操作员未知的情况下改变系统的安全状态。",
        "requirement": "系统应确保所有安全状态的更改均需经过操作员的明确确认和授权。"
    },
    {
        "safety_criterion": "判定语句。安全关键计算系统功能中的判定语句应不依靠全1或全0的输入，特别是当这个信息来自外部传感器时;",
        "requirement": "飞行控制系统应确保所有安全关键计算中的判定语句不依赖于全1或全0的传感器输入。"
    },
    {
        "safety_criterion": "外部功能。对于安全关键功能的激活，其必需的激活信号不能全部都从单个输入或输出的存储单元接收;",
        "requirement": "飞行控制系统应确保关键控制指令（如姿态调整、发动机点火）的激活信号来自多个独立的输入通道。"
    },
    {
        "safety_criterion": "CPU间的通信。CPU间的通信应在传输安全关键数据之前成功地通过对两个CPU的验证检查。如果接口多次连续传输失败，应向操作员报警，并终止安全关键数据的传输直到能进行诊断性检查。",
        "requirement": "飞行控制系统应确保主控CPU与备份CPU之间的通信在传输关键飞行数据前通过验证检查，若连续多次传输失败，系统应向地面控制站发送警报并暂停数据传输，直至完成诊断性检查。"
    },
    {
        "safety_criterion": "输入合理性检查：对域所有模拟和数字输入和输出，应在按照这些值执行安全关键功能之前进行范围和合理性检查，包括时间范围、依从关系。",
        "requirement": "飞行控制系统应实时对所有传感器输入（如高度、速度、姿态角）进行范围和合理性检查，确保数据在安全范围内。"
    },
    {
        "safety_criterion": "接口控制。与安全关键硬件的接口应在所有时刻受控，即应监视该接口以确保错或虚假数据不会意外地影响该系统，接口的失效得到检测，并且在上电、电源波动和中断、以及系统错误或硬件失效事件情况下接口安全。",
        "requirement": "飞行控制系统应实时监控与关键飞行硬件的接口，确保数据的完整性和准确性，并在电源波动、系统错误或硬件失效时自动切换到安全模式。"
    },
    {
        "safety_criterion": "反馈回路。系统硬件的反馈回路设计，应保证软件不可能由于反馈传感器失效引起失控条件。",
        "requirement": "飞行控制系统应具备冗余反馈传感器，确保在主传感器失效时，备用传感器能够立即接管，维持飞行稳定。"
    },
    {
        "safety_criterion": "满刻度表示。软件设计时，应使软件的满刻度和零表示都与任何数字到模拟、模拟到数字、数字到同步、或同步到数字转换器完全兼容。",
        "requirement": "飞行控制系统应确保所有传感器和执行器的满刻度和零点校准与数字到模拟、模拟到数字、数字到同步、或同步到数字转换器完全兼容。"
    },
    {
        "safety_criterion": "对于数据包中的每个参数，是否有明确的有效范围，超范围数据的处理策略是否明确？",
        "requirement": "系统应能够对飞行控制数据包中的每个参数进行有效范围检查，超出范围的数据应触发警报并记录，同时系统应具备自动恢复或切换到安全模式的功能。"
    },
    {
        "safety_criterion": "应确保将安全关键的数据与其他数据隔离开来，并使非安全关键部件不能访问安全关键数据;",
        "requirement": "飞行控制系统应将导航数据与非关键任务数据隔离开，确保非关键任务模块无法访问导航数据。"
    },
    {
        "safety_criterion": "数据传送过程中应对安全关键数据进行加密操作，以保护safety_criterion；",
        "requirement": "系统应能够对飞行控制指令和关键传感器数据进行加密传输，确保数据的完整性和机密性。"
    },
    {
        "safety_criterion": "对包含安全关键数据的数据库和数据文件都要进行文档化。",
        "requirement": "系统应具备对飞行控制参数和关键任务数据的文档化管理功能，确保数据的完整性和可追溯性。"
    },
    {
        "safety_criterion": "数据区隔离。为防止程序把数据错当指令来执行，要采用将数据和指令分隔存放的措施。",
        "requirement": "飞行控制系统应确保指令和数据在不同的存储区域中隔离存放，防止指令被错误地解释为数据。"
    },
    {
        "safety_criterion": "算法所使用的存储空间应该是完全确定的。例如，不采用动态堆空间。",
        "requirement": "飞行控制软件应使用固定大小的缓冲区和数组，避免动态内存分配。"
    },
    {
        "safety_criterion": "对在接口中使用的安全关键数据，都要有唯一的标识符。",
        "requirement": "系统应为所有安全关键的飞行控制数据分配唯一的标识符，确保数据的可追溯性和完整性。"
    },
    {
        "safety_criterion": "数据传输报文应是预先规定的格式和内容。每次传输应包、数据类型或报文内容的字或字符串，至少应使用奇偶校验检查以及累加和来验证数据传输的正确性，在验证数据传输正确性之前任何来自数据传输报文的信息都不得使用;",
        "requirement": "飞行控制系统应确保所有遥测数据和指令数据的传输格式和内容符合预定义标准，并在每次传输时使用奇偶校验和累加和进行数据校验，确保数据传输的正确性和完整性。"
    },
    {
        "safety_criterion": "软件应能判断操作员的输入操作正确与否，在遇到不正确的输入和操作时，能够拒绝操作的执行，并提醒操作员注意错误的输入和操作，同时指出错误的类型和纠正措施;",
        "requirement": "飞行控制软件应能够实时验证操作员的指令输入，对于不正确的指令，系统应拒绝执行并立即通知操作员，同时提供错误类型和纠正建议。"
    },
    {
        "safety_criterion": "在进行数学运算时，应仔细考虑浮点数接近零的处理方式，在可能发生下溢时，使用适当小的浮点数来替代零，以避免下溢情况的发生。在含有浮点数的关系判断中，不应直接进行相关相等关键的判断。",
        "requirement": "飞行控制软件应确保在进行姿态控制计算时，对浮点数接近零的情况进行适当处理，以避免下溢导致的控制误差。"
    },
    {
        "safety_criterion": "对于安全关键信息与其他信息之间应保持一定的码距。",
        "requirement": "系统应确保飞行控制指令与非关键数据之间保持最小码距，以防止数据干扰和误操作。"
    },
    {
        "safety_criterion": "发送端异常后又恢复数据发送时，接收端是否能再次正常接收数据？",
        "requirement": "系统应确保在地面站与卫星通信中断后恢复时，能够无缝重新建立连接并继续接收和处理数据。"
    },
    {
        "safety_criterion": "对安全关键的信息和数据，应保存在多种或多个不同芯片中，并进行表决处理。",
        "requirement": "飞行控制系统应将关键飞行数据（如姿态、速度、高度）存储在多个冗余芯片中，并通过多数表决机制确保数据的一致性和可靠性。"
    },
    {
        "safety_criterion": "输入的数据元素应以显示参数的形式传给另一个模块接口。调用模块无需知道数据是如何被调用的。",
        "requirement": "飞行控制模块应能够接收来自传感器的实时数据，并将这些数据以标准化格式传递给导航模块，而无需导航模块了解数据的来源和获取方式。"
    },
    {
        "safety_criterion": "对安全关键模块应设置调用密码;",
        "requirement": "飞行控制系统的关键模块应设置调用密码，确保只有授权人员可以进行操作。"
    },
    {
        "safety_criterion": "对安全关键功能的运行，应在接到两个或更多个相同的信息后才能执行;",
        "requirement": "飞行控制系统在接收到两个或更多个冗余传感器的相同飞行参数后，才能执行关键的飞行控制指令。"
    },
    {
        "safety_criterion": "对安全关键信息，不能仅仅由单一CPU命令产生;",
        "requirement": "飞行控制系统应采用多处理器冗余设计，确保关键控制指令由多个处理器独立验证后执行。"
    },
    {
        "safety_criterion": "不能用寄存器和I/O端口来存储安全关键信息;",
        "requirement": "飞行控制系统应使用非易失性存储器存储关键飞行参数和故障日志，确保在电源故障或系统重启后数据不丢失。"
    },
    {
        "safety_criterion": "安全关键信息的据测算判据不得依赖全1或全0的输入（尤其是外部传感器传来的信息）",
        "requirement": "系统应确保导航传感器数据的有效性，避免因全1或全0的异常输入导致导航计算错误。"
    },
    {
        "safety_criterion": "与硬件状态变引有关的程序设计应考虑状态检测的次数或时间，无实际依据的情况下可用信号等待次数作为依据，超出一定次数作超时处理。",
        "requirement": "在飞行控制系统中，硬件状态变化检测应设置最大等待次数，超过该次数则触发超时处理机制。"
    },
    {
        "safety_criterion": "应提供监控定时器或类似措施，确保微处理器或计算机具有处理程序超时或死循环故障的能力",
        "requirement": "飞行控制系统应具备监控定时器，确保在检测到处理程序超时或死循环故障时，能够自动切换到备用处理单元或触发安全保护措施。"
    },
    {
        "safety_criterion": "监控定时器应力求采用独立的时钟源，用独立的硬件实现;若采用可编程定时器实现，应统筹设计计数时钟频率和定时参数，力求在外界干扰条件下，定时器受到干扰后定时参数的最小值大于系统重新初始化所需的时间值，最大值小于系统允许的最长故障处理时间值;",
        "requirement": "飞行控制系统应具备独立的硬件监控定时器，确保在外部干扰条件下，定时器的最小值大于系统重新初始化所需时间，最大值小于系统允许的最长故障处理时间。"
    },
    {
        "safety_criterion": "输出数据刷新周期是否满足实时性要求？",
        "requirement": "飞控系统应确保所有输出数据的刷新周期不超过100毫秒，以满足实时飞行控制的要求。"
    },
    {
        "safety_criterion": "必须要有计时器复位设计，应使软件不能进入某个内部循环或作为循环指令序列的一部分复位该计时器。适用时必须要使系统返回到某个已知的安全状态并向操作员报警;",
        "requirement": "飞行控制系统应具备计时器复位机制，确保在软件进入无限循环时，系统能够自动复位并返回到安全状态，并向地面控制站发送报警信号。"
    },
    {
        "safety_criterion": "计时器的设计必须确保主要CPU时钟的失效不能损害其功能;",
        "requirement": "飞行控制系统应具备独立的冗余计时器，确保在主CPU时钟失效时仍能准确执行任务调度和时间同步。"
    },
    {
        "safety_criterion": "必须将安全关键的部件与非安全关键部件隔开;",
        "requirement": "飞行控制系统中的安全关键组件（如主控计算机、传感器）必须物理隔离并独立供电，以防止非安全关键组件（如娱乐系统、通信设备）的故障影响其正常运行。"
    },
    {
        "safety_criterion": "要文档化安全关键部件在设计层次结构中的位置和功能",
        "requirement": "系统应详细记录飞行控制系统的安全关键部件（如导航模块、姿态控制模块）在设计层次结构中的位置和功能。"
    },
    {
        "safety_criterion": "最小化安全关键部件的数目。安全关键部件之间的接口的设计也应该实现最小交互(低耦合);",
        "requirement": "飞行控制系统应减少关键传感器和执行器的数量，并确保这些关键部件之间的接口设计为低耦合。"
    },
    {
        "safety_criterion": "需要文档化每个安全关键部件是如何追溯到初始安全需求的，以及该需求是如何实现的",
        "requirement": "系统应提供详细的文档，记录每个安全关键部件（如飞行控制单元、导航系统等）的初始安全需求及其具体实现方法。"
    },
    {
        "safety_criterion": "除了中断情形外，软件模块必须使用单入口和单出口的控制结构",
        "requirement": "飞行控制软件的每个模块应采用单入口和单出口的控制结构，确保在非中断情况下程序的有序执行。"
    },
    {
        "safety_criterion": "对于计算系统的安全关键子系统必须编写故障检测和隔离程序",
        "requirement": "飞行控制系统必须具备故障检测和隔离功能，确保在关键子系统发生故障时能够及时识别并隔离故障，保证飞行安全。"
    },
    {
        "safety_criterion": "采用模块调用方式，而不采用直接访问模块内部有关信息的方式;",
        "requirement": "飞行控制软件模块应通过标准接口进行通信，禁止直接访问其他模块的内部数据。"
    },
    {
        "safety_criterion": "将一些可能发生变化的因素或者需要经常修改的部分，尽量放在少数几个模块中。",
        "requirement": "飞行控制软件应将所有与飞行参数调整相关的功能集中在一个模块中，以便于维护和更新。"
    },
    {
        "safety_criterion": "对接口数据的数据位取值精度进行检查，分析数据位取值精度为小于精度要求等情况下输出的正确性",
        "requirement": "系统应确保导航数据的精度满足飞行控制要求，特别是在数据位取值精度低于标准时，仍能正确输出控制指令。"
    },
    {
        "safety_criterion": "输出数据超限时是否有明确的处理策略，如截断或按安全值输出？",
        "requirement": "系统应具备在飞行控制参数超出预设安全范围时，自动切换至备用安全值或进行数据截断的功能。"
    },
    {
        "safety_criterion": "所有标志必须进行严格的定义，并编制标志的使用说明：对于安全关键标志，在其被使用的软件单元里，要保证唯一并且用于单一目的;",
        "requirement": "系统应确保所有安全关键标志（如飞行模式、故障状态等）在软件中唯一定义，并且每个标志仅用于单一目的。"
    },
    {
        "safety_criterion": "对无用中断应确保其是被屏蔽的，并对无用中断设置入口并返回。",
        "requirement": "飞行控制系统应能够屏蔽并处理无关的中断信号，确保关键任务的正常执行。"
    },
    {
        "safety_criterion": "要确保中断的边缘触发有防止毛刺的措施(硬件或软件方法都可以)，对电平触发要确保其电平宽度。",
        "requirement": "系统应具备防止毛刺的措施，确保中断信号的可靠触发，并对电平触发信号进行宽度检测，以保证飞行控制指令的准确执行。"
    },
    {
        "safety_criterion": "对可能的误中断及频繁中断的影响，必须有合理的措施。",
        "requirement": "系统应具备故障检测和恢复机制，以防止误中断和频繁中断对飞行任务的影响。"
    },
    {
        "safety_criterion": "必须屏蔽不用的中断源。不使用的中断源一定要通过控制字等来进行屏蔽，而且要将不使用的中断源，编为空处理的中断服务子程序，即只有一条返回语句。",
        "requirement": "飞行控制系统应禁用所有未使用的中断源，并确保这些中断源的中断服务子程序为空处理，以防止意外中断干扰飞行任务。"
    },
    {
        "safety_criterion": "严禁从中断服务子程序中使用非中断返回语句返回。除特殊需要外，一定要避免从中断服务子程序中使用跳转语句或子程序返回语句直接出去，应该使用正常中断返回语句。",
        "requirement": "飞行控制系统的中断服务子程序应确保仅通过正常中断返回语句返回，避免使用跳转语句或子程序返回语句。"
    },
    {
        "safety_criterion": "确保系统功能寄存器设置前关中断，防止中断影响寄存器的设置。在进行清中断使能寄存器和设置中断屏蔽寄存器之前应关中断，禁止其他中断影响这两个寄存器的设置。",
        "requirement": "在飞行控制系统的寄存器设置过程中，应确保中断被关闭，以防止其他中断影响寄存器的正确设置。"
    },
    {
        "safety_criterion": "软件设计时要考虑中断处理的时序。软件中有多个中断处理时，一定要注意各个中断处理间的时序关系，尤其是可嵌套中断间的时序关系。",
        "requirement": "飞行控制软件应确保在多中断处理情况下，关键任务的中断响应时间不超过1毫秒，以保证飞行控制的实时性和稳定性。"
    },
    {
        "safety_criterion": "要有中断现场的保存和恢复。充分考虑中断任意时候都会发生的特点，保存好需要保护的现场，并在中断服务子程序返回时正确恢复现场。",
        "requirement": "飞行控制系统应具备在中断发生时保存当前飞行状态和任务参数，并在中断处理完成后恢复这些参数的功能。"
    },
    {
        "safety_criterion": "验证在程序设计时是否考虑中断的优先级。由于软件中的中断有优先级，同时中断程序和主程序也存在相互的优先顺序，因此这些优先级顺序的程序间，尽量避免对同一变量进行赋值操作，若存在不可避免的情况，也要进行临界区保护。",
        "requirement": "飞行控制系统应确保在处理高优先级中断时，不会对低优先级中断或主程序中的关键变量进行修改，以防止数据不一致和系统不稳定。"
    },
    {
        "safety_criterion": "输出回路是否有检测机制，在不影响正常输出时进行回路状态检测？",
        "requirement": "系统应具备实时检测输出回路状态的功能，确保在不影响正常飞行控制输出的情况下，及时发现并报告回路故障。"
    },
    {
        "safety_criterion": "中断初始化时要将所需要的全部资源进行初始化设置，如触发方式和所需要使用的变量等。",
        "requirement": "系统在中断初始化时，应确保所有飞行控制资源（如传感器、执行器和通信链路）被正确初始化，并设置触发方式和相关变量。"
    },
    {
        "safety_criterion": "在中断的使用过程中，要严格按照“阻止->关中断->初始化->开中断->”的顺序进行操作。",
        "requirement": "飞行控制系统在处理中断时，必须按照“阻止中断->关闭中断->初始化中断处理->重新开启中断”的顺序执行，以确保系统稳定性和安全性。"
    },
    {
        "safety_criterion": "验证软件针对具体CPU中断机制，是否有措施应对可能存在同一中断多次响应(如电平触发方式、电平宽度较宽时)的情况。",
        "requirement": "飞行控制软件应具备处理多次CPU中断的能力，确保在电平触发方式下不会因中断响应过慢导致飞行控制失灵。"
    },
    {
        "safety_criterion": "禁止使用中断自嵌套。",
        "requirement": "飞行控制软件应禁止使用中断自嵌套，以防止因中断嵌套导致的系统不稳定和数据丢失。"
    },
    {
        "safety_criterion": "系统和软件必须在安全的状态下(in a safe state)启动开机同步。(此处安全状态是相对于故障状态而言)",
        "requirement": "飞行控制系统在启动时必须进行自检，确保所有关键传感器和执行器处于正常工作状态。"
    },
    {
        "safety_criterion": "内部的软件过程模型必须更新以反映在初始启动和暂时关闭后实际的过程状态，。",
        "requirement": "系统在初始启动和暂时关闭后，应自动更新并同步飞行控制软件的内部状态模型，确保与当前飞行状态一致。"
    },
    {
        "safety_criterion": "必须有对应的软件行为来处理没有输入的情况。",
        "requirement": "导航系统应具备在接收到无效或无目标位置输入时，自动切换至预设安全航线的功能。"
    },
    {
        "safety_criterion": "当等待时间间隔即将过去而未接收到需要的输入时或时间间隔结束且超时控制措施触发前必须包含一个延迟因素(延迟时间值受系统采集输入频率、反应时间、生成输出所需时间等，延迟时间不能为0)",
        "requirement": "系统应具备超时检测机制，确保在预定时间内未接收到关键飞行数据时，能够自动触发延迟措施，以防止错误的控制指令执行。"
    },
    {
        "safety_criterion": "指定时间间隔或者指定时间前输入信号未送达的情况，必须经行处理，例如故障处理、故障恢复机制。",
        "requirement": "系统应具备在指定时间间隔内未接收到关键飞行数据时，自动触发故障处理和恢复机制的功能。"
    },
    {
        "safety_criterion": "同步过程中，禁止中断，同步完成后，使能中断。",
        "requirement": "在飞行控制系统的数据同步过程中，禁止中断信号的处理，确保数据同步的完整性和一致性。"
    },
    {
        "safety_criterion": "输出控制状态的时机是否符合场景要求？",
        "requirement": "系统应确保在特定飞行阶段（如起飞、巡航、降落）中，控制指令的输出时机符合安全和操作要求。"
    },
    {
        "safety_criterion": "同步恢复后，达到危险的路径必须引向安全路径。",
        "requirement": "在同步恢复后，系统应确保任何可能导致危险的飞行路径（如异常姿态、速度或高度）自动调整为安全路径。"
    },
    {
        "safety_criterion": "存储的数据量不应超过可用的容量。",
        "requirement": "飞行控制系统应确保飞行数据记录器的存储容量始终不超过其最大容量，以防止数据丢失或覆盖。"
    },
    {
        "safety_criterion": "对每个传输的数据变量值给出相应的行为定义和可接受的变化范围。每一个值，无论是界内还是越界值，均必须进行处理。\n必须有对应的软件行为来处理在给定的时间没有输入的情况，避免输入故障对系统状态的影响。",
        "requirement": "系统应能够定义并处理所有飞行控制数据变量的值及其变化范围，包括界内和越界值，并在规定时间内未接收到输入时采取相应的安全措施。"
    },
    {
        "safety_criterion": "当数据输入达到率超过输入容量(input capacity)后，需要考虑异常处理。针对信号饱和(data overflow)、重复命令(duplicate commands)以及溢出保护。",
        "requirement": "飞行控制系统应具备处理数据输入超载的能力，包括信号饱和、重复命令和溢出保护，确保系统稳定运行。"
    },
    {
        "safety_criterion": "内存使用应满足可用性(内存动态分配问题)。",
        "requirement": "飞行控制系统应确保在任务执行过程中，内存资源的动态分配不会导致系统崩溃或性能下降。"
    },
    {
        "safety_criterion": "I/O通道的使用(负载)应满足容量和可用性。",
        "requirement": "飞行控制系统应确保所有I/O通道的负载不超过其设计容量，以保证系统的高可用性和可靠性。"
    },
    {
        "safety_criterion": "程序存储空间必须充分考虑可执行代码的规模。",
        "requirement": "飞行控制软件应确保有足够的存储空间来容纳所有可执行代码，以防止因存储不足导致的系统故障。"
    },
    {
        "safety_criterion": "对于标志单元必须：遵守读写互斥的规则，如写方置位，读方清除。",
        "requirement": "飞行控制系统中的标志单元应确保在多任务环境下，读写操作互斥，防止数据竞争和不一致。"
    },
    {
        "safety_criterion": "每种状态下均需处理超时(指定间隔或指定时间前输入数据未送达)。",
        "requirement": "系统应能够在飞行控制指令超时（如10秒内未接收到新的指令）时，自动切换至安全模式并记录超时事件。"
    },
    {
        "safety_criterion": "发生故障时，软件必须提供故障抑制(fault containment)机制以防止错误在余度系统的单元接口中交叉传输，如置永久故障或切除通道。",
        "requirement": "飞行控制系统应具备故障隔离机制，确保单个组件故障不会影响其他冗余组件的正常运行。"
    },
    {
        "safety_criterion": "输出状态的持续时间是否满足约束要求？",
        "requirement": "系统应确保发动机点火持续时间在预定范围内，以保证飞行器的安全启动和运行。"
    },
    {
        "safety_criterion": "如果一个正确成员变量决定于某个值，则表决后所有的正确成员变量都决定于该相同的值。",
        "requirement": "飞行控制系统的冗余模块在表决后应确保所有正确模块的控制指令一致。"
    },
    {
        "safety_criterion": "如果所有成员变量的初始建议值相同，则表决后所有成员变量都要决定于此值。",
        "requirement": "飞行控制系统的冗余模块在初始化时，所有冗余通道的初始状态参数应一致，确保表决机制的正确性。"
    },
    {
        "safety_criterion": "降级过程应是平稳的，响应时间不能突然或者不正常地变化。要求转入不同余度的处理逻辑时应该是平稳的。",
        "requirement": "在飞行控制系统降级过程中，应确保姿态控制和导航系统的响应时间平稳过渡，避免突变。"
    },
    {
        "safety_criterion": "由故障状态转为安全状态(fail-safe，部分或者完全关闭)的模式路径必须得到说明。安全但是功能降级模式的持续时间应尽量最小化。",
        "requirement": "在检测到关键系统故障时，飞行控制系统应自动切换至安全模式，并在最短时间内恢复至最低功能状态，确保飞行安全。"
    },
    {
        "safety_criterion": "要用暂时的(temporal history of)模式转换来避免进入不断降级状态和正常状态的循环。",
        "requirement": "系统应具备模式转换的临时历史记录功能，以防止在降级状态和正常状态之间频繁切换。"
    },
    {
        "safety_criterion": "以太网报文连续型数据处理数据对上下限进行判断处理，取值大于值域上限、小于值域下限",
        "requirement": "系统应能够对飞行控制指令的以太网报文数据进行实时上下限判断，确保指令值在安全范围内。"
    },
    {
        "safety_criterion": "以太网报文连续型数据检查上下限是否包含最大值、最小值",
        "requirement": "系统应能够实时监测并验证飞行控制数据（如姿态角、速度、高度等）的上下限，确保其在安全范围内。"
    },
    {
        "safety_criterion": "以太网报文连续型数据取值为值域中的全部数值及每个有效区间的上下边界值",
        "requirement": "系统应确保以太网通信中飞行控制指令的值域覆盖全部有效区间，并在边界值处进行严格校验。"
    },
    {
        "safety_criterion": "以太网报文连续型数据连续一段时间或连续多个周期的取值未发生变化。对未发生变化的要判断是否有异常出现，结合其他状态进行判断。",
        "requirement": "飞行控制系统应能够监测以太网报文中的连续型数据（如姿态角、速度等），并在数据连续多个周期未发生变化时，结合其他传感器数据判断是否存在异常，并触发相应的告警或故障处理机制。"
    },
    {
        "safety_criterion": "以太网报文连续型数据变化频率过快和过慢，应留有余量，防止信息丢失",
        "requirement": "系统应确保以太网通信中飞行控制数据的传输频率在安全范围内，防止因频率过快或过慢导致数据丢失或延迟。"
    },
    {
        "safety_criterion": "输出回路是否有检测机制，在不影响正常输出时进行回路状态检测？",
        "requirement": "系统应具备实时检测和诊断输出回路状态的功能，确保在不影响正常飞行控制输出的情况下，及时发现并报告回路故障。"
    },
    {
        "safety_criterion": "以太网报文连续型数据变化幅度过大和过小，应留有余量，防止信息丢失",
        "requirement": "系统应确保以太网通信中飞行控制数据的传输稳定性，防止因数据变化幅度过大或过小导致的信息丢失。"
    },
    {
        "safety_criterion": "以太网报文连续型数据应设置初始值、安全值",
        "requirement": "飞控系统应为以太网通信中的连续型数据（如姿态角、速度等）设置初始值和安全值。"
    },
    {
        "safety_criterion": "以太网报文连续型数据对精度进行判别是否超过范围，防止精度超差",
        "requirement": "系统应能够实时监测并校验飞行控制数据的以太网报文精度，确保其在预设范围内，防止精度超差导致控制失准。"
    },
    {
        "safety_criterion": "以太网报文连续型数据存在干扰的情况（在有规律的输入数据中，出现了一个或多个不满足规律的数据），可采取多次计算，剔除异常数据",
        "requirement": "飞行控制系统应具备在以太网通信中检测并剔除异常数据的能力，确保飞行控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "以太网报文离散型数据取值为值域外未定义数值，未定义数值要有容错处理",
        "requirement": "飞行控制系统应能够检测并处理以太网报文中未定义的离散型数据值，确保系统稳定运行。"
    },
    {
        "safety_criterion": "从缓存中读取数据，读取数据后进行校验",
        "requirement": "系统应能够从飞行控制缓存中读取并校验飞行参数数据，确保数据的完整性和准确性。"
    },
    {
        "safety_criterion": "明确输入数据判定为故障或无效的取值条件",
        "requirement": "系统应能够检测并判定飞行控制输入数据（如姿态角、速度等）的故障或无效取值条件，并触发相应的故障处理机制。"
    },
    {
        "safety_criterion": "明确连续型数据取值斜率、极值、不更新等故障的判断条件、处理方式以及故障恢复等策略",
        "requirement": "系统应能够实时监测飞行控制参数的斜率、极值和更新状态，当检测到异常时，自动触发故障处理机制并记录故障信息，确保飞行安全。"
    },
    {
        "safety_criterion": "明确离散型数据取值为未定义的异常值、取值跳变等故障的判断条件，处理策略以及恢复策略",
        "requirement": "系统应能够检测并处理飞行控制参数中的未定义值和突变值，确保飞行控制系统的稳定性和安全性。"
    },
    {
        "safety_criterion": "数据读取超时，对超时或失败进行判断",
        "requirement": "系统应能够检测并处理卫星通信数据读取超时或失败的情况，确保数据的完整性和实时性。"
    },
    {
        "safety_criterion": "发送数据包时机是否正确，如周期数据包、应答数据包、事件数据包等？",
        "requirement": "系统应确保在正确的时间点发送飞行控制指令数据包，包括周期性指令、应答指令和事件触发指令。"
    },
    {
        "safety_criterion": "无法从缓存中读取需要的数据信息，对超时或失败进行判断",
        "requirement": "系统应具备在缓存数据读取失败或超时情况下，自动切换到备用数据源并记录错误的功能。"
    },
    {
        "safety_criterion": "编程接口上接口的输入范围进行限制。\n对于编程接口上的缺陷，测试接口的输入范围很重要，如果接口的输入范围别扩大了，就易用被利用来攻击。",
        "requirement": "飞行控制系统编程接口应限制输入参数范围，确保输入值在安全范围内，防止因输入值异常导致系统故障或被攻击。"
    },
    {
        "safety_criterion": "连续型数据使用多个以太网数据报文表示时，判断报文间隔有效性",
        "requirement": "系统应能够检测并验证多个以太网数据报文之间的间隔时间，确保连续型飞行数据的完整性和实时性。"
    },
    {
        "safety_criterion": "明确以太网数据报文的校验方式",
        "requirement": "系统应能够对以太网数据报文进行CRC校验，确保数据传输的完整性和准确性。"
    },
    {
        "safety_criterion": "以太网数据报文可表示数值范围小于所采集数据的取值范围，应检查软件处理的范围和实际的范围是否一致",
        "requirement": "系统应确保以太网数据报文的数值范围与实际采集的飞行数据范围一致，避免数据溢出或截断。"
    },
    {
        "safety_criterion": "以太网数据报文可表示取值精度无法满足所采集数据的取值精度要求，检查设置的精度和实际精度是否一致",
        "requirement": "系统应确保以太网数据传输的精度满足飞行控制参数（如姿态角、速度等）的采集精度要求。"
    },
    {
        "safety_criterion": "检查缓冲区设置大小，防止接收数据缓冲区故障、数据量大于缓冲区容量，",
        "requirement": "飞行控制系统应确保接收的数据包大小不超过预设的缓冲区容量，防止数据溢出导致系统故障。"
    },
    {
        "safety_criterion": "对有需要时间处理的要检查时间是否进行同步，防止以太网各设备之间的时间戳要一致",
        "requirement": "系统应确保所有飞行控制设备之间的时间戳同步，以保证时间敏感任务的正确执行。"
    },
    {
        "safety_criterion": "检查是否有连续对时机制，防止以太网对时不成功，利用本地时间更新，导致本机与其它网络设备时间要一致",
        "requirement": "系统应具备连续对时机制，确保飞行器与地面站及其它网络设备的时间同步，防止因对时不成功导致的时间不一致问题。"
    },
    {
        "safety_criterion": "接收数据应判断节点状态，防止以太网各节点设备处于正常上电、正常下电、异常下电、重新上电等异常状态",
        "requirement": "飞行控制系统应实时监测各节点设备的运行状态，确保在节点设备正常上电、正常下电、异常下电或重新上电时，系统能够及时响应并保持稳定运行。"
    },
    {
        "safety_criterion": "极端情况下，是否会导致输出数据拥塞导致数据丢包？",
        "requirement": "系统应具备在极端情况下（如高数据流量、系统过载）保证关键飞行数据（如姿态、速度、高度）的传输不丢包。"
    },
    {
        "safety_criterion": "重要报文要对文总长度、发送者地址、发送者端口号、接收者地址、接收者端口号、序列号、报文标识进行判断，防止以太网数据报文总长度错误、发送者地址错误、发送者端口号错误、接收者地址错误、接收者端口号错误、序列号错误、报文标识错误",
        "requirement": "飞行控制系统应能够验证所有关键指令报文的完整性，包括报文总长度、发送者地址、发送者端口号、接收者地址、接收者端口号、序列号和报文标识，确保指令的准确性和安全性。"
    },
    {
        "safety_criterion": "对输入或操作要判断，进行异常处理，防止不合理的输入或操作",
        "requirement": "系统应能够对飞行控制指令进行有效性验证，防止非法或错误的指令导致飞行异常。"
    },
    {
        "safety_criterion": "判断用户输入数据的取值超出功能可处理范围",
        "requirement": "系统应能够检测并处理超出预设范围的飞行控制指令，确保飞行安全。"
    },
    {
        "safety_criterion": "判断用户输入数据的取值超出界面可显示范围",
        "requirement": "系统应能够检测并处理超出显示范围的飞行参数，确保显示界面的准确性和完整性。"
    },
    {
        "safety_criterion": "用户重复发送控制或解算指令，应对处理设置间隔，防止误操作",
        "requirement": "系统应具备防止重复发送控制指令的功能，确保每次控制指令的发送间隔不小于1秒，以避免误操作。"
    },
    {
        "safety_criterion": "要有延时判断，给用户留有操作时间，超出时间由容错处理。防止用户不及时或长时间不进行操作、导致功能输入异常",
        "requirement": "系统应具备延时判断机制，当飞行员在设定时间内未进行操作时，自动触发容错处理，确保飞行安全。"
    },
    {
        "safety_criterion": "对非要求的操作有判断并进行异常处理，防止用户同时按下多个按钮，或拨动多个开关等误操作",
        "requirement": "飞行控制系统应具备防止多指令同时输入的机制，确保每次仅执行一个操作指令。"
    },
    {
        "safety_criterion": "给用户留有操作时间，超出时间由容错处理。防止用户快速、频繁按下按钮或拨动开关等误操作",
        "requirement": "飞行控制系统应提供用户操作超时保护机制，确保在用户未在规定时间内完成操作时，系统自动进入安全状态。"
    },
    {
        "safety_criterion": "重要操作过程要屏蔽用户异常行为，防止操作过程异常终止、过程打断或影响当前正在执行功能",
        "requirement": "飞行控制系统应具备防止未经授权的用户干预，确保关键操作（如起飞、着陆和紧急避障）的连续性和完整性。"
    },
    {
        "safety_criterion": "对不合理的响应过程进行终止和提示",
        "requirement": "系统应能够检测并终止异常的飞行控制指令，并向地面控制中心发送警报。"
    },
    {
        "safety_criterion": "是否设置了数据包的检验内容，如包头、包尾、校验和、数据类型、包长度、帧计数等？",
        "requirement": "通信系统应能够对所有数据包进行完整性校验，包括包头、包尾、校验和、数据类型、包长度和帧计数，确保数据传输的准确性和完整性。"
    },
    {
        "safety_criterion": "软件不及时或长时间不响应用户操作，应该有时间提示",
        "requirement": "飞行控制系统应具备超时提示功能，确保在操作响应延迟时及时通知操作员。"
    },
    {
        "safety_criterion": "软件正在处理耗时较长的功能，应进行提示",
        "requirement": "系统应能够实时显示任务执行进度，并在任务耗时较长时提供明确的提示信息。"
    },
    {
        "safety_criterion": "对人机界面发送的“指令数据”有效性应进行校验",
        "requirement": "系统应能够对飞行控制指令数据进行有效性校验，确保指令数据的完整性和准确性。"
    },
    {
        "safety_criterion": "设置合理的用户名或密码",
        "requirement": "系统应确保所有地面控制站的用户访问需通过强身份验证，包括设置复杂的用户名和密码。"
    },
    {
        "safety_criterion": "对用户登录进行控制，防止不同网络节点登录同一用户",
        "requirement": "系统应确保地面控制站与飞行器之间的通信链路安全，防止同一用户在不同地面站同时登录。"
    },
    {
        "safety_criterion": "防止不同网络节点登录同一用户，且分别进行不同操作",
        "requirement": "系统应确保每个飞行控制终端在任何时刻只能由一个授权用户登录并操作，防止多点同时控制导致的指令冲突。"
    },
    {
        "safety_criterion": "用户登录后长时间不操作，应该退出该用户，或进行提示等其他处理措施",
        "requirement": "地面控制站应具备在操作员长时间无操作后自动注销或提示操作员的功能。"
    },
    {
        "safety_criterion": "确认是否允许对同一个网络节点同时登录多个用户",
        "requirement": "地面控制站应禁止同一网络节点同时登录多个用户，以确保操作指令的唯一性和安全性。"
    },
    {
        "safety_criterion": "用户远程登录，远程登录设置安全策略，设置合理的密码长度和要去",
        "requirement": "地面控制站应支持安全的远程登录功能，包括设置合理的密码长度和复杂度要求，以确保远程操作的安全性。"
    },
    {
        "safety_criterion": "预防数据库所在节点掉电，可进行备份",
        "requirement": "飞行任务关键数据应具备冗余备份机制，确保在节点掉电时数据不丢失。"
    },
    {
        "safety_criterion": "人员设置的参数是否有有效性判断，异常参数进行提示或不予响应？",
        "requirement": "系统应能够对飞行任务参数进行有效性检查，对于超出预设范围的参数值进行提示并拒绝执行。"
    },
    {
        "safety_criterion": "有读取失败提示，同时具有网络恢复机制，防止从数据库读取过程中，网络通讯中断",
        "requirement": "飞行控制系统应具备网络通讯中断的检测与恢复机制，确保在数据库读取过程中，若网络中断，系统能够及时提示并自动恢复连接。"
    },
    {
        "safety_criterion": "预防从数据库中读取数据超时，要有超时判断，给出提示",
        "requirement": "飞行控制系统应具备数据库读取超时检测功能，并在超时情况下向操作员发出警报。"
    },
    {
        "safety_criterion": "预防数据库禁止访问，检查设计，是否符合设计要求",
        "requirement": "系统应具备冗余数据库设计，确保在主数据库不可用时，备份数据库能够无缝接管，保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "预防从数据库读取数据过程中，同时进行增删改操作。可进行设置安全策略，数据过程不允许其他操作",
        "requirement": "飞行任务数据库在读取飞行任务数据时，应禁止同时进行数据的增删改操作，确保数据的一致性和完整性。"
    },
    {
        "safety_criterion": "预防查询过程中，数据库网络中断。应该给出明确的提示信息",
        "requirement": "在飞行任务数据查询过程中，若数据库网络中断，系统应立即显示明确的提示信息，并记录中断事件。"
    },
    {
        "safety_criterion": "防止网络节点文件夹已经存满。要有存满处理机制，如清空或覆盖重写",
        "requirement": "飞行数据记录系统应具备存储容量管理功能，当存储空间达到预设阈值时，自动删除最早的数据或覆盖旧数据，确保系统持续运行。"
    },
    {
        "safety_criterion": "防止数据文件受损，对数据文件进行校验，或判断打开是否成功",
        "requirement": "系统应能够对飞行任务数据文件进行完整性校验，确保数据文件未受损且能够成功打开。"
    },
    {
        "safety_criterion": "防止网络节点掉电，采取安全访问数据文件的形式，防止掉电文件损坏",
        "requirement": "飞行控制系统应具备掉电保护机制，确保在电源故障时关键飞行数据的完整性和一致性。"
    },
    {
        "safety_criterion": "防止从文件夹中读取过程中，网络通讯中断，应该给出明确的提升信息",
        "requirement": "系统应能够在地面站与卫星之间的数据传输过程中，检测到网络通讯中断并立即向操作员发送明确的警报信息。"
    },
    {
        "safety_criterion": "防止网络节点文件夹被删除，有读取判断，并给出提示信息",
        "requirement": "飞行控制系统应具备防止关键配置文件被意外删除的功能，并在检测到删除操作时立即发出警报。"
    },
    {
        "safety_criterion": "人员操作是否有合理性判断，不符合当前场景或状态的指令不进行响应？",
        "requirement": "系统应能够对地面控制指令进行合理性判断，对于不符合当前飞行状态或场景的指令不予执行。"
    },
    {
        "safety_criterion": "防止从文件夹中读取超时，有读取超时判断，并给出提示信息",
        "requirement": "飞行控制系统应具备文件读取超时检测功能，并在超时发生时提供明确的提示信息。"
    },
    {
        "safety_criterion": "防止同时到达多个新数据，对数据要有缓存，防止丢失。",
        "requirement": "系统应具备数据缓存机制，确保在多数据同时到达时不会丢失关键飞行数据。"
    },
    {
        "safety_criterion": "防止正在处理数据过程中，有新数据到达。对数据要有缓存，防止丢失。",
        "requirement": "系统应具备数据缓存机制，确保在处理飞行数据过程中，新数据到达时不会导致数据丢失。"
    },
    {
        "safety_criterion": "防止新到达数据文件未明确命名方法，应定义文件命名规则",
        "requirement": "系统应定义并实施统一的飞行数据文件命名规则，确保每个数据文件的名称唯一且可追溯。"
    },
    {
        "safety_criterion": "防止新数据文件与到达指令不匹配。重要数据执行前进行判别",
        "requirement": "系统应确保上传的飞行任务数据文件与地面控制中心下发的指令完全匹配，执行前进行校验。"
    },
    {
        "safety_criterion": "防止校验规则文件或标准的有效性未进行确认。",
        "requirement": "系统应确保所有飞行控制参数的校验规则文件在使用前经过有效性确认。"
    },
    {
        "safety_criterion": "应防止对数据的非授权的无意的存取或修改。对数据进行授权保护，对存取或修改操作有二次提示。",
        "requirement": "系统应确保飞行控制数据的完整性和保密性，防止非授权访问或修改，并在执行任何数据存取或修改操作时提供二次确认提示。"
    },
    {
        "safety_criterion": "防止处理时序漏洞。处理时序即必须按照一定顺序来处理多个操作，攻击可能在处理的过程中将其在某个特定的步骤上暂停，然后攻击者对软件进行一些修改，之后再让软件恢复运行就可以成功入侵。因为软件恢复运行时得到的输入是经过攻击者精心准备的问题数据，这时软件处理就可能出错，使得攻击者能够利用处理出错获得需要的权限。",
        "requirement": "飞行控制系统应确保所有任务关键操作按预定顺序执行，防止任何外部干扰导致的时序漏洞。"
    },
    {
        "safety_criterion": "对敏感数据的客户端、数据库登录、安全模式下的登录都需要采用双因子身份认证；",
        "requirement": "航天器地面控制系统的登录和数据访问必须采用双因子身份认证，确保只有授权人员能够访问敏感数据。"
    },
    {
        "safety_criterion": "敏感数据的客户端、数据库登录信息应能够审计；",
        "requirement": "系统应能够记录和审计所有敏感数据的访问和操作，包括飞行控制参数和导航数据的客户端及数据库登录信息。"
    },
    {
        "safety_criterion": "对接口数据的初始值进行检查，分析“未设置初始值”等情况下输出的正确性",
        "requirement": "系统应确保在初始化阶段，所有关键飞行参数（如姿态、速度、高度）的初始值均被正确设置，以保证飞行控制系统的正常运行。"
    },
    {
        "safety_criterion": "关键决策是否有防止误操作的提示或确认，且这些提示或确认不会对决策实时性产生不可接受影响？",
        "requirement": "在执行关键飞行控制指令（如姿态调整、推进器点火等）时，系统应提供实时的确认提示，确保操作员确认无误后执行，且该确认过程不应超过1秒。"
    },
    {
        "safety_criterion": "登录超时认证和身份鉴别失败次数限制",
        "requirement": "地面控制站应具备登录超时机制和身份鉴别失败次数限制，确保未经授权的访问无法持续尝试登录。"
    },
    {
        "safety_criterion": "在防火墙上采用“未允许则禁止”的控制策略，设置包过滤规则对数据包进行控制。重要服务器应设置身份鉴别策略，强制进行身份鉴别。",
        "requirement": "航天器地面控制站的网络防火墙应采用“未允许则禁止”的控制策略，并设置包过滤规则对数据包进行控制。重要服务器应强制进行身份鉴别，确保只有授权用户可以访问。"
    },
    {
        "safety_criterion": "重要操作应设置系统的角色和权限。软件中数据的备份、恢复功能应设置操作员角色，对每一个使用该软件的人员设置操作员角色及口令(口令需做定期或不定期的随时更改)。根据操作员所管辖的业务范围,为其确定一个恰当的身份,以限制其对应用软件所做的操作(即操作权限)。假如有很多人员使用该应用软件,那么可将人员按其所做的操作进行分组,每一组赋予不同的操作权限,亦即不同的角色。例如：可以将操作人员简单地分为以下三种角色：\n(1)查询角色：只能对数据进行查询与统计。\n(2)数据定义角色：除(1)权限外,还可对软件数据进行输入、修改及删除操作。\n(3)系统管理员角色：除(1)、(2)权限外,还可对数据进行备份、恢复,增加、删除操作人员,为操作人员设置、更改口令等系统管理操作,并且能够创建系统数据库。",
        "requirement": "航天器地面控制系统应设置多级用户角色和权限管理，包括查询角色、数据定义角色和系统管理员角色，以确保数据的安全性和操作的可控性。"
    },
    {
        "safety_criterion": "设计空间的转换规则的校验，防止非法数据没有在外部输入层被检查出来并丢弃，非法数据进入接口层和实现层后，由于它超出了接口层和实现层的对应测试空间或设计空间的范围，从而引起溢出。",
        "requirement": "系统应能够对所有外部输入的飞行控制指令进行严格校验，确保其在预定义的合法范围内，防止非法指令导致系统溢出或异常行为。"
    },
    {
        "safety_criterion": "局部测试空间和设计空间应合理设置。防止当合法数据进入后，由于程序实现层内对应的测试空间或设计空间不足，导致程序处理时出现溢出。",
        "requirement": "飞行控制系统应确保在所有合法飞行参数输入范围内，系统设计空间和测试空间充足，防止因数据溢出导致的系统故障。"
    },
    {
        "safety_criterion": "防止函数返回地址被破坏。导致可以使用精心设计的数据去覆盖函数返回地址，以执行想要执行的代码并取得所需的权限。",
        "requirement": "飞行控制软件应具备防止缓冲区溢出的功能，确保函数返回地址不被恶意数据覆盖。"
    },
    {
        "safety_criterion": "具有确保整个系统（在存储、处理、传输和表述过程中）的信息与过程的完整性，防止未经授权和意外的改变能力。",
        "requirement": "系统应确保飞行控制指令和遥测数据在存储、处理、传输和表述过程中不被未经授权的修改，以维持飞行任务的完整性和安全性。"
    },
    {
        "safety_criterion": "应具有为阻止用户欲操作非授权系统而回避系统访问控制、责任或程序的企图提供足够的防护能力；",
        "requirement": "系统应具备防止未经授权的地面站操作员访问飞行控制系统的功能，确保只有经过身份验证和授权的人员才能进行关键操作。"
    },
    {
        "safety_criterion": "所有交换机上均应设有登录密码，屏蔽多余的端口，在用端口都采取“MAC + 端口”的绑定方式，防止非授权接入。",
        "requirement": "机载网络交换机应配置登录密码，关闭未使用的端口，并对在用端口实施MAC地址与端口的绑定，确保网络安全性。"
    },
    {
        "safety_criterion": "对于应用系统的访问控制，通过身份认证系统结合应用系统中的人员权限管理实现用户权限划分，保证满足最小授权策略。",
        "requirement": "飞行控制系统应通过身份认证和权限管理，确保只有授权人员能够访问和操作关键飞行参数和控制指令。"
    },
    {
        "safety_criterion": "是否规定了误操作、无效操作的响应处理要求？",
        "requirement": "系统应能够检测并处理飞行控制中的误操作和无效操作，确保飞行任务的安全性和连续性。"
    },
    {
        "safety_criterion": "根据功能和业务属性的不同划分安全域。安全域之间的隔离措施需要采取软、硬件相结合的方式，如：VLAN、防火墙等。各安全域在信息交换时应保证：对信息系统内涉密数据的访问采用强制访问控制策略，强制访问控制可以防范特洛伊木马和用户滥用权限，具有较高的安全性。",
        "requirement": "飞行控制系统应划分为多个安全域，包括飞行控制域、导航域和通信域，各域之间采用VLAN和硬件防火墙进行隔离，确保涉密数据的访问采用强制访问控制策略。"
    },
    {
        "safety_criterion": "可将查询角色与“只读”数据库用户对应;数据定义角色与“写”数据库用户对应;系统管理员权限最大,可让其与系统管理员SA或数据库建立者对应。",
        "requirement": "飞行任务管理系统应具备角色权限管理功能，确保不同角色只能访问和操作其权限范围内的数据，例如：飞行操作员仅具有只读权限，系统管理员具有最高权限。"
    },
    {
        "safety_criterion": "用户的访问权限和口令的保护是提高系统安全性的重要保障。但目前的用户认证和访问控制系统仍存在很多的安全隐患,如对用户访问权限的定义比较模糊,釆用的用户名/口令的保护仍属于弱认证机制等。目前仅使用用户名加口令的认证方式比较少，强度太低。比较普遍使用的身份认证是基于USBKey结合口令进行的，或者基于指纹识别的身份认证系统。这些强身份认证措施是以密码技术为核心的，在一定程度上可以与应用系统进行结合，实现统一用户管理和统一授权机制",
        "requirement": "地面控制站应采用基于USBKey结合口令或指纹识别的强身份认证机制，确保只有授权人员能够访问关键系统和数据。"
    },
    {
        "safety_criterion": "需有专用的入侵检测设备或入侵检测软件提供入侵信息以便及时采取相应的安全措施，遏制入侵行为。根据船厂信息系统的实际情况，可在核心交换机处或重要应用的接入交换机处部署入侵检测设备。",
        "requirement": "航天器地面控制中心应部署入侵检测系统，实时监控并报告任何异常访问或入侵行为，确保地面控制系统的安全。"
    },
    {
        "safety_criterion": "对关键设备设置违规外联管理控制：能够实时监测并阻断涉密计算机通过多种方式接入互联网的违规行为，并能够向管理端发送报警信息；",
        "requirement": "卫星通信系统应具备实时监测并阻断地面站计算机通过非法途径接入互联网的行为，并向控制中心发送报警信息。"
    },
    {
        "safety_criterion": "对关键设备移动存储介质使用管理控制：管理员可限定涉密专用优盘在系统内的使用范围，使其仅能在许可范围内的涉密计算机上交换数据。涉密专用优盘无法直接接入非涉密计算机，普通优盘不能直接接入涉密计算机，从而杜绝移动存储介质的交叉使用。",
        "requirement": "地面控制站应具备对涉密飞行任务数据存储介质的严格管理功能，确保其仅能在授权的地面控制计算机上使用，防止数据泄露和交叉使用。"
    },
    {
        "safety_criterion": "重要数据访问要有记录或警示。",
        "requirement": "系统应记录所有对飞行控制参数和导航数据的访问，并在未经授权的访问尝试时发出警报。"
    },
    {
        "safety_criterion": "关键信息加密存储。基于内容的加密，以代替为保证信息安全而对整个网络进行整体加密",
        "requirement": "飞行控制系统的敏感数据（如飞行路径、任务参数和安全密钥）应采用基于内容的加密技术进行存储，确保数据的机密性和完整性。"
    },
    {
        "safety_criterion": "重要数据且已丢失设备要有自毁设计。检查机制的有效性",
        "requirement": "卫星在检测到关键数据丢失时，应自动触发自毁程序，确保数据不被未授权访问。"
    },
    {
        "safety_criterion": "传输介质采用数据链，不易出现信息泄露，但也应用密码保护措施。",
        "requirement": "卫星通信系统应采用加密算法保护数据链路，确保传输数据的机密性和完整性。"
    },
    {
        "safety_criterion": "是否规定了不符合操作流程的响应处理？",
        "requirement": "系统应能够检测并响应非标准操作流程，如未经授权的指令输入或异常操作序列，确保飞行安全。"
    },
    {
        "safety_criterion": "重要数据标出密级标识。应用系统中存储、处理、传递、输出的涉密电子文件和资料要有相应的密级标识，密级标识不能与正文分离，标于正文右上角。标密必须从盘符开始，直至存储涉密信息的文件夹、涉密文档均需进行标识。",
        "requirement": "飞行任务数据和敏感信息在存储、传输和处理过程中必须标有密级标识，且密级标识与数据不可分离，确保数据的完整性和安全性。"
    },
    {
        "safety_criterion": "数据库本身的漏洞扫描：通过安全检测设备对数据库进行扫描，对发现的漏洞进行修补；\n数据库安全策略设置：为数据库专门配置安全防护策略，提高数据库的整体安全性。",
        "requirement": "飞行任务管理系统应定期进行数据库漏洞扫描，并自动应用安全补丁，同时配置专用的安全防护策略，确保任务数据的安全性和完整性。"
    },
    {
        "safety_criterion": "设置策略，减少软件安装，对有影响的软件在用户手册中进行说明，运行非法进程，使用违规的存储设备存储敏感信心，这些行为必须得到有效监控。",
        "requirement": "系统应具备实时监控和记录所有软件安装、进程运行及存储设备使用情况的功能，确保只有授权软件和存储设备能够访问敏感信息。"
    },
    {
        "safety_criterion": "安装病毒库，进行查杀。防止病毒引起数据安全问题。\n① 服务器防护，可针对各种操作系统的服务器进行病毒的扫描和清除；\n② 客户机防护，可对各类桌面操作系统进行病毒扫描和清除；\n③ 防病毒管理功能，可对所有客户端杀毒软件进行统一集中管理，提供集中分发策略、升级、配置、管理、统计等功能，实现对病毒防范的集中监控。",
        "requirement": "地面控制站应具备病毒防护功能，包括服务器和客户端的病毒扫描、清除及集中管理，确保地面控制系统的数据安全。"
    },
    {
        "safety_criterion": "检查共性文件夹或用户共享设置。当使用了共性数据时，由于对共享数据未做有效保护与验证，导致恶意用户可以利用共享数据来进行攻击。比如整个目录需要共享给所有用户，任何一个用户都可将服务器里的文件删除。",
        "requirement": "系统应确保飞行任务数据的共享文件夹具有严格的访问控制和验证机制，防止未经授权的用户进行修改或删除操作。"
    },
    {
        "safety_criterion": "重要操作应该自动地进行记录。当软件的重要或关键性操作(如设置运行参数、创建软件数据库、增删改数据等)进行时产生数据。",
        "requirement": "系统应自动记录所有关键飞行操作，包括但不限于飞行参数设置、任务计划创建和修改、飞行数据增删改等。"
    },
    {
        "safety_criterion": "对用户非法安装软件、运行非法进程、服务进行控制，还可对网络端口进行监控。\n可针对Telnet、FTP等协议进行审计与控制，可针对多种数据库如Oracle、DB2、SQLServer等各类数据库进行安全审计；全面记录会话信息；原始IP报文记录存储。",
        "requirement": "地面控制站应具备对飞行器上所有软件安装和进程运行的严格控制，防止非法软件和进程的运行，并对网络通信端口进行实时监控，确保飞行器与地面站之间的通信安全。"
    },
    {
        "safety_criterion": "关键数据采用加密形式，并且记录收发信息，追溯来源，关键数据可追溯",
        "requirement": "飞行控制系统应采用加密技术保护关键飞行数据，并记录所有数据的收发信息，确保数据来源可追溯。"
    },
    {
        "safety_criterion": "数据库应该有备份和恢复机制，重要的数据库有多机冗余备份",
        "requirement": "飞行控制系统的数据库应具备实时备份和恢复机制，关键飞行数据应有多机冗余备份。"
    },
    {
        "safety_criterion": "选择完全(全部)数据、变化数据和日志3种策略进行备份策略。备份完全数据就是在某个时刻将数据库或某个表、某个文件等整个拷贝下来;备份变化数据是将数据库中上次完全备份后发生的有变化或新增加的数据进行拷贝;备份日志是将数据库中上次日志备份后发生的各种操作拷贝下来。",
        "requirement": "飞行控制系统应支持全量、增量和日志三种备份策略，确保飞行数据的完整性和可恢复性。"
    },
    {
        "safety_criterion": "进行大量参数设置时，是否设置有常用默认值，以减少设置工作量，这些默认值是否会影响安全？",
        "requirement": "系统应提供常用飞行参数的默认设置，以减少操作员的设置工作量，并确保这些默认值不会影响飞行安全。"
    },
    {
        "safety_criterion": "恢复操作应该是随时的,无论何时需要都应该能做;",
        "requirement": "系统应能够在任何飞行阶段，包括起飞、巡航和着陆，随时执行故障恢复操作。"
    },
    {
        "safety_criterion": "根据以前的备份情况和本次要恢复到的时刻，按备份的时间顺序自主选择相应的一系列备份文件(即备份文件的恢复序列),作为本次数据恢复的依据。该恢复序列可用数字来表示其顺序,如：\n1—某一时刻t的完全备份文件;\n2—时刻t之后至时刻k的变化备份文件;\n3—时刻k至本次恢复时刻s的日志备份文件。\n这三个备份文件及其序号就构成了一个恢复序列,通过该恢复序列可将数据恢复到时刻s时的状况;",
        "requirement": "飞行控制系统应具备自动选择和应用备份文件的功能，以确保在系统恢复过程中能够准确恢复到指定的飞行状态。"
    },
    {
        "safety_criterion": "(对确定的恢复序列检查其有效性,以保证数据恢复的正确。如,检查恢复序列中是否只有一个完全备份文件,而该完全备份文件的序号是否为1;恢复序列中完全、变化或日志备份文件的顺序与其建立时刻的先后是否一致,即是否有顺序在前建立时刻在后或顺序在后建立时刻在前的情况,比如上述恢复序列中,若完全备份文件的序号不是1、或三个备份文件的顺序不是上面所列的情况,则均不符合有效性的要求也就不能将数据恢复到所要的状态,因此都应该提示操作员加以纠正。",
        "requirement": "飞行控制系统应能够验证备份数据的完整性和顺序，确保在系统恢复过程中使用正确的备份文件，以保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "确认对任务机集群任务迁移、部署、备份、恢复等能力的有效性",
        "requirement": "系统应具备在主任务机故障时，自动将任务迁移至备用任务机，并确保任务数据的完整性和一致性。"
    },
    {
        "safety_criterion": "向操作员提供的人机显示信息、图标、及其他人机交互方式应清晰、简明无二义性。",
        "requirement": "飞行控制界面应实时显示关键飞行参数（如高度、速度、姿态角）和系统状态（如发动机状态、导航状态），确保操作员能够清晰、准确地监控和操作。"
    },
    {
        "safety_criterion": "显示应考虑颜色、字体大小和位置等因素，符合人机工程要求；",
        "requirement": "驾驶舱显示器应具备高对比度的颜色方案和可调节的字体大小，确保飞行员在各种光照条件下清晰读取关键飞行数据。"
    },
    {
        "safety_criterion": "基于任务需求将信息分配到不同的格式或者页面。",
        "requirement": "飞行控制界面应根据任务需求动态调整显示内容，确保关键信息在不同飞行阶段的优先展示。"
    },
    {
        "safety_criterion": "对于包含在不同页面的所有必要信息相互一致。",
        "requirement": "飞行控制界面和任务规划界面中的关键参数（如航向、速度、高度）应保持一致，确保操作人员在不同页面查看时信息无差异。"
    },
    {
        "safety_criterion": "检测到非法输入、操作后应给出提示。",
        "requirement": "系统应能够检测并提示非法的飞行控制指令，确保操作安全。"
    },
    {
        "safety_criterion": "人机界面应易用、规范、合理、美观协调。",
        "requirement": "飞行控制界面应提供直观、清晰的飞行参数显示和操作按钮，确保飞行员在紧急情况下能够快速准确地进行操作。"
    },
    {
        "safety_criterion": "系统进行控制的顺序和时序是否与硬件协调，控制条件是否完备且前后一致？",
        "requirement": "飞行控制系统应确保导航指令与执行机构的响应时序一致，且所有控制条件均得到验证和确认。"
    },
    {
        "safety_criterion": "菜单、按钮前的图标能直观的代表要完成的操作；",
        "requirement": "驾驶舱内的控制按钮和图标应直观表示其功能，确保飞行员在紧急情况下能够快速准确地进行操作。"
    },
    {
        "safety_criterion": "相同或相近功能的按钮放在一起；",
        "requirement": "驾驶舱内的飞行控制按钮应按功能分类，相同或相近功能的按钮应集中布置。"
    },
    {
        "safety_criterion": "重要的命令按钮与使用较频繁的按钮要放在界面上注目的位置；",
        "requirement": "驾驶舱内的关键操作按钮（如紧急降落、发动机重启等）应置于显眼且易于操作的位置。"
    },
    {
        "safety_criterion": "错误使用容易引起界面退出或关闭的按钮不应该放在易点位置，一般横排开头或最后与竖排最后为易点位置；",
        "requirement": "飞行控制界面中的紧急停止按钮应放置在不易误触的位置，例如屏幕的边缘或角落。"
    },
    {
        "safety_criterion": "与正在进行的操作无关的按钮应该加以屏蔽；",
        "requirement": "在飞行操作模式下，与当前任务无关的控制按钮应被禁用，以防止误操作。"
    },
    {
        "safety_criterion": "对可能造成数据无法恢复的操作必须提供确认信息，给用户放弃选择的机会；",
        "requirement": "在执行关键飞行操作（如航迹修正、姿态调整）前，系统应提供确认提示，允许操作员确认或取消操作。"
    },
    {
        "safety_criterion": "对运行过程中出现问题而引起错误的地方要有提示，让用户明白错误出处，避免形成无限期的等待；",
        "requirement": "系统应能够实时检测并报告飞行过程中出现的任何异常情况，包括但不限于传感器故障、通信中断和控制系统异常，并提供明确的错误提示信息。"
    },
    {
        "safety_criterion": "提示、警告、错误说明应该清楚、明了、恰当；",
        "requirement": "系统应能够提供清晰、明了的飞行状态警告和错误信息，确保飞行员能够及时、准确地采取措施。"
    },
    {
        "safety_criterion": "长宽比例协调，一般不要长宽比例严重失调或宽度超过长度；",
        "requirement": "航天器结构设计应确保其长宽比例协调，避免长宽比例严重失调或宽度超过长度，以保证飞行稳定性和操控性。"
    },
    {
        "safety_criterion": "布局要合理，不宜过于密集，也不能过于空旷；",
        "requirement": "卫星内部组件布局应合理，确保散热和维护的便利性。"
    },
    {
        "safety_criterion": "进行硬件控制后，是否有监控并判断硬件状态与控制要求的匹配性？",
        "requirement": "系统应能够实时监控并验证发动机控制指令与实际硬件状态的匹配性。"
    },
    {
        "safety_criterion": "字体的大小要与界面的大小比例协调；",
        "requirement": "驾驶舱显示器上的字体大小应与显示器的大小比例协调，确保飞行员在各种飞行条件下都能清晰阅读。"
    },
    {
        "safety_criterion": "前景与背景色搭配合理协调，反差不宜太大；",
        "requirement": "驾驶舱显示器应确保前景与背景色搭配合理协调，避免反差过大，以保证飞行员在各种光照条件下的视觉舒适性和信息识别准确性。"
    },
    {
        "safety_criterion": "界面风格要保持一致，字的大小、颜色、字体要相同，除非是需要艺术处理或有特殊要求的地方；",
        "requirement": "飞行控制界面应保持一致的风格，包括统一的字体、颜色和大小，以确保飞行员在不同操作模式下能够快速识别和操作。"
    },
    {
        "safety_criterion": "图形应能够清楚的反映所代表的含义；",
        "requirement": "飞行控制界面应能够清晰显示飞行器的姿态、速度和高度等关键参数。"
    },
    {
        "safety_criterion": "相同的状态显示所采用的颜色应相同，不同的状态显示的颜色应明显；",
        "requirement": "飞行状态监控系统应使用统一的颜色方案，确保相同状态的颜色一致，不同状态的颜色有明显区别。"
    },
    {
        "safety_criterion": "重要的提示应防止显示信息错误",
        "requirement": "系统应确保关键飞行参数和警告信息的显示准确无误，防止误显示或遗漏。"
    },
    {
        "safety_criterion": "防止出现乱码",
        "requirement": "系统应确保所有飞行控制指令和状态信息在传输过程中不出现乱码，保证指令的准确性和完整性。"
    },
    {
        "safety_criterion": "防止不同数据源的高度数据不一致",
        "requirement": "系统应能够实时校验来自不同传感器的高度数据，确保数据一致性。"
    },
    {
        "safety_criterion": "防止不同数据源的速度不一致",
        "requirement": "系统应确保来自不同传感器的飞行速度数据在融合处理时保持同步，避免因数据不一致导致的控制误差。"
    },
    {
        "safety_criterion": "防止不同数据源的角度数据不一致",
        "requirement": "系统应确保来自不同传感器的飞行姿态角度数据（如俯仰角、滚转角、偏航角）的一致性和准确性。"
    },
    {
        "safety_criterion": "对于关键控制或动作，是否有超时判断，以处理硬件状态长时间达不到控制要求的情况？",
        "requirement": "系统应具备超时检测机制，确保在关键控制指令（如姿态调整、发动机点火）发出后，若在规定时间内未收到硬件反馈，则自动触发安全措施。"
    },
    {
        "safety_criterion": "相同的列表条目在不同页面中顺序应尽量一致。",
        "requirement": "飞行任务规划界面中，各任务步骤的显示顺序应与任务执行顺序保持一致。"
    },
    {
        "safety_criterion": "源程序的标识符应该按其意思取名。",
        "requirement": "飞行控制软件中的变量和函数应使用明确的命名，如使用 'altitude' 表示高度，'velocity' 表示速度，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "如果标识符使用缩写，那么缩写规则应该一致，并且应该为每个名字加注释。",
        "requirement": "飞行控制软件中的所有缩写标识符应遵循统一的缩写规则，并在代码中为每个缩写标识符添加注释说明。"
    },
    {
        "safety_criterion": "注释分块注释和行注释两种。块注释放在程序段的开头；行注释插在程序的中间，描述一行或一段代码的作用。",
        "requirement": "飞行控制软件应包含详细的注释，包括块注释和行注释，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "一般情况下，源程序有效注释量必须在20％以上",
        "requirement": "飞行控制软件的源代码中，有效注释量必须达到20%以上，以确保代码的可维护性和可读性。"
    },
    {
        "safety_criterion": "应该尽量使程序清单布局清晰、明了。可有效使用语句行的缩进、也可适当使用空格符提高程序的可读性。",
        "requirement": "飞行控制软件的代码应具有高可读性和可维护性，确保在紧急情况下能够快速定位和修复问题。"
    },
    {
        "safety_criterion": "数据说明风格对于数据的理解和维护有很大的影响。下述做法有助于使数据说明易于理解。",
        "requirement": "系统应提供清晰的数据字典，包括所有飞行参数和系统状态的定义、单位和取值范围，以确保数据的一致性和可维护性。"
    },
    {
        "safety_criterion": "显式说明所有变量。",
        "requirement": "系统应明确定义并初始化所有飞行控制参数和状态变量。"
    },
    {
        "safety_criterion": "数据说明次序规范化（例如，按照数据结构或数据类型确定说明的次序），有次序就容易查阅，也可以避免遗漏。",
        "requirement": "飞行控制软件应按照预定义的数据结构和类型顺序，规范地记录和显示飞行参数和系统状态，确保数据的完整性和可读性。"
    },
    {
        "safety_criterion": "当多个变量在一个语句中说明中，应该按字母顺序排列这些变量。",
        "requirement": "飞行控制软件应确保所有变量按字母顺序排列，以提高代码的可读性和维护性。"
    },
    {
        "safety_criterion": "下发危险的控制指令或动作时，是否有依据设备状态进行合理性判断？",
        "requirement": "系统应根据当前飞行器状态（如高度、速度、姿态）对危险控制指令进行合理性判断，确保指令执行的安全性。"
    },
    {
        "safety_criterion": "如果设计时使用了一个复杂的数据结构，则应该用注释说明用程序设计语言实现这个数据结构的方法。",
        "requirement": "系统应能够对复杂的飞行控制数据结构进行详细注释，确保开发和维护人员能够准确理解并实现相关功能。"
    },
    {
        "safety_criterion": "不要为了节省空间而把多个语句写在同一行。",
        "requirement": "飞行控制软件的代码应保持清晰可读，避免多条语句合并为一行，以确保代码的可维护性和可审查性。"
    },
    {
        "safety_criterion": "避免对条件“非”的判断。",
        "requirement": "系统应确保在飞行控制逻辑中避免使用否定条件判断，以减少误判风险。"
    },
    {
        "safety_criterion": "避免使用复杂的判断条件。",
        "requirement": "飞行控制系统应简化逻辑判断条件，确保在关键决策点上快速准确地做出响应。"
    },
    {
        "safety_criterion": "使用括号表明表达式的运算次序。",
        "requirement": "系统应能够正确解析和执行带有括号的飞行控制指令，确保运算次序的准确性。"
    },
    {
        "safety_criterion": "尽量只使用三种基本控制结构书写程序。",
        "requirement": "飞行控制软件应仅使用顺序、选择和循环三种基本控制结构，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "尽量少用或不用GOTO语句。",
        "requirement": "飞行控制软件应避免使用GOTO语句，以减少代码复杂性和潜在的逻辑错误。"
    },
    {
        "safety_criterion": "尽量少用或不用标准文本以外的语句。",
        "requirement": "飞行控制软件应仅使用符合行业标准的编程语句和协议，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "效率是软件性能上的要求，其目标是在需求分析阶段给出的。",
        "requirement": "飞行控制系统应实现在指定时间内完成飞行轨迹计算，确保实时性和准确性。"
    },
    {
        "safety_criterion": "效率和简单是一致的，不要牺牲程序的清晰性和可读性来提高效率。",
        "requirement": "飞行控制软件应保持代码的清晰性和可读性，确保在紧急情况下能够快速定位和解决问题。"
    },
    {
        "safety_criterion": "故障检测的故障项是否充分？ ",
        "requirement": "系统应具备全面的故障检测机制，能够检测并报告所有关键飞行系统的故障，包括但不限于发动机、导航系统和通信系统。"
    },
    {
        "safety_criterion": "提供程序效率的根本途径在于选择良好的设计方法、数据结构和算法、而不是靠编程时对程序语句的调整。",
        "requirement": "飞行控制软件应采用高效的数据结构和算法，确保在高负载情况下仍能实时处理飞行数据和控制指令。"
    },
    {
        "safety_criterion": "引用头文件时须使用相对路径，不应该是绝对路径",
        "requirement": "软件开发过程中，所有模块的头文件引用应使用相对路径，确保代码在不同开发环境和平台上的可移植性。"
    },
    {
        "safety_criterion": "不提倡使用全局变量，如需要，应定义全局变量时必须仔细分析，明确其含义、作用、取值范围及与其他变量间的关系。",
        "requirement": "飞行控制软件应避免使用全局变量，如必须使用，需在设计文档中明确其含义、作用、取值范围及与其他变量间的关系。"
    },
    {
        "safety_criterion": "变量在引用前必须赋初值，即严禁使用未经初始化的变量。",
        "requirement": "飞行控制软件在初始化阶段必须为所有关键变量赋初值，确保在任何情况下都不会使用未初始化的变量。"
    },
    {
        "safety_criterion": "赋值运算两边数据类型应该匹配，防止变量的精度损失。",
        "requirement": "飞行控制软件应确保所有飞行参数的赋值运算中，数据类型匹配，防止因精度损失导致的控制误差。"
    },
    {
        "safety_criterion": "对于数学运算语句时，应检查数据是否有效。",
        "requirement": "系统应能够实时监测并验证飞行控制算法中的数学运算数据有效性，确保计算结果的准确性。"
    },
    {
        "safety_criterion": "用malloc、new申请内存之后，或引用各种函数运算fgets函数之后，应该立即检查指针值是否为NULL，防止使用指针值为NULL的内存。",
        "requirement": "飞行控制系统在分配内存后，应立即检查指针是否为NULL，确保内存分配成功后再进行数据处理。"
    },
    {
        "safety_criterion": "不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。",
        "requirement": "飞行控制软件应确保所有动态分配的内存和数组在使用前均被初始化，以防止未初始化数据导致的飞行控制错误。"
    },
    {
        "safety_criterion": "动态内存的申请与释放必须配对，防止内存泄漏。",
        "requirement": "飞行控制系统应确保在任务执行过程中动态分配的内存能够及时释放，防止内存泄漏导致系统性能下降或失效。"
    },
    {
        "safety_criterion": "避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。",
        "requirement": "飞行控制系统应确保所有数组和指针操作在有效范围内，防止因下标越界导致的系统异常。"
    },
    {
        "safety_criterion": "故障项的检测逻辑是否合理，检测方式是否会对设备正常工作产生影响？",
        "requirement": "系统应具备实时监测和诊断关键传感器（如陀螺仪、加速度计）故障的功能，且该功能不应干扰正常飞行控制。"
    },
    {
        "safety_criterion": "用free或delete释放了内存之后，立即将指针设置为NULL，防止产生“野指针”。",
        "requirement": "飞行控制软件在释放内存后，应立即将相关指针设置为NULL，以防止野指针导致的系统异常。"
    },
    {
        "safety_criterion": "注意防止数据拷贝导致缓冲区溢出、格式化字符串导致缓冲区溢出。",
        "requirement": "系统应确保在数据传输和处理过程中，所有缓冲区和字符串操作均进行边界检查，防止溢出。"
    },
    {
        "safety_criterion": "不使用指向指针的指针。",
        "requirement": "飞行控制软件应避免使用指向指针的指针，以防止内存管理错误和潜在的安全漏洞。"
    },
    {
        "safety_criterion": "对于在类的构造函数中有申请内存的操作，注意以下：①在其他函数中出现对象的拷贝，应有拷贝构造函数。②在其他函数中有两个对象直接或间接的赋值操作，应对“=”运算符进行重载定义。③在“=”重载操作中，必需判断两个对象是否为同一个对象。④构造函数分配内存方式和析构函数释放内存方式应匹配。",
        "requirement": "飞行控制软件应确保在对象拷贝和赋值操作中正确管理内存，防止内存泄漏和重复释放。"
    },
    {
        "safety_criterion": "不可将布尔变量直接与TRUE、FALSE 或者1、0进行比较。根据布尔类型的语义，零值为“假”（记为FALSE），任何非零值都是“真”（记为TRUE）。TRUE的值究竟是什么并没有统一的标准。例如Visual C++将TRUE定义为1，而Visual Basic则将TRUE定义为-1。",
        "requirement": "飞行控制软件应避免直接将布尔变量与TRUE、FALSE或1、0进行比较，确保在不同编译器和环境下的逻辑一致性。"
    },
    {
        "safety_criterion": "应当将整型变量用“==”或“！=”直接与0比较。",
        "requirement": "飞行控制系统应确保所有整型变量的状态标志（如飞行模式、故障标志等）直接与0进行比较，以确保状态判断的准确性。"
    },
    {
        "safety_criterion": "不可将浮点变量用“==”或“！=”与任何数字比较。",
        "requirement": "飞行控制软件应避免使用浮点变量进行精确比较，以防止因浮点运算误差导致的控制错误。"
    },
    {
        "safety_criterion": "应当将指针变量用“==”或“！=”与NULL比较。",
        "requirement": "飞行控制软件应确保在指针变量用于关键操作前，通过“==”或“！”与NULL进行比较，以防止空指针引用导致的系统故障。"
    },
    {
        "safety_criterion": "在判断语句中，不允许对其他变量进行计算或赋值。",
        "requirement": "飞行控制软件中的判断语句应仅用于逻辑判断，不得在判断过程中对其他变量进行计算或赋值。"
    },
    {
        "safety_criterion": "对于只有if分支没有else分支的代码，应检查是否真的不需要else分支。特别当if分支中存在对布尔变量的赋值时。",
        "requirement": "飞行控制系统应确保在所有可能的飞行条件下，关键控制指令的布尔变量状态均得到有效管理，避免因未处理的条件导致系统失效。"
    },
    {
        "safety_criterion": "对接口数据的初始值进行检查，分析“初始值为值域范围外的异常值”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理导航系统初始化时的异常初始值，确保飞行控制参数在安全范围内。"
    },
    {
        "safety_criterion": "针对系统所有故障情况，是否进行了差异化的告警措施和处置措施？",
        "requirement": "系统应能够针对不同的故障类型（如传感器故障、通信故障、动力系统故障等）提供差异化的告警和处置措施。"
    },
    {
        "safety_criterion": "当出现if…else if…else if格式时，不要忘记else分支作例外情况处理。",
        "requirement": "飞行控制软件应确保在所有飞行模式切换时，都有默认的异常处理机制，以防止未定义状态的发生。"
    },
    {
        "safety_criterion": "应注意if语句的所有分支是否覆盖了判断变量的全部取值区间，或各分支的判断变量取值区间是否存在重叠。",
        "requirement": "飞行控制软件应确保所有飞行模式切换条件的逻辑判断覆盖了所有可能的飞行状态，且各条件之间无重叠，以防止未定义行为的发生。"
    },
    {
        "safety_criterion": "应注意if语句判断变量是否为常值、常量、全局变量，当确需使用时，应谨慎检查是否合理可控。",
        "requirement": "飞行控制软件应确保所有if语句中的判断变量均为合理可控的局部变量，避免使用常值、常量或全局变量，以防止潜在的逻辑错误。"
    },
    {
        "safety_criterion": "每个case语句须以break结尾，否则将导致多个分支重叠（除非有意使多个分支重叠），同时需要default分支。",
        "requirement": "飞行控制软件应确保每个飞行模式切换逻辑的case语句以break结尾，并包含default分支，以防止意外的模式重叠和确保正确的飞行控制。"
    },
    {
        "safety_criterion": "避免遗漏应该考虑的情况，避免多余的分支。",
        "requirement": "飞行控制系统应确保所有可能的飞行模式转换逻辑均被覆盖，且无冗余的模式转换路径。"
    },
    {
        "safety_criterion": "确保循环的入口条件至少能满足一次，避免一次都不能进入循环体。",
        "requirement": "飞行控制软件应确保在每次任务启动时，至少进行一次完整的初始化检查，以验证所有系统参数和状态的正确性。"
    },
    {
        "safety_criterion": "尽量使循环体内工作量最小化，与循环无关的语句移到循环外。",
        "requirement": "飞行控制软件应优化循环结构，确保与循环无关的计算和数据处理在循环外部执行，以提高系统响应速度和稳定性。"
    },
    {
        "safety_criterion": "确保循环出口条件能满足，循环能终止，避免死循环。",
        "requirement": "飞行控制软件应确保导航算法中的循环结构在达到预定条件时能够正确终止，防止死循环导致的系统失效。"
    },
    {
        "safety_criterion": "多重循环时，将循环次数多的循环放在里面",
        "requirement": "飞行控制软件应优化多重循环结构，将循环次数多的循环嵌套在内部，以提高计算效率和响应速度。"
    },
    {
        "safety_criterion": "不可在for循环体内修改循环变量，防止for循环失去控制。",
        "requirement": "飞行控制软件应确保在执行任务关键的循环过程中，循环变量不可被修改，以防止控制逻辑失效。"
    },
    {
        "safety_criterion": "故障检测是否有防虚警处理，防虚警处理是否会满足告警处置的实时性要求？",
        "requirement": "系统应具备实时故障检测功能，并能有效防止虚警，确保告警信息的准确性和实时性。"
    },
    {
        "safety_criterion": "注意不在循环条件中使用函数调用，因为会导致低效能。",
        "requirement": "飞行控制软件应避免在关键控制循环中使用耗时的函数调用，以确保实时性能。"
    },
    {
        "safety_criterion": "注意尽量少使用递归函数调用，因为会导致程序可读性降低，必须要使用时，应检查出口条件，避免死循环。",
        "requirement": "飞行控制软件应避免使用递归函数调用，确保程序的可读性和稳定性。"
    },
    {
        "safety_criterion": "检查函数所有输入（包括所有参数及所有非参数）的有效性。",
        "requirement": "系统应能够对所有飞行控制指令和传感器输入数据进行有效性检查，确保其在预定义的范围内。"
    },
    {
        "safety_criterion": "当函数有返回值，应保证函数中每个出口有返回值，且返回值已赋值。",
        "requirement": "飞行控制软件应确保每个控制指令的执行结果都有明确的返回值，以验证指令执行的正确性和完整性。"
    },
    {
        "safety_criterion": "函数调用时，必须对所调用函数的错误返回值进行处理。",
        "requirement": "飞行控制软件在调用导航算法函数时，必须检查并处理函数的错误返回值，确保导航指令的正确性和安全性。"
    },
    {
        "safety_criterion": "注意sizeof函数返回的是对应操作数的字节大小，避免sizeof函数的实参是计算式、指针类型、类型名、数组名。",
        "requirement": "系统应确保在飞行控制软件中，所有涉及内存大小计算的操作均使用正确的数据类型和变量，避免使用计算式、指针类型、类型名或数组名作为sizeof函数的参数。"
    },
    {
        "safety_criterion": "函数调用时，应注意形参类型列表与实参类型列表一致、形参数目与实参数目一致。",
        "requirement": "飞行控制软件在调用导航算法函数时，必须确保输入参数的类型和数量与函数定义一致。"
    },
    {
        "safety_criterion": "应尽量不使用指针函数，因为会导致程序可读性降低。",
        "requirement": "飞行控制软件应避免使用指针函数，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "来源于外部输入函数的数据需进行验证，尤其是外部文件函数输入、外部人机接口函数输入。",
        "requirement": "系统应对接收到的地面控制指令和飞行数据进行验证，确保其来源合法且数据格式正确。"
    },
    {
        "safety_criterion": "来源于通信接口函数的数据需进行验证，需按照协议判断报文标识、报文IP地址进、数据边界、数据的异常值等。",
        "requirement": "系统应能够对来自地面站的指令数据进行验证，包括指令标识、发送方IP地址、数据边界和异常值，确保指令的完整性和合法性。"
    },
    {
        "safety_criterion": "同时诊断出多个故障时，相互之间的处理策略或上报策略是否有冲突？",
        "requirement": "系统应具备多故障诊断和处理能力，确保在同时检测到多个故障时，能够按照优先级顺序进行处理并上报，避免冲突。"
    },
    {
        "safety_criterion": "来源于全局变量的数据要谨慎使用，必要时进行验证。",
        "requirement": "系统应确保所有从全局变量获取的飞行控制参数在使用前进行有效性验证。"
    },
    {
        "safety_criterion": "尽量不使用、或谨慎的使用不同类型的变量的混合运算。",
        "requirement": "飞行控制软件应避免使用不同类型的变量进行混合运算，确保计算结果的准确性和可靠性。"
    },
    {
        "safety_criterion": "尽量不使用、或谨慎的使用变量移位、对布尔值变量的&和|操作。",
        "requirement": "飞行控制软件应避免使用变量移位和布尔值变量的按位与或操作，以确保控制逻辑的稳定性和可靠性。"
    },
    {
        "safety_criterion": "对变量移位的长度超过了机器字长。",
        "requirement": "系统应确保在处理飞行控制数据时，变量移位操作不会超出处理器的字长限制。"
    },
    {
        "safety_criterion": "求平方根、对数等时注意进行数据的非负、0检查。",
        "requirement": "系统应确保在计算飞行轨迹参数（如高度、速度）的平方根或对数时，输入数据必须为非负数。"
    },
    {
        "safety_criterion": "除法操作时注意对除数做非0、非接近于0检查。对负数求平方根。",
        "requirement": "飞行控制系统在进行导航计算时，应确保除法操作的除数不为0且不接近于0，避免计算错误导致的飞行异常。"
    },
    {
        "safety_criterion": "使用宏的计算式，注意使用必要的括号。",
        "requirement": "系统应确保在计算飞行轨迹和姿态控制参数时，使用宏定义的计算公式，并正确使用括号以保证计算的优先级和准确性。"
    },
    {
        "safety_criterion": "需要使用共享数据时，应注意先对修改该数据的方法进行保护，常见的方法就是用对象锁保护这个对象可变域的访问，域的访问被包含在同步方法或者同步块中，进去同步区域必须获得接受对象的锁。",
        "requirement": "飞行控制系统在多任务环境下，应确保对共享飞行数据的访问进行同步控制，防止数据竞争和不一致。"
    },
    {
        "safety_criterion": "避免出现可能的死锁。",
        "requirement": "系统应确保在多任务调度过程中，各任务之间的资源分配不会导致死锁，特别是在关键任务执行期间。"
    },
    {
        "safety_criterion": "避免出现未释放或遗漏释放锁的情况。",
        "requirement": "飞行控制系统应确保在任务切换或异常情况下，所有锁定的舵面和执行机构能够及时解锁或复位。"
    },
    {
        "safety_criterion": "多个故障间有关联时，一个故障是否会导致另外一个故障虚警",
        "requirement": "系统应具备故障关联分析功能，确保一个故障不会误触发其他故障警报。"
    },
    {
        "safety_criterion": "中断允许应先申请中断处理函数的各项资源。",
        "requirement": "系统应确保在申请中断处理时，先分配并锁定必要的资源，以保证中断处理的可靠性和安全性。"
    },
    {
        "safety_criterion": "严格执行“阻止—〉关中断—〉初始化—〉开中断—〉使能”的顺序。",
        "requirement": "飞行控制系统在执行关键操作时，应严格按照“阻止—〉关中断—〉初始化—〉开中断—〉使能”的顺序，确保系统稳定性和安全性。"
    },
    {
        "safety_criterion": "避免中断嵌套层数太多。",
        "requirement": "飞行控制系统应限制中断嵌套层数，确保关键任务的实时性和可靠性。"
    },
    {
        "safety_criterion": "3）避免出现未释放或遗漏释放锁的情况。",
        "requirement": "系统应确保在任务切换或异常情况下，所有飞行控制锁和数据同步锁能够及时释放。"
    },
    {
        "safety_criterion": "是否有明确的故障恢复机制，恢复机制是否合理？",
        "requirement": "系统应具备明确的故障恢复机制，确保在飞行器发生故障后能够自动重启并恢复到安全状态。"
    },
    {
        "safety_criterion": "系统的掉电恢复或跑飞复位机制启动后，是否能恢复到正常工作状态？ ",
        "requirement": "系统应具备在电源恢复后自动重启并恢复到正常飞行状态的功能。"
    },
    {
        "safety_criterion": "系统恢复后，记录的关键状态是否仍满足实时性要求？",
        "requirement": "系统恢复后，应确保关键飞行状态参数（如姿态、速度、位置）的记录和更新满足实时性要求。"
    },
    {
        "safety_criterion": "余度切换条件满足时，是否会导致当前正在运行的功能输出值出现异常？",
        "requirement": "系统应确保在余度切换过程中，飞行控制指令的输出值保持稳定，避免异常波动。"
    },
    {
        "safety_criterion": "所有余度均出现故障时，软件是否有正确处理？",
        "requirement": "系统应具备在所有冗余通道均出现故障时，自动切换至安全模式并发出故障警报的功能。"
    },
    {
        "safety_criterion": "余度切换时间过长，软件是否有正确处理？",
        "requirement": "系统应确保在主系统故障时，备用系统能在100毫秒内无缝接管并恢复正常运行。"
    },
    {
        "safety_criterion": "接口数据表征一个关键变量（如故障字、故障计数、计时、工作阶段、工作状态等）。软件掉电重启，对重启前后的接口数据取值进行检查，分析重启后接口数据取值重置为初始值时输出的正确性",
        "requirement": "系统应能够在软件掉电重启后，正确重置关键飞行参数（如故障字、故障计数、计时、工作阶段、工作状态等），并确保重启后的输出正确无误。"
    },
    {
        "safety_criterion": "若余度切换条件满足时，余度切换失败，软件是否有正确处理？",
        "requirement": "系统应具备在余度切换失败时，自动切换至备用系统并记录故障信息的功能。"
    },
    {
        "safety_criterion": "各功能点控制逻辑之间的时序关系、约束关系、并发关系和组合关系是否正确",
        "requirement": "系统应确保导航与控制功能之间的时序和约束关系正确，以保证飞行任务的顺利执行。"
    },
    {
        "safety_criterion": "若多个功能点可以同时执行，则分析这些功能点是否可能对同一执行机构进行操作；",
        "requirement": "系统应确保在多个控制指令同时发出时，不会对同一执行机构（如舵机、发动机）产生冲突操作。"
    },
    {
        "safety_criterion": "若多个功能点之间存在时序关系，则分析是否可能存在异常路径，使得功能点间的时序关系无法得到准确实现。",
        "requirement": "系统应确保导航和控制指令在不同飞行阶段之间的时序关系准确无误，防止因时序异常导致的控制失效。"
    },
    {
        "safety_criterion": "各模态的进入条件、退出条件、约束条件是否充分、准确？",
        "requirement": "系统应确保在不同飞行模态（如巡航、爬升、下降）之间的切换过程中，进入条件、退出条件和约束条件的充分性和准确性。"
    },
    {
        "safety_criterion": "各模态的进入条件和退出条件是否一致？",
        "requirement": "系统应确保在不同飞行模态之间的切换过程中，进入条件和退出条件的一致性，以防止模态切换错误。"
    },
    {
        "safety_criterion": "可相互迁移的工作模态是否存在由同一工作模态同时可迁移至多个工作模态、模态间迁移时不满足时序约束或条件约束等异常情况？",
        "requirement": "飞行控制系统应确保在不同飞行模态之间切换时，满足所有时序和条件约束，避免模态切换异常。"
    },
    {
        "safety_criterion": "分析不可相互迁移的工作模态之间是否存在潜在的异常路径，使得不可相互迁移的工作模态发生状态迁移？",
        "requirement": "系统应确保在不同飞行模式之间切换时，不存在未授权的模式转换路径，以防止意外的模式切换。"
    },
    {
        "safety_criterion": "出现异常外部因素情况（例如高海况、恶劣气象条件等）时，软件是否进行了相应的判断和处理？",
        "requirement": "飞行控制系统应能够在检测到高海况或恶劣气象条件时，自动调整飞行参数以确保飞行安全。"
    },
    {
        "safety_criterion": "功能执行过程在不同运行场景下是否可能导致危险？",
        "requirement": "系统应能够在不同飞行模式（如自动、手动、应急）下确保飞行控制指令的安全性和一致性。"
    },
    {
        "safety_criterion": "多个功能或多个状态具有同一个接口数据，不同功能/状态对输入初始值的要求不同。对这一接口数据的初始值进行检查，分析接口数据初始值“大于功能/状态要求、小于功能/状态要求”等情况下输出的正确性",
        "requirement": "系统应能够根据不同的飞行模式（如巡航、着陆、起飞等）对相同的接口数据（如高度、速度等）进行初始值校验，确保其符合当前模式的要求。"
    },
    {
        "safety_criterion": "系统的各种运行场景切换过程中，各项控制功能所可能引发的危险？",
        "requirement": "系统在不同飞行模式（如起飞、巡航、着陆）切换时，应确保所有控制功能（如自动驾驶、导航、通信）的连续性和稳定性，防止因模式切换引发的控制失效或误操作。"
    },
    {
        "safety_criterion": "可能与软件相关的系统安全性要求是否已经在软件需求或设计文档中得到充分且准确的实现？",
        "requirement": "飞行控制软件应确保所有与安全性相关的参数（如姿态角、速度、高度等）在需求和设计文档中得到充分且准确的定义和实现。"
    },
    {
        "safety_criterion": "危险命令必须只能由控制应用程序、机务人员、地面或者有权的控制执行者提出",
        "requirement": "飞行控制系统应确保所有危险命令（如紧急降落、发动机关闭等）只能由授权的地面控制站或机务人员发出。"
    },
    {
        "safety_criterion": "在安全执行被认为是危险命令之前，必须满足执行的先决条件（正确的模式、正确的配置、组件可用、合适的顺序和参数在范围之内）",
        "requirement": "飞行控制系统在执行关键操作（如姿态调整、发动机点火）前，必须验证当前模式、配置、组件状态和参数范围符合安全要求。"
    },
    {
        "safety_criterion": "撤销或取消命令需要经过多个操作步骤",
        "requirement": "飞行控制系统应具备多重确认机制，确保撤销或取消关键指令（如紧急降落、航向变更等）需经过多个操作步骤确认。"
    },
    {
        "safety_criterion": "执行危险的命令的软件必须通知发起者、地面操作人员、被授权的控制执行者或者提供执行失败的原因",
        "requirement": "系统应能够实时通知地面控制中心和授权操作员关于危险命令的执行状态，包括成功或失败的原因。"
    },
    {
        "safety_criterion": "所有和危险命令关联的软件约束只能由唯一的检验器（检验准则）",
        "requirement": "系统应确保所有与危险操作（如发动机点火、姿态调整等）相关的软件指令必须通过唯一的验证模块进行验证。"
    },
    {
        "safety_criterion": "每一个和危险关联的软件约束命令的使用规则和合法值定义必须是一致的",
        "requirement": "系统应确保所有与飞行安全相关的软件约束命令（如速度限制、高度限制等）的使用规则和合法值定义一致。"
    },
    {
        "safety_criterion": "在危险命令相关的软件约束没有激活的情况下，软件必须具备重新控制受约会苏操作的能力",
        "requirement": "系统应能够在关键飞行控制命令（如紧急着陆、姿态调整等）的软件约束失效时，自动恢复对飞行器的控制。"
    },
    {
        "safety_criterion": "对于一个确定的危险命令执行前应当满足安全执行的前提条件",
        "requirement": "在执行发动机点火命令前，系统应验证所有相关传感器状态正常且无故障报警。"
    },
    {
        "safety_criterion": "工作状态发生转移时，对功能接口数据的取值进行检查，分析“取值发生变化或者取值区间发生变化”等情况下输出的正确性",
        "requirement": "系统应能够实时监测并验证飞行控制参数（如姿态角、速度、高度等）在不同飞行模式切换时的取值和区间变化，确保输出的正确性和稳定性。"
    },
    {
        "safety_criterion": "危险命令应仅由单一的控制软件功能发出",
        "requirement": "飞行控制系统应确保所有危险命令（如紧急降落、发动机关闭等）仅由主控制软件模块发出。"
    },
    {
        "safety_criterion": "软件必须设计或在上电进行系统级检查，以便在对安全关键功能包括由软件控制的硬件通电之前验证该系统是安全的并正确的运行，必须用软件进行定期测试以监视系统的安全状态",
        "requirement": "飞行控制系统在每次启动时必须进行系统级自检，确保所有安全关键硬件和软件组件正常运行，并在飞行过程中定期进行健康监测。"
    },
    {
        "safety_criterion": "软件（包括固件）的上电自检利用到的任何可替换的单元或者组件必须只能用于这个单独系统的处理过程",
        "requirement": "航天器的飞行控制软件在上电自检时，必须确保所有可替换的组件仅用于该航天器的处理过程，不得与其他系统混用。"
    },
    {
        "safety_criterion": "用于任何可替换单元或部件的软件（包括固件）上电自检，必须结束在安全状态",
        "requirement": "系统应确保在任何可替换单元或部件（如传感器、控制器）上电自检时，能够自动检测并报告故障，并在检测到故障时进入安全模式。"
    },
    {
        "safety_criterion": "软件必须能够初始化、开始和重启可替代单元到一个安全的状态",
        "requirement": "飞行控制系统在初始化、开始和重启时，应确保所有关键子系统（如导航、通信、推进）处于安全状态。"
    },
    {
        "safety_criterion": "软件开机自检时，须限于由接受的开机自检组件控制的单一的系统进程",
        "requirement": "飞行控制软件在启动时应进行自检，确保所有关键组件和子系统正常运行，且自检过程由单一的系统进程控制。"
    },
    {
        "safety_criterion": "只输入一次数据\n确保一个用户只需对特定数据输入一次，之后计算机可以根据相同或不同任务的需要存取这些数据",
        "requirement": "飞行任务管理系统应支持用户一次性输入飞行任务参数，系统自动保存并在后续任务中重复使用这些参数。"
    },
    {
        "safety_criterion": "通过主显示器输入数据\n当数据输入对于用户任务来源非常重要时，输入的数据应当显示在用户的主显示器上",
        "requirement": "飞行控制界面应实时显示关键飞行参数和操作指令，确保飞行员能够及时查看和确认输入数据。"
    },
    {
        "safety_criterion": "数据输入过程要有反馈\n对数据输入过程中的所有用户活动提供显示的反馈，一步一步显示输入的数据",
        "requirement": "飞行控制系统应实时显示所有飞行参数的输入状态，并在每个参数输入完成后提供明确的反馈。"
    },
    {
        "safety_criterion": "快速响应\n确保计算机快速响应数据输入活动，这样用户不会因为计算机响应的延迟延缓进度；对于正常的操作，反馈的延迟不能超过0.2s",
        "requirement": "飞行控制系统应确保在接收到飞行员或自动系统的指令后，不超过0.2秒内完成响应并反馈控制结果。"
    },
    {
        "safety_criterion": "工作状态发生转移时，对功能接口数据的取值进行检查，分析“取值未发生变化”等情况下输出的正确性",
        "requirement": "系统应能够在飞行模式切换时，确保导航参数（如航向、高度、速度）保持一致性和准确性。"
    },
    {
        "safety_criterion": "单一方法输入数据。\n设计数据输入处理和显示，使得一个用户可以使用一种方法输入而不用转换到其他方法",
        "requirement": "飞行控制面板应支持飞行员通过单一输入方法（如触摸屏或物理按键）直接输入和调整飞行参数，无需切换输入模式。"
    },
    {
        "safety_criterion": "为数据输入定义显示区域\n数据输入时只允许在电子显示器确定区域显示，如填写进表格，提供明确的输入区域的定义",
        "requirement": "飞行控制系统的数据显示和输入应限定在指定的电子显示器区域，确保数据输入的准确性和可追溯性。"
    },
    {
        "safety_criterion": "一致的数据改写方法\n关键数据输入时，始终允许用户在必要时（包括显示的缺省值）使用删除和插入方法更改先前的输入；如果数据改变在某些时候通过字符替换（改写）完成，则该方法应该始终可用。",
        "requirement": "飞行控制软件应提供一致的数据输入方法，允许操作员在必要时通过删除和插入方式更改关键飞行参数。"
    },
    {
        "safety_criterion": "用户节奏的数据输入\n允许用户按自己的节奏输入数据，而不是通过计算机进程或是外部活动在控制节奏",
        "requirement": "系统应允许地面控制人员按自己的节奏输入飞行指令，确保指令的准确性和及时性。"
    },
    {
        "safety_criterion": "明确的输入活动\n始终要求一个用户执行一个明确的输入活动来开始输入数据的过程，不要以其他活动的副作用的方式开始这个过程",
        "requirement": "飞行控制系统应要求飞行员通过明确的输入指令来启动导航数据的更新过程，确保不会因其他操作的副作用而自动启动。"
    },
    {
        "safety_criterion": "输入键标号\n明确的标记输入键来表明他的功能",
        "requirement": "驾驶舱控制面板上的每个输入键应有明确的标记，以指示其功能，确保飞行员在紧急情况下能够快速准确地操作。"
    },
    {
        "safety_criterion": "明确的取消活动\n需要一个用户执行一个明确的活动来取消一个数据的输入；数据取消不应该以其他活动副作用的方式完成",
        "requirement": "飞行控制系统应提供明确的用户界面选项，允许飞行员在紧急情况下手动取消导航数据的输入。"
    },
    {
        "safety_criterion": "数据输入完成的反馈\n如果输入成功，确保计算机可以通过一个确认消息对数据输入处理的完成进行响应；或者不成功时有错误提示",
        "requirement": "飞行控制系统应能够实时确认导航数据的输入状态，成功时发送确认消息，失败时提供错误提示。"
    },
    {
        "safety_criterion": "重复数据输入的反馈\n对一个由持续处理完成的反复数据输入，需要通过在显示屏重新生成输入的数据，并自动清除为下一次输入做准备来表明成功完成一次输入",
        "requirement": "飞行控制系统的数据显示模块应能够实时显示并确认每次导航数据的输入，并在输入成功后自动清除输入框，准备下一次输入。"
    },
    {
        "safety_criterion": "改变数据时的反馈\n如果一个用户需要改变（删除）一个现在没有显示的数据项目，在确定改变之前提供给用户显示数值的选项",
        "requirement": "飞行控制系统应提供实时数据更新和确认功能，确保在更改关键飞行参数（如航向、高度、速度）时，用户能够查看当前数值并确认更改。"
    },
    {
        "safety_criterion": "对接口数据的安全值进行检查，分析“未设置安全值”等情况下输出的正确性",
        "requirement": "系统应能够对飞行控制指令的安全值进行检查，确保在未设置安全值的情况下，飞行器不会执行危险操作。"
    },
    {
        "safety_criterion": "保持数据项目简单\n对于编码数据、数字等，保持数据输入简短，单独项目的长度不会超过5-7个字符",
        "requirement": "飞行控制系统应确保所有关键参数（如高度、速度、航向）的输入数据不超过5-7个字符，以减少输入错误和提高数据处理效率。"
    },
    {
        "safety_criterion": "分割长数据项目\n当必须输入一个长数据项目时。长数据项目应当为了输入和显示分割成较短的符号组",
        "requirement": "飞行任务数据（如航迹、指令序列）应分割成较短的数据段，以确保输入和显示的准确性和可读性。"
    },
    {
        "safety_criterion": "可选的缩写\n允许专家用户使用可选择的长度数据项目的缩写来简化关键数据输入（当这些数据不会产生歧义时）",
        "requirement": "系统应支持专家用户使用缩写来简化飞行任务参数的输入，确保在不产生歧义的情况下提高操作效率。"
    },
    {
        "safety_criterion": "有区别的缩写\n当定义缩写或其他的代码来缩短输入数据时，选择有区别的那些，以避免相似的两者之间产生混淆",
        "requirement": "系统应使用有区别的缩写来标识不同的飞行模式和状态，以避免混淆和误操作。"
    },
    {
        "safety_criterion": "简单的缩写规则\n当定义缩写是，确认某些简单的缩写规则，确保用户者可以理解这些规则",
        "requirement": "系统应使用标准化的缩写规则来定义和记录飞行任务参数和状态代码，确保所有操作人员能够准确理解和使用。"
    },
    {
        "safety_criterion": "对缩写规则来说有最小例外\n只有为清晰性而必须时，才使用特殊的的缩写规则，（例如，没有统一的规则时）\n",
        "requirement": "在飞行控制软件中，应使用统一的缩写规则，除非为了提高代码的可读性和清晰性，才使用特殊的缩写规则。"
    },
    {
        "safety_criterion": "与缩写规则的偏差最小\n当一个缩写必须与一贯的规则偏差时，尽量减少偏差程度",
        "requirement": "系统应确保在使用缩写时，与标准命名规则的偏差最小，以减少操作员的误解和操作错误。"
    },
    {
        "safety_criterion": "固定的缩写长度\n使缩写长度相同，在能确保缩写独一无二时，缩写尽可能短",
        "requirement": "系统应使用固定长度的缩写来标识不同的飞行任务和操作模式，确保缩写唯一且尽可能简短。"
    },
    {
        "safety_criterion": "阐明没认出的缩写\n当电脑不能识别一个缩写的数据输入时，必要时询问用户解决任何不明确的问题",
        "requirement": "飞行控制系统应具备识别和处理未知缩写的导航数据输入功能，必要时通过人机交互界面提示操作员进行确认。"
    },
    {
        "safety_criterion": "提示数据输入\n提供数据输入的需要格式和可接受值的提示",
        "requirement": "系统应提供明确的提示信息，指导操作员输入正确的飞行参数和指令格式。"
    },
    {
        "safety_criterion": "对接口数据的安全值进行检查，分析“安全值为值域范围外的异常值”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理卫星通信链路中出现的异常值，确保数据传输的完整性和可靠性。"
    },
    {
        "safety_criterion": "通过单按键进行字符输入\n允许用户通过单按一个适当标记的键输入一个数据项目的每一个字符。",
        "requirement": "飞行控制面板应支持通过单按键输入关键飞行参数，如航向、高度和速度。"
    },
    {
        "safety_criterion": "最少转换按键\n设计数据输入的处理以使转换按键的需求最小化",
        "requirement": "飞行控制系统应设计简化的人机交互界面，确保飞行员在紧急情况下能够快速、准确地进行关键参数的输入和调整。"
    },
    {
        "safety_criterion": "大小写情况等价\n对于编码数据的输入，等价对待大小写字符",
        "requirement": "地面控制站应能够接收并处理来自卫星的命令和数据，无论其大小写格式如何，确保指令的正确执行。"
    },
    {
        "safety_criterion": "小数点可选\n允许在一个整数的结尾可选择的输入或者省略一个小数点作为等效替代",
        "requirement": "导航系统应支持在输入飞行参数时，允许用户选择性地输入或省略小数点，以提高操作便捷性。"
    },
    {
        "safety_criterion": "起始零可选\n对于通常的数字数据，允许可选的输入或者省略起始零作为等效替代",
        "requirement": "系统应支持导航数据输入时省略起始零，确保数据解析的正确性和一致性。"
    },
    {
        "safety_criterion": "单一或多个空格等效\n在数据输入时单一或多个空格等效对待；不要求用户计算空格数量",
        "requirement": "地面控制站软件应能够处理来自不同传感器的数据输入，无论数据中包含单个或多个空格，均能正确解析并处理。"
    },
    {
        "safety_criterion": "辅助输入分层数据\n如果一个用户必须输入分层数据，在某些数据将会从属于其他数据的地方，提供计算机辅助来帮助用户明确分层结构里的关系",
        "requirement": "飞行任务规划系统应提供辅助工具，帮助用户明确任务参数之间的分层关系，确保任务参数的正确性和一致性。"
    },
    {
        "safety_criterion": "软件在执行自动的危险或安全处理后，立即通知机务、操作员和授权的控制执行者",
        "requirement": "飞行控制系统在执行自动紧急降落或安全处理后，应立即通知地面控制中心、飞行员和授权的维护人员。"
    },
    {
        "safety_criterion": "当软件被告知或探测到能够引起系统失效的硬件失效或软件故障、以及配置和当前的运行状态不一致时，软件必须通知机务、操作员和授权的控制执行者",
        "requirement": "系统应能够实时检测并报告任何可能导致飞行任务失败的硬件故障或软件异常，并立即通知地面控制中心、飞行员和维护人员。"
    },
    {
        "safety_criterion": "自动的恢复动作必须通知机务、操作员和授权的控制执行者，同时不再需要对机务、操作员和授权的控制者继续执行恢复动作做出响应。",
        "requirement": "系统应能够自动检测并恢复飞行控制系统的故障，并在恢复后立即通知地面控制站、飞行员和授权的维护人员。"
    },
    {
        "safety_criterion": "对接口数据中具有连续型值域的数据位进行检查，分析数据位取值为“边界值、极大极小值”等情况下输出的正确性",
        "requirement": "系统应能够对飞行控制指令中的连续型参数（如姿态角、速度等）进行边界值和极值检查，确保输出的控制指令在安全范围内。"
    },
    {
        "safety_criterion": "同一个接口数据存在多个故障处理策略，对同一个接口数据下不同故障处理策略要求的安全值进行检查，分析多个故障处理策略的安全值相同等情况下输出的正确性",
        "requirement": "系统应能够针对同一飞行控制接口数据，实施多种故障处理策略，并确保在不同策略下输出的安全值一致。"
    },
    {
        "safety_criterion": "如果先决条件未被满足，软件必须拒绝执行命令，同时向机务、操作员和授权的控制执行者告警",
        "requirement": "飞行控制系统在检测到关键参数（如高度、速度、姿态角）未达到预设安全范围时，应拒绝执行飞行任务指令，并向地面控制站、飞行员和授权的维护人员发送告警信息。"
    },
    {
        "safety_criterion": "软件应给机务、操作员和授权的控制执行者提供所有可获得的软件控制约束",
        "requirement": "系统应为机务人员、操作员和授权控制执行者提供所有可用的飞行控制参数和限制条件。"
    },
    {
        "safety_criterion": "软件必须接受和处理机务、操作员和授权的控制执行者激活或解除软件控制约束的命令",
        "requirement": "系统应能够接收并处理地面控制中心和授权操作员发送的指令，以激活或解除飞行控制约束。"
    },
    {
        "safety_criterion": "软件必须向机务、操作员和授权的控制执行者提供警告和报警情况",
        "requirement": "系统应能够实时向地面控制站和机载操作员发送飞行器状态异常的警告和报警信息。"
    },
    {
        "safety_criterion": "软件必须为机务或操作员提供强制执行一切自动的保护、隔离或切换的功能",
        "requirement": "系统应提供自动保护功能，确保在检测到异常时自动隔离故障部件并切换到备用系统。"
    },
    {
        "safety_criterion": "软件必须为机务或操作员提供强制结束任何自动的保护、隔离或者切换的功能",
        "requirement": "系统应提供机务或操作员手动终止自动保护、隔离或切换功能的机制。"
    },
    {
        "safety_criterion": "软件必须为机务或操作员提供对任何自动的保护、隔离或切换恢复到先前状态或配置的功能",
        "requirement": "系统应提供机务或操作员手动恢复飞行控制系统的保护、隔离或切换功能，确保在自动模式失效时能够迅速恢复到先前的安全状态或配置。"
    },
    {
        "safety_criterion": "软件必须为机务或操作员提供强制覆盖自动保护、隔离或切换的功能",
        "requirement": "系统应提供机务或操作员手动覆盖自动保护、隔离或切换功能的能力，以应对紧急情况。"
    },
    {
        "safety_criterion": "需要操作的软件功能的必须要通过授权认可",
        "requirement": "飞行控制系统软件的任何操作必须经过授权认证，确保只有授权人员才能进行关键操作。"
    },
    {
        "safety_criterion": "软件必须设计成使操作员可以用单一的行动解除当前处理，并使系统恢复到一个已设计的安全状态",
        "requirement": "飞行控制系统应提供紧急停止功能，允许操作员通过单一按钮操作使系统立即停止当前任务并恢复到安全待机状态。"
    },
    {
        "safety_criterion": "同一个接口数据存在多个故障处理策略，对同一个接口数据下不同故障处理策略要求的安全值进行检查，分析多个故障处理策略的安全值不同等情况下输出的正确性",
        "requirement": "系统应能够根据不同的故障处理策略，动态调整飞行控制参数，并确保在不同策略下输出的控制指令正确无误。"
    },
    {
        "safety_criterion": "软件应当提供给机务或操作员与危险命令有关的软件控制状态",
        "requirement": "系统应提供实时显示和记录关键飞行控制命令的状态，确保机务或操作员能够随时查看和确认危险命令的执行状态。"
    },
    {
        "safety_criterion": "软件必须能检测不正确的操作员录入或操作，并防止由于该差错的结果而执行安全关键功能",
        "requirement": "飞行控制系统应能够检测并拒绝无效的飞行员指令，防止因误操作导致的飞行路径偏离或系统故障。"
    },
    {
        "safety_criterion": "重写命令需要操作员至少两次独立的行动",
        "requirement": "飞行控制系统应要求操作员进行两次独立的确认动作，以执行关键飞行参数的重写命令。"
    },
    {
        "safety_criterion": "软件应为机务或操作员提供自动终止或禁用自动防护的功能",
        "requirement": "系统应提供机务或操作员手动终止或禁用自动驾驶功能的选项，以确保在紧急情况下能够立即接管控制。"
    },
    {
        "safety_criterion": "安全关键功能应该能够被检测、隔离和恢复，以防止灾难或严重级危险事件的发生",
        "requirement": "飞行控制系统应具备实时监测和自动隔离故障传感器的功能，并能够在检测到故障后自动切换到备用传感器，确保飞行安全。"
    },
    {
        "safety_criterion": "软件必须为已知的安全关键功能，视危险程度24小时执行自动的失效检测、隔离和恢复",
        "requirement": "飞行控制系统应具备24小时不间断的自动失效检测、隔离和恢复功能，确保关键飞行任务的安全执行。"
    },
    {
        "safety_criterion": "失效检测、隔离和恢复软件必须是存在于可用的、无失效的检测平台上，这个平台和被监视功能的平台式区别开的",
        "requirement": "飞行控制系统应具备独立的故障检测与隔离模块，该模块需运行在与主控制模块分离的硬件平台上，以确保故障检测的可靠性和独立性。"
    },
    {
        "safety_criterion": "软件应该在导致严重级危险事件的时间之内处理必要命令",
        "requirement": "飞行控制系统必须在50毫秒内响应并处理所有关键飞行指令，以防止潜在的严重飞行事故。"
    },
    {
        "safety_criterion": "软件必须提供独立并且唯一的命令来控制每个软件可控约束",
        "requirement": "飞行控制系统应提供独立且唯一的命令来控制每个舵面和发动机推力。"
    },
    {
        "safety_criterion": "软件必须同时具备识别和上报出每个和危险命令相关的软件约束",
        "requirement": "飞行控制软件应能够识别并上报所有与危险命令（如紧急着陆、发动机关闭等）相关的软件约束。"
    },
    {
        "safety_criterion": "对接口数据的安全值进行检查，对比安全值与接口数据未故障时的正常取值，分析安全值与未故障正常取值之差过大时输出的正确性",
        "requirement": "系统应能够实时监测和验证飞行控制指令的安全值，确保其与正常飞行参数的偏差在安全范围内。"
    },
    {
        "safety_criterion": "软件必须向机务、操作员和控制执行者的危险命令有关联的软件约束提供当前状态。",
        "requirement": "飞行控制系统应能够实时向地面控制站和操作员提供当前的飞行状态和危险命令的软件约束状态。"
    },
    {
        "safety_criterion": "如果一个自动的序列在软件危险命令关联的约束激活之前已经开始执行，那么它必须在软件约束得到执行之前全部完成",
        "requirement": "飞行控制软件应确保在危险命令（如紧急降落）的约束条件激活之前，所有正在进行的自动序列（如自动驾驶导航）必须完成。"
    },
    {
        "safety_criterion": "在取消操作之后，软件约束的状态必须保持不变",
        "requirement": "在任务中止或取消后，飞行控制系统应保持当前飞行状态参数不变，确保飞行器的安全和稳定。"
    },
    {
        "safety_criterion": "软件必须提供支持安全关键功能的出错处理",
        "requirement": "飞行控制系统应具备实时监测和处理关键传感器故障的能力，确保在传感器故障时能够安全切换到备用传感器或进入安全模式。"
    },
    {
        "safety_criterion": "软件必须提供故障容错机制以防止错误在可替代的单元接口交叉传播",
        "requirement": "飞行控制系统应具备冗余设计，确保在单个组件故障时，备用组件能够无缝接管，保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "危险的负载必须给核心软件系统提供失效情形和数据，核心软件系统监控负载状态和报告失效",
        "requirement": "系统应能够实时监控发动机负载状态，并在检测到异常时向核心飞行控制系统报告失效信息。"
    },
    {
        "safety_criterion": "对于系统只使用软件来减轻危险的情况，软件必须需要两个独立的命令通知来使系统执行严重或致命危险的动作",
        "requirement": "飞行控制系统在执行关键操作（如发动机点火、姿态调整等）时，必须接收到两个独立的命令通知，以确保操作的正确性和安全性。"
    },
    {
        "safety_criterion": "软件必须需要两个独立的操作动作去初始或者终止可能导致严重危险的系统功能",
        "requirement": "飞行控制系统应具备双重确认机制，确保关键操作（如发动机点火、紧急降落等）的启动或终止需经过两次独立的指令确认。"
    },
    {
        "safety_criterion": "软件必须需要三个独立的操作动作去初始或者终止可能导致致命危险的系统功能",
        "requirement": "飞行控制系统必须通过三个独立的操作动作来初始化或终止可能导致致命危险的系统功能，如紧急降落或发动机关闭。"
    },
    {
        "safety_criterion": "软件必须提供正确的安全关键命令的处理顺序（包括时间）",
        "requirement": "飞行控制软件必须确保导航和控制指令的执行顺序和时间严格符合预定的安全关键任务要求。"
    },
    {
        "safety_criterion": "对接口数据的缺省值进行检查，分析“未设置缺省值”等情况下输出的正确性",
        "requirement": "系统应能够确保在未设置缺省值的情况下，飞行控制参数（如姿态角、速度等）的输出仍保持在安全范围内。"
    },
    {
        "safety_criterion": "软件必须终止在安全的系统状态",
        "requirement": "在紧急情况下，飞行控制系统应能够自动切换到安全模式，确保飞行器稳定并执行预设的安全降落程序。"
    },
    {
        "safety_criterion": "在硬件失效时，软件故障引起系统失效，或者软件探测到配置和当前的运行状态不一致时，软件必须有能力将系统置于安全状态",
        "requirement": "在关键硬件组件（如导航系统、通信模块）失效时，软件应自动将飞行器切换到安全模式，确保飞行器保持稳定并尝试恢复通信。"
    },
    {
        "safety_criterion": "视关键等级而定的危险和安全的实时处理不适合人为干预，必须是自动化的",
        "requirement": "系统应具备自动检测和处理关键飞行参数异常的能力，确保在无人干预的情况下实时调整飞行状态。"
    },
    {
        "safety_criterion": "无用或者非正式的代码不能造成关键或灾难性危险",
        "requirement": "飞行控制软件应确保所有代码均为正式且经过验证，禁止使用未授权或非正式的代码，以防止对飞行安全造成关键或灾难性影响。"
    },
    {
        "safety_criterion": "所有的安全关键元素（需求、设计、代码和接口）都要标识为“安全关键”",
        "requirement": "所有涉及飞行控制和导航系统的软件模块和接口必须标识为“安全关键”，并进行严格的安全审查和测试。"
    },
    {
        "safety_criterion": "检测到不安全条件时，软件必须在软件控制下的硬件子系统项返回到某个规定的安全状态",
        "requirement": "在检测到导航系统故障时，自动驾驶仪应立即切换至备份导航模式并确保飞行器返回预设的安全着陆点。"
    },
    {
        "safety_criterion": "完成测试和被训练以后，在测试或训练期间被去除，禁止使用，或旁路的安全互锁的恢复必须在能重新开始或运行之前由软件进行验证",
        "requirement": "在航天器的地面测试和训练完成后，所有安全互锁必须由软件验证其恢复状态，确保其功能正常后才能重新启动或运行。"
    },
    {
        "safety_criterion": "软件必须保证记录所有检测到的系统错误。安全关键例程中的错误必须被突出，并必须使他们出现之后尽快引起操作员注意",
        "requirement": "飞行控制系统应实时记录所有检测到的系统错误，并在安全关键例程中检测到错误时，立即通过视觉和听觉警报通知操作员。"
    },
    {
        "safety_criterion": "关键功能的软件控制必须具有反馈机制，该机制给出该功能出现的正向指示",
        "requirement": "飞行控制系统应具备实时反馈机制，确保导航和控制指令的执行状态能够被准确监控和记录。"
    },
    {
        "safety_criterion": "系统和软件必须设计成确保在峰值负载条件下设计安全性要求不会被违反",
        "requirement": "飞行控制系统在最大任务负载下，应确保所有安全关键参数（如姿态、速度、高度）的实时监控和调整，以防止任何潜在的飞行风险。"
    },
    {
        "safety_criterion": "对接口数据的缺省值进行检查，分析“缺省值为值域范围外的异常值”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理飞行控制参数的缺省值，确保在缺省值为值域范围外的异常值时，系统输出仍保持正确性和安全性。"
    },
    {
        "safety_criterion": "软件必须设计成在电源故障或者断电情况下保证安全，有序地关闭系统，使得不会产生潜在的不安全状态",
        "requirement": "飞行控制系统在电源故障或断电情况下，应能够安全、有序地关闭，确保飞行器不会进入不安全状态。"
    },
    {
        "safety_criterion": "软件必须设计成能防止未被授权的系统或者子系统交互启动或继续安全关键功能指令序列。",
        "requirement": "飞行控制系统应具备防止未授权的地面站或子系统启动或继续关键飞行操作指令的能力。"
    },
    {
        "safety_criterion": "系统设计必须防止未被授权或无意的存取或修改软件和目标代码，包括防止代码的自修改。",
        "requirement": "飞行控制系统应具备防止未授权访问和修改飞行控制软件及目标代码的机制，确保代码的完整性和安全性。"
    },
    {
        "safety_criterion": "软件设计中必须考虑已知的部件失效模式，并将检查手段设计到软件中以检测失效",
        "requirement": "飞行控制系统应具备实时监测关键传感器和执行机构的健康状态，并在检测到失效时自动切换到备用系统。"
    },
    {
        "safety_criterion": "安全关键计算系统功能中的判定语句必须不依靠全一或全零的输入，特别当这个信息得自外部传感器时",
        "requirement": "飞行控制系统应确保所有安全关键计算中的判定语句不依赖于全一或全零的传感器输入。"
    },
    {
        "safety_criterion": "要求两个或多个来自软件的安全关键信号的外部功能必须不从单个输入/输出寄存器或缓存器接受全部必须的信号",
        "requirement": "飞行控制系统应确保来自不同传感器的冗余安全关键信号（如姿态、速度、高度）不共用同一输入/输出寄存器或缓存器。"
    },
    {
        "safety_criterion": "软件的满刻度和另表示必须都与任何数字到模拟、模拟到数字、数字到同步和同步到数字转换器完全兼容",
        "requirement": "飞行控制系统应确保所有数字到模拟和模拟到数字转换器的满刻度和另表示与系统中的其他组件完全兼容，以保证信号的准确传输和处理。"
    },
    {
        "safety_criterion": "必须要求两个或多个不同的操作员动作重启任何潜在危险的功能或功能序列，该要求的动作必须设计或使无任意动作的可能性最小，并必须查阅顺序是否正确。",
        "requirement": "飞行控制系统应设计为需要两个或多个不同操作员的独立动作才能重启任何潜在危险的飞行模式或序列，确保重启动作的顺序正确且无任意动作的可能性最小。"
    },
    {
        "safety_criterion": "软件必须能鉴别有效和无效（即虚假）的外部或内部中断",
        "requirement": "飞行控制系统应能够鉴别并过滤掉虚假的传感器中断信号，确保飞行控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "存储安全关键数据所用文件必须是唯一的并有单一目的",
        "requirement": "飞行控制软件应确保每个存储关键飞行数据的文件都是唯一的，并且每个文件仅用于存储特定类型的数据。"
    },
    {
        "safety_criterion": "对接口数据的周期进行检查，分析输入取值周期为“大于规定周期、小于规定周期，极大极小值”等情况下输出的正确性",
        "requirement": "系统应能够实时监测和验证导航数据的更新周期，确保其在规定范围内，以保证飞行控制的准确性和稳定性。"
    },
    {
        "safety_criterion": "用来存储或传输安全关键信息的文件必须在使用之前和之手被初始化到一个已知状态。数据传输和存储应该尽可能加以审核，使能实现系统运行的追溯性",
        "requirement": "飞行控制系统应确保所有关键飞行数据（如姿态、速度、位置等）在每次任务开始前和结束后被初始化到已知状态，并记录所有数据传输和存储过程以实现追溯性。"
    },
    {
        "safety_criterion": "先决条件未得到满足，软件应当拒绝该命令",
        "requirement": "飞行控制系统应能够在导航参数未达到预设条件时，拒绝执行飞行任务指令。"
    },
    {
        "safety_criterion": "被一个重载（覆盖）忽略或改变的软件约束应该恢复到原来的状态。",
        "requirement": "在飞行控制系统中，任何被临时重载或覆盖的软件约束应在任务完成后自动恢复到初始状态。"
    },
    {
        "safety_criterion": "实时性的危险进程和防护进程，人为干预可能无法及时提供安全处理，应自动化进行",
        "requirement": "系统应具备自动检测和响应飞行器关键系统故障的能力，确保在无人干预的情况下能够及时采取安全措施。"
    },
    {
        "safety_criterion": "软件应提供错误处理以支持关键功能",
        "requirement": "飞行控制系统应具备错误检测和恢复机制，确保在关键任务执行过程中出现软件故障时能够自动恢复并继续正常运行。"
    },
    {
        "safety_criterion": "系统设计必须不允许检测到的不安全状态被回避",
        "requirement": "飞行控制系统应具备实时监测和响应功能，确保在检测到任何不安全状态时立即采取措施，防止系统进入危险状态。"
    },
    {
        "safety_criterion": "输入/输出寄存器和端口决不能既用于安全关键功能又用于非安全关键功能，除非同样的安全设计准则都适用于非非关键功能",
        "requirement": "飞行控制系统的输入/输出寄存器和端口应仅用于安全关键功能，或在用于非安全关键功能时，确保相同的安全设计准则得到应用。"
    },
    {
        "safety_criterion": "系统必须设计成能够检测安全性内核（如果实现）的失效，并将系统返回到规定的安全状态。",
        "requirement": "飞行控制系统应能够检测到核心安全模块的失效，并自动切换到备用安全模式，确保飞行任务的安全继续。"
    },
    {
        "safety_criterion": "系统必须设计成包括在系统部件失效事件情况下低效运行和恢复待一个已设计好的降级系统功能能力的安全状态",
        "requirement": "在关键传感器或执行器失效时，飞行控制系统应自动切换到备用系统，并确保飞行器能够安全降级运行，同时向地面控制中心发送故障警报。"
    },
    {
        "safety_criterion": "系统必须设计成在某个安全状态中无电",
        "requirement": "在紧急情况下，航天器应能够自动切换到无电安全模式，确保关键系统断电以防止短路和火灾。"
    },
    {
        "safety_criterion": "对接口数据的周期进行检查，分析输入取值周期为“极大值、极小值”等情况下输出的正确性",
        "requirement": "系统应能够实时监测并处理卫星通信链路的输入数据周期，确保在极值情况下（如极大值、极小值）仍能正确输出控制指令。"
    },
    {
        "safety_criterion": "对于所有模拟和数字输入和输出，必须在按照这些值执行安全关键功能之前进行范围和合格性检查，包括时间范围、依从关系和合理性就爱你测，不得根据不能验证的安全关键的模拟或数字输入执行任何安全关键功能",
        "requirement": "飞行控制系统应实时监测并验证所有传感器输入（如高度、速度、姿态角等）的范围和合理性，确保在执行关键控制指令前数据的有效性。"
    },
    {
        "safety_criterion": "安全关键功能必须有一个且只有一个导致其执行的可能路径。",
        "requirement": "飞行控制系统应确保每个安全关键指令（如发动机点火、姿态调整等）仅通过唯一确定的路径执行。"
    },
    {
        "safety_criterion": "1 一般原则（YBYZ）-1.1 功能分配",
        "requirement": "系统应明确分配飞行控制功能，确保每个子系统和组件的职责清晰，避免功能重叠和冲突。"
    },
    {
        "safety_criterion": "进行功能分配，确定哪些模块、类等将实现安全关键需求。尽可能将安全关键的部件与非关键部件隔开，并最小化安全关键部件的数目。关键部件之间的接口的设计应实现最小交互（低耦合）",
        "requirement": "飞行控制系统应将安全关键的控制模块（如姿态控制、导航计算）与非关键模块（如数据记录、用户界面）隔离开，并确保关键模块之间的接口设计为低耦合。"
    },
    {
        "safety_criterion": "详细说明安全性相关的设计和实现约束",
        "requirement": "系统设计和实现过程中，必须明确并遵守所有与飞行安全相关的约束条件，包括但不限于飞行控制算法的稳定性、数据传输的可靠性以及冗余系统的有效性。"
    },
    {
        "safety_criterion": "对于高风险系统，应避免中断，因为它们可能干扰软件安全性控制。所使用的任何中断都应该基于优先级",
        "requirement": "飞行控制系统应根据优先级管理中断，确保高优先级的安全性控制不受低优先级中断的影响。"
    },
    {
        "safety_criterion": "1 一般原则（YBYZ）-1.2程序接口",
        "requirement": "系统应确保所有飞行控制软件模块之间的数据交换接口遵循统一的标准，以防止数据传输错误和不一致。"
    },
    {
        "safety_criterion": "定义所有部件之间的功能接口。对于安全关键的部件，尽可能限制它们与其它部件的交互",
        "requirement": "飞行控制系统的安全关键部件应仅与必要的子系统进行通信，以减少潜在的故障传播。"
    },
    {
        "safety_criterion": "标识软件内的共享数据。设计应将安全关键的数据与其它数据隔离开来，并使非关键部件不能访问安全关键数据",
        "requirement": "飞行控制系统应将导航数据与非关键数据隔离，确保只有授权模块可以访问导航数据。"
    },
    {
        "safety_criterion": "标识在接口中使用的安全关键数据",
        "requirement": "系统应能够明确标识和管理飞行控制指令和传感器数据中的安全关键信息。"
    },
    {
        "safety_criterion": "对接口数据的取值持续时间进行检查，分析取值持续时间为“大于规定时间、小于规定时间”等情况下输出的正确性",
        "requirement": "系统应能够持续监测并记录发动机推力参数，确保其在规定的时间范围内保持稳定。"
    },
    {
        "safety_criterion": "1 一般原则（YBYZ）-1.3故障检测、恢复与安全保护",
        "requirement": "系统应具备实时检测飞行器关键组件故障的能力，并在检测到故障时自动切换至备用系统，确保飞行安全。"
    },
    {
        "safety_criterion": "为安全关键部件制定差错检测或恢复方案",
        "requirement": "飞行控制系统应具备冗余设计，确保在主控制器故障时，备用控制器能够无缝接管，保证飞行安全。"
    },
    {
        "safety_criterion": "对异常和意外的外部输入（比如，不合适的命令或越限的测量）的响应；包括语言产生的异常和意外",
        "requirement": "系统应能够检测并处理来自地面控制站的异常或越限的飞行控制指令，确保飞行器的安全运行。"
    },
    {
        "safety_criterion": "考虑危险操作场景。应考虑：设计能怎样防止人工差错产生？设计如何能在故障变为失效前识别它们？设计中可以加进什么内容来降低危险发生的风险",
        "requirement": "系统应具备自动检测和预警功能，能够在关键操作前提示操作员进行双重确认，并在检测到潜在故障时立即发出警报，以防止人为错误和故障演变为失效。"
    },
    {
        "safety_criterion": "应考虑：在操作中是否要求进行内存测试？何时运行这些测试？这些测试能否影响安全关键功能",
        "requirement": "系统应定期执行内存测试，确保在关键飞行阶段（如起飞和着陆）之前内存状态正常，且测试过程不应影响飞行控制和导航功能。"
    },
    {
        "safety_criterion": "考虑使用内存利用率校验来对迫近的内存饱和提前告警",
        "requirement": "系统应能够实时监测并预警飞行控制软件的内存使用情况，防止因内存饱和导致的系统故障。"
    },
    {
        "safety_criterion": "安全保护和恢复措施的设计应充分考虑真实世界的条件和相应的临界时间。仅当在最坏（长时间）响应时间和最坏（短时间）临界时间之间有足够的裕量，自动安全保护才能够是有效的危险控制",
        "requirement": "在航天器的推进系统中，应设计自动故障检测和恢复机制，确保在最坏情况下（如长时间通信延迟或短时间系统故障）仍能有效控制危险，保证航天器的安全。"
    },
    {
        "safety_criterion": "在临界时间少于现实操作人员响应时间、或在操作回路中没有人工干预时，常常需要自动安全保护。自动安全保护可由硬件或软件或两者的结合来完成，取决于实现自动安全保护的最佳系统设计",
        "requirement": "在飞行控制系统中，当检测到临界故障或异常情况时，系统应自动启动安全保护机制，确保飞行器安全返回或进入安全状态。"
    },
    {
        "safety_criterion": "保护关键内存块数据避免遭受无意破坏或删除",
        "requirement": "系统应确保关键飞行控制数据（如导航参数、姿态控制参数）在任何情况下不被意外修改或删除。"
    },
    {
        "safety_criterion": "1 一般原则（YBYZ）-1.4设计可行性、性能和余量",
        "requirement": "系统设计应确保在最大载荷条件下，飞行器的结构强度和稳定性满足安全要求，同时留有至少10%的性能余量。"
    },
    {
        "safety_criterion": "对接口数据的取值持续时间进行检查，分析取值持续时间为“极大值、极小值”等情况下输出的正确性",
        "requirement": "系统应能够监测并处理飞行控制指令的持续时间，确保在极短或极长的指令持续时间内，飞行器的控制输出仍然准确无误。"
    },
    {
        "safety_criterion": "表明安全关键部件是如何对安全性需求作出响应的。定义这些部件的设计余量",
        "requirement": "关键飞行控制组件（如自动驾驶仪、姿态控制系统）应具备设计余量，确保在极端条件下仍能安全响应飞行指令。"
    },
    {
        "safety_criterion": "采样速率的选择应考虑噪音水平和控制系统以及物理参数的预期变化。对于非关键信号的测量，采样速率应至少是最大预期信号频率的两倍。对于关键信号，以及用于闭环控制的参数，采样速率必须高出至少十倍于系统特征频率的采样频率",
        "requirement": "飞行控制系统应确保关键参数（如姿态角、速度、高度）的采样速率至少为系统特征频率的十倍，以保证闭环控制的稳定性和准确性。"
    },
    {
        "safety_criterion": "计算机读数据、计算和输出结果需要一定的时间，因此有些控制参数将总是过时的。控制系统必须适应这种情况。也应校验计时时钟基准数据、同步和精确性（抖动）。分析任务调度",
        "requirement": "飞行控制系统应具备实时任务调度机制，确保关键控制参数的更新频率和精确性，同时校验计时时钟基准数据的同步和精确性。"
    },
    {
        "safety_criterion": "2. 接口设计（JKSJ）-2.1 模块间接口",
        "requirement": "飞行控制模块与导航模块之间的数据交换应确保实时性和准确性，以支持精确的飞行路径调整。"
    },
    {
        "safety_criterion": "模块的参数个数与模块接受的输入变元个数一致",
        "requirement": "飞行控制模块应确保输入的飞行参数个数与模块设计的输入变元个数一致。"
    },
    {
        "safety_criterion": "模块的参数属性与模块接受的输入变元属性匹配",
        "requirement": "导航系统应确保输入的飞行参数（如速度、高度、航向）与系统模块的参数属性相匹配。"
    },
    {
        "safety_criterion": "模块的参数单位与模块接受的输入变元单位一致",
        "requirement": "导航系统应确保所有输入的飞行参数单位与系统内部处理的单位一致，以避免单位不一致导致的计算错误。"
    },
    {
        "safety_criterion": "模块的参数次序与模块接受的输入变元次序一致",
        "requirement": "导航系统应确保输入参数的顺序与模块处理的顺序一致，以保证飞行轨迹计算的准确性。"
    },
    {
        "safety_criterion": "传送给被调用模块的变元个数与该模块的参数个数相同",
        "requirement": "飞行控制软件应确保传送给各子模块的参数个数与子模块定义的参数个数一致。"
    },
    {
        "safety_criterion": "传送给被调用模块的变元属性与该模块参数的属性匹配",
        "requirement": "系统应确保在飞行控制模块与导航模块之间传递的飞行参数（如姿态角、速度、高度等）的属性匹配，以保证数据的一致性和准确性。"
    },
    {
        "safety_criterion": "对接口数据的取值时刻进行检查，分析输入取值时刻为“过早输入、过晚输入”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理导航数据的输入时刻，确保在过早或过晚输入情况下，飞行控制系统的输出仍保持正确性和稳定性。"
    },
    {
        "safety_criterion": "传送给被调用模块的变元单位与该模块参数的单位一致",
        "requirement": "系统应确保所有传送给导航模块的飞行参数（如速度、高度、姿态角等）的单位与模块内部参数单位一致。"
    },
    {
        "safety_criterion": "传送给被调用模块的变元次序与该模块参数的次序一致",
        "requirement": "飞行控制软件在调用导航模块时，必须确保传递的参数顺序与导航模块定义的参数顺序完全一致。"
    },
    {
        "safety_criterion": "调用内部函数时,变元的个数、属性、单位和次序正确",
        "requirement": "系统应确保在调用飞行控制算法时，输入参数的个数、属性、单位和次序正确无误。"
    },
    {
        "safety_criterion": "不得修改只是作为输入值的变元",
        "requirement": "飞行控制软件应确保输入的飞行参数（如高度、速度、姿态角等）在处理过程中不被修改，以保证数据的完整性和一致性。"
    },
    {
        "safety_criterion": "全程变量在所有引用它们的模块中都有相同的定义",
        "requirement": "飞行控制系统中的所有模块应使用统一的变量定义，确保飞行参数（如高度、速度、姿态角等）在各模块间的一致性和准确性。"
    },
    {
        "safety_criterion": "不存在把常数当作变量来传送的情况",
        "requirement": "系统应确保所有飞行控制参数和导航数据的传输过程中，常数值（如重力加速度g、地球半径R等）始终保持不变，不被误作为变量处理。"
    },
    {
        "safety_criterion": "2. 接口设计（JKSJ）-2.2 数据处理设计",
        "requirement": "系统应具备对飞行器传感器数据进行实时处理和校验的功能，确保数据的准确性和一致性。"
    },
    {
        "safety_criterion": "对模块数据取值进行判断，防止数据取值超出有效值域，或者除数位数据取值为0等异常",
        "requirement": "系统应能够实时监测并验证飞行控制参数（如高度、速度、姿态角等）的有效性，防止超出安全范围或出现除数为零的异常情况。"
    },
    {
        "safety_criterion": "对模块数组下标进行判断，防止数组越界",
        "requirement": "飞行控制软件应确保对所有模块数组的访问进行边界检查，防止数组越界导致的系统崩溃或异常行为。"
    },
    {
        "safety_criterion": "对模块中的循环变量进行判断，防止循环变量超出合理范围",
        "requirement": "飞行控制模块应实时监测并限制循环变量（如姿态调整循环次数）在预设的安全范围内，防止超出合理范围导致系统异常。"
    },
    {
        "safety_criterion": "对接口数据中具有离散型值域的数据位进行检查，分析数据位取值为“有效值域的每项枚举值”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的离散型飞行控制指令（如：姿态调整、推进器点火等）进行有效性检查，确保指令在预定义的有效值域内。"
    },
    {
        "safety_criterion": "对接口数据的取值时刻进行检查，分析输入取值时刻为“过早停止、过晚停止”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理导航数据的传输延迟，确保在数据过早或过晚到达时，飞行控制系统的输出仍保持正确性。"
    },
    {
        "safety_criterion": "对模块数值运算范围进行控制，保证输入输出及中间结果不超出机器数值表示范围",
        "requirement": "飞行控制模块应确保所有数值运算（如姿态角、速度、高度等）的输入、输出及中间结果均在系统数值表示范围内，防止溢出。"
    },
    {
        "safety_criterion": "对模块数值运算精度进行控制，保证精度误差满足要求",
        "requirement": "导航系统应确保位置计算的精度误差不超过1米。"
    },
    {
        "safety_criterion": "对数据运算迭代次数进行设计，确保数据运算能够在有限次迭代后收敛",
        "requirement": "导航系统应确保在有限次迭代内完成轨道参数的精确计算。"
    },
    {
        "safety_criterion": "对模块间数据转换进行设计，确保数据转化过程中不会出现溢出、精度损失等异常",
        "requirement": "系统应确保在不同模块间传输飞行控制数据时，数据不会出现溢出或精度损失，保证控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "在进行数学运算时,应仔细考虑浮点数接近零时的处理方式,应使用适当小的浮点数来替代零",
        "requirement": "导航系统在计算飞行轨迹时，应确保浮点数运算中接近零的值使用适当的小浮点数替代，以避免计算误差。"
    },
    {
        "safety_criterion": "对于关键数据应尽可能独立存储，防止非法访问与操作",
        "requirement": "飞行控制系统应将关键飞行参数和导航数据独立存储在受保护的存储区域，防止未授权访问和修改。"
    },
    {
        "safety_criterion": "在含有浮点数的关系判断中，不应直接进行相等关系判断",
        "requirement": "系统应避免在飞行控制算法中直接使用浮点数进行相等判断，以防止因浮点数精度问题导致的控制错误。"
    },
    {
        "safety_criterion": "禁止判定语句中的接口数据为全1或全0的输入",
        "requirement": "系统应防止飞行控制指令中的全1或全0输入，确保指令的有效性和安全性。"
    },
    {
        "safety_criterion": "2. 接口设计（JKSJ）-2.3其它接口软件设计",
        "requirement": "系统应确保在与其他地面控制站或卫星进行数据交换时，接口软件能够正确处理和验证接收到的指令和数据，防止数据丢失或错误指令的执行。"
    },
    {
        "safety_criterion": "判定语句：安全关键计算系统功能中的判定语句应不依靠全一或全零的输入，特别当这个信息得自外部传感器时",
        "requirement": "飞行控制系统应确保所有安全关键计算不依赖于全一或全零的传感器输入，以防止因传感器故障导致的系统误判。"
    },
    {
        "safety_criterion": "对接口数据的取值时刻进行检查，分析输入取值时刻为“极大值、极小值”等情况下输出的正确性",
        "requirement": "系统应能够处理并验证来自不同传感器的极端值（如最大值和最小值），确保飞行控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "数据传输报文：数据传输报文应是预先规定的格式和内容。每次传输应包含一个指示报文长度（如果可变的话）、数据类型或报文内容的字或字符串。至少应使用奇偶校验检查及检查和来验证数据传输的正确性。可能时应使用CRC。在验证数据传输正确性之前任何来自数据传输报文的信息都不得使用",
        "requirement": "系统应确保所有飞行控制指令和状态数据的传输格式和内容符合预定义标准，并使用CRC进行数据校验，确保数据传输的完整性和正确性。"
    },
    {
        "safety_criterion": "输入合理性检查：对于所有模拟和数字输入和输出，应在按照这些值执行安全关键功能之前进行范围和合理性检查，包括时间范围、依从关系和合理性检查。应根据经过验证的安全关键的模拟或数字输入执行安全关键功能",
        "requirement": "系统应能够对所有飞行控制输入（如姿态角、速度、高度等）进行实时范围和合理性检查，确保输入值在安全范围内，并符合预期的飞行状态。"
    },
    {
        "safety_criterion": "满刻度表示（量程边界表示）。软件设计时，应使软件的满刻度和零表示都与任何数字到模拟、模拟到数字、数字到同步、和/或同步到数字转换器完全兼容",
        "requirement": "飞行控制系统应确保所有传感器和执行器的满刻度和零点值与数字到模拟转换器和模拟到数字转换器完全兼容。"
    },
    {
        "safety_criterion": "3. 健壮性设计（JZXSJ）-3.1自检查设计",
        "requirement": "飞行控制系统应具备自检功能，定期检查关键传感器和执行机构的状态，确保其正常运行。"
    },
    {
        "safety_criterion": "必须提供监控定时器或类似措施，以确保计算机具有处理程序超时或死循环故障的能力",
        "requirement": "飞行控制系统应具备监控定时器，确保在检测到程序超时或死循环时能够自动重启或切换到备用系统。"
    },
    {
        "safety_criterion": "与硬件状态变化有关的程序设计应考虑状态检测的次数或时间，无时间依据情况下可用循环等待次数作为依据，超过一定次数作超时处理",
        "requirement": "系统应能够实时监测发动机状态参数，并在检测到异常状态时，通过多次检测确认，若超过预设次数仍未恢复正常，则触发超时处理机制，自动切换至备用系统。"
    },
    {
        "safety_criterion": "故障检测。对于计算系统的安全关键子系统必须编写故障检测和隔离程序。故障检测程序必须设计成在这些有关安全关键功能执行之前检测潜在的安全关键失效。故障隔离程序必须设计成将故障隔离到实际的最低级，并向操作员或维护人员提供这个信息",
        "requirement": "飞行控制系统应具备故障检测和隔离功能，确保在执行关键飞行任务前检测并隔离潜在的失效，同时向地面控制站报告故障信息。"
    },
    {
        "safety_criterion": "运行检查。可测试的安全关键系统元素的运行检查必须直接在执行有关安全关键操作之前进行",
        "requirement": "在执行关键飞行操作（如姿态调整、轨道变更）之前，系统必须对所有相关传感器和执行器进行实时状态检查。"
    },
    {
        "safety_criterion": "3. 健壮性设计（JZXSJ）-3.2容失效或容故障设计",
        "requirement": "飞行控制系统应具备冗余设计，确保在单个组件失效时仍能维持正常飞行控制。"
    },
    {
        "safety_criterion": "一般依据软件安全关键等级，确定软件的失效容限要求，进而确定软件冗余要求（采用N版本设计）。例如，对于A级软件，推荐失效容限为2，要进行5版本程序设计；对于B级软件，推荐的失效容限为1，要进行3版本程序设计；对于C、D级软件，不考虑失效容限，无需进行冗余设计",
        "requirement": "飞行控制系统软件应根据安全关键等级确定冗余设计，对于A级软件，采用5版本程序设计以确保失效容限为2；对于B级软件，采用3版本程序设计以确保失效容限为1。"
    },
    {
        "safety_criterion": "接口数据为触发式、非周期性输入，对接口数据的取值进行检查，分析已经接收到有效接口数据时、接口数据再次有效的情况下输出的正确性",
        "requirement": "系统应能够实时检测并处理来自地面控制站的非周期性指令，确保指令的有效性和输出的正确性。"
    },
    {
        "safety_criterion": "必须工作的功能通过独立的并行冗余实现容失效；必须不工作的功能通过多个独立的串联禁止来达到容失效。对于那些视为独立的串联禁止而言，它们（通常）应受控于包含相异软件的不同处理器",
        "requirement": "飞行控制系统应采用冗余设计，关键功能模块通过独立的并行冗余实现容失效，非关键功能模块通过多个独立的串联禁止来达到容失效，且每个串联禁止模块应受控于包含相异软件的不同处理器。"
    },
    {
        "safety_criterion": "采用N版本设计实现容失效。N版本程序设计由N个实现相同功能的（必要时，在考虑特殊处理后可包括按功能降级设计的）相异程序和一个管理程序组成，各版本先后运算出来的结果相互表决，确定输出。在表决器不能分辨出错模式的情况下，应当采取少数服从多数的表决方式，甚至可以根据系统安全性要求，采取“一票否决”的表决方式",
        "requirement": "飞行控制系统应采用多版本冗余设计，确保在单个或多个控制模块失效时，系统仍能通过多数表决机制维持正常运行。"
    },
    {
        "safety_criterion": "针对故障检测或处理，可采用机内自测试技术（BIT）。对某些特定单元进行实时测试，并由相应功能模块对BIT测试结果进行处理",
        "requirement": "飞行控制系统应具备实时机内自测试（BIT）功能，能够检测关键传感器和执行机构的故障，并在检测到故障时立即触发相应的处理机制。"
    },
    {
        "safety_criterion": "进行隔离设计，例如分区隔离、划分保护（考虑硬件资源、控制耦合等要素），确保故障得到快速和有效的隔离",
        "requirement": "飞行控制系统应具备分区隔离功能，确保各子系统之间的故障不会相互影响，快速隔离并限制故障扩散。"
    },
    {
        "safety_criterion": "对于多个余度的数据或功能，应采用多数表决机制。即针对多个余度的输入数据或功能输出值设计多数表决算法，确保得到合理有效的表决值",
        "requirement": "飞行控制系统应采用三余度设计，通过多数表决机制确保关键控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "采用恢复快技术。恢复块有一个基本块、若干个替换块（可以是功能降级替换块）和接受测试程序组成。基本工作方式是：运行基本块，进行接受测试。若测试通过，则输出结果；否则调用第一个替换块，再进行接受测试；若在第N个替换块用完后仍未通过接受测试，便进行出错处理",
        "requirement": "飞行控制系统应具备多级冗余设计，包括主控制模块和多个备用控制模块，确保在主模块故障时能够无缝切换至备用模块，保证飞行安全。"
    },
    {
        "safety_criterion": "4. 通讯设计（TXSJ）",
        "requirement": "系统应确保在卫星与地面站之间的通信链路中，数据传输的完整性和实时性。"
    },
    {
        "safety_criterion": "在进行通讯双方的交换字格式设计时，要考虑双方计算机的字长，采用方便双方交换的字格式",
        "requirement": "系统应支持不同地面站和卫星之间的数据交换，确保字长兼容性和数据格式一致性。"
    },
    {
        "safety_criterion": "对交换字中的数据应详细解释其各种取值的含义。对于一位长度的数据，不仅要说明值为“1”的含义，还要说明为值为“0”的含义；对于两位或多位的数据，不仅要说明特定取值组合的含义，还要说明其它取值组合的含义。例如，两位长度数据即要明确“01”和“10”两个特定取值含义，还要说明“00”与“11”这两个取值含义",
        "requirement": "通信系统应能够准确解析和解释所有飞行控制指令的二进制数据，包括但不限于姿态控制、推进系统控制和导航系统的指令。"
    },
    {
        "safety_criterion": "在通讯设计时，应以文件的形式明确各自任务。防止通讯双方因为不了解对方的任务，在交互时出现异常",
        "requirement": "系统应具备明确的通讯协议，确保飞行器与地面控制站之间的任务指令和状态信息传输无误。"
    },
    {
        "safety_criterion": "对接口数据帧的通信协议进行检查，分析“帧头、帧尾错误”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的飞行控制指令数据帧进行协议校验，确保帧头和帧尾的正确性。"
    },
    {
        "safety_criterion": "在通讯设计时，数据发送方的数据处理能力（内存、处理时序、处理时间等）应与数据接收方一致",
        "requirement": "飞行器与地面站之间的通信协议应确保数据发送和接收的处理能力匹配，以避免数据丢失或延迟。"
    },
    {
        "safety_criterion": "通讯数据帧应由帧头、数据项（含帧号、帧长、数据体）、校验字节和帧尾组成。以便数据帧同步，及数据有效性校验。明确数据所采用的各类校验算法（例如奇偶校验、CRC校验等）",
        "requirement": "飞行控制系统应确保所有通信数据帧包含帧头、帧号、帧长、数据体、校验字节和帧尾，并采用CRC校验算法以保证数据的完整性和可靠性。"
    },
    {
        "safety_criterion": "如果是串行异步通讯，帧头应尽量采用多字节，保证帧头的唯一性，以及对帧头后帧长的准确接收",
        "requirement": "飞行控制系统的通信协议应确保帧头采用多字节设计，以保证帧头的唯一性和帧长的准确接收。"
    },
    {
        "safety_criterion": "帧之间的间隔通常要大于帧内字节之间的间隔，以便接收方有足够的时间对帧头进行搜索接收",
        "requirement": "通信系统应确保在不同飞行阶段的帧间隔时间大于帧内字节间隔，以保证接收方能够准确捕获和处理数据帧。"
    },
    {
        "safety_criterion": "5. 指针设计（ZZSJ）",
        "requirement": "系统应确保所有指针变量在使用前均进行有效性检查，防止空指针或非法访问导致的系统崩溃。"
    },
    {
        "safety_criterion": "禁止将参数指针赋值给过程指针；",
        "requirement": "飞行控制软件应确保参数指针不被赋值给过程指针，以防止潜在的内存错误和系统崩溃。"
    },
    {
        "safety_criterion": "禁止指针的指针超过两级；",
        "requirement": "飞行控制系统应确保软件中指针的使用不超过两级，以防止内存访问错误和潜在的安全漏洞。"
    },
    {
        "safety_criterion": "禁止引用空指针；",
        "requirement": "飞行控制软件应确保所有指针在使用前均进行有效性检查，防止空指针引用导致系统崩溃。"
    },
    {
        "safety_criterion": "禁止将过程声明为指针类型；",
        "requirement": "飞行控制软件应确保所有过程声明为固定类型，禁止使用指针类型，以防止内存错误和数据不一致。"
    },
    {
        "safety_criterion": "谨慎使用指针逻辑比较；",
        "requirement": "飞行控制软件应避免使用指针逻辑比较，确保飞行任务关键数据的完整性和可靠性。"
    },
    {
        "safety_criterion": "对接口数据帧的通信协议进行检查，分析数据长度“大于规定长度、小于规定长度”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的导航数据帧进行协议检查，确保数据长度在规定范围内，以保证导航数据的完整性和准确性。"
    },
    {
        "safety_criterion": "谨慎对指针进行代数运算",
        "requirement": "系统应确保在飞行控制软件中对指针进行代数运算时，严格检查指针的有效性和边界，防止越界访问和内存泄漏。"
    },
    {
        "safety_criterion": "6. 程序结构设计（CXJGSJ）-6.1模块独立性设计",
        "requirement": "飞行控制软件的各功能模块应具有高内聚、低耦合的特性，确保模块间的独立性和可维护性。"
    },
    {
        "safety_criterion": "模块应尽量使用单入口和单出口的控制结构",
        "requirement": "飞行控制软件模块应采用单入口和单出口的控制结构，确保模块间的清晰和可控的数据流。"
    },
    {
        "safety_criterion": "划分关键模块，尽可能将关键模块与非关键模块隔离",
        "requirement": "飞行控制软件应将关键任务模块（如飞行控制、导航和通信）与非关键任务模块（如数据记录和用户界面）进行物理和逻辑隔离。"
    },
    {
        "safety_criterion": "采用模块调用方式,不采用直接访问模块内部有关信息的方式",
        "requirement": "飞行控制软件模块应通过标准化接口进行通信，禁止直接访问其他模块的内部数据。"
    },
    {
        "safety_criterion": "适当限制模块间传递的参数个数",
        "requirement": "飞行控制模块与导航模块之间的数据交换应限制在必要的参数范围内，以减少数据传输的复杂性和潜在的错误。"
    },
    {
        "safety_criterion": "模块内的变量应局部化，即尽量避免使用全局变量",
        "requirement": "飞行控制软件中的变量应局部化，避免使用全局变量，确保模块间的独立性和数据的安全性。"
    },
    {
        "safety_criterion": "将一些可能发生变化的因素或需要经常修改的部分尽量放在少数几个模块中",
        "requirement": "飞行控制软件应将关键参数配置集中管理，确保在参数调整时只需修改少数模块。"
    },
    {
        "safety_criterion": "尽量增加模块内聚，减少模块耦合。按照功能内聚、顺序内聚、通信内聚、时间内聚、逻辑内聚以及偶然内聚的优先级进行内聚设计",
        "requirement": "飞行控制软件应按功能内聚原则设计，确保各功能模块独立且互不干扰，提高系统可靠性和可维护性。"
    },
    {
        "safety_criterion": "以数据耦合为主，外部耦合为辅，必要时用控制耦合，坚决消除公共耦合和内容耦合",
        "requirement": "飞行控制系统应通过数据耦合方式与导航系统、姿态控制系统进行信息交换，确保数据的一致性和完整性。"
    },
    {
        "safety_criterion": "对接口数据帧的通信协议进行检查，分析“数据帧标识”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的导航数据帧进行协议检查，确保数据帧标识正确无误。"
    },
    {
        "safety_criterion": "6. 程序结构设计（CXJGSJ）-6.2简化设计",
        "requirement": "飞行控制软件应采用模块化设计，确保各模块功能单一且接口清晰。"
    },
    {
        "safety_criterion": "程序结构设计应采用树桩结构图，不能使用网状结构",
        "requirement": "飞行控制软件应采用模块化设计，确保各功能模块之间的数据流清晰，避免复杂网状结构，以提高系统的可维护性和安全性。"
    },
    {
        "safety_criterion": "程序结构设计应采用自顶向下的方式，对各个层次的过程细节和数据细节逐层细化，直到用程序语言的语句能够实现为止",
        "requirement": "飞行控制软件应采用模块化设计，确保各功能模块的独立性和可测试性。"
    },
    {
        "safety_criterion": "采用结构化程序设计，例如避免使用GOTO语句，每个模块代码只有一个入口和一个出口等",
        "requirement": "飞行控制软件应采用结构化程序设计，确保每个控制模块代码只有一个入口和一个出口，避免使用GOTO语句。"
    },
    {
        "safety_criterion": "模块规模应适中，应尽量一个模块的语句数超过500行",
        "requirement": "飞行控制软件的每个模块代码行数应不超过500行，以确保模块的可维护性和可测试性。"
    },
    {
        "safety_criterion": "划分的模块要尽量做到高扇入、低扇出",
        "requirement": "飞行控制软件模块应设计为高内聚、低耦合，确保每个模块仅与少数其他模块交互，同时能够接收并处理来自多个传感器的数据。"
    },
    {
        "safety_criterion": "模块的扇入扇出一般应控制在7以下",
        "requirement": "飞行控制模块的输入输出接口数量应控制在7个以内，以确保模块间的通信和数据处理的可靠性。"
    },
    {
        "safety_criterion": "应使高层模块有较高的扇出，低层模块有较高的扇入",
        "requirement": "飞行控制软件架构应设计为高层模块控制多个低层执行模块，确保高层模块具有较高的扇出，低层模块具有较高的扇入。"
    },
    {
        "safety_criterion": "应尽量降低模块接口的复杂程度，应该仔细设计模块接口，使得信息传递简单并且和模块的功能一致",
        "requirement": "导航系统模块应设计简洁的接口，确保仅传递必要的飞行控制参数，减少不必要的数据交换。"
    },
    {
        "safety_criterion": "必须限制程序的圈复杂度",
        "requirement": "飞行控制软件的每个模块的圈复杂度不得超过10，以确保代码的可维护性和可测试性。"
    },
    {
        "safety_criterion": "对接口数据帧的通信协议进行检查，分析“校验位错误”等情况下输出的正确性",
        "requirement": "系统应能够对接收到的导航数据帧进行校验，确保在出现校验位错误时能够正确处理并报告错误。"
    },
    {
        "safety_criterion": "7.余量设计（YLSJ）",
        "requirement": "系统应具备足够的计算和存储余量，以应对飞行任务中的突发数据处理需求。"
    },
    {
        "safety_criterion": "在软件设计时,应确保软件模块的数据存储量、输入输出通道的吞吐能力、功能处理时间、CPU占用率满足系统余量要求",
        "requirement": "飞行控制系统应确保在高负载情况下，数据存储、输入输出通道的吞吐能力和CPU占用率均不超过系统设计的最大余量，以保证系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "要结合具体的被控对象确定采样周期、数据计算处理周期、控制周期、自诊断周期、输出输入周期等工作时序约束,确保软件工作时序之间留有足够的余量",
        "requirement": "飞行控制系统应根据具体的飞行任务，确定合适的采样周期、数据处理周期、控制周期、自诊断周期和输入输出周期，确保各周期之间留有足够的余量，以保证系统的实时性和可靠性。"
    },
    {
        "safety_criterion": "8.防错设计（FCSJ）-8.1数据标识规范化",
        "requirement": "系统应确保所有飞行数据和指令的标识符遵循统一的规范化标准，以防止数据混淆和误操作。"
    },
    {
        "safety_criterion": "在软件设计中，应规定用统一的符号来表示参数、常量和标志,以便在不改变源程序逻辑的情况下,对它进行更改",
        "requirement": "飞行控制软件应使用统一的符号表示飞行参数、常量和标志，确保在不改变源程序逻辑的情况下进行参数调整。"
    },
    {
        "safety_criterion": "应对所有标识进行严格定义并明确使用方法。对于安全关键的标识，在其所使用的软件模块中，应唯一且用于单一目的",
        "requirement": "系统应确保所有飞行控制指令的标识符在软件模块中唯一且仅用于单一目的，以防止指令混淆和误操作。"
    },
    {
        "safety_criterion": "必须指明由两个或多个模块公用的数据和公用变量，并尽量减少对公共变量的改变，以减少模块间的副作用",
        "requirement": "飞行控制软件应明确标识并最小化对共享飞行参数（如姿态角、速度、高度）的修改，以减少模块间的干扰。"
    },
    {
        "safety_criterion": "8.防错设计（FCSJ）-8.2安全关键信息设计",
        "requirement": "系统应确保关键飞行数据（如高度、速度、姿态）的冗余设计，以防止单点故障导致的数据丢失或错误。"
    },
    {
        "safety_criterion": "安全关键信息与其它信息之间应保持一定的码距",
        "requirement": "系统应确保飞行控制指令与非关键数据之间的传输码距不小于10位，以防止数据干扰和误操作。"
    },
    {
        "safety_criterion": "若安全关键信息有差错,应能检测出来,并返回到安全状态",
        "requirement": "飞行控制系统应能够检测导航数据的完整性，一旦发现数据错误，立即切换到备用导航系统并报告故障。"
    },
    {
        "safety_criterion": "对接口数据帧的通信情况进行检查，分析“通信中断”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理卫星与地面站之间的通信中断，确保在通信恢复后数据的完整性和一致性。"
    },
    {
        "safety_criterion": "安全关键信息的决策判断不得依赖于全“1”或全“0”的输入",
        "requirement": "飞行控制系统在进行关键决策时，必须确保输入数据的多样性和有效性，避免依赖单一的全‘1’或全‘0’信号。"
    },
    {
        "safety_criterion": "8.防错设计（FCSJ）-8.3关键功能设计",
        "requirement": "系统应具备冗余设计，确保关键飞行控制功能在单点故障情况下仍能正常运行。"
    },
    {
        "safety_criterion": "关键功能必须受控于两个独立的功能",
        "requirement": "飞行控制系统的主控单元和备份单元必须独立运行，确保在主控单元失效时，备份单元能够无缝接管控制功能。"
    },
    {
        "safety_criterion": "在系统控制回路中，安全关键功能的执行在可能时必须经操作人员确认或启动",
        "requirement": "在执行关键飞行控制操作（如姿态调整、轨道变更）时，系统应要求地面控制人员进行确认或手动启动。"
    },
    {
        "safety_criterion": "安全关键功能应该在接到两个或更多个相同的信息后才执行",
        "requirement": "飞行控制系统应确保在接收到两个或更多个冗余传感器提供的相同导航数据后，才执行关键的飞行控制指令。"
    },
    {
        "safety_criterion": "安全关键功能必须具有强数据类型；不得使用一位的逻辑“0”或“1”来表示“安全”或“危险”状态；其判定条件不得依赖于全“0”或全“1”的输入",
        "requirement": "飞行控制系统应使用强数据类型表示关键飞行参数，确保所有安全关键功能的输入和输出不依赖于单一逻辑位的‘0’或‘1’状态。"
    },
    {
        "safety_criterion": "关键计时功能必须由计算机控制，操作人员不能随意修改",
        "requirement": "飞行控制系统应由计算机自动管理关键计时功能，确保操作人员无法随意修改计时参数。"
    },
    {
        "safety_criterion": "在启动安全关键功能之前，必须对可测试的安全关键单元进行实时检测。当检测到不安全情况时，必须采取措施进行处理",
        "requirement": "在启动飞行控制系统之前，必须实时检测关键传感器（如加速度计、陀螺仪）的状态。当检测到传感器故障或异常时，系统应自动切换到备用传感器或进入安全模式。"
    },
    {
        "safety_criterion": "需要获得两个或更多安全关键信息的外部功能不得从单一输入/输出接口接受所有的必要信息",
        "requirement": "导航系统应从至少两个独立的传感器获取飞行高度和速度数据，以确保数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "必须监测安全关键软件内或安全关键软件间的无意跳转；如果可行，进行故障诊断并确定引起无意跳转的原因",
        "requirement": "飞行控制系统应具备实时监测和诊断功能，以检测和记录任何安全关键软件内的无意跳转，并确定其原因。"
    },
    {
        "safety_criterion": "对接口数据帧的通信情况进行检查，分析“数据帧丢帧”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理卫星与地面站之间的数据帧丢帧情况，确保飞行控制指令的准确性和实时性。"
    },
    {
        "safety_criterion": "必须提供从无意指令跳转处进入故障安全状态的恢复措施",
        "requirement": "系统应能够检测并处理无意指令，确保在检测到异常指令时自动切换到故障安全状态，并提供恢复措施。"
    },
    {
        "safety_criterion": "8.防错设计（FCSJ）-8.4非授权存取限制",
        "requirement": "系统应具备防止非授权访问飞行控制数据和导航参数的功能，确保只有授权人员能够进行访问和修改。"
    },
    {
        "safety_criterion": "防止对程序(源程序、汇编程序及目标代码)的非授权的或无意的存取或修改,其中包括对代码的自修改",
        "requirement": "飞行控制系统应具备防止非授权访问和修改控制软件的能力，确保软件代码的完整性和安全性。"
    },
    {
        "safety_criterion": "防止对数据的非授权的或无意的存取或修改",
        "requirement": "系统应确保飞行控制数据的完整性和机密性，防止未经授权的访问或修改。"
    },
    {
        "safety_criterion": "对安全关键功能模块应设置调用密码",
        "requirement": "飞行控制系统的关键模块应设置调用密码，确保只有授权人员可以进行操作。"
    },
    {
        "safety_criterion": "8.防错设计（FCSJ）-8.5其它",
        "requirement": "系统应具备冗余设计，确保在单点故障发生时，备份系统能够无缝接管，保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "文件在使用前应成功地打开,在使用结束后应成功地关闭",
        "requirement": "飞行任务数据文件在任务开始前应成功加载，并在任务结束后安全关闭，确保数据完整性和一致性。"
    },
    {
        "safety_criterion": "针对关键功能点进行实时监测,在发现故障时进行故障隔离；必要时,使系统进入安全状态",
        "requirement": "飞行控制系统应实时监测发动机状态，一旦检测到故障，立即隔离故障并切换至备用系统，确保飞行安全。"
    },
    {
        "safety_criterion": "尽量不使用间接寻址方式",
        "requirement": "飞行控制软件应直接访问关键飞行参数和控制指令，避免使用间接寻址方式。"
    },
    {
        "safety_criterion": "将数据与指令分隔存放",
        "requirement": "飞行控制系统应将飞行数据与控制指令分别存储在独立的内存区域，确保数据的完整性和指令的可靠性。"
    },
    {
        "safety_criterion": "对接口数据帧的通信情况进行检查，分析“持续未收到新数据”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理卫星与地面站之间通信中断的情况，确保在持续未收到新数据时，飞行控制参数保持安全状态。"
    },
    {
        "safety_criterion": "对不需修改的重要信息,应放在不易丢失的只读存储器(ROM)中。对需要少量次数修改的重要信息,则应放在电可擦除可编程只读存储器(EZPROM)中。在宇宙空间中不得使用电可编程只读存储器（EPROM)",
        "requirement": "航天器的飞行控制软件应将关键飞行参数和任务指令存储在只读存储器(ROM)中，以确保在极端环境下数据的完整性和可靠性。"
    },
    {
        "safety_criterion": "对安全关键信息，应保存在多种或多个不同芯片中，并进行表决处理",
        "requirement": "飞行控制系统应将关键飞行参数（如姿态、速度、高度）存储在多个独立的冗余芯片中，并通过多数表决机制确保数据的一致性和可靠性。"
    },
    {
        "safety_criterion": "对可编程只读存储器（PROM）中的重要程序进行备份（例如，备份在不同的PROM中），一旦PROM中的程序被破坏，还可通过遥控命令等手段使系统执行其备份程序",
        "requirement": "系统应具备在主PROM中的关键飞行控制程序被破坏时，通过遥控命令切换到备份PROM中的备份程序，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "对随机存取存储器（RAM）中的重要程序和数据，应存储在三个不同的地方，而访问这些程序和数据都通过三取二表决方式来裁决",
        "requirement": "飞行控制系统的RAM中，关键飞行控制程序和数据应冗余存储在三个独立的内存区域，并通过三取二表决机制进行访问和裁决。"
    },
    {
        "safety_criterion": "对规定时间内要完成规定任务的功能模块,应采用计算次数迭代到大于规定值或计算结果迭代到小于某个阈值的算法",
        "requirement": "导航系统应确保在指定时间内完成航迹计算，采用迭代算法确保计算结果的精度和可靠性。"
    },
    {
        "safety_criterion": "算法所使用的存储空间应完全确定，尽量不采用动态堆空间",
        "requirement": "导航系统应使用固定大小的缓冲区来存储飞行轨迹数据，避免动态内存分配。"
    },
    {
        "safety_criterion": "对共享资源的请求、使用、释放等进行设计，防止独占、死锁、读写冲突等异常出现",
        "requirement": "系统应确保多个任务模块在访问卫星姿态控制数据时，通过互斥锁机制防止数据冲突和死锁。"
    },
    {
        "safety_criterion": "9.人机界面设计（RJSJ）-9.1界面显示",
        "requirement": "系统应提供实时的飞行参数和系统状态的可视化界面，确保飞行员能够清晰、准确地监控和操作。"
    },
    {
        "safety_criterion": "向操作员提供的安全关键显示信息、图标、及其它人机交互方式应清晰、简明、且无二义性",
        "requirement": "飞行控制界面应实时显示关键飞行参数（如高度、速度、姿态）和警告信息，确保操作员能够清晰、简明且无二义性地理解当前飞行状态。"
    },
    {
        "safety_criterion": "显示应考虑颜色、字体大小和位置等因素，符合人机工程要求",
        "requirement": "驾驶舱显示器应根据飞行员的视觉和操作习惯，合理设置颜色、字体大小和位置，确保信息清晰可见且易于读取。"
    },
    {
        "safety_criterion": "对接口数据中具有离散型值域的数据位进行检查，分析数据位取值为“有效值域外未定义的异常值”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理来自传感器的离散型飞行数据（如姿态角、速度等）的异常值，确保在异常值出现时系统输出的正确性和稳定性。"
    },
    {
        "safety_criterion": "对接口数据的发送、接收周期进行检查，分析发送和接收周期是否匹配",
        "requirement": "系统应确保飞行器与地面控制站之间的数据传输周期匹配，以保证实时通信的可靠性。"
    },
    {
        "safety_criterion": "基于任务需求将信息分配到不同的格式或者页面",
        "requirement": "飞行任务管理系统应能够根据不同的飞行阶段和任务需求，将关键飞行参数和状态信息分配到不同的显示页面。"
    },
    {
        "safety_criterion": "对于包含在不同页面的所有必要信息（名称、标识、图形等）相互一致",
        "requirement": "飞行控制界面和状态监控界面中显示的所有飞行参数和状态信息必须保持一致。"
    },
    {
        "safety_criterion": "页面的显示内容不宜太多，只显示必需的数据，与用户需求无直接关系的省略",
        "requirement": "飞行控制界面应仅显示关键飞行参数和警报信息，其他非关键信息应隐藏或提供可选显示。"
    },
    {
        "safety_criterion": "在一起使用的数据应显示在同一界面下，且显示出的数据应与用户执行的任务有关",
        "requirement": "飞行控制界面应实时显示与当前飞行任务相关的所有关键参数，包括飞行高度、速度、姿态和导航信息。"
    },
    {
        "safety_criterion": "非正常分辨率下软件界面的显示应正常",
        "requirement": "飞行控制软件在不同分辨率的显示屏上应能正常显示关键飞行参数和警告信息。"
    },
    {
        "safety_criterion": "没有多余按钮或其他控件，初始输入焦点在最常用的控件上",
        "requirement": "飞行控制界面应仅包含必要的操作按钮，初始输入焦点应默认置于最常用的飞行模式选择按钮上。"
    },
    {
        "safety_criterion": "9.人机界面设计（RJSJ）-9.2人机交互",
        "requirement": "系统应提供直观的飞行参数显示和操作界面，确保飞行员在紧急情况下能够快速、准确地进行操作。"
    },
    {
        "safety_criterion": "确保无效的操作员请求被加上标记，并向操作员指明",
        "requirement": "系统应能够检测并标记无效的地面控制指令，并实时向地面控制站反馈错误信息。"
    },
    {
        "safety_criterion": "要求最少两条独立的命令来执行安全关键功能，启动安全关键操作时,应由两个或多个人员在“与”方式下操作,并有完善的误触发保护措施,以避免造成无意激活",
        "requirement": "飞行控制系统应具备双重确认机制，确保关键操作（如发动机点火、姿态调整等）需由两名操作员在独立通道上同时确认，以防止误触发。"
    },
    {
        "safety_criterion": "安全状态恢复。人机交互软件要便于操作员用单一动作处理当前事务,使系统退出潜在不安全状态,并恢复到某一安全状态",
        "requirement": "飞行控制系统应提供一键复位功能，使操作员能够快速将系统从异常状态恢复到安全状态。"
    },
    {
        "safety_criterion": "软件掉电重启，对重启时接口数据通信进行检查，分析接口数据通信“中断、重新连接、无法恢复”等情况下输出的正确性",
        "requirement": "系统应能够在飞行器软件掉电重启后，自动恢复与地面控制站的通信连接，并确保所有关键飞行参数的连续性和完整性。"
    },
    {
        "safety_criterion": "软件应能检测不正确的操作员录入或操作，并防止由于该差错的结果而执行安全关键功能",
        "requirement": "飞行控制系统应能够检测并阻止不正确的操作员指令，确保不会执行可能导致飞行安全风险的操作。"
    },
    {
        "safety_criterion": "避免在操作员未知的情况下改变系统的安全状态",
        "requirement": "系统应确保在操作员未确认的情况下，不得自动更改飞行控制模式或安全参数。"
    },
    {
        "safety_criterion": "安全关键状态变更时，确保有状态变更显示",
        "requirement": "系统应能够在飞行模式切换时，立即在驾驶舱显示器上显示当前飞行模式和状态变更信息。"
    },
    {
        "safety_criterion": "清晰区别关键输入，检查输入的范围和合法性",
        "requirement": "系统应能够区分关键飞行控制输入，并验证其范围和合法性，确保输入值在预定义的安全范围内。"
    },
    {
        "safety_criterion": "允许撤销和恢复：行动应能撤销，错误应能恢复",
        "requirement": "飞行控制系统应支持任务中止和恢复功能，确保在任务中止后能够安全恢复到正常飞行状态。"
    },
    {
        "safety_criterion": "提供适当且及时的反馈。使得操作员能及时感觉到对系统的控制以及系统对其行动的响应",
        "requirement": "飞行控制系统应提供实时的视觉和听觉反馈，确保操作员能够及时感知飞行状态的变化和系统响应。"
    },
    {
        "safety_criterion": "提供表明软件正在运行的实时指示",
        "requirement": "系统应提供实时的飞行状态指示，包括但不限于发动机状态、飞行高度、速度和航向。"
    },
    {
        "safety_criterion": "需要若干秒或更长时间的处理功能，在处理期间应向操作员提供状态指示",
        "requirement": "在长时间任务处理期间，系统应向地面控制站实时发送任务状态指示，确保操作员能够监控任务进展。"
    },
    {
        "safety_criterion": "必须向操作员提供声光报警，声音报警信号必须超过预期的背景噪声",
        "requirement": "在飞行器异常情况下，系统应立即触发声光报警，确保声音报警信号超过机舱内的背景噪声。"
    },
    {
        "safety_criterion": "报警设计必须使例行报警与安全关键报警相区别，并应使得在没有采取纠正行为或没有执行所要求的后续行为以完成该操作的情况下，操作员无法清除安全关键的报警",
        "requirement": "系统应能够区分常规报警和安全关键报警，并确保在未采取纠正措施或未完成所需后续操作之前，操作员无法清除安全关键报警。"
    },
    {
        "safety_criterion": "对接口数据的接收缓冲区进行检查，分析接收缓冲区容量小于接口数据量时输出的正确性",
        "requirement": "系统应确保在接收飞行器遥测数据时，即使数据量超过接收缓冲区容量，仍能正确处理并记录溢出数据。"
    },
    {
        "safety_criterion": "10. 其它若干设计考虑（YJCLSJ）",
        "requirement": "系统应具备冗余设计，确保在单点故障情况下仍能正常运行。"
    },
    {
        "safety_criterion": "软件要配合硬件在电源失效时提供安全的关闭。避免系统潜在的不安全初始状态",
        "requirement": "系统应能够在电源失效时自动执行安全关闭程序，确保飞行控制和导航系统处于安全状态。"
    },
    {
        "safety_criterion": "在电源出现故障或掉电期间，软件必须提供一个安全而适当的关闭，以使潜在的不安全状态不会产生",
        "requirement": "系统应具备在电源故障或掉电时自动切换至备用电源，并安全关闭关键任务软件，确保飞行器处于安全状态。"
    },
    {
        "safety_criterion": "软件设计必须考虑在系统加电时完成系统级的检测，验证系统是安全的并在正常地起作用；在可能时软件应对系统进行周期性检测，以监视系统的安全状态",
        "requirement": "系统在每次加电启动时，必须执行全面的自检程序，确保所有关键子系统（如导航、通信、动力系统）正常运行；在飞行过程中，系统应周期性地进行健康检查，以持续监控系统的安全状态。"
    },
    {
        "safety_criterion": "接口故障：应充分估计接口的各种可能故障，并采取相应的措施",
        "requirement": "系统应具备冗余通信接口，确保在主接口故障时自动切换至备用接口，保证数据传输的连续性和可靠性。"
    },
    {
        "safety_criterion": "错误操作：软件应能判断操作员的输入操作正确(或合理)与否，并在遇到不正确(或不合理)输入和操作时拒绝该操作的执行，并提醒操作员注意错误的输入或操作，同时指出错误的类型和纠正措施",
        "requirement": "飞行控制系统应能够检测并拒绝无效的飞行指令输入，同时向操作员显示错误类型和纠正措施。"
    },
    {
        "safety_criterion": "软件功能是否完全实现。验证在设计阶段，对于安全关键和非安全关键的需求是否都已经得到实现。",
        "requirement": "飞行控制软件应确保所有安全关键功能（如姿态控制、导航、通信）和非安全关键功能（如数据记录、日志生成）在设计阶段均已实现并验证。"
    },
    {
        "safety_criterion": "内存的使用和可用性。在安全关键代码或者可能影响安全性关键部分的软件中，应仔细考虑动态内存分配的使用。动态内存分配可能因为如下原因：未释放所分配的内存（内存泄漏），两次释放内存（引起异常），或者缓存溢出而覆盖代码或者其他区域。在动态分配数据结构时，常常不能对它们进行静态分析，以验证数组和字符串等不会超出该数据结构的物理末尾。",
        "requirement": "飞行控制系统应确保在动态内存分配过程中，避免内存泄漏、双重释放和缓存溢出，以保证关键任务代码的稳定性和安全性。"
    },
    {
        "safety_criterion": "I/O通道的使用（负载）与容量和可用性。考虑输入数据量（科学数据、内务处理数据、控制传感器）和所产生的输出数据量（通信）。“I/O通道”应包括内部的硬件（传感器）、过程中间的通信（消息）、以及外部通信（数据输出、命令和遥测接口）。检查在科学数据收集和安全性关键数据可用性之间的资源冲突。",
        "requirement": "系统应确保在高数据负载情况下，关键飞行控制数据和科学数据的传输优先级，避免资源冲突导致的安全问题。"
    },
    {
        "safety_criterion": "执行时间与CPU负载和可用性。调研CPU负载时间变化并确定产生峰值负载的环境。在高负载条件下的执行时间是否可以接受？考虑多任务所造成的定时影响，例如，消息传送延迟或者因其他任务占有而不能访问所需要的资源。",
        "requirement": "飞行控制系统应确保在高CPU负载条件下，关键任务的执行时间仍能满足实时性要求，避免因多任务调度导致的延迟或资源访问冲突。"
    },
    {
        "safety_criterion": "分析“接口数据帧可表征的取值范围小于接口数据的取值范围”等情况时输出的正确性",
        "requirement": "系统应确保在飞行控制数据帧的取值范围受限时，仍能准确输出控制指令。"
    },
    {
        "safety_criterion": "临界时间。安全关键系统的“临界时间”是一个在故障出现和系统达到某种不安全状态之间的时间间隔。安全保护和恢复措施的设计应充分考虑真实世界的条件和相应的临界时间。仅当在最长的相应时间和临界时间之间有足够的余量时，自动安全保护才是有效的危险控制方式。",
        "requirement": "系统应具备在检测到关键故障后，于100毫秒内启动冗余系统并完成切换，确保飞行安全。"
    },
    {
        "safety_criterion": "自动保护。如果临界时间小于操作人员的实际相应时间，或者如果在回路中没有人员参与，就要考虑自动安全保护。这可以由硬件或软件两者的结合来执行。",
        "requirement": "系统应具备自动保护功能，当检测到临界时间小于操作人员的实际响应时间时，自动启动安全保护措施，确保飞行安全。"
    },
    {
        "safety_criterion": "采样频率与物理参数的变化速率。对于关键的信号和用于闭环控制的参数，通常采样频率必须更高。通常至少是系统特性频率的10倍以上。",
        "requirement": "飞行控制系统应以不低于10倍于系统特性频率的采样率实时采集和处理关键飞行参数（如姿态角、速度、加速度等），以确保闭环控制的准确性和稳定性。"
    },
    {
        "safety_criterion": "动态存储器分配。对于安全性关键软件来说，应规定软件将如何处理失败的动态分配。",
        "requirement": "系统应具备在动态存储器分配失败时，自动切换至备用存储器或触发故障保护机制，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "存储器检查。在系统加电时，要对随机访问存储器（RAM）进行测试，以验证所有的存储器地址都可用，并且保证RAM都能够适当的运行。",
        "requirement": "飞行控制系统在每次启动时，应执行RAM自检，确保所有存储器地址可用且正常运行。"
    },
    {
        "safety_criterion": "程序存储空间与可执行代码的规模。估计存储在设备（EPROM、flashdisk等）中的可执行软件的规模。这可能小于内存的足迹（footprint），因为只有静态变量或者全局变量占据空间。然后，如果不是所有部件同时驻留在内存中，那么，可执行代码的规模可能更大。程序规模包括操作系统以及应用软件。",
        "requirement": "飞行控制软件应优化存储空间使用，确保操作系统和应用软件的总存储需求不超过机载计算机的存储容量。"
    },
    {
        "safety_criterion": "存储的数据量与可用的容量。考虑将产生多少科学数据、内存处理数据或者其它数据，以及可用的存储空间两（RAM、磁盘等）。如果数据将发送到地面，并且然后从该存储介质中删除，如果能够写满“磁盘”的话，则应进行某些分析，以确定“磁盘”将被写满的频度。在某些条件下，不能存储数据或者覆盖尚未向下连接的原先数据可能是一个安全性有关的问题。",
        "requirement": "航天器应具备实时监控和管理科学数据、内存处理数据及其他数据的存储容量，确保在数据发送到地面之前不会因存储空间不足而导致数据丢失或覆盖。"
    },
    {
        "safety_criterion": "要确保安全关键功能和非安全关键功能模块之间不能有数据、接口的交互；",
        "requirement": "飞行控制软件应确保安全关键模块（如飞行控制、导航）与非安全关键模块（如娱乐系统、客舱管理）之间无数据和接口交互。"
    },
    {
        "safety_criterion": "要采用模块调用方式，而不采用直接访问模块内部有关信息的方式；",
        "requirement": "飞行控制软件应通过模块化设计，确保各功能模块之间仅通过定义好的接口进行通信，禁止直接访问模块内部数据。"
    },
    {
        "safety_criterion": "模块内的变量应局部化（设置成局部变量）；",
        "requirement": "飞行控制软件的各功能模块应确保其内部变量局部化，以防止跨模块的数据干扰。"
    },
    {
        "safety_criterion": "分析“接口数据帧可表征的取值精度不满足接口数据的精度要求”等情况时输出的正确性",
        "requirement": "系统应确保导航数据帧的精度满足飞行控制要求，以保证飞行轨迹的准确性。"
    },
    {
        "safety_criterion": "将一些可能发生变化的因素或需要经常修改的部分尽量放在少数几个模块中；",
        "requirement": "飞行控制软件应将飞行参数和配置设置集中管理，确保在参数变化时能够快速更新和验证。"
    },
    {
        "safety_criterion": "模块的扇出一般控制在7以下；",
        "requirement": "飞行控制软件的每个模块应控制与其他模块的接口数量不超过7个，以确保模块间的通信和数据交换的可靠性和可维护性。"
    },
    {
        "safety_criterion": "安全性关键的计算机软件部件应独立于非安全性关键的功能；",
        "requirement": "飞行控制软件应与导航和通信软件分离，确保飞行控制的独立性和安全性。"
    },
    {
        "safety_criterion": "判定语句。安全关键计算系统功能中的判定语句应不依靠全1或全0的输入，特别是当这个信息来自外部传感器时；",
        "requirement": "飞行控制系统应确保所有安全关键的判定语句不依赖于全1或全0的传感器输入，以防止误判。"
    },
    {
        "safety_criterion": "外部功能。对于安全关键功能的激活，其必需的激活信号不能全部都从单个输入或输出的存储单元接收；",
        "requirement": "飞行控制系统应确保关键控制信号（如发动机点火、姿态调整等）的激活信号来自多个独立的输入源。"
    },
    {
        "safety_criterion": "CPU间的通信。CPU间的通信应在传输安全关键数据之前成功地通过对两个CPU的验证检查。如果接口多次连续传输失败，应向操作员报警，并终止安全关键数据的传输直到能进行诊断性检查；",
        "requirement": "飞行控制系统应确保主CPU与备份CPU之间的通信在传输安全关键数据前通过验证检查，多次连续传输失败时应报警并终止数据传输，直至完成诊断性检查。"
    },
    {
        "safety_criterion": "输入合理性检查。对与所有模拟和数字输入和输出，应在按照这些值执行安全关键功能之前进行范围和合理性检查，包括时间范围、依从关系。",
        "requirement": "飞行控制系统应实时检查所有传感器输入（如高度、速度、姿态角等）的合理性和范围，确保数据在预设的安全范围内。"
    },
    {
        "safety_criterion": "接口控制。与安全关键硬件的接口应在所有时刻受控，即应监视该接口以确保错或虚假数据不会意外地影响该系统，接口的失效得到检测，并且在上电、电源波动和中断、以及系统错误或硬件失效事件情况下接口安全。",
        "requirement": "飞行控制系统应实时监控与关键硬件（如发动机、导航系统）的接口，确保数据的完整性和准确性，并在检测到任何异常时立即采取安全措施。"
    },
    {
        "safety_criterion": "反馈回路。系统硬件的反馈回路设计，应保证软件不可能由于反馈传感器失效引起失控条件。在软件设计中应考虑已知的部件失效模式，并将检查手段设计到软件中以检测失效。",
        "requirement": "飞行控制系统应具备冗余反馈回路设计，确保在主反馈传感器失效时，备用传感器能够立即接管，防止飞行器失控。"
    },
    {
        "safety_criterion": "满刻度表示。软件设计时，应使软件的满刻度和零表示都与任何数字到模拟、模拟到数字、数字到同步、或同步到数字转换器完全兼容。",
        "requirement": "飞行控制系统应确保所有传感器和执行器的满刻度和零点设置与数字到模拟转换器和模拟到数字转换器完全兼容。"
    },
    {
        "safety_criterion": "接口数据表征一个关键变量（如故障字、故障计数、计时、工作阶段、工作状态等），软件掉电重启，对重启后的输入来源进行检查，分析是否从NVM等非易失存储器中读取接口数据",
        "requirement": "系统应能够在软件掉电重启后，从非易失性存储器中恢复关键飞行参数（如故障字、故障计数、计时、工作阶段、工作状态等），并进行有效性检查。"
    },
    {
        "safety_criterion": "全局变量在所有引用它们的模块中都有相同的定义；",
        "requirement": "飞行控制软件中的全局变量（如飞行高度、速度、姿态角等）在所有模块中应保持一致的定义和使用。"
    },
    {
        "safety_criterion": "不得修改只是作为输入值的参数；",
        "requirement": "飞行控制软件应确保在处理传感器输入数据时，不修改原始输入值，以保证数据的完整性和一致性。"
    },
    {
        "safety_criterion": "不能存在把常数当作变量来传送的情况；",
        "requirement": "系统应确保在飞行控制指令传输过程中，常数参数（如最大推力、最大速度等）不被误作为变量处理。"
    },
    {
        "safety_criterion": "模块的参数个数、属性、单位和次序必须与模块接受的输入参数的个数、属性、单位和次序保持一致。",
        "requirement": "飞行控制模块应确保输入的飞行参数（如高度、速度、姿态角等）的个数、属性、单位和次序与模块接受的输入参数保持一致。"
    },
    {
        "safety_criterion": "传送给被调用模块的参数个数、属性、单位和次序必须与该模块参数的个数、属性、单位和次序保持一致和匹配。",
        "requirement": "导航系统在调用姿态控制模块时，必须确保传递的姿态参数（如滚转角、俯仰角、偏航角）的个数、属性、单位和次序与模块定义的一致。"
    },
    {
        "safety_criterion": "安全关键操作启动。启动安全关键操作时，应由两个或多个人员在“与”方式下操作，并有完善的误触发保护措施，以避免造成无意激活。",
        "requirement": "飞行控制系统的安全关键操作（如紧急降落、发动机重启等）必须由两名或以上操作人员在双重确认模式下执行，并具备防误触发机制。"
    },
    {
        "safety_criterion": "安全状态恢复。人机交互软件要便于操作员用单一动作处理当前事务，使系统退出潜在不安全状态，并恢复到某一安全状态。该动作可以包含同时按两个键、按钮或开关。在操作员反应时间不足以防止灾难时，软件应可以将系统回到一个已知的安全状态，报告该失效，并向操作员报告该系统状态。",
        "requirement": "飞行控制系统应具备一键复位功能，允许操作员在紧急情况下通过单一动作将系统恢复到安全状态，并在恢复后向操作员报告系统状态。"
    },
    {
        "safety_criterion": "误操作防护。软件应能检测不正确的操作员录入或操作，并防止由于该差错的结果而执行安全关键功能。对于该错误录入或操作应该向操作员报警。报警应包括错误信息和纠正措施。",
        "requirement": "飞行控制系统应能够检测并阻止不正确的操作员指令，如错误的航向、速度或高度设置，并向操作员发出警报，提供具体的错误信息和纠正措施。"
    },
    {
        "safety_criterion": "报警设计。报警设计应该能够使得例行报警区别于安全关键的报警，并且应该能够同时保证在没有执行要求的后续行为或者是没有采取纠正行为以能够保证完成该操作的前提下，相关操作人员无法清除该安全关键性报警。提醒操作员注意不安全状态的信号，应该尽可能直接送到操作员接口。",
        "requirement": "飞行控制系统应具备区分常规报警和安全关键报警的功能，并确保安全关键报警在未采取纠正措施前无法被清除。同时，所有不安全状态的报警信号应直接显示在操作员界面。"
    },
    {
        "safety_criterion": "必须提供适当且及时的反馈：如果操作完成，则应给出指示；如果将出现进一步的选项或者行动，则也应说明之；应使操作员能够感受到对系统和软件的控制以及系统对其行动的响应。",
        "requirement": "飞行控制系统应提供实时的反馈信息，包括操作完成的确认、下一步操作的提示以及系统对操作员指令的响应状态。"
    },
    {
        "safety_criterion": "对外部设备（如传感器、NVM、数据库、其他系统等）进行检查，分析设备处于“下电、初始化”等工作状态下输出的正确性",
        "requirement": "系统应能够检测并处理外部传感器在下电或初始化状态下的输出，确保飞行控制系统的稳定性和安全性。"
    },
    {
        "safety_criterion": "避免在操作员未知的情况下改变系统的安全状态。",
        "requirement": "系统应确保在操作员未确认的情况下，不得自动更改飞行控制模式或导航参数。"
    },
    {
        "safety_criterion": "安全关键状态变更时，确保有状态变更报告。",
        "requirement": "在飞行器的关键状态发生变更时，系统应自动生成并发送状态变更报告，包括变更时间、变更前后的状态参数和变更原因。"
    },
    {
        "safety_criterion": "软件应能判断操作员的输入操作正确与否，在遇到不正确的输入和操作时，能够拒绝操作的执行，并提醒操作员注意错误的输入和操作，同时指出错误的类型和纠正措施。",
        "requirement": "飞行控制系统应能够实时验证操作员的输入指令，对于不正确的指令，系统应拒绝执行并立即向操作员反馈错误类型及纠正措施。"
    },
    {
        "safety_criterion": "应确保将安全关键的数据与其他数据隔离开来，并使非安全关键部件不能访问安全关键数据；",
        "requirement": "飞行控制系统应将关键飞行参数（如姿态、速度、高度）与非关键数据（如乘客娱乐系统数据）隔离开，确保非关键系统无法访问或修改关键飞行参数。"
    },
    {
        "safety_criterion": "数据传送过程中应对安全关键数据进行加密操作，以保护safety_criterion；",
        "requirement": "系统应能够对飞行控制指令和敏感飞行数据进行加密传输，确保数据在地面站与飞行器之间的安全传输。"
    },
    {
        "safety_criterion": "对包含安全关键数据的数据库和数据文件都要进行文档化；",
        "requirement": "系统应维护和记录所有飞行控制参数和关键任务数据的文档，确保数据的完整性和可追溯性。"
    },
    {
        "safety_criterion": "数据区隔离。为防止程序把数据错当指令来执行，要采用将数据与指令分隔存放的措施。",
        "requirement": "飞行控制软件应将飞行数据和控制指令分别存储在独立的内存区域，确保数据和指令的隔离。"
    },
    {
        "safety_criterion": "算法所使用的存储空间应该是完全确定的。例如，不采用动态堆空间；",
        "requirement": "飞行控制软件应使用固定大小的缓冲区和数组，避免动态内存分配。"
    },
    {
        "safety_criterion": "对在接口中使用的安全关键数据，都要有唯一的标识符；",
        "requirement": "所有飞行控制指令和状态数据在传输时必须带有唯一的标识符，以确保数据的完整性和可追溯性。"
    },
    {
        "safety_criterion": "数据传输报文。数据传输报文应是预先规定的格式和内容。每次传输应包含一个指示报文长、数据类型或报文内容的字或字符串，至少应使用奇偶校验检查以及累加和来验证数据传输的正确性，在验证数据传输正确性之前任何来自数据传输报文的信息都不得使用；",
        "requirement": "卫星通信系统应确保所有数据传输报文采用预定义的格式和内容，每次传输包含报文长度、数据类型或内容的指示信息，并使用奇偶校验和累加和进行数据校验，确保数据传输的正确性。"
    },
    {
        "safety_criterion": "对外部设备（如传感器、NVM、数据库、其他系统等）进行检查，分析源设备处于“降级、维护”等情况下输出的正确性",
        "requirement": "系统应能够检测并处理外部传感器（如姿态传感器、导航传感器）在降级或维护模式下的数据，确保飞行控制系统的稳定性和安全性。"
    },
    {
        "safety_criterion": "软件应能判断操作员的输入操作正确与否，在遇到不正确的输入和操作时，能够拒绝操作的执行，并提醒操作员注意错误的输入和操作，同时指出错误的类型和纠正措施；",
        "requirement": "飞行控制软件应能够验证操作员的指令输入，对于不正确的指令，系统应拒绝执行并立即向操作员反馈错误类型及纠正措施。"
    },
    {
        "safety_criterion": "在进行数学运算时，应仔细考虑浮点数接近零的处理方式，在可能发生下溢时，使用适当小的浮点数来替代零，以避免下溢情况的发生。在含有浮点数的关系判断中，不应直接进行相关相等关键的判断。",
        "requirement": "飞行控制系统应确保在进行浮点数运算时，采用适当的小浮点数替代零，以防止下溢，并避免直接进行浮点数相等判断，确保计算的准确性和稳定性。"
    },
    {
        "safety_criterion": "应防止对数据的非授权的无意的存取或修改。",
        "requirement": "系统应确保飞行控制数据在传输过程中不被非授权修改，确保数据的完整性和保密性。"
    },
    {
        "safety_criterion": "对于安全关键信息与其他信息之间应保持一定的码距，使安全关键信息不会因一位或两位差错而引起系统故障。",
        "requirement": "系统应确保飞行控制指令与状态监测数据之间的传输码距至少为3，以防止因单个或双位错误导致的系统故障。"
    },
    {
        "safety_criterion": "对安全关键的信息和数据，应保存在多种或多个不同芯片中，并进行表决处理。",
        "requirement": "飞行控制系统应将关键飞行数据（如姿态、速度、高度）存储在多个独立的存储芯片中，并通过多数表决机制确保数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "输入的数据元素应以显示参数的形式传给另一个模块接口。调用模块无需知道数据是如何被调用的。",
        "requirement": "飞行控制模块应能够接收并处理来自传感器的实时数据，无需了解数据的内部处理过程。"
    },
    {
        "safety_criterion": "对安全关键模块应设置调用密码；",
        "requirement": "飞行控制系统的安全关键模块应设置调用密码，确保只有授权人员能够访问和操作。"
    },
    {
        "safety_criterion": "对安全关键功能的运行，应在接到两个或更多个相同的信息后才能执行；",
        "requirement": "飞行控制系统应确保在接收到两个或更多个冗余传感器的相同导航数据后，才执行关键的飞行控制指令。"
    },
    {
        "safety_criterion": "对安全关键信息，不能仅仅由单一CPU命令产生；",
        "requirement": "飞行控制系统应采用冗余设计，确保安全关键指令（如姿态控制、发动机点火等）由多个独立的CPU共同验证和执行。"
    },
    {
        "safety_criterion": "不能用寄存器和I/O端口来存储安全关键信息；",
        "requirement": "飞行控制系统应使用非易失性存储器存储关键飞行参数和安全数据。"
    },
    {
        "safety_criterion": "软件通过接口从外部设备（如传感器、NVM、数据库、其他系统等）读取数据，对外部设备进行检查，分析当外部设备处于硬件故障时，输出的正确性",
        "requirement": "系统应能够检测并处理传感器故障，确保在传感器失效时，飞行控制系统的输出仍保持正确性和稳定性。"
    },
    {
        "safety_criterion": "安全关键信息的表示：使安全关键信息不会因一位或两位差错而引起系统故障。安全关键信息与其他信息之间应保持一定的码距。",
        "requirement": "导航系统应确保关键飞行数据（如高度、速度、航向）的编码方式能够防止一位或两位差错导致的系统故障。"
    },
    {
        "safety_criterion": "安全关键信息的决策判断依据不得依赖于全“1”或全“0”的输入（尤其是从外部传感器传来的信息）；",
        "requirement": "飞行控制系统应确保所有安全关键信息的决策判断不依赖于全‘1’或全‘0’的传感器输入，以防止误判。"
    },
    {
        "safety_criterion": "与硬件状态变化有关的程序设计应考虑状态检测的次数或时间，无时间依据的情况下可用循环等待次数作为依据，超过一定次数作超时处理",
        "requirement": "飞行控制系统应定期检测发动机状态，若在规定时间内未收到有效的状态反馈，系统应触发超时处理并切换至备用控制模式。"
    },
    {
        "safety_criterion": "应提供监控定时器或类似措施，以确保微处理器或计算机具有处理程序超时或死循环故障的能力；",
        "requirement": "飞行控制系统应具备监控定时器，以确保在检测到处理程序超时或死循环故障时，能够自动触发故障恢复机制。"
    },
    {
        "safety_criterion": "监控定时器应力求采用独立的时钟源，用独立的硬件实现；若采用可编程定时器实现，应统筹设计计数时钟频率和定时参数，力求在外界干扰条件下，定时器受到干扰后定时参数的最小值大于系统重新初始化所需的时间值，最大值小于系统允许的最长故障处理时间值；",
        "requirement": "飞行控制系统应配备独立的硬件监控定时器，确保在外部干扰条件下，定时器的最小值大于系统重新初始化所需时间，最大值小于系统允许的最长故障处理时间。"
    },
    {
        "safety_criterion": "必须要有计时器复位设计，应使软件不能进入某个内部循环或作为循环指令序列的一部分复位该计时器。适用时必须要使系统返回到某个已知的安全状态并向操作员报警；",
        "requirement": "飞行控制系统应具备计时器复位机制，确保在软件进入无限循环时，系统能够自动复位并返回到安全状态，同时向地面控制站发送警报。"
    },
    {
        "safety_criterion": "计时器的设计必须确保主要CPU时钟的失效不能损害其功能；",
        "requirement": "系统应具备冗余计时器，确保在主CPU时钟失效时，仍能准确执行关键任务的定时和同步功能。"
    },
    {
        "safety_criterion": "必须将安全关键的部件与非安全关键部件隔开；",
        "requirement": "飞行控制计算机和导航系统应物理隔离，确保安全关键功能不受非安全关键功能的影响。"
    },
    {
        "safety_criterion": "要文档化安全关键部件在设计层次结构中的位置和功能；",
        "requirement": "系统应详细记录关键飞行控制组件（如自动驾驶仪、导航系统）在系统架构中的位置和功能。"
    },
    {
        "safety_criterion": "最小化安全关键部件的数目。安全关键部件之间的接口的设计也应该实现最小交互（低耦合）；",
        "requirement": "飞行控制系统应尽量减少关键传感器和执行器的数量，并确保这些关键部件之间的接口设计为低耦合。"
    },
    {
        "safety_criterion": "软件通过接口从外部设备（如传感器、NVM、数据库、其他系统等）读取数据，对外部设备进行检查，分析当外部设备通信中断时，输出的正确性",
        "requirement": "系统应能够检测并处理卫星与地面站通信中断的情况，确保在通信恢复后数据的一致性和完整性。"
    },
    {
        "safety_criterion": "需要文档化每个安全关键部件是如何追溯到初始安全需求的，以及该需求是如何实现的；",
        "requirement": "系统应能够生成并维护每个安全关键部件的追溯文档，确保每个部件的需求和实现过程可追溯。"
    },
    {
        "safety_criterion": "除了中断情形外，软件模块必须使用单入口和单出口的控制结构；",
        "requirement": "飞行控制软件模块应确保在非中断情况下，使用单入口和单出口的控制结构，以保证飞行任务的稳定性和安全性。"
    },
    {
        "safety_criterion": "对于计算系统的安全关键子系统必须编写故障检测和隔离程序；",
        "requirement": "飞行控制系统必须具备故障检测和隔离功能，确保在关键子系统出现故障时能够及时识别并隔离故障，保证飞行安全。"
    },
    {
        "safety_criterion": "采用模块调用方式，而不采用直接访问模块内部有关信息的方式；",
        "requirement": "飞行控制软件应通过模块化接口调用各子系统功能，禁止直接访问子系统的内部数据和状态。"
    },
    {
        "safety_criterion": "将一些可能发生变化的因素或者需要经常修改的部分，尽量放在少数几个模块中；",
        "requirement": "飞行控制软件应将所有与飞行参数和环境变量相关的配置集中管理，确保修改时只需更新少数模块。"
    },
    {
        "safety_criterion": "所有标志必须进行严格的定义，并编制标志的使用说明；对于安全关键标志，在其被使用的软件单元里，要保证唯一并且用于单一目的；",
        "requirement": "飞行控制系统中的所有安全关键标志（如紧急降落标志、发动机故障标志等）必须在软件单元中唯一定义，并且只能用于单一目的。"
    },
    {
        "safety_criterion": "对无用中断应确保其是被屏蔽的，并对无用中断设置入口并返回；",
        "requirement": "飞行控制系统应能够屏蔽并处理无关的中断信号，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "要确保中断的边缘触发有防止毛刺的措施（硬件或软件方法都可以），对电平触发要确保其电平宽度；",
        "requirement": "飞行控制系统应具备防止毛刺的措施，确保中断信号的可靠触发，并对电平触发信号进行宽度检测。"
    },
    {
        "safety_criterion": "对可能的误中断以及频繁中断的影响，必须要有合理的措施；",
        "requirement": "系统应具备抗误中断和频繁中断的能力，确保导航和控制功能的连续性和稳定性。"
    },
    {
        "safety_criterion": "必须屏蔽不用的中断源。不使用的中断源一定要通过控制字等来进行屏蔽，而且要将不使用的中断源，编为空处理的中断服务子程序，即只有一条返回语句。",
        "requirement": "飞行控制系统应禁用所有未使用的中断源，并将这些中断源的处理程序设置为空处理子程序，以防止意外触发。"
    },
    {
        "safety_criterion": "对接口数据的等价类进行检查，分析数据取值在不同输出等价类之间切换时输出的正确性",
        "requirement": "系统应能够对飞行控制指令的等价类进行检查，确保在不同飞行模式切换时，控制指令的输出正确无误。"
    },
    {
        "safety_criterion": "对不同余度的连续型接口数据取值进行检查，分析两个或多个余度接口数据“取值不一致，即取值之差超出规定阈值”等情况下，功能实现的正确性",
        "requirement": "系统应能够实时监测并比较冗余传感器（如姿态传感器、高度传感器）的数据，当数据差异超过预设阈值时，触发警报并采取相应的安全措施。"
    },
    {
        "safety_criterion": "严禁从中断服务子程序中使用非中断返回语句返回。除特殊需要外，一定要避免从中断服务子程序中使用跳转语句或子程序返回语句直接出去，应该使用正常中断返回语句。",
        "requirement": "飞行控制系统的中断服务子程序应确保仅通过正常中断返回语句返回，以防止意外跳转和系统不稳定。"
    },
    {
        "safety_criterion": "确保系统功能寄存器设置前关中断，防止中断影响寄存器的设置。在进行清中断使能寄存器和设置中断屏蔽寄存器之前应关中断，禁止其他中断影响这两个寄存器的设置。",
        "requirement": "飞行控制系统的中断管理模块在设置功能寄存器时应先关闭中断，确保寄存器设置的完整性和一致性。"
    },
    {
        "safety_criterion": "软件设计时要考虑中断处理的时序。软件中有多个中断处理时，一定要注意各个中断处理间的时序关系，尤其是可嵌套中断间的时序关系。",
        "requirement": "飞行控制软件应确保在多个中断处理（如姿态控制、导航更新和故障检测）同时发生时，中断处理的时序关系正确，避免嵌套中断导致的系统不稳定。"
    },
    {
        "safety_criterion": "要有中断现场的保存和恢复。充分考虑中断任意时候都会发生的特点，保存好需要保护的现场，并在中断服务子程序返回时正确恢复现场。",
        "requirement": "飞行控制系统应具备在中断发生时保存当前飞行状态和任务参数，并在中断处理完成后正确恢复这些参数的功能。"
    },
    {
        "safety_criterion": "验证在程序设计时是否考虑中断的优先级。由于软件中的中断有优先级，同时中断程序和主程序也存在相互的优先顺序，因此这些优先级顺序的程序间，尽量避免对同一变量进行赋值操作，若存在不可避免的情况，也要进行临界区保护。",
        "requirement": "飞行控制系统应确保中断处理程序和主程序在访问关键飞行参数时进行互斥操作，以防止数据不一致和竞态条件。"
    },
    {
        "safety_criterion": "中断初始化时要将所需要的全部资源进行初始化设置，如触发方式和所需要使用的变量等。",
        "requirement": "在飞行器启动过程中，系统应初始化所有必要的传感器和通信链路，确保其正常工作。"
    },
    {
        "safety_criterion": "在中断的使用过程中，要严格按照“阻止关中断初始化开中断使能”的顺序进行操作。",
        "requirement": "系统应确保在飞行控制任务中断处理过程中，严格按照‘禁止中断、初始化、恢复中断使能’的顺序操作，以保证任务的连续性和安全性。"
    },
    {
        "safety_criterion": "验证软件针对具体CPU中断机制，是否有措施应对可能存在同一中断多次响应（如电平触发方式、电平宽度较宽时）的情况。",
        "requirement": "飞行控制软件应具备处理多次CPU中断的能力，确保在电平触发方式下不会因中断响应延迟导致飞行控制失灵。"
    },
    {
        "safety_criterion": "禁止使用中断自嵌套。",
        "requirement": "飞行控制软件应禁止使用中断自嵌套，确保系统在高负载情况下仍能稳定运行。"
    },
    {
        "safety_criterion": "系统和软件必须在安全的状态下（in a safe state）启动开机同步。（此处安全状态是相对于故障状态而言）",
        "requirement": "飞行控制系统在启动时必须验证所有关键传感器和执行器的状态，确保它们处于正常工作状态。"
    },
    {
        "safety_criterion": "对不同余度的离散型接口数据取值进行检查，分析两个或多个余度接口数据“取值不一致”等情况下，功能实现的正确性",
        "requirement": "系统应能够实时监测并比较多个冗余传感器的飞行数据，确保在数据不一致时能够进行正确的故障检测和处理。"
    },
    {
        "safety_criterion": "内部的软件过程模型必须更新以反映在初始启动和暂时关闭后实际的过程状态，开机启动后，所有的局部变量必须正确的初始化。",
        "requirement": "系统在每次启动和重新启动后，必须正确初始化所有飞行控制变量和状态参数，确保飞行控制系统的正常运行。"
    },
    {
        "safety_criterion": "必须有对应的软件行为来处理没有输入的情况。",
        "requirement": "飞行控制系统在接收到无效或缺失的传感器数据时，应自动切换到预设的安全模式并记录故障信息。"
    },
    {
        "safety_criterion": "当等待时间间隔即将过去而未接收到需要的输入时或时间间隔结束且超时控制措施触发前必须包含一个延迟因素（延迟时间值受系统采集输入频率、反应时间、生成输出所需时间等，延迟时间不能为0）。",
        "requirement": "系统应具备超时检测机制，确保在规定时间内未接收到关键飞行数据时，自动触发延迟措施，以防止错误的控制指令被执行。"
    },
    {
        "safety_criterion": "指定时间间隔或者指定时间前输入信号未送达的情况，必须经行处理，例如故障处理、故障恢复机制。",
        "requirement": "系统应具备在指定时间间隔内未接收到关键传感器数据时，自动触发故障处理和恢复机制的功能。"
    },
    {
        "safety_criterion": "同步过程中，禁止中断，同步完成后，是能中断。",
        "requirement": "在飞行控制系统的数据同步过程中，禁止任何中断操作，确保数据完整性和一致性；同步完成后，允许中断操作。"
    },
    {
        "safety_criterion": "同步恢复后，达到危险的路径必须引向安全路径。同步恢复机制终止应导致一个安全的系统状态。",
        "requirement": "在飞行控制系统同步恢复后，任何可能导致飞行安全风险的路径必须自动切换到预设的安全路径，确保系统恢复到安全状态。"
    },
    {
        "safety_criterion": "存储的数据量应不超过可用的容量。",
        "requirement": "飞行控制系统应确保飞行数据记录器的存储容量始终不超过其最大容量，以防止数据丢失或覆盖。"
    },
    {
        "safety_criterion": "对每个传输的数据变量值给出相应的行为定义和可接受的变化范围。每一个值，无论是界内还是越界值，均必须进行处理。",
        "requirement": "飞行控制系统应定义并处理所有飞行参数（如高度、速度、姿态角等）的正常范围和越界情况，确保系统在任何情况下都能安全运行。"
    },
    {
        "safety_criterion": "必须有对应的软件行为来处理在给定的时间没有输入的情况，避免输入故障对系统状态的影响。",
        "requirement": "飞行控制系统应具备超时检测机制，确保在预定时间内未接收到导航指令时，自动切换至安全模式。"
    },
    {
        "safety_criterion": "当数据输入达到率超过输入容量（input capacity）后，需要考虑异常处理。针对信号饱和(data overflow)、重复命令(duplicate commands)以及溢出保护。",
        "requirement": "飞行控制系统应具备数据输入超载保护机制，能够处理信号饱和、重复命令和溢出情况，确保系统稳定运行。"
    },
    {
        "safety_criterion": "对不同余度的接口数据进行检查，分析“单个余度故障、全部余度均故障（如数据异常、时序故障、通信故障、目的设备故障等）”情况下，功能实现的正确性",
        "requirement": "系统应能够检测并处理导航系统中多余度传感器数据的故障，确保在单个或全部余度故障情况下，飞行控制系统的正确性和可靠性。"
    },
    {
        "safety_criterion": "内存使用应满足可用性(内存动态分配问题)。",
        "requirement": "飞行控制系统应确保在任务执行过程中，内存资源的动态分配不会导致系统崩溃或性能下降。"
    },
    {
        "safety_criterion": "I/O通道的使用（负载）应满足容量和可用性。",
        "requirement": "系统应确保所有飞行控制I/O通道的负载不超过其最大容量，并保持高可用性。"
    },
    {
        "safety_criterion": "程序存储空间必须充分考虑可执行代码的规模。",
        "requirement": "飞行控制软件的存储空间应足够大，以支持所有飞行任务所需的可执行代码和数据。"
    },
    {
        "safety_criterion": "对于标志单元必须：遵守读写互斥的规则，如写方置位，读方清除。",
        "requirement": "飞行控制系统的标志单元在进行状态标志读写时，必须确保读写互斥，防止数据冲突和不一致。"
    },
    {
        "safety_criterion": "每种状态下均需处理超时（指定间隔或指定时间前输入数据未送达）。",
        "requirement": "系统应能够在飞行控制指令超时（如超过1秒未接收到新的指令）时，自动切换至安全模式并记录超时事件。"
    },
    {
        "safety_criterion": "发生故障时，软件必须提供故障抑制（fault containment）机制以防止错误在余度系统的单元接口中交叉传输，如置永久故障或切除通道。",
        "requirement": "飞行控制系统应具备故障隔离机制，确保单个通道故障不会影响其他通道的正常运行。"
    },
    {
        "safety_criterion": "如果一个正确成员变量决定于某个值，则表决后所有的正确成员变量都决定于该相同的值。",
        "requirement": "飞行控制系统中的冗余传感器应确保在表决过程中，所有正确的传感器输出值一致。"
    },
    {
        "safety_criterion": "如果所有成员变量的初始建议值相同，则表决后所有成员变量都要决定于此值。",
        "requirement": "飞行控制系统的冗余模块在初始化时，所有冗余通道的初始状态参数应一致，以确保表决机制的正确性。"
    },
    {
        "safety_criterion": "降级过程应是平稳的，响应时间不能突然或者不正常地变化。要求转入不同余度的处理逻辑时应该是平稳的。",
        "requirement": "在飞行控制系统降级过程中，应确保姿态控制和导航系统的响应时间平稳过渡，避免突变。"
    },
    {
        "safety_criterion": "由故障状态转为安全状态（fail-safe，部分或者完全关闭）的模式路径必须得到说明。安全但是功能降级模式的持续时间应尽量最小化。",
        "requirement": "在检测到关键系统故障时，飞行控制系统应自动切换至安全模式，并在最短时间内恢复至最低安全功能状态。"
    },
    {
        "safety_criterion": "对不同余度所处的工作状态进行检查，分析“两个或多个余度处于不同状态”等情况下，功能实现的正确性",
        "requirement": "系统应能够实时监测和同步多个冗余飞行控制计算机的状态，确保在不同冗余单元处于不同状态时，飞行控制指令的一致性和正确性。"
    },
    {
        "safety_criterion": "要用暂时的（temporal history of）模式转换来避免进入不断降级状态和正常状态的循环。",
        "requirement": "系统应具备模式转换管理功能，确保在模式转换过程中避免进入不断降级和正常状态的循环。"
    },
    {
        "safety_criterion": "资源分配及余量要求；在软件设计时，应确定有关软件模块的存储量、输入输出通道的吞吐能力以及处理时间要求，并保证，满足系统规定的余量要求，一般要求应留有不少于20%的余量；",
        "requirement": "飞行控制系统应确保在最大任务负载下，仍保留不少于20%的处理能力和存储余量，以应对突发情况。"
    },
    {
        "safety_criterion": "时序安排的余量考虑；软件工作的时序安排，要结合具体的被控对象确定各种周期；如采样周期、数据计算处理周期、控制周期等；当各种周期在时间轴上安排不下时，应采取更高性能的CPU或更多CPU并行处理来解决，以确保软件的工作时序之间留有余量；",
        "requirement": "飞行控制系统应确保在不同飞行阶段（如起飞、巡航、着陆）的采样周期、数据计算处理周期和控制周期合理安排，并留有足够的时序余量，必要时采用高性能CPU或多CPU并行处理。"
    },
    {
        "safety_criterion": "验证安全性关键部件的设计是如何应对于安全性需求的；包括来自任何原型的分析或者仿真的信息；规定这些部件的设计余量；",
        "requirement": "关键飞行控制组件（如自动驾驶仪、姿态控制系统）的设计应通过仿真和原型测试验证其在极端条件下的可靠性和容错能力，确保设计余量满足安全需求。"
    },
    {
        "safety_criterion": "采样频率和物理参数的变化速率（对于关键信号和用于闭环控制的参数，采样通常至少是系统特性频率的10倍以上；系统性能模型、仿真和测试数据的有效性）",
        "requirement": "系统应确保关键飞行控制参数（如姿态角、速度、高度）的采样频率不低于系统特性频率的10倍，以保证闭环控制的稳定性和准确性。"
    },
    {
        "safety_criterion": "数字化系统必须有足够长的字长，以减少量化噪声的影响，从而确保系统的稳定性；",
        "requirement": "飞行控制系统应具备高精度的数字信号处理能力，确保导航和控制指令的准确性和稳定性。"
    },
    {
        "safety_criterion": "检查定时时钟的参照数据、同步和精度（时间抖动），确保控制系统能够适应某些控制参数始终过时的情况；",
        "requirement": "导航系统应具备高精度的时钟同步功能，确保飞行控制参数在时钟数据过时的情况下仍能准确执行。"
    },
    {
        "safety_criterion": "用户接口必须进行防错设计；",
        "requirement": "飞行控制系统的用户接口应具备防错功能，确保操作人员无法输入无效或危险的指令。"
    },
    {
        "safety_criterion": "不能有增强错误的强制条件；比如，“使用任何可能方法，完成这项任务”或者是在某一段时间内要求；",
        "requirement": "系统应确保在任何情况下，飞行控制指令的执行不会导致飞行器超出其安全操作范围。"
    },
    {
        "safety_criterion": "尽量保证整个系统中保持一致性（相同的颜色、窗口布局、字体大小等）",
        "requirement": "飞行控制界面应保持一致的视觉风格，包括颜色、窗口布局和字体大小，以减少飞行员的操作误差。"
    },
    {
        "safety_criterion": "不同状态、工作阶段下功能的控制解算过程不同，对功能输入进行检查，分析“未考虑工作阶段、未考虑工作状态”等情况下功能处理的正确性",
        "requirement": "系统应能够根据不同飞行阶段和状态，动态调整控制算法参数，确保飞行控制的准确性和安全性。"
    },
    {
        "safety_criterion": "如果需要若干秒或更长时间的处理功能，则在处理期间应向操作员提供状态指示；",
        "requirement": "在长时间任务处理期间，系统应向地面控制站提供实时状态指示，包括任务进度和当前状态。"
    },
    {
        "safety_criterion": "安全关键状态变更时，确保有状态变更报告或变更记录；",
        "requirement": "在飞行控制系统中，任何安全关键状态变更（如自动驾驶模式切换、发动机状态变化等）应生成实时状态变更报告并记录。"
    },
    {
        "safety_criterion": "软件编码应符合该软件的安全性编码准则要求。",
        "requirement": "飞行控制软件的编码应遵循严格的安全编码标准，确保代码的健壮性和安全性。"
    },
    {
        "safety_criterion": "所有分配的动态内存都在一定时间内得到释放，防止内存泄露。",
        "requirement": "飞行控制系统应确保所有动态分配的内存资源在任务完成后及时释放，防止内存泄露导致系统性能下降或失效。"
    },
    {
        "safety_criterion": "严格限制使用页面调度和内存交换，防止时间发生延迟。",
        "requirement": "飞行控制系统应禁止使用页面调度和内存交换，确保实时响应和控制精度。"
    },
    {
        "safety_criterion": "避免使用goto语句。",
        "requirement": "飞行控制软件应避免使用goto语句，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "嵌套层次应得到限制，减少控制流的复杂性。",
        "requirement": "飞行控制软件应限制嵌套逻辑的深度，确保控制流的简洁性和可维护性。"
    },
    {
        "safety_criterion": "变量在使用前应初始化。",
        "requirement": "系统应确保所有飞行控制参数在使用前已正确初始化。"
    },
    {
        "safety_criterion": "在较大的程序中应使用单入口和单出口。",
        "requirement": "飞行控制软件应采用模块化设计，确保每个模块具有单一入口和单一出口，以提高代码的可维护性和安全性。"
    },
    {
        "safety_criterion": "使用括号来说明运算的优先顺序。",
        "requirement": "飞行控制软件应确保在计算飞行轨迹时，通过使用括号明确运算的优先顺序，以防止计算错误。"
    },
    {
        "safety_criterion": "对功能的多个输入数据进行检查，分析多个输入数据取值为“正常值等价类组合、异常值等价类组合、边界值组合、初始值组合、安全值组合、缺省值组合”等情况下功能处理的正确性",
        "requirement": "系统应能够对多个传感器输入的数据进行综合检查，确保在正常、异常、边界、初始、安全和缺省值组合情况下，飞行控制逻辑的正确性和可靠性。"
    },
    {
        "safety_criterion": "中断处理应只完成一项最基本的工作，应尽可能快的返回主程序控制。",
        "requirement": "飞行控制系统的中断处理程序应仅执行必要的紧急任务，确保快速返回主控制循环，以维持飞行稳定性和响应性。"
    },
    {
        "safety_criterion": "应检查输入和输出数据的合理性。",
        "requirement": "系统应能够对飞行控制指令和传感器数据进行合理性检查，确保其在预设的安全范围内。"
    },
    {
        "safety_criterion": "应制定关于命名、注释、子程序规模等方面的编码标准。",
        "requirement": "飞行控制软件的源代码应遵循严格的命名规范、注释标准和子程序规模限制，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "使用单一目的的函数。",
        "requirement": "导航系统中的每个功能模块应仅执行单一任务，确保模块间的职责清晰，避免功能重叠。"
    },
    {
        "safety_criterion": "每个变量都用于单一目的。",
        "requirement": "飞行控制系统中的每个变量应仅用于单一目的，确保变量的清晰性和可追溯性。"
    },
    {
        "safety_criterion": "应将软件代码与硬件配置相关的代码进行隔离。",
        "requirement": "飞行控制软件应将与硬件配置相关的代码（如传感器和执行器驱动）与核心控制逻辑进行隔离。"
    },
    {
        "safety_criterion": "检查程序中是否出现不可达代码。",
        "requirement": "飞行控制软件应确保所有飞行模式切换逻辑代码均能被正确执行，无死代码存在。"
    },
    {
        "safety_criterion": "避免使用空操作或空循环来实现延时。",
        "requirement": "飞行控制软件应避免使用空操作或空循环来实现延时，确保实时性和响应性。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.1代码逻辑分析",
        "requirement": "飞行控制软件应通过静态代码分析工具进行逻辑验证，确保无逻辑错误和潜在的安全漏洞。"
    },
    {
        "safety_criterion": "逻辑重构需要从代码生成流程图，并将代码与设计说明和流程图进行比较",
        "requirement": "系统应能够自动生成飞行控制软件的逻辑流程图，并与设计文档进行比对，确保逻辑一致性。"
    },
    {
        "safety_criterion": "对功能的数据处理过程进行检查，分析数据处理过程是否存在除0的情况",
        "requirement": "系统应确保在计算飞行轨迹时，所有涉及的除法操作均需检查除数是否为零，以防止计算错误和系统崩溃。"
    },
    {
        "safety_criterion": "通过将代码中的方程式与设计中的方程式进行比较来完成方程式重构",
        "requirement": "飞行控制软件应能够自动对比设计文档中的数学模型与实际代码中的方程式，确保一致性。"
    },
    {
        "safety_criterion": "即使在关键的指令序列可能伪装为数据的情况下，也应标识关键的指令序列。分析员应确定每一条指令是否有效，并确定执行该指令的条件是否有效",
        "requirement": "飞行控制系统应能够识别并验证所有关键指令序列，确保其有效性，并在执行前确认指令条件的正确性。"
    },
    {
        "safety_criterion": "尽可能使用自动化的工具辅助进行代码逻辑分析",
        "requirement": "系统应集成自动化代码分析工具，以确保飞行控制软件的逻辑正确性和安全性。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.2代码数据分析",
        "requirement": "系统应能够对飞行控制软件的代码进行静态和动态分析，确保代码的正确性和安全性。"
    },
    {
        "safety_criterion": "代码数据分析的重点是分析软件中的数据结构和使用情况。数据分析应关注如何定义和组织数据项。通过将代码中所有数据项的值与设计中给出的描述项比较来完成代码数据分析",
        "requirement": "飞行控制软件应确保所有飞行参数和状态数据的定义和使用与设计规范一致，以防止数据错误导致的飞行异常。"
    },
    {
        "safety_criterion": "特别关注安全关键数据的完整性，防止其被无意地改变或者覆盖。例如，检查中断过程是否干扰安全关键的数据；检查说明为安全关键变量的“类型”",
        "requirement": "系统应确保飞行控制参数（如姿态角、速度、高度等）在传输和存储过程中不被无意修改或覆盖。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.3代码接口分析",
        "requirement": "系统应确保所有飞行控制软件模块之间的接口数据在传输过程中的一致性和完整性。"
    },
    {
        "safety_criterion": "验证一个软件部件的内部接口和外部接口的兼容性",
        "requirement": "飞行控制软件应确保与导航系统、传感器和执行器之间的数据接口兼容，以保证数据传输的准确性和实时性。"
    },
    {
        "safety_criterion": "检查参数适当地通过接口进行了传送",
        "requirement": "系统应确保飞行控制参数（如姿态角、速度、高度）在地面站与飞行器之间的传输过程中无误。"
    },
    {
        "safety_criterion": "验证接口各侧的数据规模、测量单位、字节序列和字节中的位次序是相同的",
        "requirement": "系统应确保所有飞行控制数据在传输过程中保持一致的数据规模、测量单位、字节序列和字节中的位次序。"
    },
    {
        "safety_criterion": "对功能的控制解算结果进行检查，分析控制解算结果为“正常值、异常值、边界值、极大极小值”等情况下功能处理的正确性",
        "requirement": "飞行控制系统应能够实时监测并处理姿态控制解算结果，确保在正常值、异常值、边界值和极大极小值情况下，飞行器的姿态调整和控制指令正确无误。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.4未使用代码分析",
        "requirement": "飞行控制软件应确保所有代码均被使用，无冗余代码，以避免潜在的安全隐患。"
    },
    {
        "safety_criterion": "在编码期间需要使用人工的方法（如代码走查）或工具检查是否存在未使用的代码，并对其未使用代码进行分析",
        "requirement": "飞行控制软件开发过程中，应定期进行代码审查，确保无冗余或未使用的代码，以提高系统可靠性和安全性。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.5中断分析",
        "requirement": "系统应能够实时检测并处理飞行控制软件中的中断，确保中断处理的及时性和准确性。"
    },
    {
        "safety_criterion": "列举该软件用到的全部中断，但不包括软中断。分析它们属于定时中断还是周期性中断或随机中断，是偶发的还是频繁的，是系统内的还是系统外的",
        "requirement": "飞行控制系统应能够识别并处理所有硬件中断，包括定时中断、周期性中断和随机中断，并区分其来源是系统内部还是外部。"
    },
    {
        "safety_criterion": "中断之间的关系：检查中断优先级分配情况；中断之间是否有约束机制，如A中断必须在B中断之后出现等",
        "requirement": "飞行控制系统应确保导航中断的优先级高于通信中断，并且导航中断必须在通信中断之后处理。"
    },
    {
        "safety_criterion": "中断的处理流程：中断入口的保护；中断出口的恢复；中断执行时间是否合适；开中断的时机是否恰当",
        "requirement": "飞行控制系统应确保在中断发生时，保护中断入口，恢复中断出口，并在适当的时间内完成中断处理，以保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "中断的嵌套：中断控制初始化是否和硬件电路相容，是否和系统功能要求一致；可能发生的最大嵌套次数；最大嵌套时的执行时间测试和估计；最大嵌套时的堆栈使用情况；是否有自嵌套的情况；是否会丢失低级中断；是否会发生死锁",
        "requirement": "飞行控制系统应确保在多中断嵌套情况下，关键任务的执行时间和堆栈使用情况符合安全要求，避免死锁和低级中断丢失。"
    },
    {
        "safety_criterion": "资源竞争检查：有无共享的缓冲区、共享变量和I/O端口存在。读写处理是否有冲突；是否有同时出现的中断申请",
        "requirement": "飞行控制系统应确保在多任务环境下，对共享的飞行数据缓冲区和控制变量的访问进行同步控制，防止读写冲突和中断冲突。"
    },
    {
        "safety_criterion": "异常情况处理：是否采用了防止干扰引起中断误触发的措施（含硬件），如抑制干扰源、切断干扰通路、提高抗干扰能力等；发生误触发或丢失中断对系统功能有哪些影响",
        "requirement": "系统应具备抗电磁干扰能力，确保在强电磁环境下，飞行控制系统的中断信号不会误触发或丢失，以保证飞行安全。"
    },
    {
        "safety_criterion": "再入代码：再入代码是为中断时不丢失状态信息而设计的。检查再入部件为每一个中断保存了足够的数据，并且数据和系统状态恢复正确",
        "requirement": "系统应能够确保在飞行中断后，能够恢复并继续执行任务，同时保持飞行状态参数和任务数据的完整性。"
    },
    {
        "safety_criterion": "对功能的控制解算过程进行检查，分析控制解算过程出现超时（未在规定时间内返回结果）等情况下的功能处理正确性",
        "requirement": "系统应能够实时监测并处理飞行控制指令的解算过程，确保在超时情况下采取安全措施，如自动切换到备用控制模式。"
    },
    {
        "safety_criterion": "可中断的代码段/部件：如果定时关键区域无法接受延时，则应确保对其进行了保护而不被中断。检查不应被中断的指令序列",
        "requirement": "飞行控制软件应确保关键任务代码段（如姿态控制和导航计算）在执行过程中不被中断，以防止延时导致的飞行安全问题。"
    },
    {
        "safety_criterion": "空中断处理：考虑在接收到一个空中断时会发生什么，需要如何处理",
        "requirement": "系统应具备在接收到空中断信号时，自动切换到备用系统并记录断点，确保任务的连续性和数据的完整性。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.6代码审查",
        "requirement": "系统应具备代码审查机制，确保飞行控制软件的逻辑正确性和安全性。"
    },
    {
        "safety_criterion": "应对关键重要软件进行代码审查，确保代码审查符合代码编码标准或规范。必要时可编制代码审查单以提高审查效果",
        "requirement": "飞行控制软件的代码应定期进行审查，确保符合航空工业的编码标准和规范。"
    },
    {
        "safety_criterion": "1 代码验证准则（DMYZZZ）-1.7定时、吞吐量和规模分析",
        "requirement": "系统应能够实时监控和分析飞行控制软件的定时性能、数据吞吐量和代码规模，确保在高负载和复杂任务条件下仍能稳定运行。"
    },
    {
        "safety_criterion": "随着编码阶段的结束，便可以测量定时、吞吐量和规模参数",
        "requirement": "系统应能够实时监测和记录飞行控制系统的响应时间、数据处理吞吐量和系统资源占用情况。"
    },
    {
        "safety_criterion": "为了确定内存的最大使用量、定时和吞吐量参数可能需要运行特定的测试。其中有些测试可能推迟到测试阶段进行。因为在测试阶段这些参数才正式地包含在功能测试或者负载/强度测试之中",
        "requirement": "系统应能够实时监控和记录内存使用情况、定时和吞吐量参数，并在测试阶段进行特定的负载和强度测试，以确保飞行控制系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "2 通用编程规范（TYBCGF）",
        "requirement": "飞行控制软件应遵循通用编程规范，确保代码的可读性、可维护性和安全性。"
    },
    {
        "safety_criterion": "采用标准化的程序设计语言进行编程",
        "requirement": "飞行控制软件应使用标准化的编程语言（如C++或Ada）进行开发，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "在同一系统中，应尽量减少编程语言的种类；应按照软件的类别，在实现同一类软件时只采用一种版本的高级语言进行编程，必要时，也可采用一种机器的汇编语言编程",
        "requirement": "飞行控制软件应统一使用同一版本的C++语言进行开发，确保代码的一致性和可维护性。"
    },
    {
        "safety_criterion": "对功能的执行条件进行检查，分析功能执行过程中执行条件“不满足、再次满足”等情况下功能处理的正确性",
        "requirement": "系统应能够实时监测发动机工作状态，当发动机从非工作状态切换到工作状态时，确保所有安全检查条件满足后才能启动。"
    },
    {
        "safety_criterion": "软件编码时应遵循编程标准或规范，以保证软件实现的安全性",
        "requirement": "飞行控制软件应遵循MISRA C编程标准，确保代码的安全性和可靠性。"
    },
    {
        "safety_criterion": "应选用经过优选的编译程序或汇编程序，杜绝使用盗版软件",
        "requirement": "飞行控制软件应使用经过认证的编译器和汇编器，确保代码的可靠性和安全性。"
    },
    {
        "safety_criterion": "为提高软件的可移植性和保证程序的正确性，建议只用语言编译程序中符合标准的部分编程，尽量减少用编译程序引入的非标准部分进行编程",
        "requirement": "飞行控制软件应使用符合行业标准的编程语言和编译器，确保软件的可移植性和正确性。"
    },
    {
        "safety_criterion": "不得使用GOTO语句",
        "requirement": "飞行控制软件应避免使用GOTO语句，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "禁止使用未初始化的变量",
        "requirement": "飞行控制软件应确保所有变量在使用前均被初始化，以防止未定义行为影响飞行安全。"
    },
    {
        "safety_criterion": "注意内存的管理与使用，避免造成内存泄露",
        "requirement": "飞行控制软件应具备自动检测和释放未使用的内存功能，确保长时间运行时不会出现内存泄露。"
    },
    {
        "safety_criterion": "禁止程序正常执行时直接从过程中跳出",
        "requirement": "飞行控制软件应确保在正常飞行过程中，任何子程序或模块的执行不得被异常中断，以防止飞行状态的突然变化。"
    },
    {
        "safety_criterion": "注意由编译程序引入的不确定的行为（比如：产生无法覆盖的目标代码）",
        "requirement": "编译器应生成可预测且可验证的飞行控制软件代码，确保所有目标代码均被覆盖和测试。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.1 声明定义",
        "requirement": "飞行控制软件应遵循C语言编程规范，确保所有变量和函数在使用前进行声明和定义。"
    },
    {
        "safety_criterion": "禁止通过宏定义改变关键字和基本类型含义",
        "requirement": "飞行控制软件应禁止使用宏定义来改变关键字和基本类型的含义，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "对接口数据中具有连续型值域的数据位进行检查，分析多个周期数据取值不发生变化情况下输出的正确性",
        "requirement": "系统应能够检测并处理飞行器传感器数据在多个周期内未发生变化的情况，确保输出的飞行控制指令正确无误。"
    },
    {
        "safety_criterion": "两个或多个存在转移关系的状态具有同一个功能，对状态转移前后功能的执行情况进行检查，分析功能在状态转移后“开始执行、保持执行、中断执行”等情况下功能处理的正确性",
        "requirement": "系统应能够确保在飞行模式切换（如从巡航模式切换到着陆模式）时，导航和控制功能的连续性和正确性。"
    },
    {
        "safety_criterion": "禁止将其他标识宏定义为关键字和基本类型",
        "requirement": "飞行控制软件应禁止使用自定义宏定义覆盖系统关键字和基本数据类型，确保代码的可读性和安全性。"
    },
    {
        "safety_criterion": "用typede自定义的类型禁止被重新定义",
        "requirement": "飞行控制系统中的所有自定义数据类型（如飞行模式、导航参数等）应禁止被重新定义，以确保数据的一致性和安全性。"
    },
    {
        "safety_criterion": "禁止重新定义C或C++关键字",
        "requirement": "飞行控制软件应禁止重新定义C或C++关键字，确保代码的可读性和安全性。"
    },
    {
        "safety_criterion": "禁止#define被重复定义",
        "requirement": "飞行控制软件应确保所有宏定义（如飞行模式、状态标志等）在编译时仅被定义一次，防止重复定义导致的逻辑错误。"
    },
    {
        "safety_criterion": "函数中的#define和#undef必须配对使用",
        "requirement": "飞行控制软件中，所有预处理指令#define和#undef必须成对出现，确保编译时宏定义的正确性和一致性。"
    },
    {
        "safety_criterion": "以函数形式定义的宏，参数和结果必须用括号括起来",
        "requirement": "系统应确保所有飞行控制参数的宏定义均以函数形式定义，参数和结果必须用括号括起来，以防止计算错误。"
    },
    {
        "safety_criterion": "结构、联合、枚举的定义中必须定义标识名",
        "requirement": "飞行控制软件中所有结构体、联合体和枚举类型必须定义明确的标识名，以确保数据的准确性和可追溯性。"
    },
    {
        "safety_criterion": "结构体定义中禁止含有无名结构体",
        "requirement": "飞行控制软件的结构体定义中应避免使用无名结构体，确保数据结构的清晰性和可维护性。"
    },
    {
        "safety_criterion": "位定义的有符号整形变量位长必须大于1",
        "requirement": "飞行控制软件应使用大于1位的有符号整形变量来表示关键飞行参数（如高度、速度等），确保数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "位定义的整数型变量必须明确定义是有符合还是无符号的",
        "requirement": "飞行控制软件中的所有整数型变量必须明确定义为有符号或无符号，以确保数据处理的准确性和一致性。"
    },
    {
        "safety_criterion": "对功能的逻辑判断条件和逻辑分支进行检查，分析“逻辑恒假、逻辑恒真、逻辑判断条件错误、逻辑分支遗漏”等情况下功能处理的正确性",
        "requirement": "飞行控制系统应能够检测并处理所有逻辑判断条件和分支，确保在任何情况下都能正确执行飞行任务。"
    },
    {
        "safety_criterion": "位定义的变量必须是同长度的类型且定义位禁止跨越类型的长度",
        "requirement": "飞行控制软件应确保所有位定义的变量在数据结构中具有相同的长度，并且位定义不得跨越数据类型的长度限制。"
    },
    {
        "safety_criterion": "函数声明中必须对参数类型进行声明，并带有变量名",
        "requirement": "飞行控制软件的函数声明中必须明确指定参数类型和变量名，确保参数传递的准确性和可追溯性。"
    },
    {
        "safety_criterion": "函数声明必须与函数原型一致",
        "requirement": "飞行控制软件中的所有函数声明必须与函数原型一致，确保代码的一致性和可维护性。"
    },
    {
        "safety_criterion": "函数中的参数必须使用类型声明",
        "requirement": "飞行控制软件中的所有参数必须明确声明其数据类型，以确保数据处理的准确性和一致性。"
    },
    {
        "safety_criterion": "外部声明的变量，类型必须与定义一致",
        "requirement": "系统应确保所有外部通信接口的变量类型与内部定义的变量类型一致，以防止数据类型不匹配导致的错误。"
    },
    {
        "safety_criterion": "禁止在函数体内使用外部声明",
        "requirement": "飞行控制软件应确保所有函数内部使用的变量均在函数内部声明，禁止使用外部声明的变量。"
    },
    {
        "safety_criterion": "数组定义禁止没有显式的边界限定",
        "requirement": "飞行控制软件应确保所有数组定义具有明确的边界限定，防止数组越界访问导致的系统故障。"
    },
    {
        "safety_criterion": "禁止使用extern声明对变量初始化",
        "requirement": "飞行控制系统代码中禁止使用extern声明对全局变量进行初始化，确保数据的完整性和一致性。"
    },
    {
        "safety_criterion": "用于数值计算的字符型变量必须明确定义是由符合还是无符号",
        "requirement": "飞行控制软件应确保所有用于数值计算的字符型变量（如飞行高度、速度等）明确定义为有符号或无符号。"
    },
    {
        "safety_criterion": "禁止在#include语句中使用绝对路径",
        "requirement": "飞行控制软件的源代码中禁止使用绝对路径的#include语句，以确保代码的可移植性和安全性。"
    },
    {
        "safety_criterion": "对功能的循环判断条件进行检查，分析“循环判断条件恒假、恒真”等情况下功能处理的正确性",
        "requirement": "系统应能够检测并处理飞行控制循环中的异常条件，确保在循环判断条件恒假或恒真时，飞行控制逻辑仍能正确执行。"
    },
    {
        "safety_criterion": "禁止头文件重复包含",
        "requirement": "飞行控制软件应确保头文件不被重复包含，以防止编译错误和潜在的运行时故障。"
    },
    {
        "safety_criterion": "函数参数表为空时，必须使用void明确说明",
        "requirement": "飞行控制软件在定义无参数的函数时，必须使用void明确说明，确保代码的清晰性和可维护性。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.2 版面书写",
        "requirement": "飞行控制软件的源代码应遵循C语言编程规范，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "循环体必须用大括号括起来",
        "requirement": "飞行控制软件中的所有循环结构必须使用大括号明确界定，以确保代码的可读性和维护性。"
    },
    {
        "safety_criterion": "if、else if、else必须用大括号括起来",
        "requirement": "飞行控制软件的条件判断语句必须使用大括号括起来，以确保代码的可读性和安全性。"
    },
    {
        "safety_criterion": "禁止在头文件前有可执行代码",
        "requirement": "飞行控制软件的头文件中不得包含任何可执行代码，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "引起二义性理解的逻辑表达式，必须使用括号显示说明优先级顺序",
        "requirement": "系统应确保所有飞行控制指令的逻辑表达式在编程时使用括号明确优先级，避免二义性。"
    },
    {
        "safety_criterion": "逻辑判别表达式中的运算项必须要使用括号",
        "requirement": "飞行控制软件中的逻辑判别表达式必须使用括号明确运算优先级，确保控制指令的正确执行。"
    },
    {
        "safety_criterion": "禁止嵌套注释",
        "requirement": "飞行控制软件应禁止使用嵌套注释，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.3 指针使用",
        "requirement": "飞行控制软件应严格遵循C语言编程规范，确保指针使用安全，避免内存泄漏和非法访问。"
    },
    {
        "safety_criterion": "针对各项任务的持续时间进行检查，分析任务持续时间大于规定时间等情况下，功能处理的正确性",
        "requirement": "系统应能够实时监测并记录各飞行任务的持续时间，当任务持续时间超过预设阈值时，自动触发警报并采取相应措施。"
    },
    {
        "safety_criterion": "禁止指针的指针超过两级",
        "requirement": "飞行控制软件应确保指针的使用不超过两级，以防止内存访问错误和潜在的安全漏洞。"
    },
    {
        "safety_criterion": "函数指针的使用必须加以&明确说明",
        "requirement": "飞行控制软件应明确说明和验证所有函数指针的使用，确保其在不同飞行模式下的正确性和安全性。"
    },
    {
        "safety_criterion": "禁止对参数指针进行赋值",
        "requirement": "飞行控制软件应禁止对关键参数指针进行直接赋值，确保参数的完整性和安全性。"
    },
    {
        "safety_criterion": "禁止将局部变量地址做为函数返回值返回",
        "requirement": "飞行控制软件应确保不会将局部变量的地址作为函数返回值返回，以防止潜在的内存安全问题。"
    },
    {
        "safety_criterion": "禁止使用或释放未分配空间或已被释放的指针",
        "requirement": "飞行控制系统应确保所有内存资源在分配、使用和释放过程中严格管理，防止未分配或已释放的指针被使用。"
    },
    {
        "safety_criterion": "指针变量被释放后必须置为NULL",
        "requirement": "飞行控制软件在释放指针变量后，必须将其置为NULL，以防止悬空指针导致的系统异常。"
    },
    {
        "safety_criterion": "动态分配的指针变量定义时如未被分配空间必须初始化为NULL",
        "requirement": "飞行控制软件中的动态分配指针变量在定义时必须初始化为NULL，以防止未初始化指针导致的系统异常。"
    },
    {
        "safety_criterion": "动态分配的指针变量第一次使用前必须进行是否为NULL的判别",
        "requirement": "飞行控制软件在分配新的飞行任务参数指针时，必须先检查指针是否为NULL，确保安全初始化。"
    },
    {
        "safety_criterion": "空指针必须使用NULL，禁止使用整型数0",
        "requirement": "飞行控制软件在处理指针时，必须使用NULL表示空指针，禁止使用整型数0。"
    },
    {
        "safety_criterion": "禁止文件指针在退出时没有关闭文件",
        "requirement": "飞行控制软件在任务结束后必须确保所有日志文件和数据文件正确关闭，防止数据丢失或损坏。"
    },
    {
        "safety_criterion": "针对各项任务的持续时间进行检查，分析任务持续时间小于规定时间等情况下，功能处理的正确性",
        "requirement": "系统应能够实时监测并记录各项飞行任务的持续时间，确保任务在规定时间内完成，否则触发警报并采取相应措施。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.4 分支控制",
        "requirement": "飞行控制软件应确保所有分支控制逻辑在不同飞行模式切换时均能正确执行，防止逻辑错误导致的飞行异常。"
    },
    {
        "safety_criterion": "在if-else if语句中必须使用else分支",
        "requirement": "飞行控制软件在处理飞行模式切换时，必须包含默认的错误处理逻辑，确保在所有未预见的情况下系统能够安全进入预设的默认模式。"
    },
    {
        "safety_criterion": "条件判定分支如果为空，必须以单独一行的分号加注释进行明确说明",
        "requirement": "飞行控制软件中的条件判断分支必须在为空时，以单独一行的分号加注释明确说明，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "禁止使用空switch语句",
        "requirement": "飞行控制软件中应禁止使用空switch语句，确保所有状态切换逻辑都有明确的处理逻辑。"
    },
    {
        "safety_criterion": "禁止对bool量使用switch语句",
        "requirement": "飞行控制软件应避免使用switch语句处理布尔变量，以防止逻辑错误和提高代码可读性。"
    },
    {
        "safety_criterion": "禁止switch语句中只包含default语句",
        "requirement": "飞行控制软件应确保在所有飞行模式切换时，必须有明确的模式处理逻辑，不得仅依赖默认处理逻辑。"
    },
    {
        "safety_criterion": "Switch中的case和default必须以break或return终止，共用case必须加以明确注释",
        "requirement": "飞行控制软件中的状态切换逻辑必须确保每个case和default分支以break或return终止，共用case需明确注释，以防止意外的状态跳转导致飞行控制异常。"
    },
    {
        "safety_criterion": "Switch语句的所有分支必须具有相同的层次范围",
        "requirement": "飞行控制软件中的状态切换逻辑必须确保所有分支在相同的层次范围内执行，以避免状态切换时的逻辑错误。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.5跳转控制",
        "requirement": "飞行控制软件应严格遵循C语言编程规范，确保跳转控制语句（如goto、break、continue）的使用不会导致代码逻辑错误或安全漏洞。"
    },
    {
        "safety_criterion": "禁止从复合语句外goto到复合语句内，或由下向上goto",
        "requirement": "飞行控制软件应禁止从外部跳转到内部复合语句，确保代码执行的顺序性和可预测性。"
    },
    {
        "safety_criterion": "针对各项任务的执行条件中的输入数据取值进行检查，分析输入数据取值使得任务执行条件提前满足时，功能处理的正确性",
        "requirement": "系统应能够实时监测和验证导航数据（如位置、速度、姿态）的输入值，确保在输入数据提前满足任务执行条件时，任务能够正确执行。"
    },
    {
        "safety_criterion": "禁止使用setjmp/longjmp",
        "requirement": "飞行控制软件应避免使用setjmp/longjmp函数，以确保异常处理机制的可靠性和可预测性。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.6 运算处理",
        "requirement": "飞行控制软件应遵循C语言编程规范，确保所有运算处理逻辑的正确性和可靠性。"
    },
    {
        "safety_criterion": "禁止将浮点常数赋给整型变量",
        "requirement": "飞行控制软件应确保所有浮点计算结果在赋值给整型变量前进行适当的取整处理。"
    },
    {
        "safety_criterion": "禁止将越界整数赋给整型变量",
        "requirement": "飞行控制软件应确保所有整型变量的赋值在有效范围内，防止越界导致的系统异常。"
    },
    {
        "safety_criterion": "禁止在逻辑表达式中使用赋值语句",
        "requirement": "飞行控制软件应禁止在逻辑表达式中使用赋值语句，以防止逻辑错误和潜在的安全隐患。"
    },
    {
        "safety_criterion": "禁止对逻辑表达式进行位运算",
        "requirement": "飞行控制软件应禁止使用位运算操作逻辑表达式，以确保逻辑判断的准确性和可靠性。"
    },
    {
        "safety_criterion": "禁止在运算表达式中或函数调用参数中使用++或- -操作符",
        "requirement": "飞行控制软件应避免在关键运算表达式或函数调用参数中使用自增（++）或自减（--）操作符，以防止潜在的逻辑错误和数据不一致。"
    },
    {
        "safety_criterion": "对变量进行移位运算禁止超出变量长度",
        "requirement": "飞行控制软件应确保所有变量的移位运算不超过变量的长度，以防止数据溢出和错误。"
    },
    {
        "safety_criterion": "禁止移位操作中的移位数为负数",
        "requirement": "飞行控制软件应确保所有移位操作中的移位数为非负数，以防止数据错误和系统异常。"
    },
    {
        "safety_criterion": "数组禁止越界使用",
        "requirement": "飞行控制软件应确保所有数组访问都在定义的边界内，防止越界访问导致的系统异常。"
    },
    {
        "safety_criterion": "针对各项任务的执行条件中的输入数据取值进行检查，分析输入数据取值使得任务执行条件延迟满足时，功能处理的正确性",
        "requirement": "系统应能够实时监测和验证导航数据的输入值，确保在输入数据延迟或异常时，飞行控制任务仍能正确执行。"
    },
    {
        "safety_criterion": "数组下标必须是大于等于零的整型数",
        "requirement": "导航系统应确保所有飞行轨迹数据数组的下标均为非负整数，以防止越界访问和数据错误。"
    },
    {
        "safety_criterion": "禁止非枚举类型变量使用枚举类型的值",
        "requirement": "飞行控制软件应禁止使用非枚举类型变量来表示飞行模式（如：手动、自动、返航等），确保飞行模式的正确性和安全性。"
    },
    {
        "safety_criterion": "除法运算中禁止被零除",
        "requirement": "飞行控制系统应确保在进行任何除法运算时，避免除数为零，以防止系统异常或崩溃。"
    },
    {
        "safety_criterion": "禁止在sizeof中使用赋值",
        "requirement": "飞行控制软件应禁止在sizeof运算中使用赋值操作，以防止编译时的大小计算错误。"
    },
    {
        "safety_criterion": "缓存区读取操作禁止越界",
        "requirement": "飞行控制软件应确保所有缓存区读取操作在有效范围内，防止越界访问导致的系统异常。"
    },
    {
        "safety_criterion": "缓存区写入操作禁止越界",
        "requirement": "飞行控制软件应确保所有缓存区写入操作在指定边界内，防止数据溢出导致系统异常。"
    },
    {
        "safety_criterion": "禁止使用已被释放了的内存空间",
        "requirement": "飞行控制系统应确保在任务执行过程中，已释放的内存空间不再被访问或使用。"
    },
    {
        "safety_criterion": "被free的指针必须指向最初malloc、calloc分配的地址",
        "requirement": "飞行控制系统应确保所有动态分配的内存指针在释放时指向最初分配的地址，以防止内存泄漏和数据损坏。"
    },
    {
        "safety_criterion": "禁止使用gets函数，应使用fgets函数替代",
        "requirement": "飞行控制软件应禁止使用不安全的输入函数（如gets），并使用安全的替代函数（如fgets）以防止缓冲区溢出。"
    },
    {
        "safety_criterion": "使用字符串赋值、拷贝、追加等函数时，禁止目标字符串存储空间越界",
        "requirement": "飞行控制软件应确保在处理飞行指令和状态信息时，所有字符串操作均不会导致缓冲区溢出。"
    },
    {
        "safety_criterion": "针对各项任务执行条件中的输入数据取值进行检查，分析输入数据取值始终未使得执行条件成立（即任务始终无法执行）时，功能处理的正确性",
        "requirement": "系统应能够检测并处理导航任务中输入的飞行参数（如高度、速度、航向）始终无法满足任务执行条件的情况，确保任务安全中止或重新规划。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.7函数调用",
        "requirement": "飞行控制软件应遵循C语言编程规范，确保函数调用时参数类型和数量的正确性，防止因函数调用错误导致的系统异常。"
    },
    {
        "safety_criterion": "禁止覆盖标准函数库的函数",
        "requirement": "飞行控制软件应禁止覆盖标准库中的关键函数，确保系统稳定性和安全性。"
    },
    {
        "safety_criterion": "禁止函数的实参和形参类型不一致",
        "requirement": "飞行控制软件应确保所有输入参数的类型与函数定义中的参数类型完全一致，防止类型不一致导致的系统异常。"
    },
    {
        "safety_criterion": "实参和形参的个数必须一致",
        "requirement": "飞行控制软件在调用导航算法时，必须确保输入参数与算法定义的参数个数一致。"
    },
    {
        "safety_criterion": "禁止使用旧形式的函数参数表定义形式",
        "requirement": "飞行控制软件应使用最新的参数表定义形式，确保参数传递的准确性和安全性。"
    },
    {
        "safety_criterion": "函数声明和函数定义中的参数类型必须一致",
        "requirement": "飞行控制软件中的所有函数声明和定义必须确保参数类型一致，以防止类型不匹配导致的飞行控制错误。"
    },
    {
        "safety_criterion": "函数声明和函数定义中的返回类型必须一致",
        "requirement": "飞行控制软件中的所有函数必须确保声明和定义的返回类型一致，以保证飞行控制指令的正确执行。"
    },
    {
        "safety_criterion": "有返回值的函数必须通过返回语句返回",
        "requirement": "飞行控制软件中的所有有返回值的函数必须通过返回语句返回，确保飞行控制指令的正确性和完整性。"
    },
    {
        "safety_criterion": "禁止无返回值函数的返回语句带有返回值",
        "requirement": "飞行控制软件中的所有无返回值函数必须严格遵守不带返回值的规范，确保代码的可靠性和可维护性。"
    },
    {
        "safety_criterion": "有返回值函数的返回语句必须带有返回值",
        "requirement": "飞行控制软件中的所有有返回值的函数必须确保在所有执行路径上都有返回值，以保证飞行控制逻辑的完整性和可靠性。"
    },
    {
        "safety_criterion": "任务开始执行后，分析再次接收到输入数据使其执行条件再次满足时，功能处理的正确性",
        "requirement": "系统应能够处理重复接收到的飞行任务指令，确保任务执行的正确性和一致性。"
    },
    {
        "safety_criterion": "函数返回值的类型必须与定义一致",
        "requirement": "飞行控制软件应确保所有返回值的类型与定义一致，以保证飞行控制指令的准确执行。"
    },
    {
        "safety_criterion": "具有返回值的函数，其返回值如果不被使用，调用时应有（void）说明",
        "requirement": "飞行控制软件中的所有返回值必须被检查或明确忽略，以确保系统状态的准确性和可靠性。"
    },
    {
        "safety_criterion": "无返回值的函数，调用时禁止再用（void）重复说明",
        "requirement": "系统应确保在调用无返回值的飞行控制函数时，不进行重复说明或赋值操作。"
    },
    {
        "safety_criterion": "静态函数必须被使用",
        "requirement": "飞行控制软件中的所有静态函数必须在飞行任务的关键路径中被调用，以确保代码的完整性和可靠性。"
    },
    {
        "safety_criterion": "禁止同一个表达式中调用多个顺序相关函数",
        "requirement": "飞行控制软件应确保在同一个控制周期内，不同时调用多个影响飞行状态的顺序相关函数。"
    },
    {
        "safety_criterion": "禁止在函数参数表中使用省略号",
        "requirement": "飞行控制软件应禁止使用省略号参数，确保所有输入参数明确且可控。"
    },
    {
        "safety_criterion": "禁止使用直接或间接自调用函数",
        "requirement": "飞行控制软件应避免使用递归函数，确保系统在高负载情况下不会因栈溢出而失效。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.8语句使用",
        "requirement": "飞行控制软件应遵循C语言编程规范，确保所有控制逻辑语句的正确性和可靠性。"
    },
    {
        "safety_criterion": "禁止不可达语句",
        "requirement": "飞行控制软件应确保所有代码路径均可达，避免存在不可达的控制指令。"
    },
    {
        "safety_criterion": "禁止不可达分支",
        "requirement": "飞行控制软件应确保所有控制逻辑分支均可达，避免存在不可达的控制路径。"
    },
    {
        "safety_criterion": "针对各项任务的先后执行时序进行检查，分析任务执行时序与规定时序不一致时，功能处理的正确性",
        "requirement": "系统应能够确保导航和控制任务按照预定的时序执行，防止任务执行顺序错误导致的飞行异常。"
    },
    {
        "safety_criterion": "禁止使用无效语句",
        "requirement": "飞行控制软件应禁止使用无效或未定义的指令代码，确保所有指令均有效且经过验证。"
    },
    {
        "safety_criterion": "使用八进制数必须明确注释",
        "requirement": "飞行控制软件中的所有八进制数必须在代码中明确注释其用途和转换为十进制的值。"
    },
    {
        "safety_criterion": "数字类型后缀必须使用大写字母",
        "requirement": "系统应确保所有飞行控制参数的数字类型后缀使用大写字母，以防止数据解析错误。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.9循环控制",
        "requirement": "飞行控制软件应确保在循环控制中，关键任务的执行时间和频率符合预定的安全标准。"
    },
    {
        "safety_criterion": "for循环控制变量必须使用局部变量",
        "requirement": "飞行控制软件中的所有循环控制变量必须定义为局部变量，以防止意外的数据覆盖和确保代码的可预测性。"
    },
    {
        "safety_criterion": "for循环控制变量必须使用整数型变量",
        "requirement": "飞行控制软件中的所有循环控制变量必须使用整数型变量，以确保计算的准确性和可靠性。"
    },
    {
        "safety_criterion": "禁止在for循环体内部修改循环控制变量",
        "requirement": "飞行控制软件应确保在执行关键任务的循环过程中，不修改循环控制变量，以防止意外的控制流改变和潜在的安全风险。"
    },
    {
        "safety_criterion": "无限循环必须使用while（1）语句，禁止使用for（;;）等其它形式的语句",
        "requirement": "飞行控制软件应使用while(1)语句实现无限循环，确保关键任务的持续执行和监控。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.10类型转换",
        "requirement": "系统应确保在进行飞行控制参数的类型转换时，不会导致数据丢失或溢出，保证控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "浮点数变量赋给整型变量必须强制转换",
        "requirement": "飞行控制软件在处理浮点数飞行参数时，必须进行强制类型转换以确保整型变量的准确性和一致性。"
    },
    {
        "safety_criterion": "对接口数据中具有连续型值域的数据位进行检查，分析多个周期数据取值之差超出规定阈值（即斜率故障）输出的正确性",
        "requirement": "系统应能够实时监测飞行器姿态控制系统的连续型数据（如角度、速度等），并在检测到数据变化率超出预设阈值时，触发故障警报并采取相应措施。"
    },
    {
        "safety_criterion": "对不同余度的连续型输出数据取值进行检查，分析两个或多个余度输出数据“取值不一致，即取值之差超出规定阈值”等情况下，功能实现的正确性",
        "requirement": "系统应能够实时监测并比较多个冗余传感器的输出数据，确保其一致性，并在数据差异超出规定阈值时触发警报并采取相应措施。"
    },
    {
        "safety_criterion": "长整数变量赋给短整数变量必须强制转换",
        "requirement": "飞行控制软件在处理长整数变量时，必须通过强制转换确保其安全地赋值给短整数变量，以防止数据溢出和错误。"
    },
    {
        "safety_criterion": "double型变量赋给float型变量必须强制转换",
        "requirement": "飞行控制软件在处理双精度浮点数时，必须将其强制转换为单精度浮点数以确保数据的一致性和准确性。"
    },
    {
        "safety_criterion": "指针变量的赋值类型必须与指针变量类型一致",
        "requirement": "飞行控制软件应确保所有指针变量的赋值类型与其声明类型一致，以防止内存访问错误。"
    },
    {
        "safety_criterion": "将指针赋予非指针或非指针变量赋予指针变量，必须使用强制转换",
        "requirement": "飞行控制软件应确保在指针与非指针变量之间进行数据传递时，必须使用显式的类型转换，以防止数据损坏或未定义行为。"
    },
    {
        "safety_criterion": "禁止使用无实质作用的类型转换",
        "requirement": "飞行控制软件应禁止使用无实质作用的类型转换，确保数据在不同模块间传递时的完整性和一致性。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.11初始化",
        "requirement": "所有飞行控制软件的变量和数据结构在使用前必须进行初始化，确保初始状态的正确性和一致性。"
    },
    {
        "safety_criterion": "变量禁止未赋值就使用",
        "requirement": "系统应确保所有飞行控制参数在使用前已正确初始化。"
    },
    {
        "safety_criterion": "变量初始化禁止隐含依赖于系统的缺省值",
        "requirement": "所有飞行控制参数和状态变量在系统启动时必须显式初始化，不得依赖系统默认值。"
    },
    {
        "safety_criterion": "结构体初始化的嵌套结构必须与定义一致",
        "requirement": "飞行控制软件在初始化时，必须确保所有嵌套结构体的初始化与定义完全一致，以保证数据的完整性和一致性。"
    },
    {
        "safety_criterion": "枚举元素定义中的初始化必须完整",
        "requirement": "飞行控制软件中的所有状态变量和枚举类型必须在初始化时赋予明确的初始值。"
    },
    {
        "safety_criterion": "对不同余度的离散型输出数据取值进行检查，分析两个或多个余度输出数据“取值不一致”等情况下，功能实现的正确性",
        "requirement": "系统应能够检测并处理多通道冗余传感器数据的不一致情况，确保飞行控制指令的正确性和可靠性。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.12比较判断",
        "requirement": "飞行控制软件应遵循C语言编程规范，确保所有比较判断逻辑的正确性和可靠性。"
    },
    {
        "safety_criterion": "禁止对逻辑量进行大于或小于的逻辑比较",
        "requirement": "系统应禁止对飞行控制指令的逻辑状态进行大于或小于的逻辑比较，确保指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "禁止对指针进行大于或小于的逻辑比较",
        "requirement": "系统应禁止在飞行控制软件中对指针进行大于或小于的逻辑比较，以防止潜在的内存访问错误。"
    },
    {
        "safety_criterion": "禁止对浮点数进行是否相等的比较",
        "requirement": "飞行控制系统应避免使用浮点数进行精确相等比较，以防止因浮点数精度问题导致的控制错误。"
    },
    {
        "safety_criterion": "禁止对无符号数进行大于等于零或小于零的比较",
        "requirement": "系统应确保在飞行控制算法中，所有无符号数的比较操作仅使用大于或小于操作符，避免使用大于等于零或小于零的比较。"
    },
    {
        "safety_criterion": "禁止无符号数与有符号数之间的直接比较",
        "requirement": "飞行控制软件应确保在处理飞行高度和速度数据时，避免无符号数与有符号数之间的直接比较，以防止潜在的计算错误。"
    },
    {
        "safety_criterion": "3 C语言编程规范（CYBCGF）-3.13 变量使用",
        "requirement": "飞行控制软件应确保所有变量在使用前已正确初始化，并在飞行任务中动态更新，以防止未定义行为影响飞行安全。"
    },
    {
        "safety_criterion": "禁止局部变量与全局变量同名",
        "requirement": "飞行控制软件应确保局部变量与全局变量名称不冲突，以防止数据覆盖和误操作。"
    },
    {
        "safety_criterion": "禁止函数形参与全局变量同名",
        "requirement": "飞行控制软件中，禁止使用与全局变量同名的函数参数，以避免数据冲突和误操作。"
    },
    {
        "safety_criterion": "禁止变量名与函数名同名",
        "requirement": "飞行控制软件中禁止使用与函数名相同的变量名，以避免命名冲突和潜在的安全风险。"
    },
    {
        "safety_criterion": "对不同余度的输出数据进行检查，分析“单个余度故障、多个余度均故障”情况下，功能实现的正确性",
        "requirement": "系统应具备多通道冗余设计，确保在单个或多个通道故障时，飞行控制功能仍能正常运行。"
    },
    {
        "safety_criterion": "禁止变量名与标识名同名",
        "requirement": "飞行控制软件中，所有变量名和标识名必须唯一，确保不会出现命名冲突。"
    },
    {
        "safety_criterion": "禁止变量名与枚举元素同名",
        "requirement": "飞行控制软件中，禁止使用与预定义飞行模式枚举元素相同的变量名。"
    },
    {
        "safety_criterion": "禁止变量名与typedef自定义的类型名同名",
        "requirement": "飞行控制软件应确保所有变量名与自定义类型名不冲突，以避免编译错误和运行时错误。"
    },
    {
        "safety_criterion": "禁止在内部块中重定义已有的变量名",
        "requirement": "飞行控制软件应确保在任何模块或函数中不重复定义已存在的变量名，以防止数据冲突和错误。"
    },
    {
        "safety_criterion": "禁止仅依赖大小写区分的变量",
        "requirement": "飞行控制软件应避免使用仅通过大小写区分的变量名，确保代码的可读性和安全性。"
    },
    {
        "safety_criterion": "禁止仅依赖小写字母“l”与数字“1”区分的变量",
        "requirement": "飞行控制软件应避免使用仅依赖小写字母“l”与数字“1”区分的变量，以防止在代码审查和维护过程中出现混淆。"
    },
    {
        "safety_criterion": "禁止仅依赖大写字母“O”与数字“0”区分的变量",
        "requirement": "飞行控制系统应避免使用仅通过大写字母“O”与数字“0”区分的变量名，确保代码的可读性和防止误操作。"
    },
    {
        "safety_criterion": "禁止单独使用小写字母“l”或大写字母“O”作为变量名",
        "requirement": "飞行控制软件应避免使用小写字母“l”或大写字母“O”作为变量名，以防止代码混淆和误读。"
    },
    {
        "safety_criterion": "程序外部可改写的变量，必须使用volatile类型说明",
        "requirement": "飞行控制软件中所有可由外部传感器或地面站修改的变量必须声明为volatile类型，以确保实时性和数据一致性。"
    },
    {
        "safety_criterion": "禁止在表达式中出现多个同一volatile类型变量的运算",
        "requirement": "飞行控制软件应确保在处理实时传感器数据时，避免对多个volatile类型变量进行复杂运算，以防止数据不一致和错误。"
    },
    {
        "safety_criterion": "对不同余度的执行时序进行检查，分析“两个或多个余度执行时序未同步”等情况下，功能实现的正确性",
        "requirement": "系统应确保多个冗余飞行控制计算机的执行时序同步，以保证在时序未同步情况下仍能正确执行飞行控制任务。"
    },
    {
        "safety_criterion": "禁止将NULL作为整型数0使用",
        "requirement": "飞行控制系统应确保所有整型变量在初始化和使用过程中不被赋值为NULL。"
    },
    {
        "safety_criterion": "禁止给无符号类型变量赋负值",
        "requirement": "系统应确保所有飞行控制参数的无符号类型变量在任何情况下都不被赋予负值。"
    },
    {
        "safety_criterion": "用于表示字符串的数组必须以“\\0”结束",
        "requirement": "飞行控制软件应确保所有用于表示字符串的数组在存储和传输时以“\\0”结束，以防止数据溢出和解析错误。"
    },
    {
        "safety_criterion": "4 注释准则（ZSZZ）",
        "requirement": "系统应具备在飞行任务中实时监测并记录关键飞行参数（如姿态角、速度、高度等）的功能，确保数据的准确性和完整性。"
    },
    {
        "safety_criterion": "在源程序中必须有足够详细的注释。注释应为功能性的，而非指令的逐句说明。注释的行数不得少于源程序行数的20％",
        "requirement": "飞行控制软件的源代码中必须包含详细的注释，注释行数不得少于源代码行数的20%，以确保代码的可维护性和可理解性。"
    },
    {
        "safety_criterion": "模块头部注释要求：在每个模块的可执行代码之前，必须用一段文字注释来说明如下内容\n模块名注释：标识模块的名称、版本号、入口点、程序开发者的姓名、单位和开发时间，如有修改，还应标识修改者的姓名、单位和修改时间；\n模块功能注释：说明模块的用途和功能；\n输入/输出注释：说明模块使用的输入/输出文件名，并指出每个文件向模块输入，还是从模块输出，或两者兼而有之；\n参数注释：说明模块所需的全部参数的名称、数据类型、大小、物理单位及用途，说明模块中适用的全局变量的名称、数据类型、大小、物理单位及其使用方式，说明模块的返回值；\n调用注释：列出模块中调用的全部模块名和调用该模块的全部模块名；\n限制注释：列出限制模块运行特征的全部特殊因素；\n异常结束注释：列出所有异常返回条件及动作；\n方法注释：说明该模块为实现其功能所使用的方法，为简练，亦可指出说明该方法的文档；\n外部环境及资源注释：说明该模块所依赖的外部运行环境及所用资源，如操作系统、编译程序、汇编语言、中央处理机单元、内存、寄存器和堆栈等等",
        "requirement": "飞行控制软件模块应具备详细的头部注释，包括模块名称、版本号、开发者信息、功能描述、输入输出文件、参数说明、调用关系、限制条件、异常处理及外部环境依赖，以确保代码的可维护性和可追溯性。"
    },
    {
        "safety_criterion": "模块内注释要求：在模块中，至少对有条件改变数据值或执行顺序的语句（即，分支转移语句、输入输出语句、循环语句、调用语句）进行注释，对这些语句的注释不得扰乱模块的清晰性，即这些注释也应符合程序的缩进格式。具体的注释方法如下\n分支转移语句：指出执行动作的理由；\n输入输出语句：指出所处理的文件或记录的性质；\n循环语句：说明执行动作的理由及出口条件；\n调用语句：说明调用过程的理由及被调用模块的功能。",
        "requirement": "飞行控制软件的每个模块应包含详细的注释，特别是对条件改变数据值或执行顺序的语句进行注释，确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "安全关键内容注释要求：在每个模块和软件单元（CSU）中，对关键的语句标号和数据名必须有准确的引用信息，并确定所有输入值的允许和期望范围；对计数器的值的注释必须包含计时功能的描述、其值及其基本原理或所引用的解释计数器值的基本原理的文档",
        "requirement": "飞行控制软件中的每个模块和单元必须对关键语句和数据名进行准确注释，明确输入值的允许和期望范围，并对计数器值的注释包含计时功能的描述及其基本原理。"
    },
    {
        "safety_criterion": "5复杂性控制（FZKZ）",
        "requirement": "系统应具备复杂性控制机制，确保在多任务并行处理时，关键飞行控制任务的优先级和响应时间满足安全要求。"
    },
    {
        "safety_criterion": "模块的圈复杂度（即，McCabe指数）一般不大于10",
        "requirement": "飞行控制软件的每个模块的圈复杂度（McCabe指数）应不大于10，以确保代码的可维护性和可测试性。"
    },
    {
        "safety_criterion": "对不同余度所处的工作状态进行检查，分析“两个或多个余度处于不同状态”等情况下，功能实现的正确性",
        "requirement": "系统应能够实时监测并同步各冗余模块的工作状态，确保在不同冗余模块处于不同状态时，飞行控制功能的正确性和一致性。"
    },
    {
        "safety_criterion": "对于高级语言实现的模块，每个模块的源代码最多不超过200行，一般控制在60行以内",
        "requirement": "飞行控制软件的每个模块源代码应控制在60行以内，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "每个CSU所传递的参数个数不超过6个",
        "requirement": "每个控制子单元（CSU）在通信过程中传递的飞行控制参数不得超过6个。"
    },
    {
        "safety_criterion": "每个CSU的扇入和扇出不大于7",
        "requirement": "每个控制子单元（CSU）应限制其输入和输出连接数不超过7个，以确保系统的稳定性和可维护性。"
    },
    {
        "safety_criterion": "6多余物处理（DYWCL）-6.1文档中未包含内容的处理",
        "requirement": "系统应具备检测和处理飞行器内部未记录的多余物，确保其不会影响飞行安全和任务执行。"
    },
    {
        "safety_criterion": "运行和支持程序必须包含文档所要求的那些特征和能力，而不应包含文档中所没有的特征。对于为便于软件测试而引入的必要功能和特征，必须验证它们不会影响软件的安全性",
        "requirement": "飞行控制软件的测试功能必须在正式运行前进行严格验证，确保这些测试功能不会影响飞行安全。"
    },
    {
        "safety_criterion": "6多余物处理（DYWCL）-6.2程序中多余代码的处理",
        "requirement": "飞行控制软件应确保在编译和运行过程中，移除所有未使用的代码和变量，以防止潜在的安全隐患。"
    },
    {
        "safety_criterion": "运行程序不得包含不使用（未覆盖到需求的）的可执行代码。不使用（未覆盖到需求的）的可执行代码必须从源程序及重新编译的程序中去掉",
        "requirement": "飞行控制软件应确保所有代码均与功能需求相关，未使用的代码必须从源代码中移除，以避免潜在的安全风险。"
    },
    {
        "safety_criterion": "装入的运行程序不得包含未引用的变量。在固化程序之前应去除不再运行的程序部分",
        "requirement": "飞行控制软件应确保所有加载的程序模块中不包含未引用的变量，并在最终固化前移除所有不再使用的代码部分。"
    },
    {
        "safety_criterion": "对不同运行阶段的多余物（比如：地面调试时使用的监控程序），建议慎重考虑",
        "requirement": "系统应确保在飞行阶段移除所有地面调试时使用的监控程序，防止其对飞行任务产生干扰。"
    },
    {
        "safety_criterion": "对于因可选择选项功能或软件重用等而引起的无效码，在软件需求中必须进行描述，并进行必要的测试和分析，以保证其不影响系统的安全性",
        "requirement": "系统应能够对所有可选功能和重用软件模块进行详细描述，并进行充分的测试和分析，确保其不会影响飞行控制系统的安全性。"
    },
    {
        "safety_criterion": "对不同余度接收到的同一输入数据取值进行检查，分析两个或多个余度接收到的同一输入数据取值不一致时，功能实现的正确性",
        "requirement": "系统应能够对来自多个传感器的飞行姿态数据进行一致性检查，确保在数据不一致时能够进行正确的故障检测和切换。"
    },
    {
        "safety_criterion": "6多余物处理（DYWCL）-6.3未使用的内存处理",
        "requirement": "系统应确保所有未使用的内存区域在飞行任务中被清零，防止潜在的未授权访问或数据泄露。"
    },
    {
        "safety_criterion": "所有未被运行程序使用的内存必须初始化成某一模式，该模式的执行将使系统恢复到确定的安全状态；不得用随机数、暂停、或等待指令填充处理器的内存；空指令、停止指令要谨慎使用；不得保留先前覆盖中的或装入的数据或代码。当处理器收到这种非执行的代码模式而暂停运行时，监控定时器必须提供一个中断执行程序来使系统恢复到安全状态。如果处理器把这些非执行代码模式视为一个错误，则应开发一个错误处理执行程序来将系统恢复到某个安全状态，并终止处理",
        "requirement": "飞行控制系统在未使用内存区域必须初始化为特定的安全模式，确保在任何未预期的代码执行情况下，系统能够自动恢复到安全状态。"
    },
    {
        "safety_criterion": "未使用的内存包括程序的“空白区”和数据的“空白区”。其中程序的“空白区”应该在固化时做适当的处理，数据的“空白区”应该在系统的初始化时做适当的处理。处理的对策应根据指令系统功能、故障处理的实时性及其他要求来确定",
        "requirement": "飞行控制系统应确保未使用的内存区域在系统初始化时被清零，并在固件更新时进行校验，以防止潜在的内存错误和安全漏洞。"
    },
    {
        "safety_criterion": "7指针使用（ZZSY）",
        "requirement": "系统应确保在飞行控制软件中，所有指针使用前都进行有效性检查，防止空指针或非法指针访问导致的系统崩溃。"
    },
    {
        "safety_criterion": "禁止将参数指针赋值给过程指针：将参数指针赋值给过程指针会导致不可预料的结果，因此禁止将参数指针赋值给过程指针",
        "requirement": "系统应确保在飞行控制软件中，参数指针不得赋值给过程指针，以防止不可预料的飞行控制行为。"
    },
    {
        "safety_criterion": "禁止指针的指针超过两级：对指针进子女控制是很困难的，当指针的指针超过两级时，使用起来更具风险，因此禁止指针的指针超过两级。在某种特殊情况下确实需要超过两级的指针时，必须加以明确注释，在软件详细设计说明的指针特殊设计中详细说明理由，并在单元测试报告中提供针对性的测试结果",
        "requirement": "飞行控制软件应限制指针的使用层级不超过两级，确保代码的可维护性和安全性。在特殊情况下需要使用超过两级的指针时，必须在设计文档中详细说明理由，并在单元测试报告中提供针对性的测试结果。"
    },
    {
        "safety_criterion": "禁止引用空指针和无效指针：引用可能为空或无效的指针，得到的结果显然是错误的，会带来意想不到的问题",
        "requirement": "飞行控制软件应确保所有指针在使用前都经过有效性检查，防止空指针或无效指针的引用。"
    },
    {
        "safety_criterion": "谨慎使用指针的逻辑比较：使用大于和小于的操作符对对指针进行比较式具有较大风险的，应谨慎使用指针的逻辑比较",
        "requirement": "飞行控制软件应避免使用指针的逻辑比较，确保在处理飞行数据时不会因指针比较错误导致系统异常。"
    },
    {
        "safety_criterion": "谨慎对指针进行代数运算：对指针进行代数运算具有较大风险，应谨慎对指针进行代数运算",
        "requirement": "飞行控制软件应避免对指针进行复杂的代数运算，确保指针操作的安全性和可靠性。"
    },
    {
        "safety_criterion": "谨慎将过程声明为指针类型：使用过程式指针具有较大风险，因此将过程声明为指针类型",
        "requirement": "飞行控制软件应避免使用过程式指针，以减少潜在的安全风险。"
    },
    {
        "safety_criterion": "多个功能串行执行，前序功能的输出数据是后续功能的输入数据。对前序功能的输出数据进行检查，分析数据取值为“正常值等价类组合、异常值等价类组合”等情况下多功能处理的正确性",
        "requirement": "系统应能够对飞行控制指令的输出数据进行实时检查，确保在正常和异常情况下，后续控制逻辑能够正确处理并执行。"
    },
    {
        "safety_criterion": "8其它编码要求（QTYQ）",
        "requirement": "系统应确保所有飞行控制指令的编码和解码过程符合航空标准，防止数据传输错误和误解码。"
    },
    {
        "safety_criterion": "在关键重要软件中的关键点上进行监控，在发现故障时进行故障隔离；必要时，使系统进入安全状态",
        "requirement": "飞行控制系统应具备实时监控关键软件模块的能力，并在检测到故障时自动隔离故障模块，必要时将系统切换至安全模式。"
    },
    {
        "safety_criterion": "在完成必要的检测功能的前提下，检测点尽量少",
        "requirement": "卫星姿态控制系统应优化检测点布局，确保在最少的检测点数量下实现全面的姿态监测和控制。"
    },
    {
        "safety_criterion": "测试特征量流出通道应力求独立，使测试功能的失效不会影响其他功能",
        "requirement": "飞行控制系统应确保测试数据通道与主控制数据通道物理隔离，防止测试功能失效影响主飞行控制功能。"
    },
    {
        "safety_criterion": "公用数据与公用变量：应指明由两个或多个模块公用的数据和公共变量，并尽量减少对公共变量的改变，以减少模块间的依赖和冲突",
        "requirement": "飞行控制软件应明确定义并最小化各模块间共享的飞行参数和状态变量，以减少模块间的依赖和潜在冲突。"
    },
    {
        "safety_criterion": "文件的处理要求：文件应唯一且用于单一目的：文件在使用前应成功的打开，在使用后应成功地关闭，文件的属性应与它的使用组一致",
        "requirement": "飞行任务数据文件应唯一且仅用于特定任务，文件在任务开始前应成功打开，在任务结束后应成功关闭，文件的访问权限应仅限于执行该任务的系统模块。"
    },
    {
        "safety_criterion": "禁止程序修补：贯穿开发过程始终应禁止修补，所有软件更改应用源语言编码，并在进入运行或测试设备前进行编译 ",
        "requirement": "飞行控制软件的任何更改必须通过正式的变更管理流程，确保所有更改都在源代码级别进行，并在部署前经过编译和测试。"
    },
    {
        "safety_criterion": "9 C#语言编程规范（QTYQ）",
        "requirement": "飞行控制软件应遵循C#语言编程规范，确保代码的可读性、可维护性和安全性。"
    },
    {
        "safety_criterion": "方法名的主体应该使用大小写混合形式，并且应该足够长以描述它的作用。而且，方法名应该以一个动词起首，如 InitNameArray 或 CloseDialog",
        "requirement": "飞行控制软件应使用描述性强且符合命名规范的方法名，如 InitFlightParameters 或 UpdateNavigationData，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "对于频繁使用的或长的项，推荐使用标准缩略语以使名称的长度合理化",
        "requirement": "系统应使用标准缩略语来表示常见的飞行参数和系统状态，以确保名称的简洁性和可读性。"
    },
    {
        "safety_criterion": "多个功能串行执行，前序功能的输出数据是后续功能的输入数据。对前序功能的输出数据进行检查，分析数据取值为“边界值组合、初始值组合、安全值组合、缺省值组合”等情况下多功能处理的正确性",
        "requirement": "系统应能够对飞行控制指令的输出数据进行实时检查，确保在边界值、初始值、安全值和缺省值等情况下，后续的导航和控制功能能够正确执行。"
    },
    {
        "safety_criterion": "禁止将成员变量声明为 public 或 protected。应都声明为 private，而使用 public/protected 的属性",
        "requirement": "飞行控制软件中的所有敏感参数和配置项应设置为私有，并通过公共接口进行访问和修改。"
    },
    {
        "safety_criterion": "为了更好地区分变量的有效范围，例如Class级变量，在定义变量名时用小写字母前缀区分",
        "requirement": "飞行控制软件应使用小写字母前缀来区分不同类别的变量，确保变量的有效范围和类型在代码中清晰可见。"
    },
    {
        "safety_criterion": "定义变量时根据不同的变量类型增加特定的变量类型前缀，一般为小写的三个字母表示",
        "requirement": "系统应使用特定的变量类型前缀（如 flt_ 表示浮点数，int_ 表示整数）来定义飞行控制参数。"
    },
    {
        "safety_criterion": "所有外部资源都必须显式释放。例如：数据库连接对象、IO对象等",
        "requirement": "系统应确保在任务完成后显式释放所有外部资源，包括卫星通信链路和地面站数据连接。"
    },
    {
        "safety_criterion": "发生异常时，给出友好的消息给用户，但要精确记录错误的所有可能细节，包括发生时间，和相关方法，类名等",
        "requirement": "在飞行控制系统检测到任何异常时，应立即向地面控制站发送详细的错误报告，包括错误发生的时间、具体模块和相关参数。"
    },
    {
        "safety_criterion": "针对捕捉到的异常，必须给出明确的处理方式",
        "requirement": "系统应能够实时监测并记录飞行器的异常状态，并在检测到异常时立即触发预定义的故障处理流程。"
    },
    {
        "safety_criterion": "如果处理某一个功能需要很多行代码实现，并且有很多逻辑结构块，类似此种代码应该在代码开始前添加注释，说明此块代码的处理思路及注意事项等",
        "requirement": "飞行控制软件应包含详细的注释，解释每个复杂功能模块的处理逻辑和注意事项，确保代码的可维护性和可读性。"
    },
    {
        "safety_criterion": "在公用类库中的公用方法需要在一般方法的注释后添加作者、日期及修改记录信息，统一采用XML标签的格式加注",
        "requirement": "飞行控制软件的公用类库中的所有方法需在注释中添加作者、日期及修改记录信息，统一采用XML标签格式。"
    },
    {
        "safety_criterion": "所有的方法和函数都应该以描述这段代码的功能的一段简明注释开始（方法是干什么）。这种描述不应该包括执行过程细节（它是怎么做的），因为这常常是随时间而变的，而且这种描述会导致不必要的注释维护工作，甚至更糟—成为错误的注释。代码本身和必要的嵌入注释将描述实现方法",
        "requirement": "飞行控制软件中的每个功能模块应具有清晰的注释，描述其功能和用途，确保维护人员能够快速理解模块的功能，而不必深入代码细节。"
    },
    {
        "safety_criterion": "当参数的功能不明显且当过程希望参数在一个特定的范围内时，也应描述传递给过程的参数。被过程改变的函数返回值和全局变量，特别是通过引用参数的那些，也必须在每个过程的起始处描述它们",
        "requirement": "系统应确保在飞行控制过程中，所有传递给控制算法的参数（如姿态角、速度、高度等）均在预定义的安全范围内，并在每个控制周期开始时明确描述这些参数的初始状态和变化范围。"
    },
    {
        "safety_criterion": "多功能串行执行，前序功能执行完成后再执行后续功能。分析后续功能执行过程中前序功能执行条件“满足、满足变为不满足、不满足、不满足变为满足”等情况下多功能处理的正确性",
        "requirement": "飞行控制软件应确保在导航和制导功能执行完毕后，再执行姿态控制功能，并在姿态控制功能执行过程中，实时监测导航和制导功能的执行条件变化，确保姿态控制功能的正确性和安全性。"
    },
    {
        "safety_criterion": "一个方法只完成一个任务。不要把多个任务组合到一个方法中，即使那些任务非常小",
        "requirement": "飞行控制软件中的每个功能模块应仅负责单一任务，如姿态控制、轨道计算或通信管理，确保模块间的职责清晰。"
    },
    {
        "safety_criterion": "为了保持更好的阅读习惯，请不要把多个变量声明写在一行中，即一行只声明一个变量",
        "requirement": "飞行控制软件的代码应确保每个变量声明单独占一行，以提高代码的可读性和维护性。"
    },
    {
        "safety_criterion": "避免方法中有超过5个参数的情况。如果超过了，则应使用 struct 来传递多个参数",
        "requirement": "飞行控制软件应设计为使用结构体传递多个参数，以确保参数传递的清晰性和可维护性。"
    },
    {
        "safety_criterion": "原则上禁止使用goto语句",
        "requirement": "飞行控制软件应避免使用goto语句，以确保代码的可读性和可维护性。"
    },
    {
        "safety_criterion": "在switch语句中总是要有default子句来显示信息",
        "requirement": "飞行控制软件在处理不同飞行模式切换时，应确保默认模式的安全性和稳定性，并提供相应的状态信息。"
    },
    {
        "safety_criterion": "方法参数多于8个时采用结构体或类方式传递",
        "requirement": "飞行控制软件应使用结构体或类来传递复杂的飞行参数，确保参数传递的完整性和可维护性。"
    },
    {
        "safety_criterion": "使用C# 或 VB.NET的特有类型，而不是System命名空间中定义的别名类型",
        "requirement": "飞行控制软件应使用C#或VB.NET的特有类型，确保类型安全和代码一致性。"
    },
    {
        "safety_criterion": "禁止在程序中使用固定数值，用常量代替",
        "requirement": "飞行控制软件中应使用定义的常量来表示所有固定数值，如最大飞行高度、最大速度等。"
    },
    {
        "safety_criterion": "避免使用很多成员变量。声明局部变量，并传递给方法。不要在方法间共享成员变量",
        "requirement": "飞行控制软件应使用局部变量存储临时数据，并通过参数传递数据，避免在不同方法间共享成员变量。"
    },
    {
        "safety_criterion": "不要在代码中使用具体的路径和驱动器名。 使用相对路径，并使路径可编程",
        "requirement": "飞行控制软件应使用相对路径来访问关键任务数据文件，确保在不同操作系统和硬件配置下的一致性和可移植性。"
    },
    {
        "safety_criterion": "多个功能同时执行时，对多个功能的输入数据和输出数据进行检查，分析输入数据取值/输出数据取值为“正常值等价类组合、异常值等价类组合”等情况下多功能处理的正确性",
        "requirement": "系统应能够在多任务并行处理时，确保导航、控制和通信功能的输入和输出数据在正常和异常情况下均能正确处理。"
    },
    {
        "safety_criterion": "如果需要的配置文件找不到，应用程序需能自己创建使用默认值的一份",
        "requirement": "飞行控制系统应能够在缺失关键配置文件时，自动生成并使用默认配置文件以确保系统正常运行。"
    },
    {
        "safety_criterion": "如果在配置文件中发现错误值，应用程序要抛出错误，给出提示消息告诉用户正确值",
        "requirement": "系统应能够检测并处理飞行控制参数配置文件中的错误值，并向地面控制站发送错误提示消息，同时提供正确的参数值。"
    },
    {
        "safety_criterion": "DataColumn取其列时要用字段名，不要用索引号",
        "requirement": "飞行数据记录系统应通过字段名而非索引号来访问和处理飞行数据，确保数据的准确性和一致性。"
    },
    {
        "safety_criterion": "在一个类中，字段定义全部统一放在class的头部，所有方法或属性的前面",
        "requirement": "飞行控制软件的类定义中，所有飞行参数和状态变量应统一定义在类的头部，确保代码的可读性和维护性。"
    },
    {
        "safety_criterion": "在一个类中，所有属性全部定义在一个属性块中",
        "requirement": "飞行控制软件应将所有飞行参数和状态变量集中定义在单一的配置模块中。"
    },
    {
        "safety_criterion": "防止缺少对软件某项功能细节的描述。",
        "requirement": "系统应详细描述飞行控制软件中每个功能模块的具体操作流程和参数设置。"
    },
    {
        "safety_criterion": "防止缺少对软件输入输出数据的描述。",
        "requirement": "系统应提供详细的飞行控制指令和传感器数据的输入输出描述，确保数据的完整性和准确性。"
    },
    {
        "safety_criterion": "防止缺少对软件内外接口信息传递方式的描述。",
        "requirement": "系统应详细描述飞行控制软件与地面站、传感器和执行机构之间的数据传输协议和接口规范。"
    },
    {
        "safety_criterion": "防止缺少对软件功能流程的描述。",
        "requirement": "系统应具备详细的飞行控制软件功能流程描述，确保每个控制指令的执行过程和逻辑关系清晰可追溯。"
    },
    {
        "safety_criterion": "防止缺少对软件的响应时间要求的描述。由软件开发人员根据系统的特性引导用户考虑在不同使用场景下的时间、容量、精度、余量等性能要求；",
        "requirement": "系统应具备在不同飞行模式下（如起飞、巡航、着陆）对关键控制指令的响应时间进行精确测量和记录的功能。"
    },
    {
        "safety_criterion": "对接口数据中具有离散型值域的数据位进行检查，分析相邻两个周期数据取值发生跳变输出的正确性",
        "requirement": "系统应能够检测并处理导航数据中离散值的跳变，确保飞行控制指令的连续性和准确性。"
    },
    {
        "safety_criterion": "多个功能同时执行时，对多个功能的输入数据和输出数据进行检查，分析输入数据取值/输出数据取值为“边界值组合、初始值组合、安全值组合、缺省值组合”等情况下多功能处理的正确性",
        "requirement": "系统应能够在多任务并行处理时，确保导航、控制和通信功能的输入数据和输出数据在边界值、初始值、安全值和缺省值组合下的正确性和一致性。"
    },
    {
        "safety_criterion": "防止缺少对软件安全性要求的描述。仔细分析软件运行过程中各种可能的异常情况，处理过程应考虑相应的保护措施，必须使系统转入安全状态",
        "requirement": "飞行控制系统应具备异常检测和保护机制，确保在软件异常情况下系统能够自动转入安全模式，防止飞行任务失败。"
    },
    {
        "safety_criterion": "列出可能的不期望事件，分析导致这些不期望事件的可能原因，提出相应的软件处理要求",
        "requirement": "系统应能够识别并处理飞行过程中可能出现的异常情况，如传感器故障、通信中断等，并提供相应的故障恢复机制。"
    },
    {
        "safety_criterion": "对于需要处理避免敏感数据的软件，必须提出保密要求",
        "requirement": "飞行控制系统应具备加密功能，确保敏感飞行数据在传输和存储过程中的安全性。"
    },
    {
        "safety_criterion": "缺少对崩溃后的恢复、数据的异地备份等的可靠性功能。",
        "requirement": "系统应具备在崩溃后自动恢复的功能，并在不同地理位置进行关键数据的备份。"
    },
    {
        "safety_criterion": "防止对于软件不需要的功能进行了描述。和用户充分沟通，考虑用户的使用体验，不添加多余功能",
        "requirement": "飞行控制系统应仅提供必要的操作和监控功能，避免增加不必要的功能，确保飞行员操作简便且高效。"
    },
    {
        "safety_criterion": "防止存在于用户需求不符合的需求描述。",
        "requirement": "系统应确保所有飞行任务需求与用户需求完全一致，避免任何需求描述的不一致。"
    },
    {
        "safety_criterion": "防止存在无意义的功能描述。",
        "requirement": "系统应确保所有飞行控制指令和状态报告具有明确的定义和用途，避免无意义或冗余的指令和报告。"
    },
    {
        "safety_criterion": "需求重复。",
        "requirement": "系统应能够实时监测并记录飞行器的导航参数，确保在状态变化时参数的准确性和一致性。"
    },
    {
        "safety_criterion": "防止需求描述不清晰，让人看不懂。",
        "requirement": "系统应提供清晰、详细的飞行任务描述和操作说明，确保所有操作人员能够准确理解并执行任务。"
    },
    {
        "safety_criterion": "防止存在对客户的需求理解不清楚的内容，需求文档语言二义。",
        "requirement": "系统需求文档应明确描述所有飞行任务参数和操作流程，确保无歧义。"
    },
    {
        "safety_criterion": "多个功能输出数据的取值互斥或不能同时输出，对这些功能的执行条件进行检查，分析由于多个功能的执行条件同时满足导致并发执行时，多功能输出的正确性",
        "requirement": "系统应确保在多个飞行控制指令同时生成时，仅执行互斥指令中的优先级最高的指令。"
    },
    {
        "safety_criterion": "防止存在由于需求的复杂度高而描述不清晰的内容。",
        "requirement": "系统应能够清晰定义和管理复杂的飞行任务需求，确保每个任务参数和指令的描述准确无歧义。"
    },
    {
        "safety_criterion": "防止存在对系统结构的设计不清晰，层次结构和组件结构不完善的内容。",
        "requirement": "系统应具备清晰的模块化设计，确保各子系统和组件之间的接口定义明确，层次结构合理。"
    },
    {
        "safety_criterion": "防止非功能性需求描述模糊",
        "requirement": "系统应明确定义所有非功能性需求，包括但不限于响应时间、可靠性、可用性和安全性指标。"
    },
    {
        "safety_criterion": "防止接口需求描述模糊",
        "requirement": "系统应明确定义所有飞行控制接口的参数和数据格式，确保无歧义。"
    },
    {
        "safety_criterion": "必须明确软件的功能层次图，各子系统的功能要明确；",
        "requirement": "飞行控制系统应具备清晰的功能层次结构，各子系统（如导航、姿态控制、推进等）的功能需明确且独立。"
    },
    {
        "safety_criterion": "应该明确与功能有关的所有输入信息，包括其来源、意义、格式、接收方法、数量、输入范围及换算方法、时间要求、优先顺序",
        "requirement": "飞行控制系统应明确所有导航数据的输入信息，包括卫星信号、地面站数据、传感器数据的来源、格式、接收方法、输入范围及时间要求。"
    },
    {
        "safety_criterion": "应该明确与功能有关的所有输出信息，包括信息的传送方法、意义、格式、数量、输出范围及换算方法、时间要求、优先顺序和输出形式",
        "requirement": "飞行控制系统应能够实时输出飞行参数（如高度、速度、姿态角）及其变化率，确保数据格式统一、传输可靠，并在指定时间内完成输出。"
    },
    {
        "safety_criterion": "对于性能指标，应和用户沟通使用需求，尽早进行明确",
        "requirement": "系统应能够根据用户需求动态调整飞行器的性能参数，确保任务目标的实现。"
    },
    {
        "safety_criterion": "开发单位应明确接口特性参数，明确接口数据特性",
        "requirement": "系统应明确并定义所有飞行控制接口的特性参数，包括数据格式、传输协议和频率。"
    },
    {
        "safety_criterion": "不使用“一般情况下”、“基本”、“主要包括”、“等方面”等模糊字眼，对于各约束条件应明确说明",
        "requirement": "系统应明确定义并严格遵守所有飞行控制参数的阈值和范围，确保在任何情况下都不会超出预设的安全界限。"
    },
    {
        "safety_criterion": "多个功能同时输出同一接口数据，对这些功能输出数据的取值进行检查，分析多个功能对同一接口数据的取值不同等情况下，多功能处理的正确性",
        "requirement": "系统应能够处理多个传感器同时提供飞行姿态数据的情况，确保数据的一致性和准确性。"
    },
    {
        "safety_criterion": "防止在需求文档中存在表述或者编写错误。",
        "requirement": "系统应具备自动检测和验证飞行任务需求文档的正确性和一致性功能。"
    },
    {
        "safety_criterion": "防止存在对系统设计构架的错误描述。",
        "requirement": "系统应确保所有飞行控制软件模块的架构描述准确无误，防止因错误描述导致的系统故障。"
    },
    {
        "safety_criterion": "防止对软件的输出方式和内容编写错误。",
        "requirement": "飞行控制软件应确保输出的飞行指令和参数无误，防止因软件错误导致的飞行偏差。"
    },
    {
        "safety_criterion": "防止对软件的接口方式描述错误。",
        "requirement": "系统应确保所有飞行控制软件的接口描述准确无误，防止因接口描述错误导致的控制指令误解。"
    },
    {
        "safety_criterion": "防止对软件的功能流程描述错误。",
        "requirement": "系统应确保飞行控制软件的功能流程描述准确无误，防止因描述错误导致的飞行控制失效。"
    },
    {
        "safety_criterion": "防止对软件的运行环境描述错误。",
        "requirement": "系统应确保飞行控制软件的运行环境参数（如大气压、温度、湿度等）准确无误。"
    },
    {
        "safety_criterion": "防止对软件的性能要求描述错误",
        "requirement": "系统应确保飞行控制软件的性能参数（如响应时间、计算精度等）在所有飞行阶段均符合设计规范。"
    },
    {
        "safety_criterion": "进行需求分析之前，对系统任务书或用户要求进行可行性分析，确保以当前技术水平和成本预算能够实现要求",
        "requirement": "系统应能够对飞行任务书中的各项任务要求进行可行性分析，确保在当前技术水平和成本预算下能够实现所有任务目标。"
    },
    {
        "safety_criterion": "必须考虑每一条需求的验证性，对于不能验证的功能，应与用户充分沟通，应改写或删除它",
        "requirement": "系统应具备对所有飞行控制指令的验证机制，确保每条指令在执行前都能被准确验证。"
    },
    {
        "safety_criterion": "开展由用户、行业专家、测试专家参与的需求验证及评审活动。",
        "requirement": "系统应支持多角色参与的飞行任务需求验证和评审，包括飞行员、航空工程师和测试专家。"
    },
    {
        "safety_criterion": "多个功能同时对相同数据进行读写操作，分析当出现数据读写冲突等情况下，多功能处理的正确性",
        "requirement": "飞行控制系统应确保在多任务并行处理时，对关键飞行参数（如姿态、速度、高度）的读写操作不会产生冲突，保证数据的一致性和完整性。"
    },
    {
        "safety_criterion": "防止存在与真实的用户需求不一致的内容。",
        "requirement": "系统应确保飞行任务参数和指令与地面控制中心下发的指令完全一致。"
    },
    {
        "safety_criterion": "防止需求矛盾，包括对象特性、逻辑或时序；",
        "requirement": "系统应确保飞行控制指令与当前飞行状态和任务需求之间的一致性，避免指令冲突。"
    },
    {
        "safety_criterion": "防止语言描述不一致；",
        "requirement": "系统应确保所有飞行控制指令和状态报告在不同模块和子系统之间的一致性和准确性。"
    },
    {
        "safety_criterion": "防止需求参数不一致。",
        "requirement": "系统应确保所有飞行控制参数在不同模块间保持一致，防止参数不一致导致的控制错误。"
    },
    {
        "safety_criterion": "防止软件功能的输入信息描述不完整",
        "requirement": "系统应确保所有飞行控制指令的输入参数完整且准确，包括但不限于航向、速度、高度和姿态角。"
    },
    {
        "safety_criterion": "防止软件功能的输出信息描述不完整",
        "requirement": "飞行控制系统应确保所有输出信息完整，包括但不限于飞行参数、故障状态和操作指令。"
    },
    {
        "safety_criterion": "防止软件功能的流程处理描述不完整",
        "requirement": "系统应确保所有飞行控制软件的流程处理描述完整，包括异常处理和故障恢复机制。"
    },
    {
        "safety_criterion": "防止输入不符合要求是的处理流程不完整",
        "requirement": "系统应能够检测并拒绝不符合规范的飞行控制指令，确保指令处理的完整性和安全性。"
    },
    {
        "safety_criterion": "防止异常情况判断描述不完整",
        "requirement": "系统应具备完整的异常情况检测和处理机制，确保在飞行过程中能够准确识别并处理所有可能的异常情况。"
    },
    {
        "safety_criterion": "参照需求规格说明，软件设计应能100%覆盖软件需求，应描述每个软部件或模块与需求规格说明之间的可追踪性",
        "requirement": "飞行控制软件的设计应确保每个模块与飞行任务需求规格说明之间的完全可追踪性，以保证所有需求得到100%覆盖。"
    },
    {
        "safety_criterion": "对系统状态、工作阶段或系统任务对应的软件状态进行检查，分析“不存在对应软件状态、软件与系统不一致”等情况下状态执行的正确性",
        "requirement": "系统应能够实时监控并验证飞行控制软件的状态与当前飞行任务状态的一致性。"
    },
    {
        "safety_criterion": "防止软件冗余设计遗漏；参照需求规格说明，决定是否进行冗余设计，既要考虑软件可靠性要求，也应考虑软件或模块安全关键级别；",
        "requirement": "飞行控制软件应具备冗余设计，确保在主控模块失效时，备用模块能够无缝接管，保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "防止小概率事件设计遗漏；",
        "requirement": "系统应具备冗余设计，确保在单点故障发生时仍能正常运行。"
    },
    {
        "safety_criterion": "防止非法操作检测与保护设计不足；",
        "requirement": "系统应具备防止未授权访问和非法操作的保护机制，确保飞行控制指令的完整性和安全性。"
    },
    {
        "safety_criterion": "防止非法输入数据检测与保护设计不足；",
        "requirement": "系统应具备对所有输入数据进行合法性验证的功能，确保只有符合预定义格式和范围的数据才能被处理。"
    },
    {
        "safety_criterion": "防止非法配置环境检测与保护设计不足；",
        "requirement": "系统应具备检测和防止非法配置的能力，确保飞行控制参数和系统设置不被未经授权的修改。"
    },
    {
        "safety_criterion": "防止快速操作检测与保护设计不足",
        "requirement": "系统应具备防止快速连续操作导致的误触发保护机制，确保飞行控制指令的准确性和稳定性。"
    },
    {
        "safety_criterion": "防止通信出错检测与保护设计不足；",
        "requirement": "系统应具备冗余通信链路和错误检测机制，确保飞行数据传输的完整性和可靠性。"
    },
    {
        "safety_criterion": "防止硬件故障检测与保护设计不足",
        "requirement": "系统应具备冗余设计，确保在单点硬件故障时仍能正常运行并提供必要的保护措施。"
    },
    {
        "safety_criterion": "配合硬件进行处理的若干设计考虑，包括电源失效防护、加电检测、系统不稳定、接口故障、错误操作；",
        "requirement": "系统应具备电源失效防护机制，确保在电源中断时能够安全保存关键飞行数据，并在电源恢复后自动恢复到断电前的状态。"
    },
    {
        "safety_criterion": "监控定时器的设计，以处理程序超时或死循环故障；",
        "requirement": "系统应具备监控定时器功能，用于检测和处理飞行控制软件中的超时或死循环故障。"
    },
    {
        "safety_criterion": "对状态进入条件进行检查，分析状态执行过程中进入条件“满足、不满足、再次满足”等情况下状态执行的正确性",
        "requirement": "系统应能够实时监测并验证飞行器的进入条件（如高度、速度、姿态角等），确保在条件变化时正确执行状态转换。"
    },
    {
        "safety_criterion": "在模块的入口、出口及其它关键点数据的合理性检查；",
        "requirement": "系统应能够对飞行控制模块的输入、输出及关键点数据进行实时合理性检查，确保数据在预设范围内。"
    },
    {
        "safety_criterion": "防止对非软件需求进行了设计；",
        "requirement": "系统应确保所有软件设计均基于经过验证的飞行任务需求，防止未经授权的软件功能添加。"
    },
    {
        "safety_criterion": "防止设计多余。",
        "requirement": "系统设计应确保不包含任何不必要的组件或功能，以减少潜在的故障点和提高系统的可靠性。"
    },
    {
        "safety_criterion": "防止模块或函数的逻辑模糊；",
        "requirement": "飞行控制软件应确保所有模块和函数的逻辑清晰，避免任何可能导致歧义的逻辑处理。"
    },
    {
        "safety_criterion": "防止模块或函数的数据模糊；",
        "requirement": "系统应确保导航模块在接收和处理卫星信号时，数据格式和内容的清晰性和准确性。"
    },
    {
        "safety_criterion": "防止接口设计模糊；",
        "requirement": "系统应明确定义所有飞行控制接口的数据格式和通信协议，确保无歧义。"
    },
    {
        "safety_criterion": "防止设计文档语言描述二义。",
        "requirement": "系统设计文档应使用精确、无歧义的语言描述飞行控制逻辑和参数定义。"
    },
    {
        "safety_criterion": "必须明确各模块/函数的处理逻辑，包括逻辑结构、时序、判断条件等，关键重要模块的设计应达到伪代码的程度",
        "requirement": "飞行控制软件的关键模块（如姿态控制、轨道计算等）应具有详细的伪代码设计，确保逻辑结构、时序和判断条件的明确性。"
    },
    {
        "safety_criterion": "必须明确各模块/函数的输入/输出数据，包括数据格式、精度、范围、验证方法、约束要求等；",
        "requirement": "飞行控制软件的每个模块必须明确输入/输出数据的格式、精度、范围，并提供验证方法和约束要求，确保数据的准确性和可靠性。"
    },
    {
        "safety_criterion": "对于接口处理模块/函数，应明确口特性参数、接口数据特性；",
        "requirement": "飞行控制系统的接口模块应明确定义并验证所有飞行参数（如姿态角、速度、高度）的特性参数和数据特性，确保数据的准确性和一致性。"
    },
    {
        "safety_criterion": "两个或多个状态之间不存在转移关系，对这些状态的进入条件进行检查，分析进入条件“同时满足、状态执行过程中满足”等情况下状态执行的正确性",
        "requirement": "系统应确保在飞行模式切换时，各子系统的状态进入条件得到严格检查，防止无效或冲突的模式切换。"
    },
    {
        "safety_criterion": "参照需求规格说明，明确并清晰描述每个模块的功能，通过设计评审来检验软件设计是否与需求规格说明一致；",
        "requirement": "导航系统模块应明确描述其功能，包括但不限于航迹计算、姿态控制和故障检测，并通过设计评审确保设计与需求规格说明一致。"
    },
    {
        "safety_criterion": "在进行软件设计之前，项目组应针对所采用的开发环境、编程语言进行培训学习。",
        "requirement": "项目团队在开发航空软件前，应接受针对所使用的开发环境（如Simulink）和编程语言（如Ada）的培训。"
    },
    {
        "safety_criterion": "防止设计逻辑本身错误；",
        "requirement": "系统应具备冗余设计，确保关键飞行控制逻辑在主逻辑失效时能够无缝切换到备用逻辑。"
    },
    {
        "safety_criterion": "防止设计与需求/隐含需求不一致；\n语言描述错误。",
        "requirement": "系统应确保飞行控制软件的设计与飞行任务需求完全一致，避免因需求理解错误导致的控制指令错误。"
    },
    {
        "safety_criterion": "防止软件功能实现理解错误。",
        "requirement": "系统应具备自检功能，确保飞行控制软件在每次启动时正确加载和初始化，防止因软件实现错误导致的飞行异常。"
    },
    {
        "safety_criterion": "防止时间或空间复杂度过大；采用合适和优化的方法进行设计，若功能难以使用简化结构实现，则考虑对软件功能进行适当的分解；",
        "requirement": "飞行控制软件应优化路径规划算法，确保在复杂飞行环境中实时计算最优路径，同时保证计算资源的高效利用。"
    },
    {
        "safety_criterion": "防止计算误差过大；",
        "requirement": "系统应具备高精度计算能力，确保导航和控制算法的计算误差在可接受范围内。"
    },
    {
        "safety_criterion": "防止算法存在奇点；",
        "requirement": "导航系统应具备奇点检测和规避功能，确保在任何飞行条件下算法的稳定性和可靠性。"
    },
    {
        "safety_criterion": "防止模块或函数复杂度高；",
        "requirement": "飞行控制软件的每个模块和函数应保持简单，确保单个模块的复杂度不超过10个逻辑判断。"
    },
    {
        "safety_criterion": "防止设计逻辑多余",
        "requirement": "系统应确保飞行控制逻辑中无冗余指令，以防止因逻辑错误导致的飞行异常。"
    },
    {
        "safety_criterion": "状态执行过程中，软件掉电重启，对重启后的状态进行检查，分析重启后“状态未恢复、错误恢复”等情况下状态执行的正确性",
        "requirement": "系统应能够在电源恢复后自动恢复到掉电前的飞行状态，并确保所有关键参数和任务状态的正确性。"
    },
    {
        "safety_criterion": "防止人机界面设计不规范。",
        "requirement": "驾驶舱人机界面应符合航空标准，确保所有控制和显示设备布局合理、标识清晰，避免操作错误。"
    },
    {
        "safety_criterion": "制定软件简化设计准则并对开发人员进行培训，简化设计准则包括：低耦合、高内聚、控制模块的规模、深度、宽度、扇出、扇入、接口参数；",
        "requirement": "飞行控制系统软件应遵循低耦合、高内聚的设计原则，确保模块间接口参数简洁明了，以提高系统的可维护性和可靠性。"
    },
    {
        "safety_criterion": "重要或常用的软件功能操作要考虑已有类似系统的操作习惯，并在完成初步设计后，与可能存在的各类用户进一步确认",
        "requirement": "飞行控制软件的操作界面应遵循行业标准和用户习惯，并在设计完成后进行用户验证和确认。"
    },
    {
        "safety_criterion": "考虑界面布局的合理/美观、提示信息、重要操作提供确认机会、假死提示、常用快捷键或空白输入的响应等",
        "requirement": "飞行控制界面应提供清晰的操作提示和确认对话框，确保飞行员在执行关键操作时能够准确无误地进行确认。"
    },
    {
        "safety_criterion": "考虑所使用的编程开发框架的特性（如默认常用快捷键响应方式）是否符合当前项目的要求，进行相应处理设计",
        "requirement": "飞行控制软件应使用符合航空航天标准的编程框架，并确保常用快捷键响应方式符合飞行操作的安全要求。"
    },
    {
        "safety_criterion": "检查软件功能是否完全实现。验证在设计阶段，对于安全关键和非安全关键的需求是否都已经得到实现。",
        "requirement": "飞行控制系统应确保所有安全关键功能（如姿态控制、导航和通信）在软件设计阶段已完全实现并验证。"
    },
    {
        "safety_criterion": "应约束内存的使用和可用性。动态内存分配可能因为如下原因：未释放所分配的内存(内存泄漏)，两次释放内存(引起异常)，或者缓存溢出而覆盖代码或者其他区域。在动态分配数据结构时，常常不能对它们进行静态分析，以验证数组和字符串等不会超出该数据结构的物理末尾。",
        "requirement": "飞行控制系统应确保所有内存分配操作均得到有效管理，防止内存泄漏、重复释放和缓存溢出，以保证系统稳定性和安全性。"
    },
    {
        "safety_criterion": "应约束I/O通道的使用(负载)与容量和可用性。I/O通道应包括内部的硬件(传感器)、过程中间的通信(消息)、以及外部通信(数据输出、命令和遥测接口)。检查在科学数据收集和安全性关键数据可用性之间的资源冲突。",
        "requirement": "系统应确保在科学数据收集和飞行安全关键数据传输之间合理分配I/O通道资源，避免资源冲突，保证关键数据的实时性和可靠性。"
    },
    {
        "safety_criterion": "应约束执行时间与CPU负载和可用性。调研CPU负载时间变化并确定产生峰值负载的环境。",
        "requirement": "飞行控制系统应实时监控CPU负载，并在负载超过预设阈值时触发警报，确保系统在高负载环境下仍能稳定运行。"
    },
    {
        "safety_criterion": "应约束临界时间。安全关键系统的“临界时间”是一个在故障出现和系统达到某种不安全状态之间的时间间隔。",
        "requirement": "系统应确保在检测到关键故障后的5秒内完成安全模式切换，以防止不安全状态的发生。"
    },
    {
        "safety_criterion": "对软件状态空间中两两状态之间的转移条件进行检查，分析转移条件“未设置、始终满足、无法满足”等情况下状态转移的正确性",
        "requirement": "系统应确保在不同飞行模式（如巡航、着陆、起飞）之间的状态转移条件正确设置，防止无效或错误的模式切换。"
    },
    {
        "safety_criterion": "应约束自动保护。如果临界时间小于操作人员实际相应的时间，或者如果在回路中没有人员参与，就要考虑自动安全保护，可由硬件或软件两者的结合来执行。",
        "requirement": "在航天器的飞行控制系统中，应实现自动保护机制，确保在临界时间内自动执行安全措施，防止操作人员响应延迟导致的事故。"
    },
    {
        "safety_criterion": "应约束采样频率与物理参数的变化速率。对于关键的信号和用于闭环控制的参数，通常采样频率必须更高。",
        "requirement": "系统应确保关键飞行参数（如姿态角、速度、高度）的采样频率不低于100Hz，以满足闭环控制的实时性要求。"
    },
    {
        "safety_criterion": "应约束动态存储器分配。对于安全性关键软件来说，应规定软件将如何处理失败的动态分配。",
        "requirement": "飞行控制软件应限制动态内存分配，并在分配失败时采取安全措施，确保系统稳定运行。"
    },
    {
        "safety_criterion": "应约束存储器检查。在系统加电时，要对随机访问存储器(RAM)进行测试，以验证所有的存储器地址都可用，并且保证RAM都能够适当的运行。",
        "requirement": "航天器在每次启动时，应执行RAM自检程序，确保所有存储器地址均可用且正常运行。"
    },
    {
        "safety_criterion": "应约束程序存储空间与可执行代码的规模。估计存储在设备(EPROM, flashdisk等)中的可执行软件的规模。这可能小于内存的足迹(footprint)，因为只有静态变量或者全局变量占据空间。然后，如果不是所有部件同时驻留在内存中，那么，可执行代码的规模可能更大。程序规模包括操作系统以及应用软件。",
        "requirement": "飞行控制软件应限制其存储空间和可执行代码的规模，确保不超过设备（如EPROM、Flash存储器）的存储容量，并且在运行时仅加载必要的模块，以优化内存使用。"
    },
    {
        "safety_criterion": "应约束存储的数据量与可用的容量。考虑将产生多少科学数据、内存处理数据或者其它数据，以及可用的存储空间两(RAM,磁盘等)。如果数据将发送到地面，并且然后从该存储介质中删除，如果能够写满“磁盘”的话，则应进行某些分析，以确定“磁盘”将被写满的频度。在某些条件下，不能存储数据或者覆盖尚未向下连接的原先数据可能是个安全性有关的问题。",
        "requirement": "卫星应具备实时监控和管理存储容量的功能，确保科学数据、内存处理数据和其他数据的存储不会超过可用的存储空间（RAM、磁盘等），并在存储空间接近满载时触发警报并采取数据删除或传输措施，以防止数据丢失或覆盖。"
    },
    {
        "safety_criterion": "数字化系统必须有足够长的字长，以减少量化噪声的影响，从而确保系统的稳定性; 设计足够长的字长，以减少量化噪声的影响",
        "requirement": "飞行控制系统应具备高精度的数字信号处理能力，确保在数据传输和处理过程中减少量化噪声，以维持系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "应约束资源分配及余量要求;在软件设计时，应确定有关软件模块的存储量、输入输出通道的吞吐能力以及处理时间要求，并保证，满足系统规定的余量要求，一般要求应留有不少于20%的余量;",
        "requirement": "飞行控制系统应确保在最大任务负载下，仍留有不低于20%的处理能力和存储余量，以应对突发情况。"
    },
    {
        "safety_criterion": "应约束时序安排的余量软件工作的时序安排，要结合具体的被控对象确定各种周期;如采样周期、数据计算处理周期、控制周期等; 当各种周期在时间轴上安排不下时，应采取更高性能的CPU或更多CPU并行处理来解决，以确保软件的工作时序之间留有余量。",
        "requirement": "飞行控制系统应确保在不同飞行阶段（如起飞、巡航、着陆）的采样周期、数据计算处理周期和控制周期合理安排，以避免时间冲突，并在必要时采用高性能CPU或并行处理来保证实时性和可靠性。"
    },
    {
        "safety_criterion": "防止未对全部输入数据进行初始化",
        "requirement": "系统应确保所有飞行控制输入数据在使用前均被正确初始化。"
    },
    {
        "safety_criterion": "两个或多个存在转移关系的状态对同一个功能的执行要求不同，部分状态允许功能执行，其他状态不允许。分析状态转移前后功能“保持执行、中断执行”等情况下状态与功能的正确性",
        "requirement": "系统应确保在不同飞行模式（如手动模式、自动模式、应急模式）之间切换时，关键控制功能（如导航、姿态控制）的正确性和连续性。"
    },
    {
        "safety_criterion": "RS-422A/RS-232/RS-485设备创建故障应有判断或容错措施",
        "requirement": "通信系统应具备RS-422A/RS-232/RS-485接口故障检测和自动切换功能，确保数据传输的连续性和可靠性。"
    },
    {
        "safety_criterion": "外部通信初始化故障应有判断或容错措施",
        "requirement": "系统应具备外部通信初始化故障检测和自动恢复功能，确保通信链路的稳定性和可靠性。"
    },
    {
        "safety_criterion": "内存申请故障应有判断或容错措施",
        "requirement": "飞行控制系统应具备内存管理机制，确保在内存申请故障时能够进行有效判断和容错处理，以维持系统稳定运行。"
    },
    {
        "safety_criterion": "二值信号量创建故障应有判断或容错措施",
        "requirement": "系统应具备检测和处理二值信号量创建故障的能力，确保飞行控制系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "互斥信号量创建故障应有判断或容错措施",
        "requirement": "飞行控制系统应具备互斥信号量创建故障的检测与容错机制，确保在多任务并行处理时不会发生资源竞争或死锁。"
    },
    {
        "safety_criterion": "计数信号量创建故障应有判断或容错措施",
        "requirement": "系统应具备对计数信号量创建故障的检测和容错机制，确保飞行控制指令的可靠执行。"
    },
    {
        "safety_criterion": "防止软件所使用的数据定义不全，分类不明确。",
        "requirement": "系统应确保所有飞行控制数据的定义完整且分类明确，包括但不限于飞行参数、导航数据和故障诊断信息。"
    },
    {
        "safety_criterion": "对处理的输入数据应有约束。",
        "requirement": "系统应确保所有输入的飞行控制指令在预定义的合法范围内，超出范围的指令应被拒绝。"
    },
    {
        "safety_criterion": "数据处理前对采集的数据进行检验，确认是否可用。",
        "requirement": "系统应能够对传感器采集的飞行数据进行实时校验，确保数据的准确性和可用性。"
    },
    {
        "safety_criterion": "数据处理完成后对输出的数据进行检查。",
        "requirement": "系统应能够对飞行控制指令的输出数据进行实时校验，确保指令的准确性和完整性。"
    },
    {
        "safety_criterion": "对接口数据的等价类进行检查，分析接口数据取值在不同等价类之间切换时输出的正确性",
        "requirement": "系统应能够检测并处理飞行控制指令在不同飞行模式（如手动、自动、应急）之间切换时的正确性和一致性。"
    },
    {
        "safety_criterion": "对两个或多个存在转移关系的状态下、设置了优先级的不同功能进行检查，分析“高优先级切换低优先级、低优先级切换高优先级”等情况下状态与功能的正确性",
        "requirement": "系统应能够在飞行模式切换时，确保高优先级任务（如紧急避障）优先执行，同时低优先级任务（如常规导航）被暂时挂起或降级处理。"
    },
    {
        "safety_criterion": "应用数据处理机制的自检验设计。",
        "requirement": "系统应具备自检验功能，定期检查飞行控制数据的完整性和一致性，确保数据处理机制的可靠性。"
    },
    {
        "safety_criterion": "使用奇偶校验检查及累加和检查。",
        "requirement": "系统应具备对关键飞行数据（如姿态角、速度、高度）进行奇偶校验和累加和检查的功能，确保数据传输的完整性和准确性。"
    },
    {
        "safety_criterion": "使用报文的信息前验证数据传输正确性。",
        "requirement": "系统应能够对从地面站接收到的飞行控制指令进行完整性校验，确保指令数据的正确性和完整性。"
    },
    {
        "safety_criterion": "对数值的运算范围控制。",
        "requirement": "系统应确保所有飞行控制参数的数值运算在预定义的安全范围内，防止超出范围导致的系统故障。"
    },
    {
        "safety_criterion": "应有指示报文长度、数据类型或报文内容的字或字符串。",
        "requirement": "系统应能够实时监测并指示飞行控制报文的长度、数据类型和内容，确保数据传输的完整性和准确性。"
    },
    {
        "safety_criterion": "单一输出数据取值为缺省值，功能应考虑",
        "requirement": "在导航系统中，当单一传感器输出数据失效时，系统应自动切换到备用传感器并保持导航精度。"
    },
    {
        "safety_criterion": "防止输入数据诊断为数据异常，故障处理策略将输入数据置为安全值，导致功能执行条件发生变化，在禁止本功能执行的工作阶段错误得到执行",
        "requirement": "系统应具备在检测到输入数据异常时，将输入数据置为预设的安全值，并确保在禁止执行特定功能的工作阶段，该功能不会被错误触发。"
    },
    {
        "safety_criterion": "防止功能的输入数据诊断为数据异常，故障处理策略将输入数据置为安全值，导致功能执行条件发生变化，在高优先级功能执行过程中错误得到执行，打断高优先级功能执行",
        "requirement": "系统应具备在检测到输入数据异常时，自动切换至备份数据源或预设安全值，确保高优先级飞行控制功能的连续性和可靠性。"
    },
    {
        "safety_criterion": "防止功能的输入数据诊断为数据异常，故障处理策略将输入数据置为安全值，导致功能执行条件发生变化，在其他互斥功能执行过程中错误得到执行，输出数据冲突",
        "requirement": "系统应具备在检测到输入数据异常时，将输入数据置为预设的安全值，并确保在故障处理过程中不会影响其他互斥功能的正常执行，避免输出数据冲突。"
    },
    {
        "safety_criterion": "多个输入数据取值为正常值、异常值、边界值、初始值、安全值、缺省值中一种或多种取值组合，功能应进行处理",
        "requirement": "飞行控制系统应能够处理多种传感器输入数据的组合，包括正常值、异常值、边界值、初始值、安全值和缺省值，确保飞行控制指令的正确性和安全性。"
    },
    {
        "safety_criterion": "同一个状态与其他多个状态之间存在转移关系，对同一个状态向多个状态转移以及多个状态向同一个状态转移的条件进行检查，分析多个状态转移条件同时满足时状态转移的正确性",
        "requirement": "系统应能够准确处理和验证多个飞行模式之间的状态转移条件，确保在多个条件同时满足时，飞行模式的切换正确无误。"
    },
    {
        "safety_criterion": "多个输入数据取值为正常值等价类组合，功能应进行处理",
        "requirement": "导航系统应能够处理多个传感器（如GPS、惯性导航系统）提供的正常值等价类组合数据，确保飞行路径的准确性。"
    },
    {
        "safety_criterion": "多个输入数据取值为异常值等价类组合，功能应进行处理",
        "requirement": "系统应能够检测并处理来自多个传感器的异常数据，确保飞行控制系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "多个输入数据取值为安全值组合，功能应进行处理",
        "requirement": "系统应能够处理多个传感器输入的组合安全值，确保飞行控制指令的正确性和安全性。"
    },
    {
        "safety_criterion": "多个输入数据取值为缺省值组合，功能应进行处理",
        "requirement": "系统应能够处理多个传感器数据同时丢失或无效的情况，确保飞行控制系统的稳定性和安全性。"
    },
    {
        "safety_criterion": "单一输入数据发生数据异常、时序故障、通信故障、源设备故障等一种或多种故障，功能未进行故障诊断与处理",
        "requirement": "系统应具备实时监测和诊断飞行控制数据链路的故障功能，确保在单一输入数据发生异常时能够及时进行故障处理和恢复。"
    },
    {
        "safety_criterion": "对输入数据进行归一化处理时，使用错误的基准值",
        "requirement": "系统应确保在进行飞行数据归一化处理时，使用正确的基准值，以保证飞行控制和导航的准确性。"
    },
    {
        "safety_criterion": "相邻周期参与解算的输入数据斜率超出阈值",
        "requirement": "系统应能够检测并处理相邻周期内飞行控制参数（如姿态角、速度、高度等）的异常变化，确保解算结果的准确性。"
    },
    {
        "safety_criterion": "解算结果为+∞",
        "requirement": "导航系统在计算飞行轨迹时，应能够检测并处理无限值结果，确保系统稳定性和安全性。"
    },
    {
        "safety_criterion": "多功能输出数据取值为异常值等价类组合，应进行处理",
        "requirement": "系统应能够检测并处理飞行控制指令中的异常值，确保指令的正确性和飞行安全。"
    },
    {
        "safety_criterion": "多功能输出数据取值为安全值组合，应进行处理",
        "requirement": "飞行控制系统应确保在多传感器数据融合时，输出的控制指令为安全值组合，防止异常数据导致的飞行风险。"
    },
    {
        "safety_criterion": "采集周期是否满足实时性要求？",
        "requirement": "系统应确保飞行数据采集周期不超过10毫秒，以满足实时性要求。"
    },
    {
        "safety_criterion": "多功能输入数据取值为异常值等价类组合，应进行处理",
        "requirement": "系统应能够检测并处理异常的传感器输入数据，确保飞行控制系统的稳定性和可靠性。"
    },
    {
        "safety_criterion": "多功能输入数据取值为边界值组合，应进行处理",
        "requirement": "系统应能够处理飞行控制参数（如高度、速度、姿态角）的边界值组合，确保在极端条件下仍能正常运行。"
    },
    {
        "safety_criterion": "多个功能同时对同一接口输出不同的数据，导致输出冲突",
        "requirement": "系统应具备冲突检测机制，确保在多个子系统同时向导航系统发送指令时，不会导致导航指令冲突。"
    },
    {
        "safety_criterion": "防止 当前控制过程优先级较低，高优先级出现会打断当前控制过程，影响当前执行；",
        "requirement": "系统应确保在高优先级任务出现时，能够安全中断当前低优先级任务，并保证飞行控制的连续性和稳定性。"
    },
    {
        "safety_criterion": "低优先级执行程中，低优先级功能被高优先级中断后应考虑中断后的处理过程；",
        "requirement": "在飞行控制软件中，低优先级任务（如数据记录）被高优先级任务（如紧急避障）中断后，应确保低优先级任务能够安全恢复并继续执行。"
    },
    {
        "safety_criterion": "防止高优先级任务执行过程中，低优先级任务执行条件满足，由于优先级低而不能得到执行；",
        "requirement": "飞行控制系统应确保在高优先级任务执行过程中，低优先级任务的执行条件满足时，能够记录并延迟执行，以保证系统稳定性和安全性。"
    },
    {
        "safety_criterion": "防止自动控制过程中，切换手动控制的条件满足，切换为手动控制后输出数据跳变",
        "requirement": "在自动控制模式切换到手动控制模式时，系统应确保输出数据平滑过渡，避免突变。"
    },
    {
        "safety_criterion": "防止控制律缺陷造成系统稳态余差",
        "requirement": "飞行控制系统应具备自适应调整功能，确保在控制律缺陷情况下仍能维持飞行器的稳态性能。"
    },
    {
        "safety_criterion": "防止控制律缺陷造成系统零极点对消",
        "requirement": "系统应具备冗余控制律设计，确保在主控制律失效时，备用控制律能够无缝接管，防止系统零极点对消导致的不稳定。"
    },
    {
        "safety_criterion": "防止控制律缺陷造成系统发散",
        "requirement": "飞行控制系统应具备实时监测和校正控制律参数的功能，确保系统稳定性和安全性。"
    },
    {
        "safety_criterion": "采集时是否进行了滤波防抖动处理，屏蔽干扰数据？",
        "requirement": "系统应具备滤波防抖动功能，确保飞行数据采集的准确性和稳定性。"
    },
    {
        "safety_criterion": "防止软件的运算逻辑定义错误。",
        "requirement": "飞行控制软件应具备逻辑验证机制，确保所有运算逻辑在编译和运行时均无误。"
    },
    {
        "safety_criterion": "防止部分约束条件设置不合理。",
        "requirement": "系统应能够自动检测并防止飞行路径规划中的约束条件（如最大速度、最小安全距离等）设置不合理。"
    },
    {
        "safety_criterion": "防止逻辑运算结果缺少自检测机制。",
        "requirement": "飞行控制系统应具备自检测机制，确保逻辑运算结果的完整性和准确性。"
    },
    {
        "safety_criterion": "防止对时间进行逻辑判断的门限过大",
        "requirement": "系统应确保所有时间相关的逻辑判断门限不超过1秒，以防止因时间延迟导致的飞行控制错误。"
    },
    {
        "safety_criterion": "防止遗漏逻辑分支",
        "requirement": "飞行控制软件应确保所有可能的飞行模式切换逻辑分支均被覆盖和测试，防止因逻辑遗漏导致的控制失效。"
    },
    {
        "safety_criterion": "功能执行过程中执行条件“不满足、再次满足”等情况下功能处理应正确处理；",
        "requirement": "在飞行控制过程中，当导航信号丢失后重新获取时，系统应能够正确恢复并继续执行飞行任务。"
    },
    {
        "safety_criterion": "考虑软件响应时间的余量要求。",
        "requirement": "系统应确保在最坏情况下，飞行控制软件的响应时间不超过100毫秒。"
    },
    {
        "safety_criterion": "对时间超时或不足告警。",
        "requirement": "系统应能够实时监测并告警发动机点火时间超时或不足。"
    },
    {
        "safety_criterion": "将用户反应时间与软件的处理时间相结合。",
        "requirement": "系统应能够实时监测并响应飞行员的操作指令，确保从指令发出到系统响应的时间不超过100毫秒。"
    },
    {
        "safety_criterion": "软件的采样频率合理设置。",
        "requirement": "飞行控制系统应设置合理的传感器采样频率，以确保飞行状态的实时性和准确性。"
    },
    {
        "safety_criterion": "滤波处理后是否会对实时性产生影响，影响是否可接受？",
        "requirement": "系统应确保滤波处理后的数据在实时性要求范围内，不影响飞行控制的响应时间。"
    },
    {
        "safety_criterion": "被控对象的周期考虑全面。",
        "requirement": "飞行控制系统应确保所有关键任务的周期性任务（如姿态控制、导航更新）在预定的时间间隔内执行。"
    },
    {
        "safety_criterion": "时间轴上的各类周期合理安排。",
        "requirement": "系统应确保任务调度和控制指令在预定的时间周期内准确执行，以保证飞行器的稳定运行。"
    },
    {
        "safety_criterion": "软件工作时序之间留出合适的余量。",
        "requirement": "飞行控制软件应确保各任务调度和执行之间留有足够的时间余量，以防止任务超时或冲突。"
    },
    {
        "safety_criterion": "功能执行时间等于+∞，始终保持执行，分析执行时间为“大于规定时间、小于规定时间，极大极小值”等情况下功能处理的正确性",
        "requirement": "飞行控制软件应能够检测并处理任务执行超时的情况，确保在极端情况下（如计算时间超过预设阈值）系统仍能安全运行。"
    },
    {
        "safety_criterion": "后续功能输入数据是前序功能输出的正常值等价类组合，后续功能应进行处理",
        "requirement": "导航系统应能够接收并处理来自传感器的飞行数据，确保后续飞行控制指令的准确性和可靠性。"
    },
    {
        "safety_criterion": "后续功能输入数据是前序功能输出的初始值组合，后续功能应进行处理",
        "requirement": "导航系统应能够将姿态控制模块输出的姿态数据作为输入，进行航迹修正和目标定位。"
    },
    {
        "safety_criterion": "后续功能输入数据是前序功能输出的缺省值组合，后续功能应进行处理",
        "requirement": "导航系统应能够处理并校验来自传感器的缺省值组合，确保飞行轨迹计算的准确性。"
    },
    {
        "safety_criterion": "系统规定两个功能为串行执行，而两功能具有同一输入数据，执行条件未对这一输入数据取值进行约束，导致两功能执行条件同时满足，并发执行，不符合规定时序",
        "requirement": "系统应确保在飞行控制指令的处理过程中，同一输入数据的处理任务按规定的顺序串行执行，防止并发执行导致时序错误。"
    },
    {
        "safety_criterion": "防止并行路径中缺少相异的软件；",
        "requirement": "飞行控制系统应具备冗余设计，确保主路径和备用路径的软件实现相异，以防止单一故障点。"
    },
    {
        "safety_criterion": "防止每一个禁止没有用不同软件的不同处理器进行控制；",
        "requirement": "飞行控制系统应使用冗余的处理器和不同的软件实现，以防止单点故障。"
    },
    {
        "safety_criterion": "参数的有效值范围是否明确（上限和下限），超限数据处理策略是否明确？",
        "requirement": "系统应能够明确飞行控制参数的有效值范围（如滚转角、俯仰角、偏航角等），并定义超限数据的处理策略。"
    },
    {
        "safety_criterion": "防止软件部件之间允许的交联程度和范围没有明确的划分；",
        "requirement": "系统应明确划分各软件模块之间的通信接口和数据交换范围，确保模块间的数据交互仅限于预定义的接口。"
    },
    {
        "safety_criterion": "建立软件故障检测、隔离和恢复的机制；",
        "requirement": "飞行控制系统应具备实时监测关键软件模块状态的功能，并在检测到故障时自动隔离故障模块，同时启动备用模块进行恢复。"
    },
    {
        "safety_criterion": "设计划分保护时考虑系统的硬件资源、控制耦合、数据耦合及与保护机制相关的硬件设备的失效机制；",
        "requirement": "系统应具备冗余设计，确保关键飞行控制硬件（如飞行计算机、传感器）在单点失效时仍能正常运行。"
    },
    {
        "safety_criterion": "接口数据传输失败的重发机制；",
        "requirement": "系统应具备在飞行控制指令传输失败时自动重发的功能，确保指令的可靠传输。"
    },
    {
        "safety_criterion": "数据包解析异常的捕捉反馈机制；",
        "requirement": "系统应具备实时监测和处理飞行数据包解析异常的能力，确保数据传输的完整性和准确性。"
    },
    {
        "safety_criterion": "服务端异常后的数据包重发的处理机制；",
        "requirement": "在地面站与卫星通信中断后，地面站应能够自动重发关键指令数据包，确保任务指令的可靠传输。"
    },
    {
        "safety_criterion": "日志文件更新及时；",
        "requirement": "系统应能够实时记录和更新飞行器的运行日志，包括关键操作和状态变化。"
    },
    {
        "safety_criterion": "防止BIT功能遗漏诊断结果的上报；",
        "requirement": "系统应确保内置测试（BIT）功能在检测到任何故障时，能够及时、准确地上报诊断结果。"
    },
    {
        "safety_criterion": "防止BIT功能的执行条件满足，同时执行的其他功能异常中断；",
        "requirement": "系统应确保在执行内置测试（BIT）功能时，其他关键飞行控制功能不会异常中断。"
    },
    {
        "safety_criterion": "故障诊断功能诊断输入数据为故障并输出故障字，使用该输入数据的其他功能应考虑输入数据的故障字。",
        "requirement": "飞行控制系统应具备故障诊断功能，能够生成故障字并实时传递给其他相关子系统，确保各子系统在接收到故障字后能够采取相应的安全措施。"
    },
    {
        "safety_criterion": "参数是否有变化率合理范围（斜率上限和下限），超斜率数据的处理策略是否明确？",
        "requirement": "系统应能够实时监测飞行器的姿态参数变化率，确保其在预设的合理范围内，并在超斜率情况下采取明确的处理策略。"
    },
    {
        "safety_criterion": "设备协作时的状态及时反馈。",
        "requirement": "系统应能够实时反馈各子系统的协作状态，确保飞行器在多系统协同工作时的稳定性和安全性。"
    },
    {
        "safety_criterion": "防止功能在通道切换前后仍保持执行",
        "requirement": "系统应确保在主备通道切换时，当前执行的功能能够立即停止，并由备用通道接管，以防止功能在切换前后仍保持执行。"
    },
    {
        "safety_criterion": "防止A通道为主控通道，B通道诊断A通道为故障，但A通道自检为正常，主控通道未切换为B通道",
        "requirement": "系统应具备双通道冗余设计，确保在A通道被B通道诊断为故障但自检正常时，能够自动切换主控通道至B通道。"
    },
    {
        "safety_criterion": "防止B通道自检为正常，但B通道至A通道的通信故障，A通道诊断B通道为故障，当A通道为主控通道且自检为故障时，上报A、B通道均故障",
        "requirement": "系统应具备双通道冗余设计，确保主控通道和备用通道之间的通信状态实时监测，并在主控通道自检故障时，能够准确上报主控和备用通道的故障状态。"
    },
    {
        "safety_criterion": "防止通道频繁切换",
        "requirement": "系统应具备稳定的数据传输通道，确保在飞行过程中不因通道频繁切换导致数据丢失或延迟。"
    },
    {
        "safety_criterion": "防止一个余度通道故障",
        "requirement": "系统应具备冗余设计，确保在单个余度通道故障时，其他通道能够无缝接管，保证飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "防止余度之间通信故障，不同余度执行相同的功能，但输出数据不一致",
        "requirement": "系统应具备多通道冗余设计，确保各通道间数据一致性，防止因通信故障导致的输出不一致。"
    },
    {
        "safety_criterion": "对软件运行期间的系统维护机制。",
        "requirement": "系统应具备在飞行任务期间进行软件更新和维护的能力，确保不影响任务的正常执行。"
    },
    {
        "safety_criterion": "软件工作状态的反馈显示完全。",
        "requirement": "系统应能够实时显示飞行器的当前状态，包括但不限于姿态、速度、高度和系统健康状况。"
    },
    {
        "safety_criterion": "软件工作状态异常时的告警机制",
        "requirement": "系统应具备在飞行控制软件工作状态异常时，立即触发告警并记录异常信息的功能。"
    },
    {
        "safety_criterion": "是否进行数据长时间未更新的判断和处理，判断策略是否有设备使用场景匹配？",
        "requirement": "系统应能够检测并处理飞行控制数据长时间未更新的情况，确保在数据停滞时采取适当的应对措施。"
    },
    {
        "safety_criterion": "系统状态应有对应的软件状态",
        "requirement": "飞行控制系统应实时监测并记录当前的软件状态，确保与预期的飞行任务状态一致。"
    },
    {
        "safety_criterion": "工作阶段应有对应的软件状态",
        "requirement": "飞行控制系统在不同飞行阶段（如起飞、巡航、着陆）应具有明确的软件状态标识和相应的控制逻辑。"
    },
    {
        "safety_criterion": "软件状态与工作阶段一致",
        "requirement": "飞行控制系统应确保软件状态与当前飞行阶段（如起飞、巡航、着陆）一致，以保证正确的控制逻辑执行。"
    },
    {
        "safety_criterion": "软件状态与系统任务一致",
        "requirement": "飞行控制软件应实时同步并匹配当前飞行任务的状态，确保任务执行的准确性和安全性。"
    },
    {
        "safety_criterion": "余度通道的状态各相同",
        "requirement": "系统应确保所有冗余通道在任何时候都保持相同的工作状态。"
    },
    {
        "safety_criterion": "功能应考虑在不同状态下输入数据的取值不同，状态转移后，输入数据取值发生正常变化，功能却作为异常输入处理",
        "requirement": "系统应能够识别并处理在不同飞行模式下（如巡航、着陆、起飞）输入的导航数据变化，确保数据的正确性和一致性。"
    },
    {
        "safety_criterion": "功能应考虑在不同状态下输入数据的取值不同，状态转移后，输入数据取值异常，功能却作为正常输入处理",
        "requirement": "飞行控制系统应具备在不同飞行模式下对输入数据进行验证和校验的功能，确保状态转移后输入数据的正确性和有效性。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的执行条件具有同一输入数据，并且对输入数据取值的要求不同，由于输入数据取值正常变化时无法同时满足状态进入条件和功能执行条件，导致状态无法进入、或进入状态后功能无法执行",
        "requirement": "系统应确保在飞行模式切换时，输入数据（如高度、速度、姿态角等）的取值范围和条件满足当前模式和目标模式的要求，以防止模式切换失败或切换后功能无法执行。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的逻辑判断条件具有同一输入数据，并且对输入数据取值的要求不同，由于输入数据取值正常变化时无法同时满足状态进入条件和功能逻辑判断条件，导致状态无法进入、或进入状态后功能执行异常",
        "requirement": "系统应确保在飞行模式切换时，输入数据的取值范围和逻辑条件相互独立，以防止模式切换失败或切换后功能异常。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的循环判断条件具有同一输入数据，并且对输入数据取值的要求不同，由于输入数据取值正常变化时无法同时满足状态进入条件和功能循环判断条件，导致状态无法进入、或进入状态后功能执行异常",
        "requirement": "系统应确保在不同飞行模式切换时，输入数据的取值范围和条件满足各自模式的要求，防止模式切换失败或功能执行异常。"
    },
    {
        "safety_criterion": "传感器采集范围是否明确（上限和下限），超过采集范围值时是否报传感器故障？",
        "requirement": "飞行控制系统应能够实时监测传感器的采集范围，当传感器读数超出预设的上限或下限时，系统应立即触发故障报警并记录相关数据。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的逻辑判断条件具有同一输入数据，并且对输入数据取值的要求不同，由于输入数据取值异常，无法同时满足状态进入条件和功能逻辑判断条件，导致状态无法进入、或进入状态后功能执行异常",
        "requirement": "系统应确保在飞行模式切换时，所有输入数据的取值范围和逻辑条件相互独立，避免因单一输入数据异常导致模式切换失败或功能执行异常。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的执行条件具有同一输入数据，并且对输入数据取值的要求不同，当输入数据为边界值/初始值/缺省值时，无法同时满足状态进入条件和功能执行条件，导致状态无法进入、或进入状态后功能无法执行",
        "requirement": "系统应确保在飞行模式切换时，输入数据（如高度、速度、姿态角等）满足当前模式的进入条件和功能执行条件，避免因边界值、初始值或缺省值导致模式切换失败或功能失效。"
    },
    {
        "safety_criterion": "防止状态进入条件与状态下功能的循环判断条件具有同一输入数据，并且对输入数据取值的要求不同，当输入数据为边界值/初始值/缺省值时，无法同时满足状态进入条件和功能循环判断条件，导致状态无法进入、或进入状态后功能执行异常",
        "requirement": "系统应确保在飞行模式切换时，所有输入数据（如高度、速度、姿态角等）的边界值、初始值和缺省值均满足模式切换条件和功能执行条件，以防止模式切换失败或功能异常。"
    },
    {
        "safety_criterion": "防止状态执行过程中，状态进入条件由满足变为不满足",
        "requirement": "系统应能够实时监测飞行器的状态参数，确保在状态执行过程中，状态进入条件始终满足，否则自动触发安全保护机制。"
    },
    {
        "safety_criterion": "防止状态执行过程中，看门狗复位，复位后错误恢复为之前的状态",
        "requirement": "系统应具备看门狗复位后的状态恢复机制，确保复位后系统恢复到安全状态，避免错误状态的延续。"
    },
    {
        "safety_criterion": "防止状态执行过程中，软件掉电重启，重启后未恢复掉电前的状态",
        "requirement": "系统应具备在电源恢复后自动恢复到掉电前的飞行状态和任务参数的能力。"
    },
    {
        "safety_criterion": "防止状态执行过程中，软件掉电重启，重启后错误恢复为掉电前的状态",
        "requirement": "系统应具备在电源故障后自动恢复至掉电前状态的功能，确保飞行任务的连续性和安全性。"
    },
    {
        "safety_criterion": "防止状态的进入条件与退出条件能够同时满足",
        "requirement": "系统应确保在飞行模式切换过程中，进入新模式的条件和退出当前模式的条件不能同时满足，以防止模式切换冲突。"
    },
    {
        "safety_criterion": "防止状态的进入条件与转移条件能够同时满足",
        "requirement": "系统应确保在飞行模式切换时，当前模式的退出条件与新模式的进入条件不能同时满足。"
    },
    {
        "safety_criterion": "加强状态执行过程中，状态退出条件由不满足变为满足的处理",
        "requirement": "飞行控制系统应能够实时监测并处理飞行状态退出条件的变化，确保在条件满足时立即执行相应的状态退出操作。"
    },
    {
        "safety_criterion": "是否进行了传感器特定故障（基于传感器工作原理）的判断和处理？",
        "requirement": "系统应能够检测并处理飞行器传感器的特定故障，如温度传感器的热敏电阻开路或短路故障。"
    },
    {
        "safety_criterion": "文件创建失败应判别并处理",
        "requirement": "系统应能够检测并处理飞行任务数据文件创建失败的情况，确保任务数据的完整性和可用性。"
    },
    {
        "safety_criterion": "文件删除失败应判别并处理",
        "requirement": "系统应能够检测并处理飞行任务数据文件删除失败的情况，确保任务数据的完整性和一致性。"
    },
    {
        "safety_criterion": "文件权限设置不正确",
        "requirement": "系统应确保飞行任务数据文件的访问权限仅限于授权的飞行控制人员。"
    },
    {
        "safety_criterion": "文件打开失败应判别并处理",
        "requirement": "系统应能够检测并处理飞行任务数据文件的打开失败，确保任务参数的完整性和可用性。"
    },
    {
        "safety_criterion": "文件读取失败应判别并处理",
        "requirement": "系统应能够检测并处理飞行任务配置文件读取失败的情况，确保任务安全继续或中止。"
    },
    {
        "safety_criterion": "文件写入失败应判别并处理",
        "requirement": "系统应能够检测并处理飞行任务数据文件写入失败的情况，确保数据完整性。"
    },
    {
        "safety_criterion": "文件关闭失败应判别并处理",
        "requirement": "飞行任务数据文件在关闭时应进行状态检查，确保数据完整性和一致性。"
    },
    {
        "safety_criterion": "对消息队列创建故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理飞行控制指令消息队列的创建故障，确保指令的可靠传输。"
    },
    {
        "safety_criterion": "消息队列删除故障应有检测和异常处理",
        "requirement": "系统应能够检测并处理飞行控制指令消息队列中的故障，确保指令的可靠传输和执行。"
    },
    {
        "safety_criterion": "消息队列发送故障应有检测和异常处理",
        "requirement": "系统应具备检测和处理飞行控制指令消息队列发送故障的能力，确保指令的可靠传输。"
    }
]